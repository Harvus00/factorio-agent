[
    {
        "id": "63b86f156c48a127",
        "type": "tab",
        "label": "Factorio Agent Workflow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a8996dfc1cf579d1",
        "type": "factory-agent-deepseek",
        "z": "63b86f156c48a127",
        "name": "Factorio Player Agent",
        "model": "deepseek-chat",
        "temperature": "0.7",
        "maxTokens": "8192",
        "x": 580,
        "y": 660,
        "wires": [
            [
                "68c8874f27d25ec4",
                "fc044ca934fadc4a"
            ]
        ]
    },
    {
        "id": "2418f906f5a18df1",
        "type": "actions",
        "z": "63b86f156c48a127",
        "d": true,
        "name": "Define Action Tool",
        "actions": [
            {
                "name": "get_player_position",
                "description": "Get the player's current position.",
                "parameters": []
            },
            {
                "name": "move_player",
                "description": "Move the player to a specific position.",
                "parameters": [
                    {
                        "name": "x",
                        "type": "number",
                        "description": "The x coordinate"
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": "The y coordinate"
                    }
                ]
            },
            {
                "name": "get_entities",
                "description": "Find entities in the game based on specified filters.",
                "parameters": [
                    {
                        "name": "name",
                        "type": "string",
                        "description": "Entity prototype name(s) to filter by"
                    },
                    {
                        "name": "type",
                        "type": "string",
                        "description": "Entity type to filter by"
                    },
                    {
                        "name": "position_x",
                        "type": "number",
                        "description": "X coordinate of the center of the search circle"
                    },
                    {
                        "name": "position_y",
                        "type": "number",
                        "description": "Y coordinate of the center of the search circle"
                    },
                    {
                        "name": "radius",
                        "type": "number",
                        "description": "Radius of the search circle"
                    },
                    {
                        "name": "limit",
                        "type": "number",
                        "description": "Maximum number of entities to return"
                    }
                ]
            },
            {
                "name": "place_entity",
                "description": "Place an entity in the game surface.",
                "parameters": [
                    {
                        "name": "name",
                        "type": "string",
                        "description": "The entity prototype name to create"
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "description": "The x coordinate"
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": "The y coordinate"
                    },
                    {
                        "name": "direction",
                        "type": "number",
                        "description": "The direction (0, 4, 8, 12 for N, E, S, W)"
                    }
                ]
            },
            {
                "name": "remove_entity",
                "description": "Remove an entity from the game surface.",
                "parameters": [
                    {
                        "name": "name",
                        "type": "string",
                        "description": "The entity prototype name to remove"
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "description": "The x coordinate"
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": "The y coordinate"
                    }
                ]
            },
            {
                "name": "insert_item",
                "description": "Insert items into an inventory.",
                "parameters": [
                    {
                        "name": "item",
                        "type": "string",
                        "description": "The item name to insert"
                    },
                    {
                        "name": "count",
                        "type": "number",
                        "description": "The count of the item"
                    },
                    {
                        "name": "inventory_type",
                        "type": "string",
                        "description": "The type of inventory to insert into"
                    },
                    {
                        "name": "entity",
                        "type": "string",
                        "description": "The name of the entity to insert into"
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "description": "The x coordinate of the entity (if not player)"
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": "The y coordinate of the entity (if not player)"
                    }
                ]
            },
            {
                "name": "remove_item",
                "description": "Remove items from an inventory.",
                "parameters": [
                    {
                        "name": "item",
                        "type": "string",
                        "description": "The item name to insert"
                    },
                    {
                        "name": "count",
                        "type": "number",
                        "description": "The count of the item"
                    },
                    {
                        "name": "entity",
                        "type": "string",
                        "description": "The name of the entity to remove from"
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "description": "The x coordinate of the entity (if not player)"
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": "The y coordinate of the entity (if not player)"
                    }
                ]
            },
            {
                "name": "get_inventory",
                "description": "Get inventory contents.",
                "parameters": [
                    {
                        "name": "inventory_type",
                        "type": "string",
                        "description": "The type of inventory to get"
                    },
                    {
                        "name": "entity",
                        "type": "string",
                        "description": "The name of the entity to get from"
                    },
                    {
                        "name": "x",
                        "type": "number",
                        "description": "The x coordinate of the entity (if not player)"
                    },
                    {
                        "name": "y",
                        "type": "number",
                        "description": "The y coordinate of the entity (if not player)"
                    }
                ]
            }
        ],
        "x": 370,
        "y": 500,
        "wires": []
    },
    {
        "id": "d29e1f679cc5bb01",
        "type": "factory-agent-states",
        "z": "63b86f156c48a127",
        "name": "Agent Prompt",
        "systemPrompt": "You are an expert Factorio player, interfacing with the game via API tools. You will keep receiving existing factory status in the game and your objective is to efficiently manage and enlarge the automative factory.\nYou have access to the following API functions:\n- `get_available_entities()`: Lists all placeable entities.\n- `get_available_items()`: Lists all available items.\n- `get_player_position()`: Returns the player's current coordinates.\n- `move_player(x, y)`: Moves the player to the specified coordinates.\n- `find_entities(name=None, type=None, radius=None, position_x=None, position_y=None)`: Locates entities within the game. (Always use appropriate filtering parameters to avoid exceeding token limits.)\n- `place_entity(name, x, y, direction=0)`: Places an entity at the specified coordinates. (if direction specified, must be number like 0, 4, 8, 12 which stands for N, E, S, W)\n- `remove_entity(x, y)`: Removes an entity at the specified coordinates.\n- `insert_item(item, count, entity, x, y)`: Inserts items into an entity's inventory.\n- `remove_item(item, count, entity, x, y)`: Removes items from an entity's inventory.\n- `get_inventory(entity, x, y)`: Retrieves the contents of an entity's inventory.\nAnd for the rule, you can place or insert any legal things that exists in Factorio if you want, but try to move there before do something!\nYour responses must include the following strictly in JSON format:\n- A detailed plan for the next step.\n- The actions to be executed. **Limit the number of actions to a maximum of two per response.**\nExample:\n{\n  \"plan\": \"First, we need to solve the problem of power shortage. To achieve this, we will build more steam generators and make sure they have enough coal supply.\",\n  \"actions\": [\n    {\n      \"command\": \"place_entity\",\n      \"params\": {\n        \"name\": \"steam-engine\",\n        \"x\": 12,\n        \"y\": 20,\n        \"direction\": \"4\"\n      }\n    },\n    {\n      \"command\": \"insert_item\",\n      \"params\": {\n        \"item\": \"coal\",\n        \"count\": 50,\n        \"entity\": \"boiler\",\n        \"x\": 10,\n        \"y\": 15\n      }\n    }\n  ]\n}\nWhen formulating your plan, prioritize:\n-Scalable factory layout: Design for future expansion and efficiency.\n-Automation: Automate manual processes wherever possible.\n-Regularity: Make the factory as orderly as possible, so that each machine area forms a 9*9 area around the substation.",
        "environmentDescription": "The current map features abundant iron and copper ore resources, but relatively scarce oil resources. Your current factory has a basic iron plate production line and a car assembly line, but suffers from insufficient resources mining, goods production and factory size. You must use the API tools to resolve these and enlarge the factory as large as possible.\nRemember that you can only interact with the game world through the provided API tools. Ensure that the JSON object is the only valid object within your response.\nLimit the number of actions to a maximum of three per response.",
        "initialDelay": "2",
        "x": 420,
        "y": 560,
        "wires": [
            [
                "a8996dfc1cf579d1",
                "39ce0b1a89deda24",
                "c679baf29aa29b75"
            ]
        ]
    },
    {
        "id": "e97f969ed554994a",
        "type": "inject",
        "z": "63b86f156c48a127",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"state\": \"No response yet\"}",
        "payloadType": "json",
        "x": 110,
        "y": 740,
        "wires": [
            [
                "90eee5d5f1beee77",
                "0970ef49aad65cc6"
            ]
        ]
    },
    {
        "id": "7459a04652bdcf8a",
        "type": "mqtt in",
        "z": "63b86f156c48a127",
        "name": "",
        "topic": "Factorio/Sandbox/#",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "6f6a71de9985f35d",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 640,
        "wires": [
            [
                "90eee5d5f1beee77"
            ]
        ]
    },
    {
        "id": "21bce0c76f6d0b49",
        "type": "mqtt out",
        "z": "63b86f156c48a127",
        "name": "",
        "topic": "Factorio/Commands",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "6f6a71de9985f35d",
        "x": 960,
        "y": 700,
        "wires": []
    },
    {
        "id": "68c8874f27d25ec4",
        "type": "function",
        "z": "63b86f156c48a127",
        "name": "Extract Command",
        "func": "try {\n  const content = msg.result.replace('```json\\n','').replace('```','');\n  const contentJson = JSON.parse(content);\n  const actions = contentJson.actions;\n\n  actions.forEach(action => {\n    const newMsg = {\n      payload: {\n        command: action.command,\n        params: action.params\n      }\n    };\n    node.send(newMsg); // 使用 node.send() 发送单独的消息\n  });\n\n  return null;\n\n} catch (error) {\n  node.error(\"Error parsing JSON: \" + error);\n  return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 560,
        "wires": [
            [
                "7efd6757bb078b7f",
                "21bce0c76f6d0b49"
            ]
        ]
    },
    {
        "id": "7efd6757bb078b7f",
        "type": "debug",
        "z": "63b86f156c48a127",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 600,
        "wires": []
    },
    {
        "id": "f895f025ae7d891d",
        "type": "mqtt in",
        "z": "63b86f156c48a127",
        "name": "",
        "topic": "Factorio/Responses",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "6f6a71de9985f35d",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 560,
        "wires": [
            [
                "90eee5d5f1beee77"
            ]
        ]
    },
    {
        "id": "39ce0b1a89deda24",
        "type": "debug",
        "z": "63b86f156c48a127",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 500,
        "wires": []
    },
    {
        "id": "90eee5d5f1beee77",
        "type": "function",
        "z": "63b86f156c48a127",
        "name": "function 2",
        "func": "return msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 700,
        "wires": [
            [
                "d29e1f679cc5bb01"
            ]
        ]
    },
    {
        "id": "fc044ca934fadc4a",
        "type": "debug",
        "z": "63b86f156c48a127",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 800,
        "wires": []
    },
    {
        "id": "c679baf29aa29b75",
        "type": "factory-agent-gemini",
        "z": "63b86f156c48a127",
        "d": true,
        "name": "Gemini Player",
        "model": "gemini-2.0-flash-lite",
        "temperature": 0.7,
        "maxTokens": "8192",
        "x": 580,
        "y": 740,
        "wires": [
            [
                "fc044ca934fadc4a",
                "68c8874f27d25ec4"
            ]
        ]
    },
    {
        "id": "6f6a71de9985f35d",
        "type": "mqtt-broker",
        "name": "",
        "broker": "18.141.237.146",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]