[
  {
    "type": "class",
    "name": "LuaAISettings",
    "content": "Class: LuaAISettings\nDescription: Collection of settings for overriding default ai behavior.",
    "metadata": {
      "class_name": "LuaAISettings",
      "parent_class": null
    }
  },
  {
    "type": "attribute",
    "name": "LuaAISettings.allow_destroy_when_commands_fail",
    "content": "Attribute: allow_destroy_when_commands_fail \nRead_type: boolean\nWrite_type: boolean\nDescription: If enabled, units that repeatedly fail to succeed at commands will be destroyed.\n",
    "metadata": {
      "class_name": "LuaAISettings",
      "attribute_name": "allow_destroy_when_commands_fail"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAISettings.allow_try_return_to_spawner",
    "content": "Attribute: allow_try_return_to_spawner \nRead_type: boolean\nWrite_type: boolean\nDescription: If enabled, units that have nothing else to do will attempt to return to a spawner.\n",
    "metadata": {
      "class_name": "LuaAISettings",
      "attribute_name": "allow_try_return_to_spawner"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAISettings.do_separation",
    "content": "Attribute: do_separation \nRead_type: boolean\nWrite_type: boolean\nDescription: If enabled, units will try to separate themselves from nearby friendly units.\n",
    "metadata": {
      "class_name": "LuaAISettings",
      "attribute_name": "do_separation"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAISettings.join_attacks",
    "content": "Attribute: join_attacks \nRead_type: boolean\nWrite_type: boolean\nDescription: If enabled, the unit will join attack groups.\n",
    "metadata": {
      "class_name": "LuaAISettings",
      "attribute_name": "join_attacks"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAISettings.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaAISettings",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAISettings.path_resolution_modifier",
    "content": "Attribute: path_resolution_modifier \nRead_type: int8\nWrite_type: int8\nDescription: Defines how coarse the pathfinder's grid is, where smaller values mean a coarser grid. Defaults to `0`, which equals a resolution of `1x1` tiles, centered on tile centers. Values range from `-8` to `8` inclusive, where each integer increment doubles/halves the resolution. So, a resolution of `-8` equals a grid of `256x256` tiles, and a resolution of `8` equals `1/256` of a tile.",
    "metadata": {
      "class_name": "LuaAISettings",
      "attribute_name": "path_resolution_modifier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAISettings.size_in_group",
    "content": "Attribute: size_in_group \nRead_type: float\nWrite_type: float\nDescription: The number of \"slots\" that the unit takes up in a unit group. Must be greater than 0.\n\nIf this value is changed after the unit has been added to a group, the exact behavior is undefined.",
    "metadata": {
      "class_name": "LuaAISettings",
      "attribute_name": "size_in_group"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAISettings.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaAISettings",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaAccumulatorControlBehavior",
    "content": "Class: LuaAccumulatorControlBehavior\nDescription: Control behavior for accumulators.",
    "metadata": {
      "class_name": "LuaAccumulatorControlBehavior",
      "parent_class": "LuaControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAccumulatorControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaAccumulatorControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAccumulatorControlBehavior.output_signal",
    "content": "Attribute: output_signal [Optional]\nRead_type: SignalID\nWrite_type: SignalID\nDescription: \n",
    "metadata": {
      "class_name": "LuaAccumulatorControlBehavior",
      "attribute_name": "output_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAccumulatorControlBehavior.read_charge",
    "content": "Attribute: read_charge \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if this accumulator sends its charge percent to circuit network.\n",
    "metadata": {
      "class_name": "LuaAccumulatorControlBehavior",
      "attribute_name": "read_charge"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAccumulatorControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaAccumulatorControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaAchievementPrototype",
    "content": "Class: LuaAchievementPrototype\nDescription: Prototype of a achievement.",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.allowed_without_fight",
    "content": "Attribute: allowed_without_fight \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "allowed_without_fight"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.alternative_armor",
    "content": "Attribute: alternative_armor [Optional]\nRead_type: LuaItemPrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "alternative_armor"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.ammo_type",
    "content": "Attribute: ammo_type [Optional]\nRead_type: LuaItemPrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "ammo_type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.amount",
    "content": "Attribute: amount [Optional]\nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "amount"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.armor",
    "content": "Attribute: armor [Optional]\nRead_type: LuaItemPrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "armor"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.count",
    "content": "Attribute: count [Optional]\nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.damage_dealer",
    "content": "Attribute: damage_dealer [Optional]\nRead_type: {'complex_type': 'array', 'value': 'LuaEntityPrototype'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "damage_dealer"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.damage_type",
    "content": "Attribute: damage_type [Optional]\nRead_type: LuaDamagePrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "damage_type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.dont_build",
    "content": "Attribute: dont_build [Optional]\nRead_type: {'complex_type': 'array', 'value': 'LuaEntityPrototype'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "dont_build"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.dont_research",
    "content": "Attribute: dont_research [Optional]\nRead_type: {'complex_type': 'array', 'value': 'LuaItemPrototype'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "dont_research"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.excluded",
    "content": "Attribute: excluded [Optional]\nRead_type: {'complex_type': 'array', 'value': 'LuaEntityPrototype'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "excluded"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.fluid_product",
    "content": "Attribute: fluid_product [Optional]\nRead_type: LuaFluidPrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "fluid_product"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.in_vehicle",
    "content": "Attribute: in_vehicle [Optional]\nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "in_vehicle"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.included",
    "content": "Attribute: included [Optional]\nRead_type: {'complex_type': 'array', 'value': 'LuaEntityPrototype'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "included"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.item_product",
    "content": "Attribute: item_product [Optional]\nRead_type: LuaItemPrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "item_product"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.last_hour_only",
    "content": "Attribute: last_hour_only [Optional]\nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "last_hour_only"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.limit_equip_quality",
    "content": "Attribute: limit_equip_quality [Optional]\nRead_type: LuaQualityPrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "limit_equip_quality"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.limit_quality",
    "content": "Attribute: limit_quality [Optional]\nRead_type: LuaQualityPrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "limit_quality"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.limited_to_one_game",
    "content": "Attribute: limited_to_one_game [Optional]\nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "limited_to_one_game"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.minimum_damage",
    "content": "Attribute: minimum_damage [Optional]\nRead_type: float\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "minimum_damage"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.minimum_distance",
    "content": "Attribute: minimum_distance [Optional]\nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "minimum_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.minimum_energy_produced",
    "content": "Attribute: minimum_energy_produced [Optional]\nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "minimum_energy_produced"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.module",
    "content": "Attribute: module [Optional]\nRead_type: {'complex_type': 'array', 'value': 'string'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "module"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.more_than_manually",
    "content": "Attribute: more_than_manually [Optional]\nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "more_than_manually"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.not_to_kill",
    "content": "Attribute: not_to_kill [Optional]\nRead_type: LuaEntityPrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "not_to_kill"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.objective_condition",
    "content": "Attribute: objective_condition [Optional]\nRead_type: string\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "objective_condition"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.personally",
    "content": "Attribute: personally [Optional]\nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "personally"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.quality",
    "content": "Attribute: quality [Optional]\nRead_type: LuaQualityPrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "quality"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.research_all",
    "content": "Attribute: research_all [Optional]\nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "research_all"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.research_with",
    "content": "Attribute: research_with [Optional]\nRead_type: {'complex_type': 'array', 'value': 'LuaItemPrototype'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "research_with"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.science_pack",
    "content": "Attribute: science_pack [Optional]\nRead_type: LuaItemPrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "science_pack"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.should_survive",
    "content": "Attribute: should_survive [Optional]\nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "should_survive"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.surface",
    "content": "Attribute: surface [Optional]\nRead_type: string\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "surface"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.technology",
    "content": "Attribute: technology [Optional]\nRead_type: LuaTechnologyPrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "technology"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.to_build",
    "content": "Attribute: to_build [Optional]\nRead_type: LuaEntityPrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "to_build"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.to_kill",
    "content": "Attribute: to_kill [Optional]\nRead_type: {'complex_type': 'array', 'value': 'LuaEntityPrototype'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "to_kill"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.to_use",
    "content": "Attribute: to_use [Optional]\nRead_type: LuaItemPrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "to_use"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.type_not_to_kill",
    "content": "Attribute: type_not_to_kill [Optional]\nRead_type: string\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "type_not_to_kill"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.type_of_dealer",
    "content": "Attribute: type_of_dealer [Optional]\nRead_type: string\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "type_of_dealer"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.type_to_kill",
    "content": "Attribute: type_to_kill [Optional]\nRead_type: string\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "type_to_kill"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAchievementPrototype.within",
    "content": "Attribute: within [Optional]\nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAchievementPrototype",
      "attribute_name": "within"
    }
  },
  {
    "type": "class",
    "name": "LuaActiveTriggerPrototype",
    "content": "Class: LuaActiveTriggerPrototype\nDescription: Prototype of an Active Trigger.",
    "metadata": {
      "class_name": "LuaActiveTriggerPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaActiveTriggerPrototype.fork_chance",
    "content": "Attribute: fork_chance \nRead_type: double\n\nDescription: The chance that a new fork will spawn after each jump [0,1]. default = 0.\n",
    "metadata": {
      "class_name": "LuaActiveTriggerPrototype",
      "attribute_name": "fork_chance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaActiveTriggerPrototype.jump_delay_ticks",
    "content": "Attribute: jump_delay_ticks \nRead_type: uint\n\nDescription: The tick delay between each jump. 0 = all jumps instantaneous. default = 0.\n",
    "metadata": {
      "class_name": "LuaActiveTriggerPrototype",
      "attribute_name": "jump_delay_ticks"
    }
  },
  {
    "type": "attribute",
    "name": "LuaActiveTriggerPrototype.max_forks",
    "content": "Attribute: max_forks \nRead_type: uint\n\nDescription: maximum number of forks allowed to spawn for the entire chain. default = infinity.\n",
    "metadata": {
      "class_name": "LuaActiveTriggerPrototype",
      "attribute_name": "max_forks"
    }
  },
  {
    "type": "attribute",
    "name": "LuaActiveTriggerPrototype.max_forks_per_jump",
    "content": "Attribute: max_forks_per_jump \nRead_type: uint\n\nDescription: The maximum number of forks that can spawn from a single jump. default = 1.\n",
    "metadata": {
      "class_name": "LuaActiveTriggerPrototype",
      "attribute_name": "max_forks_per_jump"
    }
  },
  {
    "type": "attribute",
    "name": "LuaActiveTriggerPrototype.max_jumps",
    "content": "Attribute: max_jumps \nRead_type: uint\n\nDescription: The max number of jumps per trigger. default = 5.\n",
    "metadata": {
      "class_name": "LuaActiveTriggerPrototype",
      "attribute_name": "max_jumps"
    }
  },
  {
    "type": "attribute",
    "name": "LuaActiveTriggerPrototype.max_range",
    "content": "Attribute: max_range \nRead_type: double\n\nDescription: The max distance jumps are allowed to travel away from the original target. default = infinity.\n",
    "metadata": {
      "class_name": "LuaActiveTriggerPrototype",
      "attribute_name": "max_range"
    }
  },
  {
    "type": "attribute",
    "name": "LuaActiveTriggerPrototype.max_range_per_jump",
    "content": "Attribute: max_range_per_jump \nRead_type: double\n\nDescription: The max length of jumps. default = 5.\n",
    "metadata": {
      "class_name": "LuaActiveTriggerPrototype",
      "attribute_name": "max_range_per_jump"
    }
  },
  {
    "type": "attribute",
    "name": "LuaActiveTriggerPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaActiveTriggerPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaActiveTriggerPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaActiveTriggerPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaAgriculturalTowerControlBehavior",
    "content": "Class: LuaAgriculturalTowerControlBehavior\nDescription: Control behavior for agricultural tower",
    "metadata": {
      "class_name": "LuaAgriculturalTowerControlBehavior",
      "parent_class": "LuaGenericOnOffControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAgriculturalTowerControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaAgriculturalTowerControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAgriculturalTowerControlBehavior.read_contents",
    "content": "Attribute: read_contents \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if the agricultural tower reads seeds and harvested plants.\n",
    "metadata": {
      "class_name": "LuaAgriculturalTowerControlBehavior",
      "attribute_name": "read_contents"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAgriculturalTowerControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaAgriculturalTowerControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaAirbornePollutantPrototype",
    "content": "Class: LuaAirbornePollutantPrototype\nDescription: Airborne pollutant prototype.",
    "metadata": {
      "class_name": "LuaAirbornePollutantPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAirbornePollutantPrototype.affects_evolution",
    "content": "Attribute: affects_evolution \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAirbornePollutantPrototype",
      "attribute_name": "affects_evolution"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAirbornePollutantPrototype.chart_color",
    "content": "Attribute: chart_color \nRead_type: Color\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAirbornePollutantPrototype",
      "attribute_name": "chart_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAirbornePollutantPrototype.localised_name_with_amount_key",
    "content": "Attribute: localised_name_with_amount_key \nRead_type: string\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAirbornePollutantPrototype",
      "attribute_name": "localised_name_with_amount_key"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAirbornePollutantPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaAirbornePollutantPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAirbornePollutantPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaAirbornePollutantPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaAmmoCategoryPrototype",
    "content": "Class: LuaAmmoCategoryPrototype\nDescription: Prototype of a ammo category.",
    "metadata": {
      "class_name": "LuaAmmoCategoryPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAmmoCategoryPrototype.bonus_gui_order",
    "content": "Attribute: bonus_gui_order \nRead_type: string\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAmmoCategoryPrototype",
      "attribute_name": "bonus_gui_order"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAmmoCategoryPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaAmmoCategoryPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAmmoCategoryPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaAmmoCategoryPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaArithmeticCombinatorControlBehavior",
    "content": "Class: LuaArithmeticCombinatorControlBehavior\nDescription: Control behavior for arithmetic combinators.",
    "metadata": {
      "class_name": "LuaArithmeticCombinatorControlBehavior",
      "parent_class": "LuaCombinatorControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaArithmeticCombinatorControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaArithmeticCombinatorControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaArithmeticCombinatorControlBehavior.parameters",
    "content": "Attribute: parameters \nRead_type: ArithmeticCombinatorParameters\nWrite_type: ArithmeticCombinatorParameters\nDescription: This arithmetic combinator's parameters. Writing `nil` clears the combinator's parameters.\n",
    "metadata": {
      "class_name": "LuaArithmeticCombinatorControlBehavior",
      "attribute_name": "parameters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaArithmeticCombinatorControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaArithmeticCombinatorControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaArtilleryTurretControlBehavior",
    "content": "Class: LuaArtilleryTurretControlBehavior\nDescription: Control behavior for artillery turrets.",
    "metadata": {
      "class_name": "LuaArtilleryTurretControlBehavior",
      "parent_class": "LuaGenericOnOffControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaArtilleryTurretControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaArtilleryTurretControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaArtilleryTurretControlBehavior.read_ammo",
    "content": "Attribute: read_ammo \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if the turret will send the ammunition or fluid it contains to the circuit network.\n",
    "metadata": {
      "class_name": "LuaArtilleryTurretControlBehavior",
      "attribute_name": "read_ammo"
    }
  },
  {
    "type": "attribute",
    "name": "LuaArtilleryTurretControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaArtilleryTurretControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaAssemblingMachineControlBehavior",
    "content": "Class: LuaAssemblingMachineControlBehavior\nDescription: Control behavior for assembling machines.",
    "metadata": {
      "class_name": "LuaAssemblingMachineControlBehavior",
      "parent_class": "LuaGenericOnOffControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAssemblingMachineControlBehavior.circuit_read_contents",
    "content": "Attribute: circuit_read_contents \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if the assembling machine reads its ingredients contents, product contents, materials in crafting and trash inventories.\n",
    "metadata": {
      "class_name": "LuaAssemblingMachineControlBehavior",
      "attribute_name": "circuit_read_contents"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAssemblingMachineControlBehavior.circuit_read_ingredients",
    "content": "Attribute: circuit_read_ingredients \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if the assembling machine outputs ingredients of current recipe as a signals to circuit network.\n",
    "metadata": {
      "class_name": "LuaAssemblingMachineControlBehavior",
      "attribute_name": "circuit_read_ingredients"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAssemblingMachineControlBehavior.circuit_read_recipe_finished",
    "content": "Attribute: circuit_read_recipe_finished \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if the the assembling machine sends a signal when the recipe finishes.\n",
    "metadata": {
      "class_name": "LuaAssemblingMachineControlBehavior",
      "attribute_name": "circuit_read_recipe_finished"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAssemblingMachineControlBehavior.circuit_read_working",
    "content": "Attribute: circuit_read_working \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if the the assembling machine sends a signal when it is working.\n",
    "metadata": {
      "class_name": "LuaAssemblingMachineControlBehavior",
      "attribute_name": "circuit_read_working"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAssemblingMachineControlBehavior.circuit_recipe_finished_signal",
    "content": "Attribute: circuit_recipe_finished_signal [Optional]\nRead_type: SignalID\nWrite_type: SignalID\nDescription: The signal sent when the assembling machine finishes a recipe.\n",
    "metadata": {
      "class_name": "LuaAssemblingMachineControlBehavior",
      "attribute_name": "circuit_recipe_finished_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAssemblingMachineControlBehavior.circuit_set_recipe",
    "content": "Attribute: circuit_set_recipe \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if the assembling machine sets its recipe from the circuit network.\n",
    "metadata": {
      "class_name": "LuaAssemblingMachineControlBehavior",
      "attribute_name": "circuit_set_recipe"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAssemblingMachineControlBehavior.circuit_working_signal",
    "content": "Attribute: circuit_working_signal [Optional]\nRead_type: SignalID\nWrite_type: SignalID\nDescription: The signal sent when the assembling machine is working.\n",
    "metadata": {
      "class_name": "LuaAssemblingMachineControlBehavior",
      "attribute_name": "circuit_working_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAssemblingMachineControlBehavior.include_fuel",
    "content": "Attribute: include_fuel \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if the read contents should include fuel (content of energy source)\n",
    "metadata": {
      "class_name": "LuaAssemblingMachineControlBehavior",
      "attribute_name": "include_fuel"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAssemblingMachineControlBehavior.include_in_crafting",
    "content": "Attribute: include_in_crafting \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if the read contents should include items in crafting.\n",
    "metadata": {
      "class_name": "LuaAssemblingMachineControlBehavior",
      "attribute_name": "include_in_crafting"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAssemblingMachineControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaAssemblingMachineControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAssemblingMachineControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaAssemblingMachineControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaAsteroidChunkPrototype",
    "content": "Class: LuaAsteroidChunkPrototype\nDescription: Prototype of an asteroid chunk.",
    "metadata": {
      "class_name": "LuaAsteroidChunkPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAsteroidChunkPrototype.hide_from_signal_gui",
    "content": "Attribute: hide_from_signal_gui \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAsteroidChunkPrototype",
      "attribute_name": "hide_from_signal_gui"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAsteroidChunkPrototype.item_signal_alias",
    "content": "Attribute: item_signal_alias [Optional]\nRead_type: LuaItemPrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAsteroidChunkPrototype",
      "attribute_name": "item_signal_alias"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAsteroidChunkPrototype.mineable_properties",
    "content": "Attribute: mineable_properties \nRead_type: MineableProperties\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAsteroidChunkPrototype",
      "attribute_name": "mineable_properties"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAsteroidChunkPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaAsteroidChunkPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAsteroidChunkPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaAsteroidChunkPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaAsteroidCollectorControlBehavior",
    "content": "Class: LuaAsteroidCollectorControlBehavior\nDescription: Control behavior for asteroid collectors.",
    "metadata": {
      "class_name": "LuaAsteroidCollectorControlBehavior",
      "parent_class": "LuaGenericOnOffControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAsteroidCollectorControlBehavior.include_hands",
    "content": "Attribute: include_hands \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if read contents should include content of hands (items that were captured but are not yet in the asteroid collector's main inventory).\n",
    "metadata": {
      "class_name": "LuaAsteroidCollectorControlBehavior",
      "attribute_name": "include_hands"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAsteroidCollectorControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaAsteroidCollectorControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAsteroidCollectorControlBehavior.read_content",
    "content": "Attribute: read_content \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if this asteroid collector reads its content and sends it to a circuit network\n",
    "metadata": {
      "class_name": "LuaAsteroidCollectorControlBehavior",
      "attribute_name": "read_content"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAsteroidCollectorControlBehavior.set_filter",
    "content": "Attribute: set_filter \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if this asteroid collector has filters set from circuit network\n",
    "metadata": {
      "class_name": "LuaAsteroidCollectorControlBehavior",
      "attribute_name": "set_filter"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAsteroidCollectorControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaAsteroidCollectorControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaAutoplaceControlPrototype",
    "content": "Class: LuaAutoplaceControlPrototype\nDescription: Prototype of an autoplace control.",
    "metadata": {
      "class_name": "LuaAutoplaceControlPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAutoplaceControlPrototype.can_be_disabled",
    "content": "Attribute: can_be_disabled \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAutoplaceControlPrototype",
      "attribute_name": "can_be_disabled"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAutoplaceControlPrototype.category",
    "content": "Attribute: category \nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'resource'}, {'complex_type': 'literal', 'value': 'terrain'}, {'complex_type': 'literal', 'value': 'cliff'}, {'complex_type': 'literal', 'value': 'enemy'}], 'full_format': False}\n\nDescription: Category name of this prototype.",
    "metadata": {
      "class_name": "LuaAutoplaceControlPrototype",
      "attribute_name": "category"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAutoplaceControlPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaAutoplaceControlPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAutoplaceControlPrototype.richness",
    "content": "Attribute: richness \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaAutoplaceControlPrototype",
      "attribute_name": "richness"
    }
  },
  {
    "type": "attribute",
    "name": "LuaAutoplaceControlPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaAutoplaceControlPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaBootstrap",
    "content": "Class: LuaBootstrap\nDescription: Entry point for registering event handlers. It is accessible through the global object named `script`.",
    "metadata": {
      "class_name": "LuaBootstrap",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.generate_event_name",
    "content": "Method: LuaBootstrap.generate_event_name\nDescription: Generate a new, unique event ID that can be used to raise custom events with [LuaBootstrap::raise_event](runtime:LuaBootstrap::raise_event).\n\nReturns:\n- defines.events: The newly generated event ID. This will be a new value that does not correspond to any named entry in defines.events.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "generate_event_name"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.get_event_filter",
    "content": "Method: LuaBootstrap.get_event_filter\nDescription: Gets the filters for the given event.\n\nParameters:\n- event (LuaEventType): ID of the event to get.\n\nReturns:\n- EventFilter: The filters or `nil` if none are defined.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "get_event_filter"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.get_event_handler",
    "content": "Method: LuaBootstrap.get_event_handler\nDescription: Find the event handler for an event.\n\nParameters:\n- event (LuaEventType): The event identifier to get a handler for.\n\nReturns:\n- {'complex_type': 'function', 'parameters': ['EventData']}: Reference to the function currently registered as the handler, if it was found.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "get_event_handler"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.get_event_id",
    "content": "Method: LuaBootstrap.get_event_id\nDescription: Converts LuaEventType into related value of defines.events. Value will be provided also if event was not given a constant inside of defines.events.\n\nParameters:\n- event (LuaEventType): \n\nReturns:\n- defines.events: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "get_event_id"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.get_event_order",
    "content": "Method: LuaBootstrap.get_event_order\nDescription: Gets the mod event order as a string.\n\nReturns:\n- string: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "get_event_order"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.on_configuration_changed",
    "content": "Method: LuaBootstrap.on_configuration_changed\nDescription: Register a function to be run when mod configuration changes.",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "on_configuration_changed"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.on_configuration_changed",
    "content": "This is called when the game version or any mod version changed, when any mod was added or removed, when a startup setting has changed, when any prototypes have been added or removed, or when a migration was applied. It allows the mod to make any changes it deems appropriate to both the data structures in its [storage](runtime:storage) table or to the game state through [LuaGameScript](runtime:LuaGameScript).\n\nFor more context, refer to the [Data Lifecycle](runtime:data-lifecycle) page.",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "on_configuration_changed"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.on_configuration_changed",
    "content": "Parameters:\n- handler ({'complex_type': 'union', 'options': [{'complex_type': 'function', 'parameters': ['ConfigurationChangedData']}, 'nil'], 'full_format': False}): The handler for this event. Passing `nil` will unregister it.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "on_configuration_changed"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.on_event",
    "content": "Method: LuaBootstrap.on_event\nDescription: Register a handler to run on the specified event(s). Each mod can only register once for every event, as any additional registration will overwrite the previous one. This holds true even if different filters are used for subsequent registrations.",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "on_event"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.on_event",
    "content": "Parameters:\n- event ({'complex_type': 'union', 'options': ['LuaEventType', {'complex_type': 'array', 'value': 'LuaEventType'}], 'full_format': False}): The event(s) or custom-input to invoke the handler on.\n- filters (EventFilter)[Optional]: The filters for this event. Can only be used when registering for individual events.",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "on_event"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.on_event",
    "content": "- handler ({'complex_type': 'union', 'options': [{'complex_type': 'function', 'parameters': ['EventData']}, 'nil'], 'full_format': False}): The handler for this event. Passing `nil` will unregister it.",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "on_event"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.on_event",
    "content": "Examples:\n```\n-- Register for the on_tick event to print the current tick to console each tick\nscript.on_event(defines.events.on_tick,\nfunction(event) game.print(event.tick) end)\n```\n```\n-- Register for the on_built_entity event, limiting it to only be received when a `\"fast-inserter\"` is built\nscript.on_event(defines.events.on_built_entity,\nfunction(event) game.print(\"Gotta go fast!\") end,\n{{filter = \"name\", name = \"fast-inserter\"}})\n```\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "on_event"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.on_init",
    "content": "Method: LuaBootstrap.on_init\nDescription: Register a function to be run on mod initialization.",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "on_init"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.on_init",
    "content": "This is only called when a new save game is created or when a save file is loaded that previously didn't contain the mod. During it, the mod gets the chance to set up initial values that it will use for its lifetime. It has full access to [LuaGameScript](runtime:LuaGameScript) and the [storage](runtime:storage) table and can change anything about them that it deems appropriate. No other events will be raised for the mod until it has finished this step.",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "on_init"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.on_init",
    "content": "For more context, refer to the [Data Lifecycle](runtime:data-lifecycle) page.\n\nParameters:\n- handler ({'complex_type': 'union', 'options': [{'complex_type': 'function', 'parameters': []}, 'nil'], 'full_format': False}): The handler for this event. Passing `nil` will unregister it.\n\nExamples:\n```\n-- Initialize a `players` table in `storage` for later use\nscript.on_init(function()\n  storage.players = {}\nend)\n```\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "on_init"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.on_load",
    "content": "Method: LuaBootstrap.on_load\nDescription: Register a function to be run on save load. This is only called for mods that have been part of the save previously, or for players connecting to a running multiplayer session.",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "on_load"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.on_load",
    "content": "It gives the mod the opportunity to rectify potential differences in local state introduced by the save/load cycle. Doing anything other than the following three will lead to desyncs, breaking multiplayer and replay functionality. Access to [LuaGameScript](runtime:LuaGameScript) is not available. The [storage](runtime:storage) table can be accessed and is safe to read from, but not write to, as doing so will lead to an error.\n\nThe only legitimate uses of this event are these:",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "on_load"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.on_load",
    "content": "The only legitimate uses of this event are these:\n\n- Re-setup [metatables](https://www.lua.org/pil/13.html) as they are not persisted through the save/load cycle.\n\n- Re-setup conditional event handlers, meaning subscribing to an event only when some condition is met to save processing time.\n\n- Create local references to data stored in the [storage](runtime:storage) table.",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "on_load"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.on_load",
    "content": "For all other purposes, [LuaBootstrap::on_init](runtime:LuaBootstrap::on_init), [LuaBootstrap::on_configuration_changed](runtime:LuaBootstrap::on_configuration_changed) or [migrations](runtime:migrations) should be used instead.\n\nFor more context, refer to the [Data Lifecycle](runtime:data-lifecycle) page.",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "on_load"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.on_load",
    "content": "Parameters:\n- handler ({'complex_type': 'union', 'options': [{'complex_type': 'function', 'parameters': []}, 'nil'], 'full_format': False}): The handler for this event. Passing `nil` will unregister it.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "on_load"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.on_nth_tick",
    "content": "Method: LuaBootstrap.on_nth_tick\nDescription: Register a handler to run every nth-tick(s). When the game is on tick 0 it will trigger all registered handlers.",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "on_nth_tick"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.on_nth_tick",
    "content": "Parameters:\n- handler ({'complex_type': 'union', 'options': [{'complex_type': 'function', 'parameters': ['NthTickEventData']}, 'nil'], 'full_format': False}): The handler to run. Passing `nil` will unregister it for the provided nth-tick(s).\n- tick ({'complex_type': 'union', 'options': ['uint', {'complex_type': 'array', 'value': 'uint'}, 'nil'], 'full_format': False}): The nth-tick(s) to invoke the handler on. Passing `nil` as the only parameter will unregister all nth-tick handlers.",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "on_nth_tick"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.on_nth_tick",
    "content": "Format:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "on_nth_tick"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.raise_biter_base_built",
    "content": "Method: LuaBootstrap.raise_biter_base_built\nDescription: \n\nParameters:\n- entity (LuaEntity): The entity that was built.\n\nRaises:\n- on_biter_base_built: Raised with the provided arguments.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "raise_biter_base_built"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.raise_console_chat",
    "content": "Method: LuaBootstrap.raise_console_chat\nDescription: \n\nParameters:\n- message (string): The chat message to send.\n- player_index (uint): The player doing the chatting.\n\nRaises:\n- on_console_chat: Raised with the provided arguments.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "raise_console_chat"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.raise_event",
    "content": "Method: LuaBootstrap.raise_event\nDescription: Raise an event. Only events generated with [LuaBootstrap::generate_event_name](runtime:LuaBootstrap::generate_event_name) and the following can be raised:\n\nParameters:\n- data (table): Table with extra data that will be passed to the event handler. Any invalid LuaObjects will silently stop the event from being raised.\n- event (LuaEventType): ID or name of the event to raise.",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "raise_event"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.raise_event",
    "content": "Examples:\n```\n-- Raise the on_console_chat event with the desired message 'from' the first player\nlocal data = {player_index = 1, message = \"Hello friends!\"}\nscript.raise_event(defines.events.on_console_chat, data)\n```\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "raise_event"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.raise_market_item_purchased",
    "content": "Method: LuaBootstrap.raise_market_item_purchased\nDescription: \n\nParameters:\n- count (uint): The amount of offers purchased.\n- market (LuaEntity): The market entity.\n- offer_index (uint): The index of the offer purchased.\n- player_index (uint): The player who did the purchasing.\n\nRaises:\n- on_market_item_purchased: Raised with the provided arguments.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "raise_market_item_purchased"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.raise_player_crafted_item",
    "content": "Method: LuaBootstrap.raise_player_crafted_item\nDescription: \n\nParameters:\n- item_stack (LuaItemStack): The item that has been crafted.\n- player_index (uint): The player doing the crafting.\n- recipe (RecipeID): The recipe used to craft this item.\n\nRaises:\n- on_player_crafted_item: Raised with the provided arguments.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "raise_player_crafted_item"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.raise_player_fast_transferred",
    "content": "Method: LuaBootstrap.raise_player_fast_transferred\nDescription: \n\nParameters:\n- entity (LuaEntity): The entity transferred from or to.\n- from_player (boolean): Whether the transfer was from player to entity. If `false`, the transfer was from entity to player.\n- is_split (boolean): Whether the transfer was a split action (half stack).\n- player_index (uint): The player transferred from or to.\n\nRaises:\n- on_player_fast_transferred: Raised with the provided arguments.",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "raise_player_fast_transferred"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.raise_player_fast_transferred",
    "content": "Format:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "raise_player_fast_transferred"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.raise_script_built",
    "content": "Method: LuaBootstrap.raise_script_built\nDescription: \n\nParameters:\n- entity (LuaEntity): The entity that has been built.\n\nRaises:\n- script_raised_built: Raised with the provided arguments.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "raise_script_built"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.raise_script_destroy",
    "content": "Method: LuaBootstrap.raise_script_destroy\nDescription: \n\nParameters:\n- entity (LuaEntity): The entity that was destroyed.\n\nRaises:\n- script_raised_destroy: Raised with the provided arguments.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "raise_script_destroy"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.raise_script_revive",
    "content": "Method: LuaBootstrap.raise_script_revive\nDescription: \n\nParameters:\n- entity (LuaEntity): The entity that was revived.\n- tags (Tags)[Optional]: The tags associated with this entity, if any.\n\nRaises:\n- script_raised_revive: Raised with the provided arguments.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "raise_script_revive"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.raise_script_set_tiles",
    "content": "Method: LuaBootstrap.raise_script_set_tiles\nDescription: \n\nParameters:\n- surface_index (uint): The surface whose tiles have been changed.\n- tiles ({'complex_type': 'array', 'value': 'Tile'}): The tiles that have been changed.\n\nRaises:\n- script_raised_set_tiles: Raised with the provided arguments.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "raise_script_set_tiles"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.raise_script_teleported",
    "content": "Method: LuaBootstrap.raise_script_teleported\nDescription: \n\nParameters:\n- entity (LuaEntity): The entity that was teleported.\n- old_position (MapPosition): The entity's position before the teleportation.\n- old_surface_index (uint8): The entity's surface before the teleportation.\n\nRaises:\n- script_raised_teleported: Raised with the provided arguments.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "raise_script_teleported"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.register_metatable",
    "content": "Method: LuaBootstrap.register_metatable\nDescription: Register a metatable to have linkage recorded and restored when saving/loading.\n\nThe metatable itself will not be saved. Instead, only the linkage to a registered metatable is saved, and the metatable registered under that name will be used when loading the table.\n\n`register_metatable()` can not be used in the console, in event listeners or during a `remote.call()`.",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "register_metatable"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.register_metatable",
    "content": "The metatable first needs to be defined in the mod's root scope, then registered using this method. From then on, it will be properly restored for tables in [storage](runtime:storage).\n\n```\nlocal metatable = {\n  __index = function(key)\n    return \"no value for key \" .. key\n  end\n}\nscript.register_metatable(\"my_metatable\", metatable)\n```\n\nThis previously defined `metatable` can then be set on any table as usual:\n\n```\nlocal table = {key=\"value\"}\nsetmetatable(table, metatable)\n```",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "register_metatable"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.register_metatable",
    "content": "Parameters:\n- metatable (table): The metatable to register.\n- name (string): The name of this metatable. Names must be unique per mod.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "register_metatable"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.register_on_object_destroyed",
    "content": "Method: LuaBootstrap.register_on_object_destroyed\nDescription: Registers an object so that after it's destroyed, [on_object_destroyed](runtime:on_object_destroyed) is called.",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "register_on_object_destroyed"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.register_on_object_destroyed",
    "content": "Once an object is registered, it stays registered until it is actually destroyed, even through save/load cycles. The registration is global across all mods, meaning once one mod registers an object, all mods listening to [on_object_destroyed](runtime:on_object_destroyed) will receive the event when it is destroyed. Registering the same object multiple times will still only fire the destruction event once, and will return the same registration number.",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "register_on_object_destroyed"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.register_on_object_destroyed",
    "content": "Depending on when a given object is destroyed, [on_object_destroyed](runtime:on_object_destroyed) will either be fired at the end of the current tick or at the end of the next tick.\n\nParameters:\n- object (RegistrationTarget): The object to register.",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "register_on_object_destroyed"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.register_on_object_destroyed",
    "content": "Returns:\n- uint64: The registration number. It is used to identify the object in the [on_object_destroyed](runtime:on_object_destroyed) event.\n- uint64: The [useful identifier](runtime:RegistrationTarget) of the object if it has one. This identifier is specific to the object type, for example for trains it is the value [LuaTrain::id](runtime:LuaTrain::id).\n- defines.target_type: Type of the target object.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "register_on_object_destroyed"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.set_event_filter",
    "content": "Method: LuaBootstrap.set_event_filter\nDescription: Sets the filters for the given event. The filters are only retained when set after the actual event registration, because registering for an event with different or no filters will overwrite previously set ones.\n\nLimit the [on_marked_for_deconstruction](runtime:on_marked_for_deconstruction) event to only be received when a non-ghost entity is marked for deconstruction.",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "set_event_filter"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.set_event_filter",
    "content": "```\nscript.set_event_filter(defines.events.on_marked_for_deconstruction, {{filter = \"ghost\", invert = true}})\n```\n\nLimit the [on_built_entity](runtime:on_built_entity) event to only be received when either a `unit` or a `unit-spawner` is built.\n\n```\nscript.set_event_filter(defines.events.on_built_entity, {{filter = \"type\", type = \"unit\"}, {filter = \"type\", type = \"unit-spawner\"}})\n```",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "set_event_filter"
    }
  },
  {
    "type": "method",
    "name": "LuaBootstrap.set_event_filter",
    "content": "Limit the [on_entity_damaged](runtime:on_entity_damaged) event to only be received when a `rail` is damaged by an `acid` attack.\n\n```\nscript.set_event_filter(defines.events.on_entity_damaged, {{filter = \"rail\"}, {filter = \"damage-type\", type = \"acid\", mode = \"and\"}})\n```\n\nParameters:\n- event (LuaEventType): ID of the event to filter.\n- filters (EventFilter)[Optional]: The filters or `nil` to clear them.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaBootstrap",
      "method_name": "set_event_filter"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBootstrap.active_mods",
    "content": "Attribute: active_mods \nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'string'}\n\nDescription: A dictionary listing the names of all currently active mods and mapping them to their version.\nExamples: [\"```\\n-- This will print the names and versions of all active mods to the console.\\nfor name, version in pairs(script.active_mods) do\\n  game.print(name .. \\\" version \\\" .. version)\\nend\\n```\"]",
    "metadata": {
      "class_name": "LuaBootstrap",
      "attribute_name": "active_mods"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBootstrap.feature_flags",
    "content": "Attribute: feature_flags",
    "metadata": {
      "class_name": "LuaBootstrap",
      "attribute_name": "feature_flags"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBootstrap.feature_flags",
    "content": "Read_type: {'complex_type': 'table', 'parameters': [{'name': 'expansion_shaders', 'order': 6, 'description': '', 'type': 'boolean', 'optional': False}, {'name': 'freezing', 'order': 4, 'description': '', 'type': 'boolean', 'optional': False}, {'name': 'quality', 'order': 0, 'description': '', 'type': 'boolean', 'optional': False}, {'name': 'rail_bridges', 'order': 1, 'description': '', 'type': 'boolean', 'optional': False}, {'name': 'segmented_units', 'order': 5, 'description': '', 'type': 'boolean',",
    "metadata": {
      "class_name": "LuaBootstrap",
      "attribute_name": "feature_flags"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBootstrap.feature_flags",
    "content": "'order': 5, 'description': '', 'type': 'boolean', 'optional': False}, {'name': 'space_travel', 'order': 2, 'description': '', 'type': 'boolean', 'optional': False}, {'name': 'spoiling', 'order': 3, 'description': '', 'type': 'boolean', 'optional': False}]}",
    "metadata": {
      "class_name": "LuaBootstrap",
      "attribute_name": "feature_flags"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBootstrap.feature_flags",
    "content": "Description: A dictionary of feature flags mapping to whether they are enabled.",
    "metadata": {
      "class_name": "LuaBootstrap",
      "attribute_name": "feature_flags"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBootstrap.level",
    "content": "Attribute: level",
    "metadata": {
      "class_name": "LuaBootstrap",
      "attribute_name": "level"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBootstrap.level",
    "content": "Read_type: {'complex_type': 'table', 'parameters': [{'name': 'campaign_name', 'order': 2, 'description': 'The campaign name if any.', 'type': 'string', 'optional': True}, {'name': 'is_simulation', 'order': 0, 'description': \"Is this level a simulation? (The main menu and 'Tips and tricks' use simulations)\", 'type': 'boolean', 'optional': True}, {'name': 'is_tutorial', 'order': 1, 'description': 'Is this level a tutorial?', 'type': 'boolean', 'optional': True}, {'name': 'level_name', 'order': 3,",
    "metadata": {
      "class_name": "LuaBootstrap",
      "attribute_name": "level"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBootstrap.level",
    "content": "'optional': True}, {'name': 'level_name', 'order': 3, 'description': 'The level name.', 'type': 'string', 'optional': False}, {'name': 'mod_name', 'order': 4, 'description': 'The mod name if any.', 'type': 'string', 'optional': True}]}",
    "metadata": {
      "class_name": "LuaBootstrap",
      "attribute_name": "level"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBootstrap.level",
    "content": "Description: Information about the currently running scenario/campaign/tutorial.",
    "metadata": {
      "class_name": "LuaBootstrap",
      "attribute_name": "level"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBootstrap.mod_name",
    "content": "Attribute: mod_name \nRead_type: string\n\nDescription: The name of the mod from the environment this is used in.\n",
    "metadata": {
      "class_name": "LuaBootstrap",
      "attribute_name": "mod_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBootstrap.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaBootstrap",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "class",
    "name": "LuaBurner",
    "content": "Class: LuaBurner\nDescription: A reference to the burner energy source owned by a specific [LuaEntity](runtime:LuaEntity) or [LuaEquipment](runtime:LuaEquipment).",
    "metadata": {
      "class_name": "LuaBurner",
      "parent_class": null
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurner.burnt_result_inventory",
    "content": "Attribute: burnt_result_inventory \nRead_type: LuaInventory\n\nDescription: The burnt result inventory.\n",
    "metadata": {
      "class_name": "LuaBurner",
      "attribute_name": "burnt_result_inventory"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurner.currently_burning",
    "content": "Attribute: currently_burning [Optional]\nRead_type: ItemIDAndQualityIDPair\nWrite_type: ItemWithQualityID\nDescription: The currently burning item. Writing `nil` will void the currently burning item without producing a [LuaBurner::burnt_result](runtime:LuaBurner::burnt_result).\n\nWriting to this automatically handles correcting [LuaBurner::remaining_burning_fuel](runtime:LuaBurner::remaining_burning_fuel).",
    "metadata": {
      "class_name": "LuaBurner",
      "attribute_name": "currently_burning"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurner.fuel_categories",
    "content": "Attribute: fuel_categories \nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': {'complex_type': 'literal', 'value': True}}\n\nDescription: The fuel categories this burner uses.\n\nThe value in the dictionary is meaningless and exists just to allow for easy lookup.",
    "metadata": {
      "class_name": "LuaBurner",
      "attribute_name": "fuel_categories"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurner.heat",
    "content": "Attribute: heat \nRead_type: double\nWrite_type: double\nDescription: The current heat (energy) stored in this burner.\n",
    "metadata": {
      "class_name": "LuaBurner",
      "attribute_name": "heat"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurner.heat_capacity",
    "content": "Attribute: heat_capacity \nRead_type: double\n\nDescription: The maximum heat (maximum energy) that this burner can store.\n",
    "metadata": {
      "class_name": "LuaBurner",
      "attribute_name": "heat_capacity"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurner.inventory",
    "content": "Attribute: inventory \nRead_type: LuaInventory\n\nDescription: The fuel inventory.\n",
    "metadata": {
      "class_name": "LuaBurner",
      "attribute_name": "inventory"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurner.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaBurner",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurner.owner",
    "content": "Attribute: owner \nRead_type: {'complex_type': 'union', 'options': ['LuaEntity', 'LuaEquipment'], 'full_format': False}\n\nDescription: The owner of this burner energy source\n",
    "metadata": {
      "class_name": "LuaBurner",
      "attribute_name": "owner"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurner.remaining_burning_fuel",
    "content": "Attribute: remaining_burning_fuel \nRead_type: double\nWrite_type: double\nDescription: The amount of energy left in the currently-burning fuel item.\n\nWriting to this will silently do nothing if there's no [LuaBurner::currently_burning](runtime:LuaBurner::currently_burning) set.",
    "metadata": {
      "class_name": "LuaBurner",
      "attribute_name": "remaining_burning_fuel"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurner.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaBurner",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaBurnerPrototype",
    "content": "Class: LuaBurnerPrototype\nDescription: Prototype of a burner energy source.",
    "metadata": {
      "class_name": "LuaBurnerPrototype",
      "parent_class": null
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurnerPrototype.burnt_inventory_size",
    "content": "Attribute: burnt_inventory_size \nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaBurnerPrototype",
      "attribute_name": "burnt_inventory_size"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurnerPrototype.effectivity",
    "content": "Attribute: effectivity \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaBurnerPrototype",
      "attribute_name": "effectivity"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurnerPrototype.emissions_per_joule",
    "content": "Attribute: emissions_per_joule \nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'double'}\n\nDescription: The table of emissions of this energy source in `pollution/Joule`, indexed by pollutant type. Multiplying it by energy consumption in `Watt` gives `pollution/second`.",
    "metadata": {
      "class_name": "LuaBurnerPrototype",
      "attribute_name": "emissions_per_joule"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurnerPrototype.fuel_categories",
    "content": "Attribute: fuel_categories \nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': {'complex_type': 'literal', 'value': True}}\n\nDescription: The value in the dictionary is meaningless and exists just to allow for easy lookup.\n",
    "metadata": {
      "class_name": "LuaBurnerPrototype",
      "attribute_name": "fuel_categories"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurnerPrototype.fuel_inventory_size",
    "content": "Attribute: fuel_inventory_size \nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaBurnerPrototype",
      "attribute_name": "fuel_inventory_size"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurnerPrototype.initial_fuel",
    "content": "Attribute: initial_fuel [Optional]\nRead_type: LuaItemPrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaBurnerPrototype",
      "attribute_name": "initial_fuel"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurnerPrototype.initial_fuel_percent",
    "content": "Attribute: initial_fuel_percent \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaBurnerPrototype",
      "attribute_name": "initial_fuel_percent"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurnerPrototype.light_flicker",
    "content": "Attribute: light_flicker [Optional]",
    "metadata": {
      "class_name": "LuaBurnerPrototype",
      "attribute_name": "light_flicker"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurnerPrototype.light_flicker",
    "content": "Read_type: {'complex_type': 'table', 'parameters': [{'name': 'border_fix_speed', 'order': 4, 'description': '', 'type': 'float', 'optional': False}, {'name': 'color', 'order': 7, 'description': '', 'type': 'Color', 'optional': False}, {'name': 'derivation_change_deviation', 'order': 3, 'description': '', 'type': 'float', 'optional': False}, {'name': 'derivation_change_frequency', 'order': 2, 'description': '', 'type': 'float', 'optional': False}, {'name': 'light_intensity_to_size_coefficient', 'order': 6,",
    "metadata": {
      "class_name": "LuaBurnerPrototype",
      "attribute_name": "light_flicker"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurnerPrototype.light_flicker",
    "content": "{'name': 'light_intensity_to_size_coefficient', 'order': 6, 'description': '', 'type': 'float', 'optional': False}, {'name': 'maximum_intensity', 'order': 1, 'description': '', 'type': 'float', 'optional': False}, {'name': 'minimum_intensity', 'order': 0, 'description': '', 'type': 'float', 'optional': False}, {'name': 'minimum_light_size', 'order': 5, 'description': '', 'type': 'float', 'optional': False}]}",
    "metadata": {
      "class_name": "LuaBurnerPrototype",
      "attribute_name": "light_flicker"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurnerPrototype.light_flicker",
    "content": "Description: The light flicker definition for this burner prototype.",
    "metadata": {
      "class_name": "LuaBurnerPrototype",
      "attribute_name": "light_flicker"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurnerPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaBurnerPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurnerPrototype.render_no_network_icon",
    "content": "Attribute: render_no_network_icon \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaBurnerPrototype",
      "attribute_name": "render_no_network_icon"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurnerPrototype.render_no_power_icon",
    "content": "Attribute: render_no_power_icon \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaBurnerPrototype",
      "attribute_name": "render_no_power_icon"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurnerPrototype.smoke",
    "content": "Attribute: smoke [Optional]\nRead_type: {'complex_type': 'array', 'value': 'SmokeSource'}\n\nDescription: The smoke sources for this burner prototype.\n",
    "metadata": {
      "class_name": "LuaBurnerPrototype",
      "attribute_name": "smoke"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurnerPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaBurnerPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaBurnerUsagePrototype",
    "content": "Class: LuaBurnerUsagePrototype\nDescription: Description of burner usage.",
    "metadata": {
      "class_name": "LuaBurnerUsagePrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurnerUsagePrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaBurnerUsagePrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaBurnerUsagePrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaBurnerUsagePrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaCargoLandingPadControlBehavior",
    "content": "Class: LuaCargoLandingPadControlBehavior\nDescription: Control behavior for cargo landing pad.",
    "metadata": {
      "class_name": "LuaCargoLandingPadControlBehavior",
      "parent_class": "LuaControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCargoLandingPadControlBehavior.circuit_exclusive_mode_of_operation",
    "content": "Attribute: circuit_exclusive_mode_of_operation \nRead_type: defines.control_behavior.cargo_landing_pad.exclusive_mode\nWrite_type: defines.control_behavior.cargo_landing_pad.exclusive_mode\nDescription: The circuit mode of operations for the cargo landing pad.",
    "metadata": {
      "class_name": "LuaCargoLandingPadControlBehavior",
      "attribute_name": "circuit_exclusive_mode_of_operation"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCargoLandingPadControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaCargoLandingPadControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCargoLandingPadControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaCargoLandingPadControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaChunkIterator",
    "content": "Class: LuaChunkIterator\nDescription: A chunk iterator can be used for iterating chunks coordinates of a surface.\n\nThe returned type is a [ChunkPositionAndArea](runtime:ChunkPositionAndArea) containing the chunk coordinates and its area.",
    "metadata": {
      "class_name": "LuaChunkIterator",
      "parent_class": null
    }
  },
  {
    "type": "attribute",
    "name": "LuaChunkIterator.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaChunkIterator",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaChunkIterator.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaChunkIterator",
      "attribute_name": "valid"
    }
  },
  {
    "type": "operator",
    "name": "LuaChunkIterator.call",
    "content": "Operator: call \nRead_type: None\n\nDescription: Gets the next chunk position if the iterator is not yet done and increments the it.\n",
    "metadata": {
      "class_name": "LuaChunkIterator",
      "operator_name": "call"
    }
  },
  {
    "type": "class",
    "name": "LuaCircuitNetwork",
    "content": "Class: LuaCircuitNetwork\nDescription: A circuit network associated with a given entity, connector, and wire type.",
    "metadata": {
      "class_name": "LuaCircuitNetwork",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaCircuitNetwork.get_signal",
    "content": "Method: LuaCircuitNetwork.get_signal\nDescription: \n\nParameters:\n- signal (SignalID): The signal to read.\n\nReturns:\n- int: The current value of the signal.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaCircuitNetwork",
      "method_name": "get_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCircuitNetwork.connected_circuit_count",
    "content": "Attribute: connected_circuit_count \nRead_type: uint\n\nDescription: The number of circuits connected to this network.\n",
    "metadata": {
      "class_name": "LuaCircuitNetwork",
      "attribute_name": "connected_circuit_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCircuitNetwork.entity",
    "content": "Attribute: entity \nRead_type: LuaEntity\n\nDescription: The entity this circuit network reference is associated with.\n",
    "metadata": {
      "class_name": "LuaCircuitNetwork",
      "attribute_name": "entity"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCircuitNetwork.network_id",
    "content": "Attribute: network_id \nRead_type: uint\n\nDescription: The circuit networks ID.\n",
    "metadata": {
      "class_name": "LuaCircuitNetwork",
      "attribute_name": "network_id"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCircuitNetwork.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaCircuitNetwork",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCircuitNetwork.signals",
    "content": "Attribute: signals [Optional]\nRead_type: {'complex_type': 'array', 'value': 'Signal'}\n\nDescription: The circuit network signals last tick. `nil` if there were no signals last tick.\n",
    "metadata": {
      "class_name": "LuaCircuitNetwork",
      "attribute_name": "signals"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCircuitNetwork.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaCircuitNetwork",
      "attribute_name": "valid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCircuitNetwork.wire_connector_id",
    "content": "Attribute: wire_connector_id \nRead_type: defines.wire_connector_id\n\nDescription: Wire connector ID on associated entity this network was gotten from.\n",
    "metadata": {
      "class_name": "LuaCircuitNetwork",
      "attribute_name": "wire_connector_id"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCircuitNetwork.wire_type",
    "content": "Attribute: wire_type \nRead_type: defines.wire_type\n\nDescription: The wire type this network is associated with.\n",
    "metadata": {
      "class_name": "LuaCircuitNetwork",
      "attribute_name": "wire_type"
    }
  },
  {
    "type": "class",
    "name": "LuaCollisionLayerPrototype",
    "content": "Class: LuaCollisionLayerPrototype\nDescription: Prototype of a collision layer.",
    "metadata": {
      "class_name": "LuaCollisionLayerPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCollisionLayerPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaCollisionLayerPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCollisionLayerPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaCollisionLayerPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaCombinatorControlBehavior",
    "content": "Class: LuaCombinatorControlBehavior\nDescription: ",
    "metadata": {
      "class_name": "LuaCombinatorControlBehavior",
      "parent_class": "LuaControlBehavior"
    }
  },
  {
    "type": "method",
    "name": "LuaCombinatorControlBehavior.get_signal_last_tick",
    "content": "Method: LuaCombinatorControlBehavior.get_signal_last_tick\nDescription: Gets the value of a specific signal sent by this combinator behavior last tick or `nil` if the signal didn't exist.\n\nParameters:\n- signal (SignalID): The signal to get\n\nReturns:\n- int: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaCombinatorControlBehavior",
      "method_name": "get_signal_last_tick"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCombinatorControlBehavior.signals_last_tick",
    "content": "Attribute: signals_last_tick \nRead_type: {'complex_type': 'array', 'value': 'Signal'}\n\nDescription: The circuit network signals sent by this combinator last tick.\n",
    "metadata": {
      "class_name": "LuaCombinatorControlBehavior",
      "attribute_name": "signals_last_tick"
    }
  },
  {
    "type": "class",
    "name": "LuaCommandProcessor",
    "content": "Class: LuaCommandProcessor\nDescription: Allows for the registration of custom console commands through the global object named `commands`. Similarly to [event subscriptions](runtime:LuaBootstrap::on_event), these don't persist through a save-and-load cycle.",
    "metadata": {
      "class_name": "LuaCommandProcessor",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaCommandProcessor.add_command",
    "content": "Method: LuaCommandProcessor.add_command\nDescription: Add a custom console command.\n\nTrying to add a command with the `name` of a game command or the name of a custom command that is already in use will result in an error.\n\nThis example command will register a custom event called `print_tick` that prints the current tick to either the player issuing the command or to everyone on the server, depending on the command parameter:",
    "metadata": {
      "class_name": "LuaCommandProcessor",
      "method_name": "add_command"
    }
  },
  {
    "type": "method",
    "name": "LuaCommandProcessor.add_command",
    "content": "```\ncommands.add_command(\"print_tick\", nil, function(command)\n  if command.player_index ~= nil and command.parameter == \"me\" then\n    game.get_player(command.player_index).print(command.tick)\n  else\n    game.print(command.tick)\n  end\nend)\n```",
    "metadata": {
      "class_name": "LuaCommandProcessor",
      "method_name": "add_command"
    }
  },
  {
    "type": "method",
    "name": "LuaCommandProcessor.add_command",
    "content": "This shows the usage of the table that gets passed to any function handling a custom command. This specific example makes use of the `tick` and the optional `player_index` and `parameter` fields. The user is supposed to either call it without any parameter (`\"/print_tick\"`) or with the `\"me\"` parameter (`\"/print_tick me\"`).",
    "metadata": {
      "class_name": "LuaCommandProcessor",
      "method_name": "add_command"
    }
  },
  {
    "type": "method",
    "name": "LuaCommandProcessor.add_command",
    "content": "Parameters:\n- function ({'complex_type': 'function', 'parameters': ['CustomCommandData']}): The function that will be called when this command is invoked.\n- help (LocalisedString): The localised help message. It will be shown to players using the `/help` command.\n- name (string): The desired name of the command (case sensitive).\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaCommandProcessor",
      "method_name": "add_command"
    }
  },
  {
    "type": "method",
    "name": "LuaCommandProcessor.remove_command",
    "content": "Method: LuaCommandProcessor.remove_command\nDescription: Remove a custom console command.\n\nParameters:\n- name (string): The name of the command to remove (case sensitive).\n\nReturns:\n- boolean: Whether the command was successfully removed. Returns `false` if the command didn't exist.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaCommandProcessor",
      "method_name": "remove_command"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCommandProcessor.commands",
    "content": "Attribute: commands \nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'LocalisedString'}\n\nDescription: Lists the custom commands registered by scripts through `LuaCommandProcessor`.\n",
    "metadata": {
      "class_name": "LuaCommandProcessor",
      "attribute_name": "commands"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCommandProcessor.game_commands",
    "content": "Attribute: game_commands \nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'LocalisedString'}\n\nDescription: Lists the built-in commands of the core game. The [wiki](https://wiki.factorio.com/Console) has an overview of these.\n",
    "metadata": {
      "class_name": "LuaCommandProcessor",
      "attribute_name": "game_commands"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCommandProcessor.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaCommandProcessor",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "class",
    "name": "LuaCommandable",
    "content": "Class: LuaCommandable\nDescription: AI object which can be ordered commands. This can represent a UnitGroup (a set of multiple commandables) or can be a single Unit, SpiderUnit or other commandable entity.",
    "metadata": {
      "class_name": "LuaCommandable",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaCommandable.add_member",
    "content": "Method: LuaCommandable.add_member\nDescription: Adds a member to this UnitGroup. Has the same effect as setting defines.command.group command on the member to join the group.\n\nThe member must have the same force be on the same surface as the group.\n\nParameters:\n- member ({'complex_type': 'union', 'options': ['LuaCommandable', 'LuaEntity'], 'full_format': False}): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaCommandable",
      "method_name": "add_member"
    }
  },
  {
    "type": "method",
    "name": "LuaCommandable.destroy",
    "content": "Method: LuaCommandable.destroy\nDescription: Destroys this commandable. If it is a unit group, members will not be destroyed, they will be merely unlinked from the group.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaCommandable",
      "method_name": "destroy"
    }
  },
  {
    "type": "method",
    "name": "LuaCommandable.release_from_spawner",
    "content": "Method: LuaCommandable.release_from_spawner\nDescription: Release the commandable from the spawner. This allows the spawner to continue spawning additional units.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaCommandable",
      "method_name": "release_from_spawner"
    }
  },
  {
    "type": "method",
    "name": "LuaCommandable.set_autonomous",
    "content": "Method: LuaCommandable.set_autonomous\nDescription: Make this group autonomous. Autonomous groups will automatically attack polluted areas. Autonomous groups aren't considered to be [script-driven](runtime:LuaCommandable::is_script_driven).\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaCommandable",
      "method_name": "set_autonomous"
    }
  },
  {
    "type": "method",
    "name": "LuaCommandable.set_command",
    "content": "Method: LuaCommandable.set_command\nDescription: Give this commandable a command.\n\nParameters:\n- command (Command): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaCommandable",
      "method_name": "set_command"
    }
  },
  {
    "type": "method",
    "name": "LuaCommandable.set_distraction_command",
    "content": "Method: LuaCommandable.set_distraction_command\nDescription: Give this commandable a distraction command.\n\nParameters:\n- command (Command): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaCommandable",
      "method_name": "set_distraction_command"
    }
  },
  {
    "type": "method",
    "name": "LuaCommandable.start_moving",
    "content": "Method: LuaCommandable.start_moving\nDescription: Make the group start moving even if some of its members haven't yet arrived.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaCommandable",
      "method_name": "start_moving"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCommandable.command",
    "content": "Attribute: command [Optional]\nRead_type: Command\n\nDescription: The command of this commandable, if any.\n",
    "metadata": {
      "class_name": "LuaCommandable",
      "attribute_name": "command"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCommandable.commandable_members",
    "content": "Attribute: commandable_members \nRead_type: {'complex_type': 'array', 'value': 'LuaCommandable'}\n\nDescription: Non recursively returns all members of this unit group.\n",
    "metadata": {
      "class_name": "LuaCommandable",
      "attribute_name": "commandable_members"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCommandable.distraction_command",
    "content": "Attribute: distraction_command [Optional]\nRead_type: Command\n\nDescription: The distraction command of this commandable, if any.\n",
    "metadata": {
      "class_name": "LuaCommandable",
      "attribute_name": "distraction_command"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCommandable.entity",
    "content": "Attribute: entity \nRead_type: LuaEntity\n\nDescription: Returns entity object for this commandable.\n",
    "metadata": {
      "class_name": "LuaCommandable",
      "attribute_name": "entity"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCommandable.force",
    "content": "Attribute: force \nRead_type: LuaForce\n\nDescription: The force of this commandable.\n",
    "metadata": {
      "class_name": "LuaCommandable",
      "attribute_name": "force"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCommandable.has_command",
    "content": "Attribute: has_command \nRead_type: boolean\n\nDescription: If this commandable has a command assigned.\n",
    "metadata": {
      "class_name": "LuaCommandable",
      "attribute_name": "has_command"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCommandable.is_entity",
    "content": "Attribute: is_entity \nRead_type: boolean\n\nDescription: If this commandable is Entity.\n",
    "metadata": {
      "class_name": "LuaCommandable",
      "attribute_name": "is_entity"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCommandable.is_script_driven",
    "content": "Attribute: is_script_driven \nRead_type: boolean\n\nDescription: Whether this unit group is controlled by a script or by the game engine. This can be changed using [LuaCommandable::set_autonomous](runtime:LuaCommandable::set_autonomous).\n",
    "metadata": {
      "class_name": "LuaCommandable",
      "attribute_name": "is_script_driven"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCommandable.is_unit_group",
    "content": "Attribute: is_unit_group \nRead_type: boolean\n\nDescription: If this commandable is UnitGroup.\n",
    "metadata": {
      "class_name": "LuaCommandable",
      "attribute_name": "is_unit_group"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCommandable.members",
    "content": "Attribute: members \nRead_type: {'complex_type': 'array', 'value': 'LuaEntity'}\n\nDescription: All entity members of this unit group, recursive (if unit group is member of this unit group, its members will be returned here).\n",
    "metadata": {
      "class_name": "LuaCommandable",
      "attribute_name": "members"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCommandable.moving_state",
    "content": "Attribute: moving_state \nRead_type: defines.moving_state\n\nDescription: Current moving state of the commandable's behavior\n",
    "metadata": {
      "class_name": "LuaCommandable",
      "attribute_name": "moving_state"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCommandable.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaCommandable",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCommandable.parent_group",
    "content": "Attribute: parent_group [Optional]\nRead_type: LuaCommandable\n\nDescription: The unit group this commandable is a member of, if any.\n",
    "metadata": {
      "class_name": "LuaCommandable",
      "attribute_name": "parent_group"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCommandable.position",
    "content": "Attribute: position \nRead_type: MapPosition\n\nDescription: Current position of this commandable.\n\nIf commandable is a UnitGroup, this can have different meanings depending on the group state. When the group is gathering, the position is the place of gathering. When the group is moving, the position is the expected position of its members along the path. When the group is attacking, it is the average position of its members.",
    "metadata": {
      "class_name": "LuaCommandable",
      "attribute_name": "position"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCommandable.spawner",
    "content": "Attribute: spawner [Optional]\nRead_type: LuaEntity\n\nDescription: The spawner associated with this commandable, if any.\n",
    "metadata": {
      "class_name": "LuaCommandable",
      "attribute_name": "spawner"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCommandable.state",
    "content": "Attribute: state \nRead_type: defines.group_state\n\nDescription: Whether this group is gathering, moving or attacking.\n",
    "metadata": {
      "class_name": "LuaCommandable",
      "attribute_name": "state"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCommandable.surface",
    "content": "Attribute: surface \nRead_type: LuaSurface\n\nDescription: Surface this commandable is on.\n",
    "metadata": {
      "class_name": "LuaCommandable",
      "attribute_name": "surface"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCommandable.unique_id",
    "content": "Attribute: unique_id \nRead_type: uint\n\nDescription: Unique identifier of this commandable.\n",
    "metadata": {
      "class_name": "LuaCommandable",
      "attribute_name": "unique_id"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCommandable.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaCommandable",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaConstantCombinatorControlBehavior",
    "content": "Class: LuaConstantCombinatorControlBehavior\nDescription: Control behavior for constant combinators.",
    "metadata": {
      "class_name": "LuaConstantCombinatorControlBehavior",
      "parent_class": "LuaControlBehavior"
    }
  },
  {
    "type": "method",
    "name": "LuaConstantCombinatorControlBehavior.add_section",
    "content": "Method: LuaConstantCombinatorControlBehavior.add_section\nDescription: Adds a new logistic section to this constant combinator if possible.\n\nParameters:\n- group (string)[Optional]: The group to assign this section to.\n\nReturns:\n- LuaLogisticSection: Logistic section if added.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaConstantCombinatorControlBehavior",
      "method_name": "add_section"
    }
  },
  {
    "type": "method",
    "name": "LuaConstantCombinatorControlBehavior.get_section",
    "content": "Method: LuaConstantCombinatorControlBehavior.get_section\nDescription: Gets section on the selected index, if it exists.\n\nParameters:\n- section_index (uint): Index of the section.\n\nReturns:\n- LuaLogisticSection: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaConstantCombinatorControlBehavior",
      "method_name": "get_section"
    }
  },
  {
    "type": "method",
    "name": "LuaConstantCombinatorControlBehavior.remove_section",
    "content": "Method: LuaConstantCombinatorControlBehavior.remove_section\nDescription: Removes the given logistic section if possible. Removal may fail if the section index is out of range or the section is not [manual](runtime:LuaLogisticSection::is_manual).\n\nParameters:\n- section_index (uint): Index of the section.\n\nReturns:\n- boolean: Whether section was removed.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaConstantCombinatorControlBehavior",
      "method_name": "remove_section"
    }
  },
  {
    "type": "attribute",
    "name": "LuaConstantCombinatorControlBehavior.enabled",
    "content": "Attribute: enabled \nRead_type: boolean\nWrite_type: boolean\nDescription: Turns this constant combinator on and off.\n",
    "metadata": {
      "class_name": "LuaConstantCombinatorControlBehavior",
      "attribute_name": "enabled"
    }
  },
  {
    "type": "attribute",
    "name": "LuaConstantCombinatorControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaConstantCombinatorControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaConstantCombinatorControlBehavior.sections",
    "content": "Attribute: sections \nRead_type: {'complex_type': 'array', 'value': 'LuaLogisticSection'}\n\nDescription: All logistic sections of this constant combinator.\n",
    "metadata": {
      "class_name": "LuaConstantCombinatorControlBehavior",
      "attribute_name": "sections"
    }
  },
  {
    "type": "attribute",
    "name": "LuaConstantCombinatorControlBehavior.sections_count",
    "content": "Attribute: sections_count \nRead_type: uint\n\nDescription: Amount of logistic sections this constant combinator has.\n",
    "metadata": {
      "class_name": "LuaConstantCombinatorControlBehavior",
      "attribute_name": "sections_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaConstantCombinatorControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaConstantCombinatorControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaContainerControlBehavior",
    "content": "Class: LuaContainerControlBehavior\nDescription: Control behavior for container entities.",
    "metadata": {
      "class_name": "LuaContainerControlBehavior",
      "parent_class": "LuaControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaContainerControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaContainerControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaContainerControlBehavior.read_contents",
    "content": "Attribute: read_contents \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if this container is sending its content to a circuit network\n",
    "metadata": {
      "class_name": "LuaContainerControlBehavior",
      "attribute_name": "read_contents"
    }
  },
  {
    "type": "attribute",
    "name": "LuaContainerControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaContainerControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaControl",
    "content": "Class: LuaControl\nDescription: This is an abstract base class containing the common functionality between [LuaPlayer](runtime:LuaPlayer) and entities (see [LuaEntity](runtime:LuaEntity)). When accessing player-related functions through a [LuaEntity](runtime:LuaEntity), it must refer to a character entity.",
    "metadata": {
      "class_name": "LuaControl",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaControl.begin_crafting",
    "content": "Method: LuaControl.begin_crafting\nDescription: Begins crafting the given count of the given recipe.\n\nParameters:\n- count (uint): The count to craft.\n- recipe (RecipeID): The recipe to craft.\n- silent (boolean)[Optional]: If false and the recipe can't be crafted the requested number of times printing the failure is skipped.\n\nReturns:\n- uint: The count that was actually started crafting.",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "begin_crafting"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.begin_crafting",
    "content": "Returns:\n- uint: The count that was actually started crafting.\n\nRaises:\n- on_player_main_inventory_changed: Raised if crafting was able to be started.\n- on_pre_player_crafted_item: Raised if crafting was able to be started.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "begin_crafting"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.can_insert",
    "content": "Method: LuaControl.can_insert\nDescription: Can at least some items be inserted?\n\nParameters:\n- items (ItemStackIdentification): Items that would be inserted.\n\nReturns:\n- boolean: `true` if at least a part of the given items could be inserted into this inventory.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "can_insert"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.can_reach_entity",
    "content": "Method: LuaControl.can_reach_entity\nDescription: Can a given entity be opened or accessed?\n\nParameters:\n- entity (LuaEntity): \n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "can_reach_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.cancel_crafting",
    "content": "Method: LuaControl.cancel_crafting\nDescription: Cancels crafting the given count of the given crafting queue index.\n\nParameters:\n- count (uint): The count to cancel crafting.\n- index (uint): The crafting queue index.\n\nRaises:\n- on_player_cancelled_crafting: Raised if crafting was able to be cancelled.\n- on_player_main_inventory_changed: Raised if crafting was able to be cancelled.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "cancel_crafting"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.clear_gui_arrow",
    "content": "Method: LuaControl.clear_gui_arrow\nDescription: Removes the arrow created by `set_gui_arrow`.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "clear_gui_arrow"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.clear_items_inside",
    "content": "Method: LuaControl.clear_items_inside\nDescription: Remove all items from this entity.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "clear_items_inside"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.clear_selected_entity",
    "content": "Method: LuaControl.clear_selected_entity\nDescription: Unselect any selected entity.\n\nRaises:\n- on_selected_entity_changed: Raised if there is a currently selected entity.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "clear_selected_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.disable_flashlight",
    "content": "Method: LuaControl.disable_flashlight\nDescription: Disable the flashlight.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "disable_flashlight"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.enable_flashlight",
    "content": "Method: LuaControl.enable_flashlight\nDescription: Enable the flashlight.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "enable_flashlight"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.get_craftable_count",
    "content": "Method: LuaControl.get_craftable_count\nDescription: Gets the count of the given recipe that can be crafted.\n\nParameters:\n- recipe (RecipeID): The recipe.\n\nReturns:\n- uint: The count that can be crafted.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "get_craftable_count"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.get_inventory",
    "content": "Method: LuaControl.get_inventory\nDescription: Get an inventory belonging to this entity. This can be either the \"main\" inventory or some auxiliary one, like the module slots or logistic trash slots.",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "get_inventory"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.get_inventory",
    "content": "A given [defines.inventory](runtime:defines.inventory) is only meaningful for the corresponding LuaObject type. EG: get_inventory(defines.inventory.character_main) is only meaningful if 'this' is a player character. You may get a value back but if the type of 'this' isn't the type referred to by the [defines.inventory](runtime:defines.inventory) it's almost guaranteed to not be the inventory asked for.\n\nParameters:\n- inventory (defines.inventory):",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "get_inventory"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.get_inventory",
    "content": "Parameters:\n- inventory (defines.inventory): \n\nReturns:\n- LuaInventory: The inventory or `nil` if none with the given index was found.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "get_inventory"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.get_item_count",
    "content": "Method: LuaControl.get_item_count\nDescription: Get the number of all or some items in this entity.\n\nParameters:\n- item (ItemFilter)[Optional]: The item to count. If not specified, count all items.\n\nReturns:\n- uint: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "get_item_count"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.get_main_inventory",
    "content": "Method: LuaControl.get_main_inventory\nDescription: Gets the main inventory for this character or player if this is a character or player.\n\nReturns:\n- LuaInventory: The inventory or `nil` if this entity is not a character or player.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "get_main_inventory"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.get_max_inventory_index",
    "content": "Method: LuaControl.get_max_inventory_index\nDescription: The highest index of all inventories this entity can use. Allows iteration over all of them if desired.\n\nReturns:\n- defines.inventory: \n\nExamples:\n```\nfor k = 1, entity.get_max_inventory_index() do [...] end\n```\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "get_max_inventory_index"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.get_requester_point",
    "content": "Method: LuaControl.get_requester_point\nDescription: Gets the requester logistic point for this entity if it has one.\n\nReturns:\n- LuaLogisticPoint: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "get_requester_point"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.has_items_inside",
    "content": "Method: LuaControl.has_items_inside\nDescription: Does this entity have any item inside it?\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "has_items_inside"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.insert",
    "content": "Method: LuaControl.insert\nDescription: Insert items into this entity. This works the same way as inserters or shift-clicking: the \"best\" inventory is chosen automatically.\n\nParameters:\n- items (ItemStackIdentification): The items to insert.\n\nReturns:\n- uint: The number of items that were actually inserted.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "insert"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.is_cursor_blueprint",
    "content": "Method: LuaControl.is_cursor_blueprint\nDescription: Returns whether the player is holding a blueprint. This takes both blueprint items as well as blueprint records from the blueprint library into account.\n\nNote that both this method refers to the currently selected blueprint, which means that a blueprint book with a selected blueprint will return the information as well.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "is_cursor_blueprint"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.is_cursor_empty",
    "content": "Method: LuaControl.is_cursor_empty\nDescription: Returns whether the player is holding something in the cursor. Takes into account items from the blueprint library, as well as items and ghost cursor.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "is_cursor_empty"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.is_flashlight_enabled",
    "content": "Method: LuaControl.is_flashlight_enabled\nDescription: Is the flashlight enabled.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "is_flashlight_enabled"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.is_player",
    "content": "Method: LuaControl.is_player\nDescription: When `true` control adapter is a LuaPlayer object, `false` for entities including characters with players.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "is_player"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.mine_entity",
    "content": "Method: LuaControl.mine_entity\nDescription: Mines the given entity as if this player (or character) mined it.\n\nParameters:\n- entity (LuaEntity): The entity to mine\n- force (boolean)[Optional]: Forces mining the entity even if the items can't fit in the player.\n\nReturns:\n- boolean: Whether the mining succeeded.\n\nRaises:\n- on_player_mined_entity: Raised if mining is successful.\n- on_player_mined_item: Raised if mining is successful.\n- on_pre_player_mined_item: Raised if mining is possible.",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "mine_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.mine_entity",
    "content": "Format:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "mine_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.mine_tile",
    "content": "Method: LuaControl.mine_tile\nDescription: Mines the given tile as if this player (or character) mined it.\n\nParameters:\n- tile (LuaTile): The tile to mine.\n\nReturns:\n- boolean: Whether the mining succeeded.\n\nRaises:\n- on_player_mined_item: Raised if mining is successful.\n- on_player_mined_tile: Raised if mining is successful.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "mine_tile"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.open_technology_gui",
    "content": "Method: LuaControl.open_technology_gui\nDescription: Open the technology GUI and select a given technology.\n\nParameters:\n- technology (TechnologyID)[Optional]: The technology to select after opening the GUI.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "open_technology_gui"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.remove_item",
    "content": "Method: LuaControl.remove_item\nDescription: Remove items from this entity.\n\nParameters:\n- items (ItemStackIdentification): The items to remove.\n\nReturns:\n- uint: The number of items that were actually removed.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "remove_item"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.set_driving",
    "content": "Method: LuaControl.set_driving\nDescription: Sets if this character or player is driving. Returns if the player or character is still driving.\n\nParameters:\n- driving (boolean): True for enter-vehicle, false for leave.\n- force (boolean)[Optional]: If true, the player will be ejected and left at the position of the car if normal \"leave\" is not possible.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "set_driving"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.set_gui_arrow",
    "content": "Method: LuaControl.set_gui_arrow\nDescription: Create an arrow which points at this entity. This is used in the tutorial. For examples, see `control.lua` in the campaign missions.\n\nParameters:\n- margin (uint): \n- type (GuiArrowType): Where to point to. This field determines what other fields are mandatory.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "set_gui_arrow"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.set_gui_arrow",
    "content": "Variant Parameter Groups:\n- crafting_queue: \n- crafting_queueindex (uint): Index in the crafting queue to point to.\n- entity: \n- entity (LuaEntity): \n- item_stack: \n- inventory_index (defines.inventory): Which inventory the stack is in.\n- item_stack_index (uint): Which stack to point to.",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "set_gui_arrow"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.set_gui_arrow",
    "content": "- item_stack_index (uint): Which stack to point to.\n- source ({'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'player'}, {'complex_type': 'literal', 'value': 'target'}, {'complex_type': 'literal', 'value': 'player-quickbar'}], 'full_format': False}): \n- position: \n- position (MapPosition):",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "set_gui_arrow"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.teleport",
    "content": "Method: LuaControl.teleport\nDescription: Teleport the entity to a given position, possibly on another surface.\n\nSome entities may not be teleported. For instance, transport belts won't allow teleportation and this method will always return `false` when used on any such entity.\n\nYou can also pass 1 or 2 numbers as the parameters and they will be used as relative teleport coordinates `'teleport(0, 1)'` to move the entity 1 tile positive y. `'teleport(4)'` to move the entity 4 tiles to the positive x.",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "teleport"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.teleport",
    "content": "`script_raised_teleported` will not be raised if teleporting a player with no character.",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "teleport"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.teleport",
    "content": "Parameters:\n- build_check_type (defines.build_check_type)[Optional]: The build check type done when teleporting to the destination. Defaults to `script`. This is ignored when teleporting between surfaces.\n- position (MapPosition): Where to teleport to.\n- raise_teleported (boolean)[Optional]: If true, [defines.events.script_raised_teleported](runtime:defines.events.script_raised_teleported) will be fired on successful entity teleportation.",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "teleport"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.teleport",
    "content": "- snap_to_grid (boolean)[Optional]: If false the exact position given is used to instead of snapping to the normal entity grid. This only applies if the entity normally snaps to the grid.\n- surface (SurfaceIdentification)[Optional]: Surface to teleport to. If not given, will teleport to the entity's current surface. Only players, cars, and spidertrons can be teleported cross-surface.",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "teleport"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.teleport",
    "content": "Returns:\n- boolean: `true` if the entity was successfully teleported.\n\nRaises:\n- on_player_changed_position: Raised if the teleported entity is a player character.\n- script_raised_teleported: Raised if the `raise_teleported` flag was set and the entity was successfully teleported.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "teleport"
    }
  },
  {
    "type": "method",
    "name": "LuaControl.update_selected_entity",
    "content": "Method: LuaControl.update_selected_entity\nDescription: Select an entity, as if by hovering the mouse above it.\n\nParameters:\n- position (MapPosition): Position of the entity to select.\n\nRaises:\n- on_selected_entity_changed: Raised if there is an entity at the given position to select.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControl",
      "method_name": "update_selected_entity"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.build_distance",
    "content": "Attribute: build_distance \nRead_type: uint\n\nDescription: The build distance of this character or max uint when not a character or player connected to a character.\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "build_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.cargo_pod",
    "content": "Attribute: cargo_pod [Optional]\nRead_type: LuaEntity\n\nDescription: The cargo pod the player is currently sitting in or the cargo pod attached to this rocket silo.\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "cargo_pod"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.character_additional_mining_categories",
    "content": "Attribute: character_additional_mining_categories \nRead_type: {'complex_type': 'array', 'value': 'string'}\nWrite_type: {\"complex_type\": \"array\", \"value\": \"string\"}\nDescription: When called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "character_additional_mining_categories"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.character_build_distance_bonus",
    "content": "Attribute: character_build_distance_bonus \nRead_type: uint\nWrite_type: uint\nDescription: When called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "character_build_distance_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.character_crafting_speed_modifier",
    "content": "Attribute: character_crafting_speed_modifier \nRead_type: double\nWrite_type: double\nDescription: When called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "character_crafting_speed_modifier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.character_health_bonus",
    "content": "Attribute: character_health_bonus \nRead_type: float\nWrite_type: float\nDescription: When called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "character_health_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.character_inventory_slots_bonus",
    "content": "Attribute: character_inventory_slots_bonus \nRead_type: uint\nWrite_type: uint\nDescription: When called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "character_inventory_slots_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.character_item_drop_distance_bonus",
    "content": "Attribute: character_item_drop_distance_bonus \nRead_type: uint\nWrite_type: uint\nDescription: When called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "character_item_drop_distance_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.character_item_pickup_distance_bonus",
    "content": "Attribute: character_item_pickup_distance_bonus \nRead_type: uint\nWrite_type: uint\nDescription: When called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "character_item_pickup_distance_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.character_loot_pickup_distance_bonus",
    "content": "Attribute: character_loot_pickup_distance_bonus \nRead_type: uint\nWrite_type: uint\nDescription: When called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "character_loot_pickup_distance_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.character_maximum_following_robot_count_bonus",
    "content": "Attribute: character_maximum_following_robot_count_bonus \nRead_type: uint\nWrite_type: uint\nDescription: When called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "character_maximum_following_robot_count_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.character_mining_progress",
    "content": "Attribute: character_mining_progress \nRead_type: double\n\nDescription: The current mining progress between 0 and 1 of this character, or 0 if they aren't mining.\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "character_mining_progress"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.character_mining_speed_modifier",
    "content": "Attribute: character_mining_speed_modifier \nRead_type: double\nWrite_type: double\nDescription: When called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "character_mining_speed_modifier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.character_reach_distance_bonus",
    "content": "Attribute: character_reach_distance_bonus \nRead_type: uint\nWrite_type: uint\nDescription: When called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "character_reach_distance_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.character_resource_reach_distance_bonus",
    "content": "Attribute: character_resource_reach_distance_bonus \nRead_type: uint\nWrite_type: uint\nDescription: When called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "character_resource_reach_distance_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.character_running_speed",
    "content": "Attribute: character_running_speed \nRead_type: double\n\nDescription: The current movement speed of this character, including effects from exoskeletons, tiles, stickers and shooting.\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "character_running_speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.character_running_speed_modifier",
    "content": "Attribute: character_running_speed_modifier \nRead_type: double\nWrite_type: double\nDescription: Modifies the running speed of this character by the given value as a percentage. Setting the running modifier to `0.5` makes the character run 50% faster. The minimum value of `-1` reduces the movement speed by 100%, resulting in a speed of `0`.\n\nWhen called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "character_running_speed_modifier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.character_trash_slot_count_bonus",
    "content": "Attribute: character_trash_slot_count_bonus \nRead_type: uint\nWrite_type: uint\nDescription: When called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "character_trash_slot_count_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.cheat_mode",
    "content": "Attribute: cheat_mode \nRead_type: boolean\nWrite_type: boolean\nDescription: When `true` hand crafting is free and instant.\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "cheat_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.crafting_queue",
    "content": "Attribute: crafting_queue \nRead_type: {'complex_type': 'array', 'value': 'CraftingQueueItem'}\n\nDescription: The current crafting queue items.\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "crafting_queue"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.crafting_queue_progress",
    "content": "Attribute: crafting_queue_progress \nRead_type: double\nWrite_type: double\nDescription: The crafting queue progress in the range `[0-1]`. `0` when no recipe is being crafted.\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "crafting_queue_progress"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.crafting_queue_size",
    "content": "Attribute: crafting_queue_size \nRead_type: uint\n\nDescription: Size of the crafting queue.\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "crafting_queue_size"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.cursor_ghost",
    "content": "Attribute: cursor_ghost [Optional]\nRead_type: ItemIDAndQualityIDPair\nWrite_type: ItemWithQualityID\nDescription: The ghost prototype in the player's cursor.\n\nItems in the cursor stack will take priority over the cursor ghost.\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "cursor_ghost"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.cursor_record",
    "content": "Attribute: cursor_record [Optional]\nRead_type: LuaRecord\n\nDescription: The blueprint record in the player's cursor.\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "cursor_record"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.cursor_stack",
    "content": "Attribute: cursor_stack [Optional]\nRead_type: LuaItemStack\n\nDescription: The player's cursor stack. `nil` if the player controller is a spectator.\nExamples: [\"```\\n-- Even though this property is marked as read-only, it returns a LuaItemStack,\\n-- meaning it can be manipulated like so:\\nplayer.cursor_stack.clear()\\n```\"]",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "cursor_stack"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.driving",
    "content": "Attribute: driving \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if the player is in a vehicle. Writing to this attribute puts the player in or out of a vehicle.\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "driving"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.drop_item_distance",
    "content": "Attribute: drop_item_distance \nRead_type: uint\n\nDescription: The item drop distance of this character or max uint when not a character or player connected to a character.\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "drop_item_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.following_robots",
    "content": "Attribute: following_robots \nRead_type: {'complex_type': 'array', 'value': 'LuaEntity'}\n\nDescription: The current combat robots following the character.\n\nWhen called on a [LuaPlayer](runtime:LuaPlayer), it must be associated with a character (see [LuaPlayer::character](runtime:LuaPlayer::character)).",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "following_robots"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.force",
    "content": "Attribute: force \nRead_type: LuaForce\nWrite_type: ForceID\nDescription: The force of this entity. Reading will always give a [LuaForce](runtime:LuaForce), but it is possible to assign either [string](runtime:string), [uint8](runtime:uint8) or [LuaForce](runtime:LuaForce) to this attribute to change the force.",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "force"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.force_index",
    "content": "Attribute: force_index \nRead_type: uint\n\nDescription: Unique [index](runtime:LuaForce::index) (ID) associated with the force of this entity.\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "force_index"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.hub",
    "content": "Attribute: hub [Optional]\nRead_type: LuaEntity\n\nDescription: The space platform hub the player is currently sitting in.\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "hub"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.in_combat",
    "content": "Attribute: in_combat \nRead_type: boolean\n\nDescription: Whether this character entity is in combat.\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "in_combat"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.item_pickup_distance",
    "content": "Attribute: item_pickup_distance \nRead_type: double\n\nDescription: The item pickup distance of this character or max double when not a character or player connected to a character.\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "item_pickup_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.loot_pickup_distance",
    "content": "Attribute: loot_pickup_distance \nRead_type: double\n\nDescription: The loot pickup distance of this character or max double when not a character or player connected to a character.\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "loot_pickup_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.mining_state",
    "content": "Attribute: mining_state \nRead_type: {'complex_type': 'table', 'parameters': [{'name': 'mining', 'order': 0, 'description': 'Whether the player is mining at all.', 'type': 'boolean', 'optional': False}, {'name': 'position', 'order': 1, 'description': 'What location the player is mining. Only relevant if `mining` is `true`.', 'type': 'MapPosition', 'optional': True}]}",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "mining_state"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.mining_state",
    "content": "Write_type: {\"complex_type\": \"table\", \"parameters\": [{\"name\": \"mining\", \"order\": 0, \"description\": \"Whether the player is mining at all.\", \"type\": \"boolean\", \"optional\": false}, {\"name\": \"position\", \"order\": 1, \"description\": \"What location the player is mining. Only relevant if `mining` is `true`.\", \"type\": \"MapPosition\", \"optional\": true}]}\nDescription: Current mining state.",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "mining_state"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.mining_state",
    "content": "When the player isn't mining tiles the player will mine whatever entity is currently selected. See [LuaControl::selected](runtime:LuaControl::selected) and [LuaControl::update_selected_entity](runtime:LuaControl::update_selected_entity).",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "mining_state"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.opened",
    "content": "Attribute: opened [Optional]\nRead_type: {'complex_type': 'union', 'options': ['LuaEntity', 'LuaItemStack', 'LuaEquipment', 'LuaEquipmentGrid', 'LuaPlayer', 'LuaGuiElement', 'LuaInventory', 'LuaLogisticNetwork', 'defines.gui_type'], 'full_format': False}\nWrite_type: {\"complex_type\": \"union\", \"options\": [\"LuaEntity\", \"LuaItemStack\", \"LuaEquipment\", \"LuaEquipmentGrid\", \"LuaPlayer\", \"LuaGuiElement\", \"LuaInventory\", \"LuaLogisticNetwork\", \"defines.gui_type\"], \"full_format\": false}",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "opened"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.opened",
    "content": "Description: The GUI the player currently has open.",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "opened"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.opened",
    "content": "This is the GUI that will asked to close (by firing the [on_gui_closed](runtime:on_gui_closed) event) when the `Esc` or `E` keys are pressed. If this attribute is non-nil, then writing `nil` or a new GUI to it will ask the existing GUI to close.\n\nWrite supports any of the types. Read will return the `entity`, `equipment`, `equipment-grid`, `player`, `element`, `inventory` or `nil`.",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "opened"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.opened_gui_type",
    "content": "Attribute: opened_gui_type [Optional]\nRead_type: defines.gui_type\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "opened_gui_type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.picking_state",
    "content": "Attribute: picking_state \nRead_type: boolean\nWrite_type: boolean\nDescription: Current item-picking state.\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "picking_state"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.position",
    "content": "Attribute: position \nRead_type: MapPosition\n\nDescription: The current position of the entity.\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "position"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.reach_distance",
    "content": "Attribute: reach_distance \nRead_type: uint\n\nDescription: The reach distance of this character or max uint when not a character or player connected to a character.\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "reach_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.repair_state",
    "content": "Attribute: repair_state \nRead_type: {'complex_type': 'table', 'parameters': [{'name': 'position', 'order': 1, 'description': 'The position being repaired', 'type': 'MapPosition', 'optional': False}, {'name': 'repairing', 'order': 0, 'description': 'The current state', 'type': 'boolean', 'optional': False}]}",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "repair_state"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.repair_state",
    "content": "Write_type: {\"complex_type\": \"table\", \"parameters\": [{\"name\": \"position\", \"order\": 1, \"description\": \"The position being repaired\", \"type\": \"MapPosition\", \"optional\": false}, {\"name\": \"repairing\", \"order\": 0, \"description\": \"The current state\", \"type\": \"boolean\", \"optional\": false}]}\nDescription: Current repair state.",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "repair_state"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.resource_reach_distance",
    "content": "Attribute: resource_reach_distance \nRead_type: double\n\nDescription: The resource reach distance of this character or max double when not a character or player connected to a character.\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "resource_reach_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.riding_state",
    "content": "Attribute: riding_state \nRead_type: RidingState\nWrite_type: RidingState\nDescription: Current riding state of this car, or of the car this player is riding in.\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "riding_state"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.selected",
    "content": "Attribute: selected [Optional]\nRead_type: LuaEntity\nWrite_type: LuaEntity\nDescription: The currently selected entity. Assigning an entity will select it if is selectable, otherwise the selection is cleared.\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "selected"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.shooting_state",
    "content": "Attribute: shooting_state \nRead_type: {'complex_type': 'table', 'parameters': [{'name': 'position', 'order': 1, 'description': 'The position being shot at', 'type': 'MapPosition', 'optional': False}, {'name': 'state', 'order': 0, 'description': 'The current state', 'type': 'defines.shooting', 'optional': False}]}",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "shooting_state"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.shooting_state",
    "content": "Write_type: {\"complex_type\": \"table\", \"parameters\": [{\"name\": \"position\", \"order\": 1, \"description\": \"The position being shot at\", \"type\": \"MapPosition\", \"optional\": false}, {\"name\": \"state\", \"order\": 0, \"description\": \"The current state\", \"type\": \"defines.shooting\", \"optional\": false}]}\nDescription: Current shooting state.",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "shooting_state"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.surface",
    "content": "Attribute: surface \nRead_type: LuaSurface\n\nDescription: The surface this entity is currently on.\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "surface"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.surface_index",
    "content": "Attribute: surface_index \nRead_type: uint\n\nDescription: Unique [index](runtime:LuaSurface::index) (ID) associated with the surface this entity is currently on.\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "surface_index"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.vehicle",
    "content": "Attribute: vehicle [Optional]\nRead_type: LuaEntity\n\nDescription: The vehicle the player is currently sitting in.\n",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "vehicle"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.walking_state",
    "content": "Attribute: walking_state \nRead_type: {'complex_type': 'table', 'parameters': [{'name': 'direction', 'order': 1, 'description': 'Direction where the player is walking', 'type': 'defines.direction', 'optional': False}, {'name': 'walking', 'order': 0, 'description': \"If `false`, the player is currently not walking; otherwise it's going somewhere\", 'type': 'boolean', 'optional': False}]}",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "walking_state"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.walking_state",
    "content": "Write_type: {\"complex_type\": \"table\", \"parameters\": [{\"name\": \"direction\", \"order\": 1, \"description\": \"Direction where the player is walking\", \"type\": \"defines.direction\", \"optional\": false}, {\"name\": \"walking\", \"order\": 0, \"description\": \"If `false`, the player is currently not walking; otherwise it's going somewhere\", \"type\": \"boolean\", \"optional\": false}]}\nDescription: Current walking state.",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "walking_state"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControl.walking_state",
    "content": "Description: Current walking state.\nExamples: [\"```\\n-- Make the player go north. Note that a one-shot action like this will only make the player walk for one tick.\\ngame.player.walking_state = {walking = true, direction = defines.direction.north}\\n```\"]",
    "metadata": {
      "class_name": "LuaControl",
      "attribute_name": "walking_state"
    }
  },
  {
    "type": "class",
    "name": "LuaControlBehavior",
    "content": "Class: LuaControlBehavior\nDescription: The control behavior for an entity. Inserters have logistic network and circuit network behavior logic, lamps have circuit logic and so on. This is an abstract base class that concrete control behaviors inherit.\n\nAn control reference becomes invalid once the control behavior is removed or the entity (see [LuaEntity](runtime:LuaEntity)) it resides in is destroyed.",
    "metadata": {
      "class_name": "LuaControlBehavior",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaControlBehavior.get_circuit_network",
    "content": "Method: LuaControlBehavior.get_circuit_network\nDescription: \n\nParameters:\n- wire_connector_id (defines.wire_connector_id): Wire connector to get circuit network for.\n\nReturns:\n- LuaCircuitNetwork: The circuit network or nil.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaControlBehavior",
      "method_name": "get_circuit_network"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControlBehavior.entity",
    "content": "Attribute: entity \nRead_type: LuaEntity\n\nDescription: The entity this control behavior belongs to.\n",
    "metadata": {
      "class_name": "LuaControlBehavior",
      "attribute_name": "entity"
    }
  },
  {
    "type": "attribute",
    "name": "LuaControlBehavior.type",
    "content": "Attribute: type \nRead_type: defines.control_behavior.type\n\nDescription: The concrete type of this control behavior.\n",
    "metadata": {
      "class_name": "LuaControlBehavior",
      "attribute_name": "type"
    }
  },
  {
    "type": "class",
    "name": "LuaCustomChartTag",
    "content": "Class: LuaCustomChartTag\nDescription: A custom tag that shows on the map view.",
    "metadata": {
      "class_name": "LuaCustomChartTag",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaCustomChartTag.destroy",
    "content": "Method: LuaCustomChartTag.destroy\nDescription: Destroys this tag.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaCustomChartTag",
      "method_name": "destroy"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomChartTag.force",
    "content": "Attribute: force \nRead_type: LuaForce\n\nDescription: The force this tag belongs to.\n",
    "metadata": {
      "class_name": "LuaCustomChartTag",
      "attribute_name": "force"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomChartTag.icon",
    "content": "Attribute: icon \nRead_type: SignalID\nWrite_type: SignalID\nDescription: This tag's icon, if it has one. Writing `nil` removes it.\n",
    "metadata": {
      "class_name": "LuaCustomChartTag",
      "attribute_name": "icon"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomChartTag.last_user",
    "content": "Attribute: last_user [Optional]\nRead_type: LuaPlayer\nWrite_type: LuaPlayer\nDescription: The player who last edited this tag.\n",
    "metadata": {
      "class_name": "LuaCustomChartTag",
      "attribute_name": "last_user"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomChartTag.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaCustomChartTag",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomChartTag.position",
    "content": "Attribute: position \nRead_type: MapPosition\n\nDescription: The position of this tag.\n",
    "metadata": {
      "class_name": "LuaCustomChartTag",
      "attribute_name": "position"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomChartTag.surface",
    "content": "Attribute: surface \nRead_type: LuaSurface\n\nDescription: The surface this tag belongs to.\n",
    "metadata": {
      "class_name": "LuaCustomChartTag",
      "attribute_name": "surface"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomChartTag.tag_number",
    "content": "Attribute: tag_number \nRead_type: uint\n\nDescription: The unique ID for this tag on this force.\n",
    "metadata": {
      "class_name": "LuaCustomChartTag",
      "attribute_name": "tag_number"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomChartTag.text",
    "content": "Attribute: text \nRead_type: string\nWrite_type: string\nDescription: \n",
    "metadata": {
      "class_name": "LuaCustomChartTag",
      "attribute_name": "text"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomChartTag.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaCustomChartTag",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaCustomEventPrototype",
    "content": "Class: LuaCustomEventPrototype\nDescription: Prototype of a custom event.",
    "metadata": {
      "class_name": "LuaCustomEventPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomEventPrototype.event_id",
    "content": "Attribute: event_id \nRead_type: defines.events\n\nDescription: Event identifier associated with this custom event.\n",
    "metadata": {
      "class_name": "LuaCustomEventPrototype",
      "attribute_name": "event_id"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomEventPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaCustomEventPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomEventPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaCustomEventPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaCustomInputPrototype",
    "content": "Class: LuaCustomInputPrototype\nDescription: Prototype of a custom input.",
    "metadata": {
      "class_name": "LuaCustomInputPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomInputPrototype.action",
    "content": "Attribute: action \nRead_type: string\n\nDescription: The action that happens when this custom input is triggered.\n",
    "metadata": {
      "class_name": "LuaCustomInputPrototype",
      "attribute_name": "action"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomInputPrototype.alternative_key_sequence",
    "content": "Attribute: alternative_key_sequence [Optional]\nRead_type: string\n\nDescription: The default alternative key sequence for this custom input, if any\n",
    "metadata": {
      "class_name": "LuaCustomInputPrototype",
      "attribute_name": "alternative_key_sequence"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomInputPrototype.consuming",
    "content": "Attribute: consuming \nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'none'}, {'complex_type': 'literal', 'value': 'game-only'}], 'full_format': False}\n\nDescription: The consuming type.\n",
    "metadata": {
      "class_name": "LuaCustomInputPrototype",
      "attribute_name": "consuming"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomInputPrototype.controller_alternative_key_sequence",
    "content": "Attribute: controller_alternative_key_sequence [Optional]\nRead_type: string\n\nDescription: The default controller alternative key sequence for this custom input, if any\n",
    "metadata": {
      "class_name": "LuaCustomInputPrototype",
      "attribute_name": "controller_alternative_key_sequence"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomInputPrototype.controller_key_sequence",
    "content": "Attribute: controller_key_sequence [Optional]\nRead_type: string\n\nDescription: The default controller key sequence for this custom input, if any\n",
    "metadata": {
      "class_name": "LuaCustomInputPrototype",
      "attribute_name": "controller_key_sequence"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomInputPrototype.enabled",
    "content": "Attribute: enabled \nRead_type: boolean\n\nDescription: Whether this custom input is enabled. Disabled custom inputs exist but are not used by the game.\n",
    "metadata": {
      "class_name": "LuaCustomInputPrototype",
      "attribute_name": "enabled"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomInputPrototype.enabled_while_in_cutscene",
    "content": "Attribute: enabled_while_in_cutscene \nRead_type: boolean\n\nDescription: Whether this custom input is enabled while using the cutscene controller.\n",
    "metadata": {
      "class_name": "LuaCustomInputPrototype",
      "attribute_name": "enabled_while_in_cutscene"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomInputPrototype.enabled_while_spectating",
    "content": "Attribute: enabled_while_spectating \nRead_type: boolean\n\nDescription: Whether this custom input is enabled while using the spectator controller.\n",
    "metadata": {
      "class_name": "LuaCustomInputPrototype",
      "attribute_name": "enabled_while_spectating"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomInputPrototype.event_id",
    "content": "Attribute: event_id \nRead_type: defines.events\n\nDescription: Event identifier associated with this custom input.\n",
    "metadata": {
      "class_name": "LuaCustomInputPrototype",
      "attribute_name": "event_id"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomInputPrototype.include_selected_prototype",
    "content": "Attribute: include_selected_prototype \nRead_type: boolean\n\nDescription: Whether this custom input will include the selected prototype (if any) when triggered.\n",
    "metadata": {
      "class_name": "LuaCustomInputPrototype",
      "attribute_name": "include_selected_prototype"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomInputPrototype.item_to_spawn",
    "content": "Attribute: item_to_spawn [Optional]\nRead_type: LuaItemPrototype\n\nDescription: The item that gets spawned when this custom input is fired, if any.\n",
    "metadata": {
      "class_name": "LuaCustomInputPrototype",
      "attribute_name": "item_to_spawn"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomInputPrototype.key_sequence",
    "content": "Attribute: key_sequence \nRead_type: string\n\nDescription: The default key sequence for this custom input.\n",
    "metadata": {
      "class_name": "LuaCustomInputPrototype",
      "attribute_name": "key_sequence"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomInputPrototype.linked_game_control",
    "content": "Attribute: linked_game_control [Optional]\nRead_type: LinkedGameControl\n\nDescription: The linked game control name, if any.\n",
    "metadata": {
      "class_name": "LuaCustomInputPrototype",
      "attribute_name": "linked_game_control"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomInputPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaCustomInputPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomInputPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaCustomInputPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaCustomTable",
    "content": "Class: LuaCustomTable\nDescription: Lazily evaluated table. For performance reasons, we sometimes return a custom table-like type instead of a native Lua table. This custom type lazily constructs the necessary Lua wrappers of the corresponding C++ objects, therefore preventing their unnecessary construction in some cases.",
    "metadata": {
      "class_name": "LuaCustomTable",
      "parent_class": null
    }
  },
  {
    "type": "class",
    "name": "LuaCustomTable",
    "content": "There are some notable consequences to the usage of a custom table type rather than the native Lua table type: Iterating a custom table is only possible using the `pairs` Lua function; `ipairs` won't work. Another key difference is that custom tables cannot be serialised into a game save file -- if saving the game would require serialisation of a custom table, an error will be displayed and the game will not be saved.",
    "metadata": {
      "class_name": "LuaCustomTable",
      "parent_class": null
    }
  },
  {
    "type": "class",
    "name": "LuaCustomTable",
    "content": "In previous versions of Factorio, this would create a [LuaPlayer](runtime:LuaPlayer) instance for every player in the game, even though only one such wrapper is needed. In the current version, accessing [game.players](runtime:LuaGameScript::players) by itself does not create any [LuaPlayer](runtime:LuaPlayer) instances; they are created lazily when accessed. Therefore, this example only constructs one [LuaPlayer](runtime:LuaPlayer) instance, no matter how many elements there are in `game.players`.",
    "metadata": {
      "class_name": "LuaCustomTable",
      "parent_class": null
    }
  },
  {
    "type": "class",
    "name": "LuaCustomTable",
    "content": "```\ngame.players[\"Oxyd\"].character.die()\n```\n\nThis statement will execute successfully and `storage.p` will be useable as one might expect. However, as soon as the user tries to save the game, a \"LuaCustomTable cannot be serialized\" error will be shown. The game will remain unsaveable so long as `storage.p` refers to an instance of a custom table.\n\n```\nstorage.p = game.players  -- This has high potential to make the game unsaveable\n```",
    "metadata": {
      "class_name": "LuaCustomTable",
      "parent_class": null
    }
  },
  {
    "type": "class",
    "name": "LuaCustomTable",
    "content": "The following will produce no output because `ipairs` is not supported with custom tables.\n\n```\nfor _, p in ipairs(game.players) do game.player.print(p.name); end  -- incorrect; use pairs instead\n```",
    "metadata": {
      "class_name": "LuaCustomTable",
      "parent_class": null
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomTable.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaCustomTable",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaCustomTable.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaCustomTable",
      "attribute_name": "valid"
    }
  },
  {
    "type": "operator",
    "name": "LuaCustomTable.index",
    "content": "Operator: index \nRead_type: Any\n\nDescription: Access an element of this custom table.\n",
    "metadata": {
      "class_name": "LuaCustomTable",
      "operator_name": "index"
    }
  },
  {
    "type": "operator",
    "name": "LuaCustomTable.length",
    "content": "Operator: length \nRead_type: uint\n\nDescription: Number of elements in this table.\n",
    "metadata": {
      "class_name": "LuaCustomTable",
      "operator_name": "length"
    }
  },
  {
    "type": "class",
    "name": "LuaDamagePrototype",
    "content": "Class: LuaDamagePrototype\nDescription: Prototype of a damage.",
    "metadata": {
      "class_name": "LuaDamagePrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaDamagePrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaDamagePrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaDamagePrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaDamagePrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaDeciderCombinatorControlBehavior",
    "content": "Class: LuaDeciderCombinatorControlBehavior\nDescription: Control behavior for decider combinators.",
    "metadata": {
      "class_name": "LuaDeciderCombinatorControlBehavior",
      "parent_class": "LuaCombinatorControlBehavior"
    }
  },
  {
    "type": "method",
    "name": "LuaDeciderCombinatorControlBehavior.add_condition",
    "content": "Method: LuaDeciderCombinatorControlBehavior.add_condition\nDescription: Adds a new condition.\n\nParameters:\n- condition (DeciderCombinatorCondition): New condition to insert.\n- index (uint)[Optional]: Index to insert new condition at. If not specified, appends to the end.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaDeciderCombinatorControlBehavior",
      "method_name": "add_condition"
    }
  },
  {
    "type": "method",
    "name": "LuaDeciderCombinatorControlBehavior.add_output",
    "content": "Method: LuaDeciderCombinatorControlBehavior.add_output\nDescription: Adds a new output.\n\nParameters:\n- index (uint)[Optional]: Index to insert new output at. If not specified, appends to the end.\n- output (DeciderCombinatorOutput): New output to insert.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaDeciderCombinatorControlBehavior",
      "method_name": "add_output"
    }
  },
  {
    "type": "method",
    "name": "LuaDeciderCombinatorControlBehavior.get_condition",
    "content": "Method: LuaDeciderCombinatorControlBehavior.get_condition\nDescription: Gets the condition at `index`.\n\nParameters:\n- index (uint): Index of condition to get.\n\nReturns:\n- DeciderCombinatorCondition: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaDeciderCombinatorControlBehavior",
      "method_name": "get_condition"
    }
  },
  {
    "type": "method",
    "name": "LuaDeciderCombinatorControlBehavior.get_output",
    "content": "Method: LuaDeciderCombinatorControlBehavior.get_output\nDescription: Gets the output at `index`.\n\nParameters:\n- index (uint): Index of output to get.\n\nReturns:\n- DeciderCombinatorOutput: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaDeciderCombinatorControlBehavior",
      "method_name": "get_output"
    }
  },
  {
    "type": "method",
    "name": "LuaDeciderCombinatorControlBehavior.remove_condition",
    "content": "Method: LuaDeciderCombinatorControlBehavior.remove_condition\nDescription: Removes the condition at `index`.\n\nParameters:\n- index (uint): Index of condition to remove.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaDeciderCombinatorControlBehavior",
      "method_name": "remove_condition"
    }
  },
  {
    "type": "method",
    "name": "LuaDeciderCombinatorControlBehavior.remove_output",
    "content": "Method: LuaDeciderCombinatorControlBehavior.remove_output\nDescription: Removes the output at `index`.\n\nParameters:\n- index (uint): Index of output to remove.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaDeciderCombinatorControlBehavior",
      "method_name": "remove_output"
    }
  },
  {
    "type": "method",
    "name": "LuaDeciderCombinatorControlBehavior.set_condition",
    "content": "Method: LuaDeciderCombinatorControlBehavior.set_condition\nDescription: Sets the condition at `index`.\n\nParameters:\n- condition (DeciderCombinatorCondition): Data to set selected condition to.\n- index (uint): Index of condition to modify.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaDeciderCombinatorControlBehavior",
      "method_name": "set_condition"
    }
  },
  {
    "type": "method",
    "name": "LuaDeciderCombinatorControlBehavior.set_output",
    "content": "Method: LuaDeciderCombinatorControlBehavior.set_output\nDescription: Sets the output at `index`.\n\nParameters:\n- index (uint): Index of output to modify.\n- output (DeciderCombinatorOutput): Data to set selected output to.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaDeciderCombinatorControlBehavior",
      "method_name": "set_output"
    }
  },
  {
    "type": "attribute",
    "name": "LuaDeciderCombinatorControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaDeciderCombinatorControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaDeciderCombinatorControlBehavior.parameters",
    "content": "Attribute: parameters \nRead_type: DeciderCombinatorParameters\nWrite_type: DeciderCombinatorParameters\nDescription: This decider combinator's parameters. Writing `nil` clears the combinator's parameters.\n",
    "metadata": {
      "class_name": "LuaDeciderCombinatorControlBehavior",
      "attribute_name": "parameters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaDeciderCombinatorControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaDeciderCombinatorControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaDecorativePrototype",
    "content": "Class: LuaDecorativePrototype\nDescription: Prototype of an optimized decorative.",
    "metadata": {
      "class_name": "LuaDecorativePrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaDecorativePrototype.autoplace_specification",
    "content": "Attribute: autoplace_specification [Optional]\nRead_type: AutoplaceSpecification\n\nDescription: Autoplace specification for this decorative prototype, if any.\n",
    "metadata": {
      "class_name": "LuaDecorativePrototype",
      "attribute_name": "autoplace_specification"
    }
  },
  {
    "type": "attribute",
    "name": "LuaDecorativePrototype.collision_box",
    "content": "Attribute: collision_box \nRead_type: BoundingBox\n\nDescription: The bounding box used for collision checking.\n",
    "metadata": {
      "class_name": "LuaDecorativePrototype",
      "attribute_name": "collision_box"
    }
  },
  {
    "type": "attribute",
    "name": "LuaDecorativePrototype.collision_mask",
    "content": "Attribute: collision_mask \nRead_type: CollisionMask\n\nDescription: The collision masks this decorative uses\n",
    "metadata": {
      "class_name": "LuaDecorativePrototype",
      "attribute_name": "collision_mask"
    }
  },
  {
    "type": "attribute",
    "name": "LuaDecorativePrototype.decal",
    "content": "Attribute: decal \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaDecorativePrototype",
      "attribute_name": "decal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaDecorativePrototype.grows_through_rail_path",
    "content": "Attribute: grows_through_rail_path \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaDecorativePrototype",
      "attribute_name": "grows_through_rail_path"
    }
  },
  {
    "type": "attribute",
    "name": "LuaDecorativePrototype.minimal_separation",
    "content": "Attribute: minimal_separation \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaDecorativePrototype",
      "attribute_name": "minimal_separation"
    }
  },
  {
    "type": "attribute",
    "name": "LuaDecorativePrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaDecorativePrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaDecorativePrototype.placed_effect",
    "content": "Attribute: placed_effect [Optional]\nRead_type: {'complex_type': 'array', 'value': 'TriggerEffectItem'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaDecorativePrototype",
      "attribute_name": "placed_effect"
    }
  },
  {
    "type": "attribute",
    "name": "LuaDecorativePrototype.render_layer",
    "content": "Attribute: render_layer \nRead_type: string\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaDecorativePrototype",
      "attribute_name": "render_layer"
    }
  },
  {
    "type": "attribute",
    "name": "LuaDecorativePrototype.target_count",
    "content": "Attribute: target_count \nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaDecorativePrototype",
      "attribute_name": "target_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaDecorativePrototype.trigger_effect",
    "content": "Attribute: trigger_effect [Optional]\nRead_type: {'complex_type': 'array', 'value': 'TriggerEffectItem'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaDecorativePrototype",
      "attribute_name": "trigger_effect"
    }
  },
  {
    "type": "attribute",
    "name": "LuaDecorativePrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaDecorativePrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaDisplayPanelControlBehavior",
    "content": "Class: LuaDisplayPanelControlBehavior\nDescription: Control behavior for display panels.",
    "metadata": {
      "class_name": "LuaDisplayPanelControlBehavior",
      "parent_class": "LuaControlBehavior"
    }
  },
  {
    "type": "method",
    "name": "LuaDisplayPanelControlBehavior.get_message",
    "content": "Method: LuaDisplayPanelControlBehavior.get_message\nDescription: Get a specific message definition\n\nParameters:\n- index (uint): Message index.\n\nReturns:\n- DisplayPanelMessageDefinition: The message definition at the specified index.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaDisplayPanelControlBehavior",
      "method_name": "get_message"
    }
  },
  {
    "type": "method",
    "name": "LuaDisplayPanelControlBehavior.set_message",
    "content": "Method: LuaDisplayPanelControlBehavior.set_message\nDescription: Set the message at the specified index\n\nParameters:\n- index (uint): Message index. Use `-1` to append new element.\n- message (DisplayPanelMessageDefinition): The message definition for the specified index. Specify `nil` to remove the message.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaDisplayPanelControlBehavior",
      "method_name": "set_message"
    }
  },
  {
    "type": "attribute",
    "name": "LuaDisplayPanelControlBehavior.messages",
    "content": "Attribute: messages \nRead_type: {'complex_type': 'array', 'value': 'DisplayPanelMessageDefinition'}\nWrite_type: {\"complex_type\": \"array\", \"value\": \"DisplayPanelMessageDefinition\"}\nDescription: The full list of configured messages.\n",
    "metadata": {
      "class_name": "LuaDisplayPanelControlBehavior",
      "attribute_name": "messages"
    }
  },
  {
    "type": "attribute",
    "name": "LuaDisplayPanelControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaDisplayPanelControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaDisplayPanelControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaDisplayPanelControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaElectricEnergySourcePrototype",
    "content": "Class: LuaElectricEnergySourcePrototype\nDescription: Prototype of an electric energy source.",
    "metadata": {
      "class_name": "LuaElectricEnergySourcePrototype",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaElectricEnergySourcePrototype.get_input_flow_limit",
    "content": "Method: LuaElectricEnergySourcePrototype.get_input_flow_limit\nDescription: \n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaElectricEnergySourcePrototype",
      "method_name": "get_input_flow_limit"
    }
  },
  {
    "type": "method",
    "name": "LuaElectricEnergySourcePrototype.get_output_flow_limit",
    "content": "Method: LuaElectricEnergySourcePrototype.get_output_flow_limit\nDescription: \n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaElectricEnergySourcePrototype",
      "method_name": "get_output_flow_limit"
    }
  },
  {
    "type": "attribute",
    "name": "LuaElectricEnergySourcePrototype.buffer_capacity",
    "content": "Attribute: buffer_capacity \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaElectricEnergySourcePrototype",
      "attribute_name": "buffer_capacity"
    }
  },
  {
    "type": "attribute",
    "name": "LuaElectricEnergySourcePrototype.drain",
    "content": "Attribute: drain \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaElectricEnergySourcePrototype",
      "attribute_name": "drain"
    }
  },
  {
    "type": "attribute",
    "name": "LuaElectricEnergySourcePrototype.emissions_per_joule",
    "content": "Attribute: emissions_per_joule \nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'double'}\n\nDescription: The table of emissions of this energy source in `pollution/Joule`, indexed by pollutant type. Multiplying it by energy consumption in `Watt` gives `pollution/second`.",
    "metadata": {
      "class_name": "LuaElectricEnergySourcePrototype",
      "attribute_name": "emissions_per_joule"
    }
  },
  {
    "type": "attribute",
    "name": "LuaElectricEnergySourcePrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaElectricEnergySourcePrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaElectricEnergySourcePrototype.render_no_network_icon",
    "content": "Attribute: render_no_network_icon \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaElectricEnergySourcePrototype",
      "attribute_name": "render_no_network_icon"
    }
  },
  {
    "type": "attribute",
    "name": "LuaElectricEnergySourcePrototype.render_no_power_icon",
    "content": "Attribute: render_no_power_icon \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaElectricEnergySourcePrototype",
      "attribute_name": "render_no_power_icon"
    }
  },
  {
    "type": "attribute",
    "name": "LuaElectricEnergySourcePrototype.usage_priority",
    "content": "Attribute: usage_priority \nRead_type: string\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaElectricEnergySourcePrototype",
      "attribute_name": "usage_priority"
    }
  },
  {
    "type": "attribute",
    "name": "LuaElectricEnergySourcePrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaElectricEnergySourcePrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaEntity",
    "content": "Class: LuaEntity\nDescription: The primary interface for interacting with entities through the Lua API. Entities are everything that exists on the map except for tiles (see [LuaTile](runtime:LuaTile)).\n\nMost functions on LuaEntity also work when the entity is contained in a ghost.",
    "metadata": {
      "class_name": "LuaEntity",
      "parent_class": "LuaControl"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.add_autopilot_destination",
    "content": "Method: LuaEntity.add_autopilot_destination\nDescription: Adds the given position to this spidertron's autopilot's queue of destinations.\n\nParameters:\n- position (MapPosition): The position the spidertron should move to.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "add_autopilot_destination"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.add_market_item",
    "content": "Method: LuaEntity.add_market_item\nDescription: Offer a thing on the market.\n\nParameters:\n- offer (Offer): \n\nExamples:\n```\n-- Adds market offer, 1 copper ore for 10 iron ore\nmarket.add_market_item{price={{name = \"iron-ore\", count = 10}}, offer={type=\"give-item\", item=\"copper-ore\"}}\n```\n```\n-- Adds market offer, 1 copper ore for 5 iron ore and 5 stone ore\nmarket.add_market_item{price={{name = \"iron-ore\", count = 5}, {name = \"stone\", count = 5}}, offer={type=\"give-item\", item=\"copper-ore\"}}\n```",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "add_market_item"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.add_market_item",
    "content": "Format:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "add_market_item"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.can_be_destroyed",
    "content": "Method: LuaEntity.can_be_destroyed\nDescription: Whether the entity can be destroyed\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "can_be_destroyed"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.can_shoot",
    "content": "Method: LuaEntity.can_shoot\nDescription: Whether this character can shoot the given entity or position.\n\nParameters:\n- position (MapPosition): \n- target (LuaEntity): \n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "can_shoot"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.can_wires_reach",
    "content": "Method: LuaEntity.can_wires_reach\nDescription: Can wires reach between these entities.\n\nParameters:\n- entity (LuaEntity): \n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "can_wires_reach"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.cancel_deconstruction",
    "content": "Method: LuaEntity.cancel_deconstruction\nDescription: Cancels deconstruction if it is scheduled, does nothing otherwise.\n\nParameters:\n- force (ForceID): The force who did the deconstruction order.\n- player (PlayerIdentification)[Optional]: The player to set the `last_user` to if any.\n\nRaises:\n- on_cancelled_deconstruction: Raised if the entity's deconstruction was successfully cancelled.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "cancel_deconstruction"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.cancel_upgrade",
    "content": "Method: LuaEntity.cancel_upgrade\nDescription: Cancels upgrade if it is scheduled, does nothing otherwise.\n\nParameters:\n- force (ForceID): The force who did the upgrade order.\n- player (PlayerIdentification)[Optional]: The player to set the last_user to if any.\n\nReturns:\n- boolean: Whether the cancel was successful.\n\nRaises:\n- on_cancelled_upgrade: Raised if the entity way previously marked for upgrade.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "cancel_upgrade"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.clear_fluid_inside",
    "content": "Method: LuaEntity.clear_fluid_inside\nDescription: Remove all fluids from this entity.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "clear_fluid_inside"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.clear_market_items",
    "content": "Method: LuaEntity.clear_market_items\nDescription: Removes all offers from a market.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "clear_market_items"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.clone",
    "content": "Method: LuaEntity.clone\nDescription: Clones this entity.\n\nParameters:\n- create_build_effect_smoke (boolean)[Optional]: If false, the building effect smoke will not be shown around the new entity.\n- force (ForceID)[Optional]: \n- position (MapPosition): The destination position\n- surface (LuaSurface)[Optional]: The destination surface\n\nReturns:\n- LuaEntity: The cloned entity or `nil` if this entity can't be cloned/can't be cloned to the given location.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "clone"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.clone",
    "content": "Raises:\n- on_entity_cloned: Raised if the entity was successfully cloned.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "clone"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.connect_linked_belts",
    "content": "Method: LuaEntity.connect_linked_belts\nDescription: Connects current linked belt with another one.\n\nNeighbours have to be of different type. If given linked belt is connected to something else it will be disconnected first. If provided neighbour is connected to something else it will also be disconnected first. Automatically updates neighbour to be connected back to this one.\n\nCan also be used on entity ghost if it contains linked-belt.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "connect_linked_belts"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.connect_linked_belts",
    "content": "Can also be used on entity ghost if it contains linked-belt.\n\nParameters:\n- neighbour (LuaEntity)[Optional]: Another linked belt or entity ghost containing linked belt to connect or nil to disconnect\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "connect_linked_belts"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.connect_rolling_stock",
    "content": "Method: LuaEntity.connect_rolling_stock\nDescription: Connects the rolling stock in the given direction.\n\nParameters:\n- direction (defines.rail_direction): \n\nReturns:\n- boolean: Whether any connection was made\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "connect_rolling_stock"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.copy_settings",
    "content": "Method: LuaEntity.copy_settings\nDescription: Copies settings from the given entity onto this entity.\n\nParameters:\n- by_player (PlayerIdentification)[Optional]: If provided, the copying is done 'as' this player and [on_entity_settings_pasted](runtime:on_entity_settings_pasted) is triggered.\n- entity (LuaEntity): \n\nReturns:\n- {'complex_type': 'array', 'value': 'ItemWithQualityCounts'}: Any items removed from this entity as a result of copying the settings.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "copy_settings"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.create_build_effect_smoke",
    "content": "Method: LuaEntity.create_build_effect_smoke\nDescription: Creates the same smoke that is created when you place a building by hand.\n\nYou can play the building sound to go with it by using [LuaSurface::play_sound](runtime:LuaSurface::play_sound), eg: `entity.surface.play_sound{path=\"entity-build/\"..entity.prototype.name, position=entity.position}`\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "create_build_effect_smoke"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.damage",
    "content": "Method: LuaEntity.damage\nDescription: Damages the entity.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "damage"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.damage",
    "content": "Parameters:\n- cause (LuaEntity)[Optional]: The entity that originally triggered the events that led to this damage being dealt (e.g. the character, turret, enemy, etc. that pulled the trigger). Does not need to be on the same surface as the entity being damaged.\n- damage (float): The amount of damage to be done.\n- force (ForceID): The force that will be doing the damage.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "damage"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.damage",
    "content": "- force (ForceID): The force that will be doing the damage.\n- source (LuaEntity)[Optional]: The entity that is directly dealing the damage (e.g. the projectile, flame, sticker, grenade, laser beam, etc.). Needs to be on the same surface as the entity being damaged.\n- type (DamageTypeID)[Optional]: The type of damage to be done, defaults to `\"impact\"`.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "damage"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.damage",
    "content": "Returns:\n- float: the total damage actually applied after resistances.\n\nRaises:\n- on_entity_damaged: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "damage"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.deplete",
    "content": "Method: LuaEntity.deplete\nDescription: Depletes and destroys this resource entity.\n\nRaises:\n- on_resource_depleted: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "deplete"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.destroy",
    "content": "Method: LuaEntity.destroy\nDescription: Destroys the entity.\n\nNot all entities can be destroyed - things such as rails under trains cannot be destroyed until the train is moved or destroyed.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "destroy"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.destroy",
    "content": "Parameters:\n- do_cliff_correction (boolean)[Optional]: Whether neighbouring cliffs should be corrected. Defaults to `false`.\n- item_index (uint)[Optional]: The index of the undo item to add this action to. An index of `0` creates a new undo item for it. Defaults to putting it into the appropriate undo item automatically if not specified.\n- player (PlayerIdentification)[Optional]: The player whose undo queue this action should be added to.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "destroy"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.destroy",
    "content": "- raise_destroy (boolean)[Optional]: If `true`, [script_raised_destroy](runtime:script_raised_destroy) will be called. Defaults to `false`.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "destroy"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.destroy",
    "content": "Returns:\n- boolean: Returns `false` if the entity was valid and destruction failed, `true` in all other cases.\n\nRaises:\n- script_raised_destroy: Raised if the `raise_destroy` flag was set and the entity was successfully destroyed.\n\nFormat:\n- {'takes_table': True, 'table_optional': True}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "destroy"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.die",
    "content": "Method: LuaEntity.die\nDescription: Immediately kills the entity. Does nothing if the entity doesn't have health.\n\nUnlike [LuaEntity::destroy](runtime:LuaEntity::destroy), `die` will trigger the [on_entity_died](runtime:on_entity_died) event and the entity will produce a corpse and drop loot if it has any.\n\nParameters:\n- cause (LuaEntity)[Optional]: The cause to attribute the kill to.\n- force (ForceID)[Optional]: The force to attribute the kill to.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "die"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.die",
    "content": "Returns:\n- boolean: Whether the entity was successfully killed.\n\nRaises:\n- on_entity_died: Raised if the entity was successfully killed. If `force` is not specified, the event will blame the `\"neutral\"` force.\n- on_post_entity_died: Raised if the entity was successfully killed.\n\nExamples:\n```\n-- This function can be called with only the `cause` argument and no `force`:\nentity.die(nil, killer_entity)\n```\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "die"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.disconnect_linked_belts",
    "content": "Method: LuaEntity.disconnect_linked_belts\nDescription: Disconnects linked belt from its neighbour.\n\nCan also be used on entity ghost if it contains linked-belt\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "disconnect_linked_belts"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.disconnect_rolling_stock",
    "content": "Method: LuaEntity.disconnect_rolling_stock\nDescription: Tries to disconnect this rolling stock in the given direction.\n\nParameters:\n- direction (defines.rail_direction): \n\nReturns:\n- boolean: If anything was disconnected\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "disconnect_rolling_stock"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.force_finish_ascending",
    "content": "Method: LuaEntity.force_finish_ascending\nDescription: Take an ascending cargo pod and safely make it skip all animation and immediately switch surface.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "force_finish_ascending"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.force_finish_descending",
    "content": "Method: LuaEntity.force_finish_descending\nDescription: Take a descending cargo pod and safely make it arrive and deposit cargo.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "force_finish_descending"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_beacon_effect_receivers",
    "content": "Method: LuaEntity.get_beacon_effect_receivers\nDescription: Returns a table with all entities affected by this beacon\n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_beacon_effect_receivers"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_beacons",
    "content": "Method: LuaEntity.get_beacons\nDescription: Returns a table with all beacons affecting this effect receiver. Can only be used when the entity has an effect receiver (AssemblingMachine, Furnace, Lab, MiningDrills)\n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_beacons"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_beam_source",
    "content": "Method: LuaEntity.get_beam_source\nDescription: Get the source of this beam.\n\nReturns:\n- BeamTarget: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_beam_source"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_beam_target",
    "content": "Method: LuaEntity.get_beam_target\nDescription: Get the target of this beam.\n\nReturns:\n- BeamTarget: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_beam_target"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_burnt_result_inventory",
    "content": "Method: LuaEntity.get_burnt_result_inventory\nDescription: The burnt result inventory for this entity or `nil` if this entity doesn't have a burnt result inventory.\n\nReturns:\n- LuaInventory: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_burnt_result_inventory"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_child_signals",
    "content": "Method: LuaEntity.get_child_signals\nDescription: Returns all child signals. Child signals can be either RailSignal or RailChainSignal. Child signals are signals which are checked by this signal to determine a chain state.\n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_child_signals"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_circuit_network",
    "content": "Method: LuaEntity.get_circuit_network\nDescription: \n\nParameters:\n- wire_connector_id (defines.wire_connector_id): Wire connector to get circuit network for.\n\nReturns:\n- LuaCircuitNetwork: The circuit network or nil.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_circuit_network"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_connected_rail",
    "content": "Method: LuaEntity.get_connected_rail\nDescription: \n\nParameters:\n- rail_connection_direction (defines.rail_connection_direction): \n- rail_direction (defines.rail_direction): \n\nReturns:\n- LuaEntity: Rail connected in the specified manner to this one, `nil` if unsuccessful.\n- defines.rail_direction: Rail direction of the returned rail which points to origin rail\n- defines.rail_connection_direction: Turn to be taken when going back from returned rail to origin rail",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_connected_rail"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_connected_rail",
    "content": "Format:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_connected_rail"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_connected_rails",
    "content": "Method: LuaEntity.get_connected_rails\nDescription: Get the rails that this signal is connected to.\n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_connected_rails"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_connected_rolling_stock",
    "content": "Method: LuaEntity.get_connected_rolling_stock\nDescription: Gets rolling stock connected to the given end of this stock.\n\nParameters:\n- direction (defines.rail_direction): \n\nReturns:\n- LuaEntity: The rolling stock connected at the given end, `nil` if none is connected there.\n- defines.rail_direction: The rail direction of the connected rolling stock if any.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_connected_rolling_stock"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_control_behavior",
    "content": "Method: LuaEntity.get_control_behavior\nDescription: Gets the control behavior of the entity (if any).\n\nReturns:\n- LuaControlBehavior: The control behavior or `nil`.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_control_behavior"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_damage_to_be_taken",
    "content": "Method: LuaEntity.get_damage_to_be_taken\nDescription: Returns the amount of damage to be taken by this entity.\n\nReturns:\n- float: `nil` if this entity does not have health.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_damage_to_be_taken"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_driver",
    "content": "Method: LuaEntity.get_driver\nDescription: Gets the driver of this vehicle if any.\n\nReturns:\n- {'complex_type': 'union', 'options': ['LuaEntity', 'LuaPlayer'], 'full_format': False}: `nil` if the vehicle contains no driver. To check if there's a passenger see [LuaEntity::get_passenger](runtime:LuaEntity::get_passenger).\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_driver"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_electric_input_flow_limit",
    "content": "Method: LuaEntity.get_electric_input_flow_limit\nDescription: The input flow limit for the electric energy source. `nil` if the entity doesn't have an electric energy source.\n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_electric_input_flow_limit"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_electric_output_flow_limit",
    "content": "Method: LuaEntity.get_electric_output_flow_limit\nDescription: The output flow limit for the electric energy source. `nil` if the entity doesn't have an electric energy source.\n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_electric_output_flow_limit"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_filter",
    "content": "Method: LuaEntity.get_filter\nDescription: Get the filter for a slot in an inserter, loader, mining drill, asteroid collector, or logistic storage container. The entity must allow filters.\n\nParameters:\n- slot_index (uint): Index of the slot to get the filter for.\n\nReturns:\n- {'complex_type': 'union', 'options': ['ItemFilter', 'EntityID', 'AsteroidChunkID'], 'full_format': False}: The filter, or `nil` if the given slot has no filter.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_filter"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_fluid",
    "content": "Method: LuaEntity.get_fluid\nDescription: Gets fluid of the i-th fluid storage.\n\nParameters:\n- index (uint): Fluid storage index. Valid values are from 1 up to [LuaEntity::fluids_count](runtime:LuaEntity::fluids_count).\n\nReturns:\n- Fluid: Fluid in this storage. nil if fluid storage is empty.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_fluid"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_fluid_contents",
    "content": "Method: LuaEntity.get_fluid_contents\nDescription: Get amounts of all fluids in this entity.\n\nIf information about fluid temperatures is required, [LuaEntity::fluidbox](runtime:LuaEntity::fluidbox) should be used instead.\n\nReturns:\n- {'complex_type': 'dictionary', 'key': 'string', 'value': 'double'}: The amounts, indexed by fluid names.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_fluid_contents"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_fluid_count",
    "content": "Method: LuaEntity.get_fluid_count\nDescription: Get the amount of all or some fluid in this entity.\n\nIf information about fluid temperatures is required, [LuaEntity::fluidbox](runtime:LuaEntity::fluidbox) should be used instead.\n\nParameters:\n- fluid (string)[Optional]: Prototype name of the fluid to count. If not specified, count all fluids.\n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_fluid_count"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_fuel_inventory",
    "content": "Method: LuaEntity.get_fuel_inventory\nDescription: The fuel inventory for this entity or `nil` if this entity doesn't have a fuel inventory.\n\nReturns:\n- LuaInventory: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_fuel_inventory"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_health_ratio",
    "content": "Method: LuaEntity.get_health_ratio\nDescription: The health ratio of this entity between 1 and 0 (for full health and no health respectively).\n\nReturns:\n- float: `nil` if this entity doesn't have health.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_health_ratio"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_heat_setting",
    "content": "Method: LuaEntity.get_heat_setting\nDescription: Gets the heat setting for this heat interface.\n\nReturns:\n- HeatSetting: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_heat_setting"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_inbound_signals",
    "content": "Method: LuaEntity.get_inbound_signals\nDescription: Returns all signals guarding entrance to a rail block this rail belongs to.\n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_inbound_signals"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_infinity_container_filter",
    "content": "Method: LuaEntity.get_infinity_container_filter\nDescription: Gets the filter for this infinity container at the given index, or `nil` if the filter index doesn't exist or is empty.\n\nParameters:\n- index (uint): The index to get.\n\nReturns:\n- InfinityInventoryFilter: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_infinity_container_filter"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_infinity_pipe_filter",
    "content": "Method: LuaEntity.get_infinity_pipe_filter\nDescription: Gets the filter for this infinity pipe, or `nil` if the filter is empty.\n\nReturns:\n- InfinityPipeFilter: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_infinity_pipe_filter"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_item_insert_specification",
    "content": "Method: LuaEntity.get_item_insert_specification\nDescription: Get an item insert specification onto a belt connectable: for a given map position provides into which line at what position item should be inserted to be closest to the provided position.\n\nParameters:\n- position (MapPosition): Position where the item is to be inserted.\n\nReturns:\n- uint: Index of the transport line that is closest to the provided map position.\n- float: Position along the transport line where item should be dropped.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_item_insert_specification"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_item_insert_specification",
    "content": "Format:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_item_insert_specification"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_line_item_position",
    "content": "Method: LuaEntity.get_line_item_position\nDescription: Get a map position related to a position on a transport line.\n\nParameters:\n- index (uint): Index of the transport line. Transport lines are 1-indexed.\n- position (float): Linear position along the transport line. Clamped to the transport line range.\n\nReturns:\n- MapPosition: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_line_item_position"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_logistic_point",
    "content": "Method: LuaEntity.get_logistic_point\nDescription: Gets all the `LuaLogisticPoint`s that this entity owns. Optionally returns only the point specified by the index parameter.\n\nWhen `index` is not given, this will be a single `LuaLogisticPoint` for most entities. For some (such as the player character), it can be zero or more.\n\nParameters:\n- index (defines.logistic_member_index)[Optional]: If provided, only returns the `LuaLogisticPoint` specified by this index.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_logistic_point"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_logistic_point",
    "content": "Returns:\n- {'complex_type': 'union', 'options': ['LuaLogisticPoint', {'complex_type': 'dictionary', 'key': 'defines.logistic_member_index', 'value': 'LuaLogisticPoint'}], 'full_format': False}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_logistic_point"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_logistic_sections",
    "content": "Method: LuaEntity.get_logistic_sections\nDescription: Gives logistic sections of this entity if it uses logistic sections.\n\nReturns:\n- LuaLogisticSections: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_logistic_sections"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_market_items",
    "content": "Method: LuaEntity.get_market_items\nDescription: Get all offers in a market as an array.\n\nReturns:\n- {'complex_type': 'array', 'value': 'Offer'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_market_items"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_max_transport_line_index",
    "content": "Method: LuaEntity.get_max_transport_line_index\nDescription: Get the maximum transport line index of a belt or belt connectable entity.\n\nReturns:\n- uint: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_max_transport_line_index"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_module_inventory",
    "content": "Method: LuaEntity.get_module_inventory\nDescription: Inventory for storing modules of this entity; `nil` if this entity has no module inventory.\n\nReturns:\n- LuaInventory: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_module_inventory"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_or_create_control_behavior",
    "content": "Method: LuaEntity.get_or_create_control_behavior\nDescription: Gets (and or creates if needed) the control behavior of the entity.\n\nReturns:\n- LuaControlBehavior: The control behavior or `nil`.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_or_create_control_behavior"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_outbound_signals",
    "content": "Method: LuaEntity.get_outbound_signals\nDescription: Returns all signals guarding exit from a rail block this rail belongs to.\n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_outbound_signals"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_output_inventory",
    "content": "Method: LuaEntity.get_output_inventory\nDescription: Gets the entity's output inventory if it has one.\n\nReturns:\n- LuaInventory: A reference to the entity's output inventory.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_output_inventory"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_parent_signals",
    "content": "Method: LuaEntity.get_parent_signals\nDescription: Returns all parent signals. Parent signals are always RailChainSignal. Parent signals are those signals that are checking state of this signal to determine their own chain state.\n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_parent_signals"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_passenger",
    "content": "Method: LuaEntity.get_passenger\nDescription: Gets the passenger of this car, spidertron, or cargo pod if any.\n\nThis differs over [LuaEntity::get_driver](runtime:LuaEntity::get_driver) in that for cars, the passenger can't drive the car.\n\nReturns:\n- {'complex_type': 'union', 'options': ['LuaEntity', 'LuaPlayer'], 'full_format': False}: `nil` if the vehicle contains no passenger. To check if there's a driver see [LuaEntity::get_driver](runtime:LuaEntity::get_driver).\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_passenger"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_priority_target",
    "content": "Method: LuaEntity.get_priority_target\nDescription: Get the entity ID at the specified position in the turret's priority list.\n\nParameters:\n- index (uint): The index of the entry to fetch.\n\nReturns:\n- LuaEntityPrototype: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_priority_target"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_radius",
    "content": "Method: LuaEntity.get_radius\nDescription: The radius of this entity.\n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_radius"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_rail_end",
    "content": "Method: LuaEntity.get_rail_end\nDescription: Gets a LuaRailEnd object for specified end of this rail\n\nParameters:\n- direction (defines.rail_direction): \n\nReturns:\n- LuaRailEnd: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_rail_end"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_rail_segment_end",
    "content": "Method: LuaEntity.get_rail_segment_end\nDescription: Get the rail at the end of the rail segment this rail is in.\n\nA rail segment is a continuous section of rail with no branches, signals, nor train stops.\n\nParameters:\n- direction (defines.rail_direction): \n\nReturns:\n- LuaEntity: The rail entity.\n- defines.rail_direction: A rail direction pointing out of the rail segment from the end rail.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_rail_segment_end"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_rail_segment_length",
    "content": "Method: LuaEntity.get_rail_segment_length\nDescription: Get the length of the rail segment this rail is in.\n\nA rail segment is a continuous section of rail with no branches, signals, nor train stops.\n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_rail_segment_length"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_rail_segment_overlaps",
    "content": "Method: LuaEntity.get_rail_segment_overlaps\nDescription: Get a rail from each rail segment that overlaps with this rail's rail segment.\n\nA rail segment is a continuous section of rail with no branches, signals, nor train stops.\n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_rail_segment_overlaps"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_rail_segment_rails",
    "content": "Method: LuaEntity.get_rail_segment_rails\nDescription: Get all rails of a rail segment this rail is in\n\nA rail segment is a continuous section of rail with no branches, signals, nor train stops.\n\nParameters:\n- direction (defines.rail_direction): Selects end of this rail that points to a rail segment end from which to start returning rails\n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}: Rails of this rail segment\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_rail_segment_rails"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_rail_segment_signal",
    "content": "Method: LuaEntity.get_rail_segment_signal\nDescription: Get the rail signal at the start/end of the rail segment this rail is in.\n\nA rail segment is a continuous section of rail with no branches, signals, nor train stops.\n\nParameters:\n- direction (defines.rail_direction): The direction of travel relative to this rail.\n- in_else_out (boolean): If true, gets the signal at the entrance of the rail segment, otherwise gets the signal at the exit of the rail segment.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_rail_segment_signal"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_rail_segment_signal",
    "content": "Returns:\n- LuaEntity: `nil` if the rail segment doesn't start/end with a signal.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_rail_segment_signal"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_rail_segment_stop",
    "content": "Method: LuaEntity.get_rail_segment_stop\nDescription: Get train stop at the start/end of the rail segment this rail is in.\n\nA rail segment is a continuous section of rail with no branches, signals, nor train stops.\n\nParameters:\n- direction (defines.rail_direction): The direction of travel relative to this rail.\n\nReturns:\n- LuaEntity: `nil` if the rail segment doesn't start/end with a train stop.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_rail_segment_stop"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_recipe",
    "content": "Method: LuaEntity.get_recipe\nDescription: Current recipe being assembled by this machine, if any.\n\nReturns:\n- LuaRecipe: \n- LuaQualityPrototype: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_recipe"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_signal",
    "content": "Method: LuaEntity.get_signal\nDescription: Read a single signal from the selected wire connector\n\nParameters:\n- extra_wire_connector_id (defines.wire_connector_id)[Optional]: Additional wire connector ID. If specified, signal will be added to the result\n- signal (SignalID): The signal to read.\n- wire_connector_id (defines.wire_connector_id): Wire connector ID from which to get the signal\n\nReturns:\n- int: The current value of the signal.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_signal"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_signals",
    "content": "Method: LuaEntity.get_signals\nDescription: Read all signals from the selected wire connector.\n\nParameters:\n- extra_wire_connector_id (defines.wire_connector_id)[Optional]: Additional wire connector ID. If specified, signals will be added to the result\n- wire_connector_id (defines.wire_connector_id): Wire connector ID from which to get the signal\n\nReturns:\n- {'complex_type': 'array', 'value': 'Signal'}: Current values of all signals.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_signals"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_spider_legs",
    "content": "Method: LuaEntity.get_spider_legs\nDescription: Gets legs of given SpiderVehicle.\n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_spider_legs"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_stopped_train",
    "content": "Method: LuaEntity.get_stopped_train\nDescription: The train currently stopped at this train stop, if any.\n\nReturns:\n- LuaTrain: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_stopped_train"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_train_stop_trains",
    "content": "Method: LuaEntity.get_train_stop_trains\nDescription: The trains scheduled to stop at this train stop.\n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaTrain'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_train_stop_trains"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_transport_line",
    "content": "Method: LuaEntity.get_transport_line\nDescription: Get a transport line of a belt or belt connectable entity.\n\nParameters:\n- index (uint): Index of the requested transport line. Transport lines are 1-indexed.\n\nReturns:\n- LuaTransportLine: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_transport_line"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_upgrade_target",
    "content": "Method: LuaEntity.get_upgrade_target\nDescription: Returns the new entity prototype and its quality.\n\nReturns:\n- LuaEntityPrototype: `nil` if this entity is not marked for upgrade.\n- LuaQualityPrototype: `nil` if this entity is not marked for upgrade.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_upgrade_target"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_wire_connector",
    "content": "Method: LuaEntity.get_wire_connector\nDescription: Gets a single wire connector of this entity\n\nParameters:\n- or_create (boolean): If true and connector does not exist, it will be allocated if possible\n- wire_connector_id (defines.wire_connector_id): Identifier of a specific connector to get\n\nReturns:\n- LuaWireConnector: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_wire_connector"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.get_wire_connectors",
    "content": "Method: LuaEntity.get_wire_connectors\nDescription: Gets all wire connectors of this entity\n\nParameters:\n- or_create (boolean): If true, it will try to create all connectors possible\n\nReturns:\n- {'complex_type': 'dictionary', 'key': 'defines.wire_connector_id', 'value': 'LuaWireConnector'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "get_wire_connectors"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.ghost_has_flag",
    "content": "Method: LuaEntity.ghost_has_flag\nDescription: Same as [LuaEntity::has_flag](runtime:LuaEntity::has_flag), but targets the inner entity on a entity ghost.\n\nParameters:\n- flag (EntityPrototypeFlag): The flag to test.\n\nReturns:\n- boolean: `true` if the entity has the given flag set.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "ghost_has_flag"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.has_flag",
    "content": "Method: LuaEntity.has_flag\nDescription: Test whether this entity's prototype has a certain flag set.\n\n`entity.has_flag(f)` is a shortcut for `entity.prototype.has_flag(f)`.\n\nParameters:\n- flag (EntityPrototypeFlag): The flag to test.\n\nReturns:\n- boolean: `true` if this entity has the given flag set.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "has_flag"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.insert_fluid",
    "content": "Method: LuaEntity.insert_fluid\nDescription: Insert fluid into this entity. Fluidbox is chosen automatically.\n\nParameters:\n- fluid (Fluid): Fluid to insert.\n\nReturns:\n- double: Amount of fluid actually inserted.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "insert_fluid"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.is_closed",
    "content": "Method: LuaEntity.is_closed\nDescription: \n\nReturns:\n- boolean: `true` if this gate is currently closed.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "is_closed"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.is_closing",
    "content": "Method: LuaEntity.is_closing\nDescription: \n\nReturns:\n- boolean: `true` if this gate is currently closing\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "is_closing"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.is_connected_to_electric_network",
    "content": "Method: LuaEntity.is_connected_to_electric_network\nDescription: Returns `true` if this entity produces or consumes electricity and is connected to an electric network that has at least one entity that can produce power.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "is_connected_to_electric_network"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.is_crafting",
    "content": "Method: LuaEntity.is_crafting\nDescription: Returns whether a craft is currently in process. It does not indicate whether progress is currently being made, but whether a crafting process has been started in this machine.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "is_crafting"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.is_opened",
    "content": "Method: LuaEntity.is_opened\nDescription: \n\nReturns:\n- boolean: `true` if this gate is currently opened.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "is_opened"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.is_opening",
    "content": "Method: LuaEntity.is_opening\nDescription: \n\nReturns:\n- boolean: `true` if this gate is currently opening.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "is_opening"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.is_rail_in_same_rail_block_as",
    "content": "Method: LuaEntity.is_rail_in_same_rail_block_as\nDescription: Checks if this rail and other rail both belong to the same rail block.\n\nParameters:\n- other_rail (LuaEntity): \n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "is_rail_in_same_rail_block_as"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.is_rail_in_same_rail_segment_as",
    "content": "Method: LuaEntity.is_rail_in_same_rail_segment_as\nDescription: Checks if this rail and other rail both belong to the same rail segment.\n\nParameters:\n- other_rail (LuaEntity): \n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "is_rail_in_same_rail_segment_as"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.is_registered_for_construction",
    "content": "Method: LuaEntity.is_registered_for_construction\nDescription: Is this entity or tile ghost or item request proxy registered for construction? If false, it means a construction robot has been dispatched to build the entity, or it is not an entity that can be constructed.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "is_registered_for_construction"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.is_registered_for_deconstruction",
    "content": "Method: LuaEntity.is_registered_for_deconstruction\nDescription: Is this entity registered for deconstruction with this force? If false, it means a construction robot has been dispatched to deconstruct it, or it is not marked for deconstruction. The complexity is effectively O(1) - it depends on the number of objects targeting this entity which should be small enough.\n\nParameters:\n- force (ForceID): The force construction manager to check.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "is_registered_for_deconstruction"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.is_registered_for_repair",
    "content": "Method: LuaEntity.is_registered_for_repair\nDescription: Is this entity registered for repair? If false, it means a construction robot has been dispatched to upgrade it, or it is not damaged. This is worst-case O(N) complexity where N is the current number of things in the repair queue.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "is_registered_for_repair"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.is_registered_for_upgrade",
    "content": "Method: LuaEntity.is_registered_for_upgrade\nDescription: Is this entity registered for upgrade? If false, it means a construction robot has been dispatched to upgrade it, or it is not marked for upgrade. This is worst-case O(N) complexity where N is the current number of things in the upgrade queue.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "is_registered_for_upgrade"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.launch_rocket",
    "content": "Method: LuaEntity.launch_rocket\nDescription: \n\nReturns:\n- boolean: `true` if the rocket was successfully launched. Return value of `false` means the silo is not ready for launch.\n\nRaises:\n- on_rocket_launch_ordered: Raised if the rocket launch was successfully initiated.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "launch_rocket"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.mine",
    "content": "Method: LuaEntity.mine\nDescription: Mines this entity.\n\n'Standard' operation is to keep calling `LuaEntity.mine` with an inventory until all items are transferred and the items dealt with.\n\nThe result of mining the entity (the item(s) it produces when mined) will be dropped on the ground if they don't fit into the provided inventory. If no inventory is provided, the items will be destroyed.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "mine"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.mine",
    "content": "Parameters:\n- force (boolean)[Optional]: If true, when the item(s) don't fit into the given inventory the entity is force mined. If false, the mining operation fails when there isn't enough room to transfer all of the items into the inventory. Defaults to false. This is ignored and acts as `true` if no inventory is provided.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "mine"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.mine",
    "content": "- ignore_minable (boolean)[Optional]: If true, the minable state of the entity is ignored. Defaults to `false`. If false, an entity that isn't minable (set as not-minable in the prototype or isn't minable for other reasons) will fail to be mined.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "mine"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.mine",
    "content": "- inventory (LuaInventory)[Optional]: If provided the item(s) will be transferred into this inventory. If provided, this must be an inventory created with [LuaGameScript::create_inventory](runtime:LuaGameScript::create_inventory) or be a basic inventory owned by some entity.\n- raise_destroyed (boolean)[Optional]: If true, [script_raised_destroy](runtime:script_raised_destroy) will be raised. Defaults to `true`.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "mine"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.mine",
    "content": "Returns:\n- boolean: Whether mining succeeded.\n\nRaises:\n- script_raised_destroy: Raised if the `raise_destroyed` flag was set and the entity was successfully mined.\n\nFormat:\n- {'takes_table': True, 'table_optional': True}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "mine"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.order_deconstruction",
    "content": "Method: LuaEntity.order_deconstruction\nDescription: Sets the entity to be deconstructed by construction robots.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "order_deconstruction"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.order_deconstruction",
    "content": "Parameters:\n- force (ForceID): The force whose robots are supposed to do the deconstruction.\n- item_index (uint)[Optional]: The index of the undo item to add this action to. An index of `0` creates a new undo item for it. An index of `1` adds the action to the latest undo action on the stack. Defaults to putting it into the appropriate undo item automatically if one is not specified.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "order_deconstruction"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.order_deconstruction",
    "content": "- player (PlayerIdentification)[Optional]: The player to set the last_user to, if any. Also the player whose undo queue this action should be added to.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "order_deconstruction"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.order_deconstruction",
    "content": "Returns:\n- boolean: if the entity was marked for deconstruction.\n\nRaises:\n- on_marked_for_deconstruction: Raised if the entity was successfully marked for deconstruction.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "order_deconstruction"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.order_upgrade",
    "content": "Method: LuaEntity.order_upgrade\nDescription: Sets the entity to be upgraded by construction robots.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "order_upgrade"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.order_upgrade",
    "content": "Parameters:\n- force (ForceID): The force whose robots are supposed to do the upgrade.\n- item_index (uint)[Optional]: The index of the undo item to add this action to. An index of `0` creates a new undo item for it. Defaults to putting it into the appropriate undo item automatically if not specified.\n- player (PlayerIdentification)[Optional]: The player whose undo queue this action should be added to.\n- target (EntityWithQualityID): The prototype of the entity to upgrade to.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "order_upgrade"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.order_upgrade",
    "content": "Returns:\n- boolean: Whether the entity was marked for upgrade.\n\nRaises:\n- on_marked_for_upgrade: Raised if the entity was successfully marked for upgrade.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "order_upgrade"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.play_note",
    "content": "Method: LuaEntity.play_note\nDescription: Plays a note with the given instrument and note.\n\nParameters:\n- instrument (uint): \n- note (uint): \n\nReturns:\n- boolean: Whether the request is valid. The sound may or may not be played depending on polyphony settings.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "play_note"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.release_from_spawner",
    "content": "Method: LuaEntity.release_from_spawner\nDescription: Release the unit from the spawner which spawned it. This allows the spawner to continue spawning additional units.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "release_from_spawner"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.remove_fluid",
    "content": "Method: LuaEntity.remove_fluid\nDescription: Remove fluid from this entity.\n\nIf temperature is given only fluid matching that exact temperature is removed. If minimum and maximum is given fluid within that range is removed.\n\nParameters:\n- amount (double): Amount to remove\n- maximum_temperature (double)[Optional]: \n- minimum_temperature (double)[Optional]: \n- name (string): Fluid prototype name.\n- temperature (double)[Optional]: \n\nReturns:\n- double: Amount of fluid actually removed.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "remove_fluid"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.remove_fluid",
    "content": "Returns:\n- double: Amount of fluid actually removed.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "remove_fluid"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.remove_market_item",
    "content": "Method: LuaEntity.remove_market_item\nDescription: Remove an offer from a market.\n\nThe other offers are moved down to fill the gap created by removing the offer, which decrements the overall size of the offer array.\n\nParameters:\n- offer (uint): Index of offer to remove.\n\nReturns:\n- boolean: `true` if the offer was successfully removed; `false` when the given index was not valid.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "remove_market_item"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.request_to_close",
    "content": "Method: LuaEntity.request_to_close\nDescription: \n\nParameters:\n- force (ForceID): The force that requests the gate to be closed.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "request_to_close"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.request_to_open",
    "content": "Method: LuaEntity.request_to_open\nDescription: \n\nParameters:\n- extra_time (uint)[Optional]: Extra ticks to stay open.\n- force (ForceID): The force that requests the gate to be open.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "request_to_open"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.revive",
    "content": "Method: LuaEntity.revive\nDescription: Revive a ghost, which turns it from a ghost into a real entity or tile.\n\nParameters:\n- raise_revive (boolean)[Optional]: If true, and an entity ghost; [script_raised_revive](runtime:script_raised_revive) will be called. Else if true, and a tile ghost; [script_raised_set_tiles](runtime:script_raised_set_tiles) will be called.\n- return_item_request_proxy (boolean)[Optional]: If `true` the function will return item request proxy as the third return value.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "revive"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.revive",
    "content": "Returns:\n- {'complex_type': 'dictionary', 'key': 'string', 'value': 'uint'}: Any items the new real entity collided with or `nil` if the ghost could not be revived.\n- LuaEntity: The revived entity if an entity ghost was successfully revived.\n- LuaEntity: The item request proxy if it was requested with `return_item_request_proxy`.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "revive"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.revive",
    "content": "Raises:\n- script_raised_revive: Raised if this was an entity ghost and the `raise_revive` flag was set and the entity was successfully revived.\n- script_raised_set_tiles: Raised if this was a tile ghost and the `raise_revive` flag was set and the tile was successfully revived.\n\nFormat:\n- {'takes_table': True, 'table_optional': True}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "revive"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.rotate",
    "content": "Method: LuaEntity.rotate\nDescription: Rotates this entity as if the player rotated it.\n\nParameters:\n- by_player (PlayerIdentification)[Optional]: \n- reverse (boolean)[Optional]: If `true`, rotate the entity in the counter-clockwise direction.\n\nReturns:\n- boolean: Whether the rotation was successful.\n\nRaises:\n- on_player_rotated_entity: Raised if the `by_player` argument was given and the rotation was successful.\n\nFormat:\n- {'takes_table': True, 'table_optional': True}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "rotate"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.set_beam_source",
    "content": "Method: LuaEntity.set_beam_source\nDescription: Set the source of this beam.\n\nParameters:\n- source ({'complex_type': 'union', 'options': ['LuaEntity', 'MapPosition'], 'full_format': False}): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "set_beam_source"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.set_beam_target",
    "content": "Method: LuaEntity.set_beam_target\nDescription: Set the target of this beam.\n\nParameters:\n- target ({'complex_type': 'union', 'options': ['LuaEntity', 'MapPosition'], 'full_format': False}): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "set_beam_target"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.set_driver",
    "content": "Method: LuaEntity.set_driver\nDescription: Sets the driver of this vehicle.\n\nThis differs from [LuaEntity::set_passenger](runtime:LuaEntity::set_passenger) in that the passenger can't drive the vehicle.\n\nParameters:\n- driver ({'complex_type': 'union', 'options': ['LuaEntity', 'PlayerIdentification'], 'full_format': False})[Optional]: The new driver. Writing `nil` ejects the current driver, if any.\n\nRaises:\n- on_player_driving_changed_state: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "set_driver"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.set_filter",
    "content": "Method: LuaEntity.set_filter\nDescription: Set the filter for a slot in an inserter (ItemFilter), loader (ItemFilter), mining drill (EntityID), asteroid collector (AsteroidChunkID) or logistic storage container (ItemWithQualityID). The entity must allow filters.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "set_filter"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.set_filter",
    "content": "Parameters:\n- filter ({'complex_type': 'union', 'options': ['ItemFilter', 'ItemWithQualityID', 'EntityID', 'AsteroidChunkID'], 'full_format': False})[Optional]: The item or entity to filter, or `nil` to clear the filter.\n- index (uint): Index of the slot to set the filter for.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "set_filter"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.set_fluid",
    "content": "Method: LuaEntity.set_fluid\nDescription: Sets fluid to the i-th fluid storage.\n\nFluid storages that are part of FluidBoxes (also available through [LuaFluidBox](runtime:LuaFluidBox)) may reject some fluids if they do not match filters or are above the FluidBox volume. To verify how much fluid was set a return value can be used which is the same as value that would be returned by [LuaEntity::get_fluid](runtime:LuaEntity::get_fluid).",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "set_fluid"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.set_fluid",
    "content": "Parameters:\n- fluid (Fluid)[Optional]: Fluid to set. Fluid storage will be cleared if this is not provided.\n- index (uint): Fluid storage index. Valid values are from 1 up to [LuaEntity::fluids_count](runtime:LuaEntity::fluids_count).\n\nReturns:\n- Fluid: Fluid in this storage after it was set. nil if fluid storage is empty.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "set_fluid"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.set_heat_setting",
    "content": "Method: LuaEntity.set_heat_setting\nDescription: Sets the heat setting for this heat interface.\n\nParameters:\n- filter (HeatSetting): The new setting.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "set_heat_setting"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.set_infinity_container_filter",
    "content": "Method: LuaEntity.set_infinity_container_filter\nDescription: Sets the filter for this infinity container at the given index.\n\nParameters:\n- filter ({'complex_type': 'union', 'options': ['InfinityInventoryFilter', 'nil'], 'full_format': False}): The new filter, or `nil` to clear the filter.\n- index (uint): The index to set.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "set_infinity_container_filter"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.set_infinity_pipe_filter",
    "content": "Method: LuaEntity.set_infinity_pipe_filter\nDescription: Sets the filter for this infinity pipe.\n\nParameters:\n- filter ({'complex_type': 'union', 'options': ['InfinityPipeFilter', 'nil'], 'full_format': False}): The new filter, or `nil` to clear the filter.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "set_infinity_pipe_filter"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.set_passenger",
    "content": "Method: LuaEntity.set_passenger\nDescription: Sets the passenger of this car or spidertron.\n\nThis differs from [LuaEntity::get_driver](runtime:LuaEntity::get_driver) in that the passenger can't drive the car.\n\nParameters:\n- passenger ({'complex_type': 'union', 'options': ['LuaEntity', 'PlayerIdentification'], 'full_format': False})[Optional]: The new passenger. Writing `nil` ejects the current passenger, if any.\n\nRaises:\n- on_player_driving_changed_state: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "set_passenger"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.set_priority_target",
    "content": "Method: LuaEntity.set_priority_target\nDescription: Set the entity ID name at the specified position in the turret's priority list.\n\nParameters:\n- entity_id (EntityID)[Optional]: The name of the entity prototype, or `nil` to clear the entry.\n- index (uint): The index of the entry to set.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "set_priority_target"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.set_recipe",
    "content": "Method: LuaEntity.set_recipe\nDescription: Sets the given recipe in this assembly machine.\n\nParameters:\n- quality (QualityID)[Optional]: The quality. If not provided `normal` is used.\n- recipe (RecipeID)[Optional]: The new recipe. Writing `nil` clears the recipe, if any.\n\nReturns:\n- {'complex_type': 'array', 'value': 'ItemWithQualityCounts'}: Any items removed from this entity as a result of setting the recipe.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "set_recipe"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.silent_revive",
    "content": "Method: LuaEntity.silent_revive\nDescription: Revives a ghost silently, so the revival makes no sound and no smoke is created.\n\nParameters:\n- raise_revive (boolean)[Optional]: If true, and an entity ghost; [script_raised_revive](runtime:script_raised_revive) will be called. Else if true, and a tile ghost; [script_raised_set_tiles](runtime:script_raised_set_tiles) will be called.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "silent_revive"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.silent_revive",
    "content": "Returns:\n- {'complex_type': 'array', 'value': 'ItemWithQualityCounts'}: Any items the new real entity collided with or `nil` if the ghost could not be revived.\n- LuaEntity: The revived entity if an entity ghost was successfully revived.\n- LuaEntity: The item request proxy.",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "silent_revive"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.silent_revive",
    "content": "Raises:\n- script_raised_revive: Raised if this was an entity ghost and the `raise_revive` flag was set and the entity was successfully revived.\n- script_raised_set_tiles: Raised if this was a tile ghost and the `raise_revive` flag was set and the tile was successfully revived.\n\nFormat:\n- {'takes_table': True, 'table_optional': True}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "silent_revive"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.spawn_decorations",
    "content": "Method: LuaEntity.spawn_decorations\nDescription: Triggers spawn_decoration actions defined in the entity prototype or does nothing if entity is not \"turret\" or \"unit-spawner\".\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "spawn_decorations"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.start_fading_out",
    "content": "Method: LuaEntity.start_fading_out\nDescription: Only works if the entity is a speech-bubble, with an \"effect\" defined in its wrapper_flow_style. Starts animating the opacity of the speech bubble towards zero, and destroys the entity when it hits zero.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "start_fading_out"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.stop_spider",
    "content": "Method: LuaEntity.stop_spider\nDescription: Sets the [speed](runtime:LuaEntity::speed) of the given SpiderVehicle to zero. Notably does not clear its [autopilot_destination](runtime:LuaEntity::autopilot_destination), which it will continue moving towards if set.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "stop_spider"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.supports_backer_name",
    "content": "Method: LuaEntity.supports_backer_name\nDescription: Whether this entity supports a backer name.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "supports_backer_name"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.to_be_deconstructed",
    "content": "Method: LuaEntity.to_be_deconstructed\nDescription: Is this entity marked for deconstruction?\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "to_be_deconstructed"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.to_be_upgraded",
    "content": "Method: LuaEntity.to_be_upgraded\nDescription: Is this entity marked for upgrade?\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "to_be_upgraded"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.toggle_equipment_movement_bonus",
    "content": "Method: LuaEntity.toggle_equipment_movement_bonus\nDescription: Toggle this entity's equipment movement bonus. Does nothing if the entity does not have an equipment grid.\n\nThis property can also be read and written on the equipment grid of this entity.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "toggle_equipment_movement_bonus"
    }
  },
  {
    "type": "method",
    "name": "LuaEntity.update_connections",
    "content": "Method: LuaEntity.update_connections\nDescription: Reconnect loader, beacon, cliff and mining drill connections to entities that might have been teleported out or in by the script. The game doesn't do this automatically as we don't want to lose performance by checking this in normal games.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntity",
      "method_name": "update_connections"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.absorbed_pollution",
    "content": "Attribute: absorbed_pollution \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "absorbed_pollution"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.active",
    "content": "Attribute: active \nRead_type: boolean\nWrite_type: boolean\nDescription: Deactivating an entity will stop all its operations (car will stop moving, inserters will stop working, fish will stop moving etc).\n\nEntities that are not active naturally can't be set to be active (setting it to be active will do nothing)\n\nGhosts, simple smoke, and corpses can't be modified at this time.\n\nIt is even possible to set the character to not be active, so he can't move and perform most of the tasks.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "active"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.ai_settings",
    "content": "Attribute: ai_settings \nRead_type: LuaAISettings\n\nDescription: The ai settings of this unit.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "ai_settings"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.alert_parameters",
    "content": "Attribute: alert_parameters \nRead_type: ProgrammableSpeakerAlertParameters\nWrite_type: ProgrammableSpeakerAlertParameters\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "alert_parameters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.allow_dispatching_robots",
    "content": "Attribute: allow_dispatching_robots \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether this character's personal roboports are allowed to dispatch robots.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "allow_dispatching_robots"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.always_on",
    "content": "Attribute: always_on \nRead_type: boolean\nWrite_type: boolean\nDescription: If the lamp is always on when not driven by control behavior.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "always_on"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.amount",
    "content": "Attribute: amount \nRead_type: uint\nWrite_type: uint\nDescription: Count of resource units contained.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "amount"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.armed",
    "content": "Attribute: armed \nRead_type: boolean\n\nDescription: Whether this land mine is armed.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "armed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.artillery_auto_targeting",
    "content": "Attribute: artillery_auto_targeting \nRead_type: boolean\nWrite_type: boolean\nDescription: If this artillery auto-targets enemies.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "artillery_auto_targeting"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.associated_player",
    "content": "Attribute: associated_player [Optional]\nRead_type: {'complex_type': 'union', 'options': ['LuaPlayer', 'PlayerIdentification'], 'full_format': False}\nWrite_type: {\"complex_type\": \"union\", \"options\": [\"LuaPlayer\", \"PlayerIdentification\"], \"full_format\": false}\nDescription: The player this character is associated with, if any. Set to `nil` to clear.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "associated_player"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.associated_player",
    "content": "The player will be automatically disassociated when a controller is set on the character. Also, all characters associated to a player will be logged off when the player logs off in multiplayer.\n\nReading this property will return a [LuaPlayer](runtime:LuaPlayer), while [PlayerIdentification](runtime:PlayerIdentification) can be used when writing.\n\nA character associated with a player is not directly controlled by any player.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "associated_player"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.autopilot_destination",
    "content": "Attribute: autopilot_destination [Optional]\nRead_type: MapPosition\nWrite_type: MapPosition\nDescription: Destination of this spidertron's autopilot, if any. Writing `nil` clears all destinations.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "autopilot_destination"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.autopilot_destinations",
    "content": "Attribute: autopilot_destinations \nRead_type: {'complex_type': 'array', 'value': 'MapPosition'}\n\nDescription: The queued destination positions of spidertron's autopilot.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "autopilot_destinations"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.backer_name",
    "content": "Attribute: backer_name [Optional]\nRead_type: string\nWrite_type: string\nDescription: The backer name assigned to this entity. Entities that support backer names are labs, locomotives, radars, roboports, and train stops. `nil` if this entity doesn't support backer names.\n\nWhile train stops get the name of a backer when placed down, players can rename them if they want to. In this case, `backer_name` returns the player-given name of the entity.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "backer_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.beacons_count",
    "content": "Attribute: beacons_count [Optional]\nRead_type: uint\n\nDescription: Number of beacons affecting this effect receiver. Can only be used when the entity has an effect receiver (AssemblingMachine, Furnace, Lab, MiningDrills)\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "beacons_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.belt_neighbours",
    "content": "Attribute: belt_neighbours \nRead_type: {'complex_type': 'table', 'parameters': [{'name': 'inputs', 'order': 0, 'description': 'Array of transport belt connectable entities.', 'type': {'complex_type': 'array', 'value': 'LuaEntity'}, 'optional': False}, {'name': 'outputs', 'order': 1, 'description': 'Array of transport belt connectable entities.', 'type': {'complex_type': 'array', 'value': 'LuaEntity'}, 'optional': False}]}",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "belt_neighbours"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.belt_neighbours",
    "content": "Description: The belt connectable neighbours of this belt connectable entity. Only entities that input to or are outputs of this entity. Does not contain the other end of an underground belt, see [LuaEntity::neighbours](runtime:LuaEntity::neighbours) for that.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "belt_neighbours"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.belt_shape",
    "content": "Attribute: belt_shape \nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'straight'}, {'complex_type': 'literal', 'value': 'left'}, {'complex_type': 'literal', 'value': 'right'}], 'full_format': False}\n\nDescription: Gives what is the current shape of a transport-belt.\n\nCan also be used on entity ghost if it contains transport-belt.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "belt_shape"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.belt_to_ground_type",
    "content": "Attribute: belt_to_ground_type \nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'input'}, {'complex_type': 'literal', 'value': 'output'}], 'full_format': False}\n\nDescription: Whether this underground belt goes into or out of the ground.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "belt_to_ground_type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.bonus_mining_progress",
    "content": "Attribute: bonus_mining_progress [Optional]\nRead_type: double\nWrite_type: double\nDescription: The bonus mining progress for this mining drill. Read yields a number in range [0, mining_target.prototype.mineable_properties.mining_time]. `nil` if this isn't a mining drill.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "bonus_mining_progress"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.bonus_progress",
    "content": "Attribute: bonus_progress \nRead_type: double\nWrite_type: double\nDescription: The current productivity bonus progress, as a number in range `[0, 1]`.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "bonus_progress"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.bounding_box",
    "content": "Attribute: bounding_box \nRead_type: BoundingBox\n\nDescription: [LuaEntityPrototype::collision_box](runtime:LuaEntityPrototype::collision_box) around entity's given position and respecting the current entity orientation.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "bounding_box"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.burner",
    "content": "Attribute: burner [Optional]\nRead_type: LuaBurner\n\nDescription: The burner energy source for this entity, if any.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "burner"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.chain_signal_state",
    "content": "Attribute: chain_signal_state \nRead_type: defines.chain_signal_state\n\nDescription: The state of this chain signal.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "chain_signal_state"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.character_corpse_death_cause",
    "content": "Attribute: character_corpse_death_cause \nRead_type: LocalisedString\nWrite_type: LocalisedString\nDescription: The reason this character corpse character died. `\"\"` if there is no reason.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "character_corpse_death_cause"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.character_corpse_player_index",
    "content": "Attribute: character_corpse_player_index \nRead_type: uint\nWrite_type: uint\nDescription: The player index associated with this character corpse.\n\nThe index is not guaranteed to be valid so it should always be checked first if a player with that index actually exists.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "character_corpse_player_index"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.character_corpse_tick_of_death",
    "content": "Attribute: character_corpse_tick_of_death \nRead_type: uint\nWrite_type: uint\nDescription: The tick this character corpse died at.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "character_corpse_tick_of_death"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.cliff_orientation",
    "content": "Attribute: cliff_orientation \nRead_type: CliffOrientation\n\nDescription: The orientation of this cliff.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "cliff_orientation"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.color",
    "content": "Attribute: color [Optional]\nRead_type: Color\nWrite_type: Color\nDescription: The color of this character, rolling stock, train stop, car, spider-vehicle, flying text, corpse or simple-entity-with-owner. `nil` if this entity doesn't use custom colors.\n\nCar color is overridden by the color of the current driver/passenger, if there is one.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.combat_robot_owner",
    "content": "Attribute: combat_robot_owner [Optional]\nRead_type: LuaEntity\nWrite_type: LuaEntity\nDescription: The owner of this combat robot, if any.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "combat_robot_owner"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.combinator_description",
    "content": "Attribute: combinator_description \nRead_type: string\nWrite_type: string\nDescription: The description on this combinator\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "combinator_description"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.commandable",
    "content": "Attribute: commandable [Optional]\nRead_type: LuaCommandable\n\nDescription: Returns a LuaCommandable for this entity or nil if entity is not commandable.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "commandable"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.connected_rail",
    "content": "Attribute: connected_rail [Optional]\nRead_type: LuaEntity\n\nDescription: The rail entity this train stop is connected to, if any.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "connected_rail"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.connected_rail_direction",
    "content": "Attribute: connected_rail_direction \nRead_type: defines.rail_direction\n\nDescription: Rail direction to which this train stop is binding. This returns a value even when no rails are present.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "connected_rail_direction"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.consumption_bonus",
    "content": "Attribute: consumption_bonus \nRead_type: double\n\nDescription: The consumption bonus of this entity.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "consumption_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.consumption_modifier",
    "content": "Attribute: consumption_modifier \nRead_type: float\nWrite_type: float\nDescription: Multiplies the energy consumption.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "consumption_modifier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.copy_color_from_train_stop",
    "content": "Attribute: copy_color_from_train_stop \nRead_type: boolean\nWrite_type: boolean\nDescription: If this RollingStock has 'copy color from train stop' enabled.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "copy_color_from_train_stop"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.corpse_expires",
    "content": "Attribute: corpse_expires \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether this corpse will ever fade away.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "corpse_expires"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.corpse_immune_to_entity_placement",
    "content": "Attribute: corpse_immune_to_entity_placement \nRead_type: boolean\nWrite_type: boolean\nDescription: If true, corpse won't be destroyed when entities are placed over it. If false, whether corpse will be removed or not depends on value of [CorpsePrototype::remove_on_entity_placement](prototype:CorpsePrototype::remove_on_entity_placement).",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "corpse_immune_to_entity_placement"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.crafting_progress",
    "content": "Attribute: crafting_progress \nRead_type: float\nWrite_type: float\nDescription: The current crafting progress, as a number in range `[0, 1]`.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "crafting_progress"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.crafting_speed",
    "content": "Attribute: crafting_speed \nRead_type: double\n\nDescription: The current crafting speed, including speed bonuses from modules and beacons.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "crafting_speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.crane_destination",
    "content": "Attribute: crane_destination \nRead_type: MapPosition\nWrite_type: MapPosition\nDescription: Destination of the crane of this entity. Throws when trying to set the destination out of range.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "crane_destination"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.crane_destination_3d",
    "content": "Attribute: crane_destination_3d \nRead_type: Vector3D\nWrite_type: Vector3D\nDescription: Destination of the crane of this entity in 3D. Throws when trying to set the destination out of range.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "crane_destination_3d"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.crane_grappler_destination",
    "content": "Attribute: crane_grappler_destination \nRead_type: None\nWrite_type: MapPosition\nDescription: Will set destination for the grappler of crane of this entity. The crane grappler will start moving to reach the destination, but the rest of the arm will remain stationary. Throws when trying to set the destination out of range.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "crane_grappler_destination"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.crane_grappler_destination_3d",
    "content": "Attribute: crane_grappler_destination_3d \nRead_type: None\nWrite_type: Vector3D\nDescription: Will set destination in 3D for the grappler of crane of this entity. The crane grappler will start moving to reach the destination, but the rest of the arm will remain stationary. Throws when trying to set the destination out of range.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "crane_grappler_destination_3d"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.custom_status",
    "content": "Attribute: custom_status [Optional]\nRead_type: CustomEntityStatus\nWrite_type: CustomEntityStatus\nDescription: A custom status for this entity that will be displayed in the GUI.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "custom_status"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.damage_dealt",
    "content": "Attribute: damage_dealt \nRead_type: double\nWrite_type: double\nDescription: The damage dealt by this turret, artillery turret, or artillery wagon.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "damage_dealt"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.destructible",
    "content": "Attribute: destructible \nRead_type: boolean\nWrite_type: boolean\nDescription: If set to `false`, this entity can't be damaged and won't be attacked automatically. It can however still be mined.\n\nEntities that are indestructible naturally (they have no health, like smoke, resource etc) can't be set to be destructible.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "destructible"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.direction",
    "content": "Attribute: direction \nRead_type: defines.direction\nWrite_type: defines.direction\nDescription: The current direction this entity is facing.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "direction"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.disabled_by_control_behavior",
    "content": "Attribute: disabled_by_control_behavior \nRead_type: boolean\n\nDescription: If the updatable entity is disabled by control behavior.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "disabled_by_control_behavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.disabled_by_recipe",
    "content": "Attribute: disabled_by_recipe \nRead_type: boolean\n\nDescription: If the updatable entity is disabled by recipe.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "disabled_by_recipe"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.disabled_by_script",
    "content": "Attribute: disabled_by_script \nRead_type: boolean\nWrite_type: boolean\nDescription: If the updatable entity is disabled by script.\n\nNote: Some entities (Corpse, FireFlame, Roboport, RollingStock, dying entities) need to remain active and will ignore writes.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "disabled_by_script"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.draw_data",
    "content": "Attribute: draw_data \nRead_type: RollingStockDrawData\n\nDescription: Gives a draw data of the given entity if it supports such data.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "draw_data"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.driver_is_gunner",
    "content": "Attribute: driver_is_gunner [Optional]\nRead_type: boolean\nWrite_type: boolean\nDescription: Whether the driver of this car or spidertron is the gunner. If `false`, the passenger is the gunner. `nil` if this is neither a car or a spidertron.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "driver_is_gunner"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.drop_position",
    "content": "Attribute: drop_position \nRead_type: MapPosition\nWrite_type: MapPosition\nDescription: Position where the entity puts its stuff.\n\nMining drills and crafting machines can't have their drop position changed; inserters must have `allow_custom_vectors` set to true on their prototype to allow changing the drop position.\n\nMeaningful only for entities that put stuff somewhere, such as mining drills, crafting machines with a drop target or inserters.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "drop_position"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.drop_target",
    "content": "Attribute: drop_target [Optional]\nRead_type: LuaEntity\nWrite_type: LuaEntity\nDescription: The entity this entity is putting its items to. If there are multiple possible entities at the drop-off point, writing to this attribute allows a mod to choose which one to drop off items to. The entity needs to collide with the tile box under the drop-off position. `nil` if there is no entity to put items to, or if this is not an entity that puts items somewhere.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "drop_target"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.effective_speed",
    "content": "Attribute: effective_speed [Optional]\nRead_type: float\n\nDescription: The current speed of this unit in tiles per tick, taking into account any walking speed modifier given by the tile the unit is standing on. `nil` if this is not a unit.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "effective_speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.effectivity_modifier",
    "content": "Attribute: effectivity_modifier \nRead_type: float\nWrite_type: float\nDescription: Multiplies the acceleration the vehicle can create for one unit of energy. Defaults to `1`.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "effectivity_modifier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.effects",
    "content": "Attribute: effects [Optional]\nRead_type: ModuleEffects\n\nDescription: The effects being applied to this entity, if any. For beacons, this is the effect the beacon is broadcasting.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "effects"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.electric_buffer_size",
    "content": "Attribute: electric_buffer_size [Optional]\nRead_type: double\nWrite_type: double\nDescription: The buffer size for the electric energy source. `nil` if the entity doesn't have an electric energy source.\n\nWrite access is limited to the ElectricEnergyInterface type.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "electric_buffer_size"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.electric_drain",
    "content": "Attribute: electric_drain [Optional]\nRead_type: double\n\nDescription: The electric drain for the electric energy source. `nil` if the entity doesn't have an electric energy source.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "electric_drain"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.electric_emissions_per_joule",
    "content": "Attribute: electric_emissions_per_joule [Optional]\nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'double'}\n\nDescription: The table of emissions of this energy source in `pollution/Joule`, indexed by pollutant type. `nil` if the entity doesn't have an electric energy source. Multiplying values in the returned table by energy consumption in `Watt` gives `pollution/second`.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "electric_emissions_per_joule"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.electric_network_id",
    "content": "Attribute: electric_network_id [Optional]\nRead_type: uint\n\nDescription: Returns the id of the electric network that this entity is connected to, if any.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "electric_network_id"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.electric_network_statistics",
    "content": "Attribute: electric_network_statistics \nRead_type: LuaFlowStatistics\n\nDescription: The electric network statistics for this electric pole.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "electric_network_statistics"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.enable_logistics_while_moving",
    "content": "Attribute: enable_logistics_while_moving \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether equipment grid logistics are enabled while this vehicle is moving.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "enable_logistics_while_moving"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.energy",
    "content": "Attribute: energy \nRead_type: double\nWrite_type: double\nDescription: Energy stored in the entity's energy buffer (energy stored in electrical devices etc.). Always 0 for entities that don't have the concept of energy stored inside.\nExamples: [\"```\\ngame.player.print(\\\"Machine energy: \\\" .. game.player.selected.energy .. \\\"J\\\")\\ngame.player.selected.energy = 3000\\n```\"]",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "energy"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.energy_generated_last_tick",
    "content": "Attribute: energy_generated_last_tick \nRead_type: double\n\nDescription: How much energy this generator generated in the last tick.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "energy_generated_last_tick"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.entity_label",
    "content": "Attribute: entity_label [Optional]\nRead_type: string\nWrite_type: string\nDescription: The label on this spider-vehicle entity, if any. `nil` if this is not a spider-vehicle.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "entity_label"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.filter_slot_count",
    "content": "Attribute: filter_slot_count \nRead_type: uint\n\nDescription: The number of filter slots this inserter, loader, mining drill, asteroid collector or logistic storage container has. 0 if not one of those entities.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "filter_slot_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.fluidbox",
    "content": "Attribute: fluidbox \nRead_type: LuaFluidBox\n\nDescription: Fluidboxes of this entity.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "fluidbox"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.fluids_count",
    "content": "Attribute: fluids_count \nRead_type: uint\n\nDescription: Returns count of fluid storages. This includes fluid storages provided by FluidBoxes but also covers other fluid storages like FluidTurret's internal buffer and FluidWagon's fluid since they are not FluidBox and cannot be exposed through [LuaFluidBox](runtime:LuaFluidBox).",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "fluids_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.follow_offset",
    "content": "Attribute: follow_offset [Optional]\nRead_type: Vector\nWrite_type: Vector\nDescription: The follow offset of this spidertron, if any entity is being followed. This is randomized each time the follow entity is set.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "follow_offset"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.follow_target",
    "content": "Attribute: follow_target [Optional]\nRead_type: LuaEntity\nWrite_type: LuaEntity\nDescription: The follow target of this spidertron, if any.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "follow_target"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.friction_modifier",
    "content": "Attribute: friction_modifier \nRead_type: float\nWrite_type: float\nDescription: Multiplies the car friction rate.\nExamples: [\"```\\n-- This will allow the car to go much faster\\ngame.player.vehicle.friction_modifier = 0.5\\n```\"]",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "friction_modifier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.frozen",
    "content": "Attribute: frozen \nRead_type: boolean\n\nDescription: If the freezable entity is currently frozen.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "frozen"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.ghost_localised_description",
    "content": "Attribute: ghost_localised_description \nRead_type: LocalisedString\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "ghost_localised_description"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.ghost_localised_name",
    "content": "Attribute: ghost_localised_name \nRead_type: LocalisedString\n\nDescription: Localised name of the entity or tile contained in this ghost.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "ghost_localised_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.ghost_name",
    "content": "Attribute: ghost_name \nRead_type: string\n\nDescription: Name of the entity or tile contained in this ghost\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "ghost_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.ghost_prototype",
    "content": "Attribute: ghost_prototype \nRead_type: {'complex_type': 'union', 'options': ['LuaEntityPrototype', 'LuaTilePrototype'], 'full_format': False}\n\nDescription: The prototype of the entity or tile contained in this ghost.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "ghost_prototype"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.ghost_type",
    "content": "Attribute: ghost_type \nRead_type: string\n\nDescription: The prototype type of the entity or tile contained in this ghost.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "ghost_type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.ghost_unit_number",
    "content": "Attribute: ghost_unit_number [Optional]\nRead_type: uint\n\nDescription: The [unit_number](runtime:LuaEntity::unit_number) of the entity contained in this ghost. It is the same as the unit number of the [EntityWithOwnerPrototype](prototype:EntityWithOwnerPrototype) that was destroyed to create this ghost. If it was created by other means, or if the inner entity does not support unit numbers, this property is `nil`.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "ghost_unit_number"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.gps_tag",
    "content": "Attribute: gps_tag \nRead_type: string\n\nDescription: Returns a [rich text](https://wiki.factorio.com/Rich_text) string containing this entity's position and surface name as a gps tag. [Printing](runtime:LuaGameScript::print) it will ping the location of the entity.\nExamples: [\"```\\n-- called on a LuaEntity on the default surface it returns:\\nentity.gps_tag -- => \\\"[gps=-4,-9]\\\"\\n\\n-- called on a LuaEntity on \\\"custom-surface\\\" it returns:\\ndifferent_entity.gps_tag -- => \\\"[gps=1,-5,custom-surface]\\\"\\n```\"]",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "gps_tag"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.graphics_variation",
    "content": "Attribute: graphics_variation [Optional]\nRead_type: uint8\nWrite_type: uint8\nDescription: The graphics variation for this entity. `nil` if this entity doesn't use graphics variations.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "graphics_variation"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.grid",
    "content": "Attribute: grid [Optional]\nRead_type: LuaEquipmentGrid\n\nDescription: This entity's equipment grid, if any.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "grid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.health",
    "content": "Attribute: health [Optional]\nRead_type: float\nWrite_type: float\nDescription: The current health of the entity, if any. Health is automatically clamped to be between `0` and max health (inclusive). Entities with a health of `0` can not be attacked.\n\nTo get the maximum possible health of this entity, see [LuaEntity::max_health](runtime:LuaEntity::max_health).",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "health"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.held_stack",
    "content": "Attribute: held_stack \nRead_type: LuaItemStack\n\nDescription: The item stack currently held in an inserter's hand.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "held_stack"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.held_stack_position",
    "content": "Attribute: held_stack_position \nRead_type: MapPosition\n\nDescription: Current position of the inserter's \"hand\".\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "held_stack_position"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.highlight_box_blink_interval",
    "content": "Attribute: highlight_box_blink_interval \nRead_type: uint\nWrite_type: uint\nDescription: The blink interval of this highlight box entity. `0` indicates no blink.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "highlight_box_blink_interval"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.highlight_box_type",
    "content": "Attribute: highlight_box_type \nRead_type: CursorBoxRenderType\nWrite_type: CursorBoxRenderType\nDescription: The highlight box type of this highlight box entity.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "highlight_box_type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.ignore_unprioritised_targets",
    "content": "Attribute: ignore_unprioritised_targets \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether this turret shoots at targets that are not on its priority list.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "ignore_unprioritised_targets"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.infinity_container_filters",
    "content": "Attribute: infinity_container_filters \nRead_type: {'complex_type': 'array', 'value': 'InfinityInventoryFilter'}\nWrite_type: {\"complex_type\": \"array\", \"value\": \"InfinityInventoryFilter\"}\nDescription: The filters for this infinity container.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "infinity_container_filters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.initial_amount",
    "content": "Attribute: initial_amount [Optional]\nRead_type: uint\nWrite_type: uint\nDescription: Count of initial resource units contained. `nil` if this is not an infinite resource.\n\nIf this is not an infinite resource, writing will produce an error.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "initial_amount"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.insert_plan",
    "content": "Attribute: insert_plan \nRead_type: {'complex_type': 'array', 'value': 'BlueprintInsertPlan'}\nWrite_type: {\"complex_type\": \"array\", \"value\": \"BlueprintInsertPlan\"}\nDescription: The insert plan for this ghost or item request proxy.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "insert_plan"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.inserter_filter_mode",
    "content": "Attribute: inserter_filter_mode [Optional]\nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'whitelist'}, {'complex_type': 'literal', 'value': 'blacklist'}], 'full_format': False}\nWrite_type: {\"complex_type\": \"union\", \"options\": [{\"complex_type\": \"literal\", \"value\": \"whitelist\"}, {\"complex_type\": \"literal\", \"value\": \"blacklist\"}], \"full_format\": false}\nDescription: The filter mode for this filter inserter. `nil` if this inserter doesn't use filters.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "inserter_filter_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.inserter_spoil_priority",
    "content": "Attribute: inserter_spoil_priority \nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'fresh_first'}, {'complex_type': 'literal', 'value': 'none'}, {'complex_type': 'literal', 'value': 'spoiled_first'}], 'full_format': False}\nWrite_type: {\"complex_type\": \"union\", \"options\": [{\"complex_type\": \"literal\", \"value\": \"fresh_first\"}, {\"complex_type\": \"literal\", \"value\": \"none\"}, {\"complex_type\": \"literal\", \"value\": \"spoiled_first\"}], \"full_format\": false}",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "inserter_spoil_priority"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.inserter_spoil_priority",
    "content": "Description: The spoil priority for this inserter.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "inserter_spoil_priority"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.inserter_stack_size_override",
    "content": "Attribute: inserter_stack_size_override \nRead_type: uint\nWrite_type: uint\nDescription: Sets the stack size limit on this inserter.\n\nSet to `0` to reset.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "inserter_stack_size_override"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.inserter_target_pickup_count",
    "content": "Attribute: inserter_target_pickup_count \nRead_type: uint\n\nDescription: Returns the current target pickup count of the inserter.\n\nThis considers the circuit network, manual override and the inserter stack size limit based on technology.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "inserter_target_pickup_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.is_entity_with_health",
    "content": "Attribute: is_entity_with_health \nRead_type: boolean\n\nDescription: If this entity is EntityWithHealth\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "is_entity_with_health"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.is_entity_with_owner",
    "content": "Attribute: is_entity_with_owner \nRead_type: boolean\n\nDescription: If this entity is EntityWithOwner\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "is_entity_with_owner"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.is_freezable",
    "content": "Attribute: is_freezable \nRead_type: boolean\n\nDescription: If the entity is freezable.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "is_freezable"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.is_headed_to_trains_front",
    "content": "Attribute: is_headed_to_trains_front \nRead_type: boolean\n\nDescription: If the rolling stock is facing train's front.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "is_headed_to_trains_front"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.is_military_target",
    "content": "Attribute: is_military_target \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether this entity is a MilitaryTarget. Can be written to if [LuaEntityPrototype::allow_run_time_change_of_is_military_target](runtime:LuaEntityPrototype::allow_run_time_change_of_is_military_target) returns `true`.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "is_military_target"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.is_updatable",
    "content": "Attribute: is_updatable \nRead_type: boolean\n\nDescription: If the entity is updatable.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "is_updatable"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.item_requests",
    "content": "Attribute: item_requests \nRead_type: {'complex_type': 'array', 'value': 'ItemWithQualityCounts'}\n\nDescription: Items this ghost will request when revived or items this item request proxy is requesting.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "item_requests"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.kills",
    "content": "Attribute: kills \nRead_type: uint\nWrite_type: uint\nDescription: The number of units killed by this turret, artillery turret, or artillery wagon.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "kills"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.last_user",
    "content": "Attribute: last_user [Optional]\nRead_type: {'complex_type': 'union', 'options': ['LuaPlayer', 'PlayerIdentification'], 'full_format': False}\nWrite_type: {\"complex_type\": \"union\", \"options\": [\"LuaPlayer\", \"PlayerIdentification\"], \"full_format\": false}\nDescription: The last player that changed any setting on this entity. This includes building the entity, changing its color, or configuring its circuit network. `nil` if the last user is not part of the save anymore.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "last_user"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.last_user",
    "content": "Reading this property will return a [LuaPlayer](runtime:LuaPlayer), while [PlayerIdentification](runtime:PlayerIdentification) can be used when writing.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "last_user"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.link_id",
    "content": "Attribute: link_id \nRead_type: uint\nWrite_type: uint\nDescription: The link ID this linked container is using.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "link_id"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.linked_belt_neighbour",
    "content": "Attribute: linked_belt_neighbour [Optional]\nRead_type: LuaEntity\n\nDescription: Neighbour to which this linked belt is connected to, if any.\n\nCan also be used on entity ghost if it contains linked-belt.\n\nMay return entity ghost which contains linked belt to which connection is made.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "linked_belt_neighbour"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.linked_belt_type",
    "content": "Attribute: linked_belt_type \nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'input'}, {'complex_type': 'literal', 'value': 'output'}], 'full_format': False}\nWrite_type: {\"complex_type\": \"union\", \"options\": [{\"complex_type\": \"literal\", \"value\": \"input\"}, {\"complex_type\": \"literal\", \"value\": \"output\"}], \"full_format\": false}\nDescription: Type of linked belt. Changing type will also flip direction so the belt is out of the same side.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "linked_belt_type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.linked_belt_type",
    "content": "Can only be changed when linked belt is disconnected (has no neighbour set).\n\nCan also be used on entity ghost if it contains linked-belt.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "linked_belt_type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.loader_container",
    "content": "Attribute: loader_container [Optional]\nRead_type: LuaEntity\n\nDescription: The container entity this loader is pointing at/pulling from depending on the [LuaEntity::loader_type](runtime:LuaEntity::loader_type), if any.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "loader_container"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.loader_filter_mode",
    "content": "Attribute: loader_filter_mode [Optional]\nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'none'}, {'complex_type': 'literal', 'value': 'whitelist'}, {'complex_type': 'literal', 'value': 'blacklist'}], 'full_format': False}\nWrite_type: {\"complex_type\": \"union\", \"options\": [{\"complex_type\": \"literal\", \"value\": \"none\"}, {\"complex_type\": \"literal\", \"value\": \"whitelist\"}, {\"complex_type\": \"literal\", \"value\": \"blacklist\"}], \"full_format\": false}",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "loader_filter_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.loader_filter_mode",
    "content": "Description: The filter mode for this loader. `nil` if this loader does not support filters.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "loader_filter_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.loader_type",
    "content": "Attribute: loader_type \nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'input'}, {'complex_type': 'literal', 'value': 'output'}], 'full_format': False}\nWrite_type: {\"complex_type\": \"union\", \"options\": [{\"complex_type\": \"literal\", \"value\": \"input\"}, {\"complex_type\": \"literal\", \"value\": \"output\"}], \"full_format\": false}\nDescription: Whether this loader gets items from or puts item into a container.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "loader_type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.localised_description",
    "content": "Attribute: localised_description \nRead_type: LocalisedString\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "localised_description"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.localised_name",
    "content": "Attribute: localised_name \nRead_type: LocalisedString\n\nDescription: Localised name of the entity.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "localised_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.logistic_cell",
    "content": "Attribute: logistic_cell \nRead_type: LuaLogisticCell\n\nDescription: The logistic cell this entity is a part of. Will be `nil` if this entity is not a part of any logistic cell.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "logistic_cell"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.logistic_network",
    "content": "Attribute: logistic_network \nRead_type: LuaLogisticNetwork\nWrite_type: LuaLogisticNetwork\nDescription: The logistic network this entity is a part of, or `nil` if this entity is not a part of any logistic network.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "logistic_network"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.max_health",
    "content": "Attribute: max_health \nRead_type: float\n\nDescription: Max health of this entity.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "max_health"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.minable",
    "content": "Attribute: minable \nRead_type: boolean\nWrite_type: boolean\nDescription: Not minable entities can still be destroyed.\n\nTells if entity reports as being minable right now. This takes into account minable_flag and entity specific conditions (for example rail under rolling stocks is not minable, vehicle with passenger is not minable).\n\nWrite to this field since 2.0.26 is deprecated and it will result in write to minable_flag instead.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "minable"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.minable_flag",
    "content": "Attribute: minable_flag \nRead_type: boolean\nWrite_type: boolean\nDescription: Script controlled flag that allows entity to be mined.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "minable_flag"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.mining_drill_filter_mode",
    "content": "Attribute: mining_drill_filter_mode [Optional]\nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'whitelist'}, {'complex_type': 'literal', 'value': 'blacklist'}], 'full_format': False}\nWrite_type: {\"complex_type\": \"union\", \"options\": [{\"complex_type\": \"literal\", \"value\": \"whitelist\"}, {\"complex_type\": \"literal\", \"value\": \"blacklist\"}], \"full_format\": false}\nDescription: The filter mode for this mining drill. `nil` if this mining drill doesn't have filters.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "mining_drill_filter_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.mining_progress",
    "content": "Attribute: mining_progress [Optional]\nRead_type: double\nWrite_type: double\nDescription: The mining progress for this mining drill. Is a number in range [0, mining_target.prototype.mineable_properties.mining_time]. `nil` if this isn't a mining drill.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "mining_progress"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.mining_target",
    "content": "Attribute: mining_target [Optional]\nRead_type: LuaEntity\n\nDescription: The mining target, if any.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "mining_target"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.mirroring",
    "content": "Attribute: mirroring \nRead_type: boolean\nWrite_type: boolean\nDescription: If the entity is currently mirrored. This state is referred to as `flipped` elsewhere, such as on the [on_player_flipped_entity](runtime:on_player_flipped_entity) event.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "mirroring"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.name",
    "content": "Attribute: name \nRead_type: string\n\nDescription: Name of the entity prototype. E.g. \"inserter\" or \"fast-inserter\".\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.name_tag",
    "content": "Attribute: name_tag \nRead_type: string\nWrite_type: string\nDescription: Name tag of this entity. Returns `nil` if entity has no name tag. When name tag is already used by other entity, the name will be removed from the other entity. Entity name tags can also be set in the entity \"extra settings\" GUI in the map editor.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "name_tag"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.neighbour_bonus",
    "content": "Attribute: neighbour_bonus \nRead_type: double\n\nDescription: The current total neighbour bonus of this reactor.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "neighbour_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.neighbours",
    "content": "Attribute: neighbours [Optional]\nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'dictionary', 'key': 'string', 'value': {'complex_type': 'array', 'value': 'LuaEntity'}}, {'complex_type': 'array', 'value': {'complex_type': 'array', 'value': 'LuaEntity'}}, 'LuaEntity'], 'full_format': False}\n\nDescription: A list of neighbours for certain types of entities. Applies to underground belts, walls, gates, reactors, cliffs, and pipe-connectable entities.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "neighbours"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.operable",
    "content": "Attribute: operable \nRead_type: boolean\nWrite_type: boolean\nDescription: Player can't open gui of this entity and he can't quick insert/input stuff in to the entity when it is not operable.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "operable"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.orientation",
    "content": "Attribute: orientation \nRead_type: RealOrientation\nWrite_type: RealOrientation\nDescription: The smooth orientation of this entity.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "orientation"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.parameters",
    "content": "Attribute: parameters \nRead_type: ProgrammableSpeakerParameters\nWrite_type: ProgrammableSpeakerParameters\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "parameters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.pickup_position",
    "content": "Attribute: pickup_position \nRead_type: MapPosition\nWrite_type: MapPosition\nDescription: Where the inserter will pick up items from.\n\nInserters must have `allow_custom_vectors` set to true on their prototype to allow changing the pickup position.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "pickup_position"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.pickup_target",
    "content": "Attribute: pickup_target [Optional]\nRead_type: LuaEntity\nWrite_type: LuaEntity\nDescription: The entity this inserter will attempt to pick up items from. If there are multiple possible entities at the pick-up point, writing to this attribute allows a mod to choose which one to pick up items from. The entity needs to collide with the tile box under the pick-up position. `nil` if there is no entity to pull items from.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "pickup_target"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.player",
    "content": "Attribute: player [Optional]\nRead_type: LuaPlayer\n\nDescription: The player connected to this character, if any.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "player"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.pollution_bonus",
    "content": "Attribute: pollution_bonus \nRead_type: double\n\nDescription: The pollution bonus of this entity.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "pollution_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.power_production",
    "content": "Attribute: power_production \nRead_type: double\nWrite_type: double\nDescription: The power production specific to the ElectricEnergyInterface entity type.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "power_production"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.power_switch_state",
    "content": "Attribute: power_switch_state \nRead_type: boolean\nWrite_type: boolean\nDescription: The state of this power switch.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "power_switch_state"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.power_usage",
    "content": "Attribute: power_usage \nRead_type: double\nWrite_type: double\nDescription: The power usage specific to the ElectricEnergyInterface entity type.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "power_usage"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.previous_recipe",
    "content": "Attribute: previous_recipe [Optional]\nRead_type: RecipeIDAndQualityIDPair\n\nDescription: The previous recipe this furnace was using, if any.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "previous_recipe"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.procession_tick",
    "content": "Attribute: procession_tick \nRead_type: MapTick\nWrite_type: MapTick\nDescription: how far into the current procession the cargo pod is.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "procession_tick"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.productivity_bonus",
    "content": "Attribute: productivity_bonus \nRead_type: double\n\nDescription: The productivity bonus of this entity.\n\nThis includes force based bonuses as well as beacon/module bonuses.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "productivity_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.products_finished",
    "content": "Attribute: products_finished \nRead_type: uint\nWrite_type: uint\nDescription: The number of products this machine finished crafting in its lifetime.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "products_finished"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.prototype",
    "content": "Attribute: prototype \nRead_type: LuaEntityPrototype\n\nDescription: The entity prototype of this entity.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "prototype"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.proxy_target",
    "content": "Attribute: proxy_target [Optional]\nRead_type: LuaEntity\n\nDescription: The target entity for this item-request-proxy, if any.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "proxy_target"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.pump_rail_target",
    "content": "Attribute: pump_rail_target [Optional]\nRead_type: LuaEntity\n\nDescription: The rail target of this pump, if any.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "pump_rail_target"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.quality",
    "content": "Attribute: quality \nRead_type: LuaQualityPrototype\n\nDescription: The quality of this entity.\n\nNot all entities support quality and will give the \"normal\" quality back if they don't.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "quality"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.radar_scan_progress",
    "content": "Attribute: radar_scan_progress \nRead_type: float\n\nDescription: The current radar scan progress, as a number in range `[0, 1]`.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "radar_scan_progress"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.rail_layer",
    "content": "Attribute: rail_layer \nRead_type: defines.rail_layer\n\nDescription: Gets rail layer of a given signal\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "rail_layer"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.recipe_locked",
    "content": "Attribute: recipe_locked \nRead_type: boolean\nWrite_type: boolean\nDescription: When locked; the recipe in this assembling machine can't be changed by the player.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "recipe_locked"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.relative_turret_orientation",
    "content": "Attribute: relative_turret_orientation [Optional]\nRead_type: RealOrientation\nWrite_type: RealOrientation\nDescription: The relative orientation of the vehicle turret, artillery turret, artillery wagon. `nil` if this entity isn't a vehicle with a vehicle turret or artillery turret/wagon.\n\nWriting does nothing if the vehicle doesn't have a turret.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "relative_turret_orientation"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.removal_plan",
    "content": "Attribute: removal_plan \nRead_type: {'complex_type': 'array', 'value': 'BlueprintInsertPlan'}\nWrite_type: {\"complex_type\": \"array\", \"value\": \"BlueprintInsertPlan\"}\nDescription: The removal plan for this item request proxy.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "removal_plan"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.remove_unfiltered_items",
    "content": "Attribute: remove_unfiltered_items \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether items not included in this infinity container filters should be removed from the container.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "remove_unfiltered_items"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.render_player",
    "content": "Attribute: render_player [Optional]\nRead_type: {'complex_type': 'union', 'options': ['LuaPlayer', 'PlayerIdentification'], 'full_format': False}\nWrite_type: {\"complex_type\": \"union\", \"options\": [\"LuaPlayer\", \"PlayerIdentification\"], \"full_format\": false}\nDescription: The player that this `simple-entity-with-owner`, `simple-entity-with-force`, or `highlight-box` is visible to. `nil` when this entity is rendered for all players.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "render_player"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.render_player",
    "content": "Reading this property will return a [LuaPlayer](runtime:LuaPlayer), while [PlayerIdentification](runtime:PlayerIdentification) can be used when writing.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "render_player"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.render_to_forces",
    "content": "Attribute: render_to_forces [Optional]\nRead_type: ForceSet\nWrite_type: ForceSet\nDescription: The forces that this `simple-entity-with-owner` or `simple-entity-with-force` is visible to. `nil` or an empty array when this entity is rendered for all forces.\n\nReading will always give an array of [LuaForce](runtime:LuaForce)",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "render_to_forces"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.request_from_buffers",
    "content": "Attribute: request_from_buffers \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether this requester chest is set to also request from buffer chests.\n\nUseable only on entities that have requester slots.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "request_from_buffers"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.result_quality",
    "content": "Attribute: result_quality [Optional]\nRead_type: LuaQualityPrototype\nWrite_type: QualityID\nDescription: The quality produced when this crafting machine finishes crafting. `nil` when crafting is not in progress.\n\nNote: Writing `nil` is not allowed.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "result_quality"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.robot_order_queue",
    "content": "Attribute: robot_order_queue \nRead_type: {'complex_type': 'array', 'value': 'WorkerRobotOrder'}\n\nDescription: Get the current queue of robot orders.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "robot_order_queue"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.rocket_parts",
    "content": "Attribute: rocket_parts \nRead_type: uint\nWrite_type: uint\nDescription: Number of rocket parts in the silo.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "rocket_parts"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.rocket_silo_status",
    "content": "Attribute: rocket_silo_status \nRead_type: defines.rocket_silo_status\n\nDescription: The status of this rocket silo entity.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "rocket_silo_status"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.rotatable",
    "content": "Attribute: rotatable \nRead_type: boolean\nWrite_type: boolean\nDescription: When entity is not to be rotatable (inserter, transport belt etc), it can't be rotated by player using the R key.\n\nEntities that are not rotatable naturally (like chest or furnace) can't be set to be rotatable.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "rotatable"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.secondary_bounding_box",
    "content": "Attribute: secondary_bounding_box [Optional]\nRead_type: BoundingBox\n\nDescription: The secondary bounding box of this entity or `nil` if it doesn't have one. This only exists for curved rails, and is automatically determined by the game.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "secondary_bounding_box"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.secondary_selection_box",
    "content": "Attribute: secondary_selection_box [Optional]\nRead_type: BoundingBox\n\nDescription: The secondary selection box of this entity or `nil` if it doesn't have one. This only exists for curved rails, and is automatically determined by the game.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "secondary_selection_box"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.selected_gun_index",
    "content": "Attribute: selected_gun_index [Optional]\nRead_type: uint\nWrite_type: uint\nDescription: Index of the currently selected weapon slot of this character, car, or spidertron. `nil` if this entity doesn't have guns.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "selected_gun_index"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.selection_box",
    "content": "Attribute: selection_box \nRead_type: BoundingBox\n\nDescription: [LuaEntityPrototype::selection_box](runtime:LuaEntityPrototype::selection_box) around entity's given position and respecting the current entity orientation.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "selection_box"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.shooting_target",
    "content": "Attribute: shooting_target [Optional]\nRead_type: LuaEntity\nWrite_type: LuaEntity\nDescription: The shooting target for this turret, if any. Can't be set to `nil` via script.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "shooting_target"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.signal_state",
    "content": "Attribute: signal_state \nRead_type: defines.signal_state\n\nDescription: The state of this rail signal.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "signal_state"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.spawn_shift",
    "content": "Attribute: spawn_shift \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "spawn_shift"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.spawning_cooldown",
    "content": "Attribute: spawning_cooldown \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "spawning_cooldown"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.speed",
    "content": "Attribute: speed [Optional]\nRead_type: float\nWrite_type: float\nDescription: The current speed if this is a car, rolling stock, projectile or spidertron, or the maximum speed if this is a unit. The speed is in tiles per tick. `nil` if this is not a car, rolling stock, unit, projectile or spidertron.\n\nOnly the speed of units, cars, and projectiles are writable.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.speed_bonus",
    "content": "Attribute: speed_bonus \nRead_type: double\n\nDescription: The speed bonus of this entity.\n\nThis includes force based bonuses as well as beacon/module bonuses.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "speed_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.splitter_filter",
    "content": "Attribute: splitter_filter [Optional]\nRead_type: ItemFilter\nWrite_type: ItemFilter\nDescription: The filter for this splitter, if any is set.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "splitter_filter"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.splitter_input_priority",
    "content": "Attribute: splitter_input_priority \nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'left'}, {'complex_type': 'literal', 'value': 'none'}, {'complex_type': 'literal', 'value': 'right'}], 'full_format': False}\nWrite_type: {\"complex_type\": \"union\", \"options\": [{\"complex_type\": \"literal\", \"value\": \"left\"}, {\"complex_type\": \"literal\", \"value\": \"none\"}, {\"complex_type\": \"literal\", \"value\": \"right\"}], \"full_format\": false}\nDescription: The input priority for this splitter.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "splitter_input_priority"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.splitter_output_priority",
    "content": "Attribute: splitter_output_priority \nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'left'}, {'complex_type': 'literal', 'value': 'none'}, {'complex_type': 'literal', 'value': 'right'}], 'full_format': False}\nWrite_type: {\"complex_type\": \"union\", \"options\": [{\"complex_type\": \"literal\", \"value\": \"left\"}, {\"complex_type\": \"literal\", \"value\": \"none\"}, {\"complex_type\": \"literal\", \"value\": \"right\"}], \"full_format\": false}\nDescription: The output priority for this splitter.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "splitter_output_priority"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.stack",
    "content": "Attribute: stack \nRead_type: LuaItemStack\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "stack"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.status",
    "content": "Attribute: status [Optional]\nRead_type: defines.entity_status\n\nDescription: The status of this entity, if any.\n\nThis is always the actual status of the entity, even if [LuaEntity::custom_status](runtime:LuaEntity::custom_status) is set.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "status"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.sticked_to",
    "content": "Attribute: sticked_to \nRead_type: LuaEntity\n\nDescription: The entity this sticker is sticked to.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "sticked_to"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.sticker_vehicle_modifiers",
    "content": "Attribute: sticker_vehicle_modifiers [Optional]\nRead_type: {'complex_type': 'table', 'parameters': [{'name': 'friction_modifier', 'order': 2, 'description': '', 'type': 'double', 'optional': False}, {'name': 'speed_max', 'order': 1, 'description': '', 'type': 'double', 'optional': False}, {'name': 'speed_modifier', 'order': 0, 'description': '', 'type': 'double', 'optional': False}]}\n\nDescription: The vehicle modifiers applied to this entity through the attached stickers.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "sticker_vehicle_modifiers"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.stickers",
    "content": "Attribute: stickers [Optional]\nRead_type: {'complex_type': 'array', 'value': 'LuaEntity'}\n\nDescription: The sticker entities attached to this entity, if any.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "stickers"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.storage_filter",
    "content": "Attribute: storage_filter [Optional]\nRead_type: ItemIDAndQualityIDPair\nWrite_type: ItemWithQualityID\nDescription: The storage filter for this logistic storage container.\n\nUseable only on logistic containers with the `\"storage\"` [logistic_mode](runtime:LuaEntityPrototype::logistic_mode).",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "storage_filter"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.supports_direction",
    "content": "Attribute: supports_direction \nRead_type: boolean\n\nDescription: Whether the entity has direction. When it is false for this entity, it will always return north direction when asked for.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "supports_direction"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.tags",
    "content": "Attribute: tags [Optional]\nRead_type: Tags\nWrite_type: Tags\nDescription: The tags associated with this entity ghost. `nil` if this is not an entity ghost.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "tags"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.temperature",
    "content": "Attribute: temperature [Optional]\nRead_type: double\nWrite_type: double\nDescription: The temperature of this entity's heat energy source. `nil` if this entity does not use a heat energy source.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "temperature"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.tick_grown",
    "content": "Attribute: tick_grown \nRead_type: MapTick\nWrite_type: MapTick\nDescription: The tick when this plant is fully grown.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "tick_grown"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.tick_of_last_attack",
    "content": "Attribute: tick_of_last_attack \nRead_type: uint\nWrite_type: uint\nDescription: The last tick this character entity was attacked.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "tick_of_last_attack"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.tick_of_last_damage",
    "content": "Attribute: tick_of_last_damage \nRead_type: uint\nWrite_type: uint\nDescription: The last tick this character entity was damaged.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "tick_of_last_damage"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.tile_height",
    "content": "Attribute: tile_height \nRead_type: uint\n\nDescription: Specifies the tiling size of the entity, is used to decide, if the center should be in the center of the tile (odd tile size dimension) or on the tile border (even tile size dimension). Uses the current direction of the entity.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "tile_height"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.tile_width",
    "content": "Attribute: tile_width \nRead_type: uint\n\nDescription: Specifies the tiling size of the entity, is used to decide, if the center should be in the center of the tile (odd tile size dimension) or on the tile border (even tile size dimension). Uses the current direction of the entity.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "tile_width"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.time_to_live",
    "content": "Attribute: time_to_live \nRead_type: uint64\nWrite_type: uint64\nDescription: The ticks left before a combat robot, highlight box, smoke, or sticker entity is destroyed.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "time_to_live"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.time_to_next_effect",
    "content": "Attribute: time_to_next_effect \nRead_type: uint\nWrite_type: uint\nDescription: The ticks until the next trigger effect of this smoke-with-trigger.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "time_to_next_effect"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.timeout",
    "content": "Attribute: timeout \nRead_type: uint\nWrite_type: uint\nDescription: The timeout that's left on this landmine in ticks. It describes the time between the landmine being placed and it being armed.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "timeout"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.to_be_looted",
    "content": "Attribute: to_be_looted \nRead_type: boolean\nWrite_type: boolean\nDescription: Will this item entity be picked up automatically when the player walks over it?\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "to_be_looted"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.torso_orientation",
    "content": "Attribute: torso_orientation \nRead_type: RealOrientation\nWrite_type: RealOrientation\nDescription: The torso orientation of this spider vehicle.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "torso_orientation"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.train",
    "content": "Attribute: train [Optional]\nRead_type: LuaTrain\n\nDescription: The train this rolling stock belongs to, if any. `nil` if this is not a rolling stock.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "train"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.train_stop_priority",
    "content": "Attribute: train_stop_priority \nRead_type: uint8\nWrite_type: uint8\nDescription: Priority of this train stop.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "train_stop_priority"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.trains_count",
    "content": "Attribute: trains_count \nRead_type: uint\n\nDescription: Amount of trains related to this particular train stop. Includes train stopped at this train stop (until it finds a path to next target) and trains having this train stop as goal or waypoint.\n\nTrain may be included multiple times when braking distance covers this train stop multiple times.\n\nValue may be read even when train stop has no control behavior.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "trains_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.trains_in_block",
    "content": "Attribute: trains_in_block \nRead_type: uint\n\nDescription: The number of trains in this rail block for this rail entity.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "trains_in_block"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.trains_limit",
    "content": "Attribute: trains_limit \nRead_type: uint\nWrite_type: uint\nDescription: Amount of trains above which no new trains will be sent to this train stop. Writing nil will disable the limit (will set a maximum possible value).\n\nWhen a train stop has a control behavior with wire connected and set_trains_limit enabled, this value will be overwritten by it.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "trains_limit"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.tree_color_index",
    "content": "Attribute: tree_color_index \nRead_type: uint8\nWrite_type: uint8\nDescription: Index of the tree color.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "tree_color_index"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.tree_color_index_max",
    "content": "Attribute: tree_color_index_max \nRead_type: uint8\n\nDescription: Maximum index of the tree colors.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "tree_color_index_max"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.tree_gray_stage_index",
    "content": "Attribute: tree_gray_stage_index \nRead_type: uint8\nWrite_type: uint8\nDescription: Index of the tree gray stage\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "tree_gray_stage_index"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.tree_gray_stage_index_max",
    "content": "Attribute: tree_gray_stage_index_max \nRead_type: uint8\n\nDescription: Maximum index of the tree gray stages.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "tree_gray_stage_index_max"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.tree_stage_index",
    "content": "Attribute: tree_stage_index \nRead_type: uint8\nWrite_type: uint8\nDescription: Index of the tree stage.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "tree_stage_index"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.tree_stage_index_max",
    "content": "Attribute: tree_stage_index_max \nRead_type: uint8\n\nDescription: Maximum index of the tree stages.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "tree_stage_index_max"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.type",
    "content": "Attribute: type \nRead_type: string\n\nDescription: The entity prototype type of this entity.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.unit_number",
    "content": "Attribute: unit_number [Optional]\nRead_type: uint\n\nDescription: A unique number identifying this entity for the lifetime of the save. These are allocated sequentially, and not re-used (until overflow).\n\nOnly entities inheriting from [EntityWithOwnerPrototype](prototype:EntityWithOwnerPrototype), as well as [ItemRequestProxyPrototype](prototype:ItemRequestProxyPrototype) and [EntityGhostPrototype](prototype:EntityGhostPrototype) are assigned a unit number. Returns `nil` otherwise.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "unit_number"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.units",
    "content": "Attribute: units \nRead_type: {'complex_type': 'array', 'value': 'LuaEntity'}\n\nDescription: The units associated with this spawner entity.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "units"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.use_filters",
    "content": "Attribute: use_filters \nRead_type: boolean\nWrite_type: boolean\nDescription: If set to 'true', this inserter will use filtering logic.\n\nThis has no effect if the prototype does not support filters.\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "use_filters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "valid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntity.vehicle_automatic_targeting_parameters",
    "content": "Attribute: vehicle_automatic_targeting_parameters \nRead_type: VehicleAutomaticTargetingParameters\nWrite_type: VehicleAutomaticTargetingParameters\nDescription: Read when this spidertron auto-targets enemies\n",
    "metadata": {
      "class_name": "LuaEntity",
      "attribute_name": "vehicle_automatic_targeting_parameters"
    }
  },
  {
    "type": "class",
    "name": "LuaEntityPrototype",
    "content": "Class: LuaEntityPrototype\nDescription: Prototype of an entity.",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "method",
    "name": "LuaEntityPrototype.get_crafting_speed",
    "content": "Method: LuaEntityPrototype.get_crafting_speed\nDescription: The crafting speed of this crafting-machine.\n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "method_name": "get_crafting_speed"
    }
  },
  {
    "type": "method",
    "name": "LuaEntityPrototype.get_fluid_usage_per_tick",
    "content": "Method: LuaEntityPrototype.get_fluid_usage_per_tick\nDescription: The fluid usage of this generator prototype.\n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "method_name": "get_fluid_usage_per_tick"
    }
  },
  {
    "type": "method",
    "name": "LuaEntityPrototype.get_inserter_extension_speed",
    "content": "Method: LuaEntityPrototype.get_inserter_extension_speed\nDescription: The extension speed of this inserter.\n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "method_name": "get_inserter_extension_speed"
    }
  },
  {
    "type": "method",
    "name": "LuaEntityPrototype.get_inserter_rotation_speed",
    "content": "Method: LuaEntityPrototype.get_inserter_rotation_speed\nDescription: The rotation speed of this inserter.\n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "method_name": "get_inserter_rotation_speed"
    }
  },
  {
    "type": "method",
    "name": "LuaEntityPrototype.get_inventory_size",
    "content": "Method: LuaEntityPrototype.get_inventory_size\nDescription: Gets the base size of the given inventory on this entity or `nil` if the given inventory doesn't exist.\n\nParameters:\n- index (defines.inventory): \n- quality (QualityID)[Optional]: \n\nReturns:\n- uint: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "method_name": "get_inventory_size"
    }
  },
  {
    "type": "method",
    "name": "LuaEntityPrototype.get_max_circuit_wire_distance",
    "content": "Method: LuaEntityPrototype.get_max_circuit_wire_distance\nDescription: The maximum circuit wire distance for this entity. 0 if the entity doesn't support circuit wires.\n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "method_name": "get_max_circuit_wire_distance"
    }
  },
  {
    "type": "method",
    "name": "LuaEntityPrototype.get_max_distance_of_nearby_sector_revealed",
    "content": "Method: LuaEntityPrototype.get_max_distance_of_nearby_sector_revealed\nDescription: The radius of the area constantly revealed by this radar, or cargo landing pad, in chunks.\n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- uint: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "method_name": "get_max_distance_of_nearby_sector_revealed"
    }
  },
  {
    "type": "method",
    "name": "LuaEntityPrototype.get_max_distance_of_sector_revealed",
    "content": "Method: LuaEntityPrototype.get_max_distance_of_sector_revealed\nDescription: The radius of the area this radar can chart, in chunks.\n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- uint: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "method_name": "get_max_distance_of_sector_revealed"
    }
  },
  {
    "type": "method",
    "name": "LuaEntityPrototype.get_max_energy",
    "content": "Method: LuaEntityPrototype.get_max_energy\nDescription: The max energy for this flying robot prototype.\n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "method_name": "get_max_energy"
    }
  },
  {
    "type": "method",
    "name": "LuaEntityPrototype.get_max_energy_production",
    "content": "Method: LuaEntityPrototype.get_max_energy_production\nDescription: The theoretical maximum energy production for this entity.\n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "method_name": "get_max_energy_production"
    }
  },
  {
    "type": "method",
    "name": "LuaEntityPrototype.get_max_energy_usage",
    "content": "Method: LuaEntityPrototype.get_max_energy_usage\nDescription: The theoretical maximum energy usage for this entity.\n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "method_name": "get_max_energy_usage"
    }
  },
  {
    "type": "method",
    "name": "LuaEntityPrototype.get_max_health",
    "content": "Method: LuaEntityPrototype.get_max_health\nDescription: Max health of this entity. Will be `0` if this is not an entity with health.\n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- float: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "method_name": "get_max_health"
    }
  },
  {
    "type": "method",
    "name": "LuaEntityPrototype.get_max_power_output",
    "content": "Method: LuaEntityPrototype.get_max_power_output\nDescription: The maximum power output of this burner generator or generator prototype.\n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "method_name": "get_max_power_output"
    }
  },
  {
    "type": "method",
    "name": "LuaEntityPrototype.get_max_wire_distance",
    "content": "Method: LuaEntityPrototype.get_max_wire_distance\nDescription: The maximum wire distance for this entity. 0 if the entity doesn't support wires.\n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "method_name": "get_max_wire_distance"
    }
  },
  {
    "type": "method",
    "name": "LuaEntityPrototype.get_researching_speed",
    "content": "Method: LuaEntityPrototype.get_researching_speed\nDescription: The base researching speed of this lab prototype.\n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "method_name": "get_researching_speed"
    }
  },
  {
    "type": "method",
    "name": "LuaEntityPrototype.get_supply_area_distance",
    "content": "Method: LuaEntityPrototype.get_supply_area_distance\nDescription: The supply area of this electric pole or beacon prototype.\n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "method_name": "get_supply_area_distance"
    }
  },
  {
    "type": "method",
    "name": "LuaEntityPrototype.has_flag",
    "content": "Method: LuaEntityPrototype.has_flag\nDescription: Test whether this entity prototype has a certain flag set.\n\nParameters:\n- flag (EntityPrototypeFlag): The flag to test.\n\nReturns:\n- boolean: `true` if this prototype has the given flag set.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "method_name": "has_flag"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.absorptions_to_join_attack",
    "content": "Attribute: absorptions_to_join_attack [Optional]\nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'float'}\n\nDescription: A table of pollutions amounts that has to be absorbed by the unit's spawner before the unit will leave the spawner and attack the source of the pollution, indexed by the name of each absorbed pollution type.",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "absorptions_to_join_attack"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.active_energy_usage",
    "content": "Attribute: active_energy_usage [Optional]\nRead_type: double\n\nDescription: The active energy usage of this rocket silo or combinator prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "active_energy_usage"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.additional_pastable_entities",
    "content": "Attribute: additional_pastable_entities \nRead_type: {'complex_type': 'array', 'value': 'LuaEntityPrototype'}\n\nDescription: Entities this entity can be pasted onto in addition to the normal allowed ones.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "additional_pastable_entities"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.affected_by_tiles",
    "content": "Attribute: affected_by_tiles [Optional]\nRead_type: boolean\n\nDescription: Whether this unit prototype is affected by tile walking speed modifiers.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "affected_by_tiles"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.air_resistance",
    "content": "Attribute: air_resistance [Optional]\nRead_type: double\n\nDescription: The air resistance of this rolling stock prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "air_resistance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.alert_icon_scale",
    "content": "Attribute: alert_icon_scale \nRead_type: float\n\nDescription: The alert icon scale of this entity prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "alert_icon_scale"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.alert_icon_shift",
    "content": "Attribute: alert_icon_shift \nRead_type: Vector\n\nDescription: The alert icon shift of this entity prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "alert_icon_shift"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.alert_when_attacking",
    "content": "Attribute: alert_when_attacking [Optional]\nRead_type: boolean\n\nDescription: Whether this turret raises an alert when attacking\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "alert_when_attacking"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.alert_when_damaged",
    "content": "Attribute: alert_when_damaged [Optional]\nRead_type: boolean\n\nDescription: Whether this entity raises an alert when damaged.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "alert_when_damaged"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.allow_access_to_all_forces",
    "content": "Attribute: allow_access_to_all_forces [Optional]\nRead_type: boolean\n\nDescription: Whether this market allows access to all forces or just friendly ones.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "allow_access_to_all_forces"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.allow_burner_leech",
    "content": "Attribute: allow_burner_leech [Optional]\nRead_type: boolean\n\nDescription: Whether this inserter allows burner leeching.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "allow_burner_leech"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.allow_copy_paste",
    "content": "Attribute: allow_copy_paste \nRead_type: boolean\n\nDescription: When false copy-paste is not allowed for this entity.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "allow_copy_paste"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.allow_custom_vectors",
    "content": "Attribute: allow_custom_vectors [Optional]\nRead_type: boolean\n\nDescription: Whether this inserter allows custom pickup and drop vectors.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "allow_custom_vectors"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.allow_passengers",
    "content": "Attribute: allow_passengers [Optional]\nRead_type: boolean\n\nDescription: Whether this vehicle allows passengers.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "allow_passengers"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.allow_run_time_change_of_is_military_target",
    "content": "Attribute: allow_run_time_change_of_is_military_target [Optional]\nRead_type: boolean\n\nDescription: True if this entity-with-owner's is_military_target can be changed run-time (on the entity, not on the prototype itself)\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "allow_run_time_change_of_is_military_target"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.allowed_effects",
    "content": "Attribute: allowed_effects [Optional]\nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'boolean'}\n\nDescription: The allowed module effects for this entity, if any.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "allowed_effects"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.allowed_module_categories",
    "content": "Attribute: allowed_module_categories [Optional]\nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': {'complex_type': 'literal', 'value': True}}\n\nDescription: The allowed module categories for this entity, if any.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "allowed_module_categories"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.always_on",
    "content": "Attribute: always_on [Optional]\nRead_type: boolean\n\nDescription: Whether the lamp is always on (except when out of power or turned off by the circuit network).\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "always_on"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.ammo_category",
    "content": "Attribute: ammo_category [Optional]\nRead_type: string\n\nDescription: Name of the ammo category of this land mine.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "ammo_category"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.animation_speed_coefficient",
    "content": "Attribute: animation_speed_coefficient [Optional]\nRead_type: double\n\nDescription: The animation speed coefficient of this belt connectable prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "animation_speed_coefficient"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.attack_parameters",
    "content": "Attribute: attack_parameters [Optional]\nRead_type: AttackParameters\n\nDescription: The attack parameters for this entity, if any.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "attack_parameters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.attack_result",
    "content": "Attribute: attack_result [Optional]\nRead_type: {'complex_type': 'array', 'value': 'TriggerItem'}\n\nDescription: The attack result of this entity, if any.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "attack_result"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.auto_setup_collision_box",
    "content": "Attribute: auto_setup_collision_box \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "auto_setup_collision_box"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.automated_ammo_count",
    "content": "Attribute: automated_ammo_count [Optional]\nRead_type: uint\n\nDescription: The amount of ammo that inserters automatically insert into this ammo-turret or artillery-turret.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "automated_ammo_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.automatic_weapon_cycling",
    "content": "Attribute: automatic_weapon_cycling [Optional]\nRead_type: boolean\n\nDescription: Whether this spider vehicle prototype automatically cycles weapons.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "automatic_weapon_cycling"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.autoplace_specification",
    "content": "Attribute: autoplace_specification [Optional]\nRead_type: AutoplaceSpecification\n\nDescription: Autoplace specification for this entity prototype, if any.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "autoplace_specification"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.beacon_counter",
    "content": "Attribute: beacon_counter [Optional]\nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'total'}, {'complex_type': 'literal', 'value': 'same_type'}], 'full_format': False}\n\nDescription: The beacon counter used by effect receiver when deciding which sample to take from beacon profile.",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "beacon_counter"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.belt_distance",
    "content": "Attribute: belt_distance [Optional]\nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "belt_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.belt_length",
    "content": "Attribute: belt_length [Optional]\nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "belt_length"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.belt_speed",
    "content": "Attribute: belt_speed [Optional]\nRead_type: double\n\nDescription: The speed of this transport belt.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "belt_speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.boiler_mode",
    "content": "Attribute: boiler_mode [Optional]\nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'heat-fluid-inside'}, {'complex_type': 'literal', 'value': 'output-to-separate-pipe'}], 'full_format': False}\n\nDescription: The boiler operation mode of this boiler prototype.",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "boiler_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.braking_force",
    "content": "Attribute: braking_force [Optional]\nRead_type: double\n\nDescription: The braking force of this vehicle prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "braking_force"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.build_base_evolution_requirement",
    "content": "Attribute: build_base_evolution_requirement \nRead_type: double\n\nDescription: The evolution requirement to build this entity as a base when expanding enemy bases.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "build_base_evolution_requirement"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.build_distance",
    "content": "Attribute: build_distance [Optional]\nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "build_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.building_grid_bit_shift",
    "content": "Attribute: building_grid_bit_shift \nRead_type: uint\n\nDescription: The log2 of grid size of the building\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "building_grid_bit_shift"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.bulk",
    "content": "Attribute: bulk [Optional]\nRead_type: boolean\n\nDescription: Whether this inserter is a bulk-type.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "bulk"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.burner_prototype",
    "content": "Attribute: burner_prototype [Optional]\nRead_type: LuaBurnerPrototype\n\nDescription: The burner energy source prototype this entity uses, if any.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "burner_prototype"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.burns_fluid",
    "content": "Attribute: burns_fluid [Optional]\nRead_type: boolean\n\nDescription: Whether this generator prototype burns fluid.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "burns_fluid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.call_for_help_radius",
    "content": "Attribute: call_for_help_radius [Optional]\nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "call_for_help_radius"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.can_open_gates",
    "content": "Attribute: can_open_gates [Optional]\nRead_type: boolean\n\nDescription: Whether this unit prototype can open gates.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "can_open_gates"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.chain_shooting_cooldown_modifier",
    "content": "Attribute: chain_shooting_cooldown_modifier [Optional]\nRead_type: double\n\nDescription: The chain shooting cooldown modifier of this spider vehicle prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "chain_shooting_cooldown_modifier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.character_corpse",
    "content": "Attribute: character_corpse [Optional]\nRead_type: LuaEntityPrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "character_corpse"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.chunk_exploration_radius",
    "content": "Attribute: chunk_exploration_radius [Optional]\nRead_type: double\n\nDescription: The chunk exploration radius of this vehicle prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "chunk_exploration_radius"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.cliff_explosive_prototype",
    "content": "Attribute: cliff_explosive_prototype [Optional]\nRead_type: string\n\nDescription: The item prototype name used to destroy this cliff.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "cliff_explosive_prototype"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.collision_box",
    "content": "Attribute: collision_box \nRead_type: BoundingBox\n\nDescription: The bounding box used for collision checking.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "collision_box"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.collision_mask",
    "content": "Attribute: collision_mask \nRead_type: CollisionMask\n\nDescription: The collision masks this entity uses\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "collision_mask"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.collision_mask_collides_with_self",
    "content": "Attribute: collision_mask_collides_with_self \nRead_type: boolean\n\nDescription: Does this prototype collision mask collide with itself?\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "collision_mask_collides_with_self"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.collision_mask_collides_with_tiles_only",
    "content": "Attribute: collision_mask_collides_with_tiles_only \nRead_type: boolean\n\nDescription: Does this prototype collision mask collide with tiles only?\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "collision_mask_collides_with_tiles_only"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.collision_mask_considers_tile_transitions",
    "content": "Attribute: collision_mask_considers_tile_transitions \nRead_type: boolean\n\nDescription: Does this prototype collision mask consider tile transitions?\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "collision_mask_considers_tile_transitions"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.color",
    "content": "Attribute: color [Optional]\nRead_type: Color\n\nDescription: The color of the prototype, if any.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.connection_distance",
    "content": "Attribute: connection_distance [Optional]\nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "connection_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.construction_radius",
    "content": "Attribute: construction_radius [Optional]\nRead_type: double\n\nDescription: The construction radius for this roboport prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "construction_radius"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.consumption",
    "content": "Attribute: consumption [Optional]\nRead_type: double\n\nDescription: The energy consumption of this car prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "consumption"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.container_distance",
    "content": "Attribute: container_distance [Optional]\nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "container_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.corpses",
    "content": "Attribute: corpses [Optional]\nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'LuaEntityPrototype'}\n\nDescription: Corpses used when this entity is destroyed. It is a dictionary indexed by the corpse's prototype name.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "corpses"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.count_as_rock_for_filtered_deconstruction",
    "content": "Attribute: count_as_rock_for_filtered_deconstruction [Optional]\nRead_type: boolean\n\nDescription: If this simple-entity is counted as a rock for the deconstruction planner \"trees and rocks only\" filter.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "count_as_rock_for_filtered_deconstruction"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.crafting_categories",
    "content": "Attribute: crafting_categories [Optional]\nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': {'complex_type': 'literal', 'value': True}}\n\nDescription: The [crafting categories](runtime:LuaRecipeCategoryPrototype) this entity prototype supports.\n\nThe value in the dictionary is meaningless and exists just to allow for easy lookup.",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "crafting_categories"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.create_ghost_on_death",
    "content": "Attribute: create_ghost_on_death \nRead_type: boolean\n\nDescription: If this prototype will attempt to create a ghost of itself on death.\n\nIf this is false then a ghost will never be made, if it's true a ghost may be made.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "create_ghost_on_death"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.created_effect",
    "content": "Attribute: created_effect [Optional]\nRead_type: {'complex_type': 'array', 'value': 'TriggerItem'}\n\nDescription: The trigger to run when this entity is created, if any.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "created_effect"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.created_smoke",
    "content": "Attribute: created_smoke [Optional]",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "created_smoke"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.created_smoke",
    "content": "Read_type: {'complex_type': 'table', 'parameters': [{'name': 'initial_height', 'order': 3, 'description': '', 'type': 'float', 'optional': False}, {'name': 'max_radius', 'order': 4, 'description': '', 'type': 'float', 'optional': True}, {'name': 'offset_deviation', 'order': 2, 'description': '', 'type': 'BoundingBox', 'optional': False}, {'name': 'offsets', 'order': 1, 'description': '', 'type': {'complex_type': 'array', 'value': 'Vector'}, 'optional': False}, {'name': 'smoke_name', 'order': 0,",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "created_smoke"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.created_smoke",
    "content": "'optional': False}, {'name': 'smoke_name', 'order': 0, 'description': '', 'type': 'string', 'optional': False}, {'name': 'speed', 'order': 5, 'description': '', 'type': 'Vector', 'optional': False}, {'name': 'speed_from_center', 'order': 10, 'description': '', 'type': 'float', 'optional': False}, {'name': 'speed_from_center_deviation', 'order': 11, 'description': '', 'type': 'float', 'optional': False}, {'name': 'speed_multiplier', 'order': 6, 'description': '', 'type': 'float', 'optional': False},",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "created_smoke"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.created_smoke",
    "content": "6, 'description': '', 'type': 'float', 'optional': False}, {'name': 'speed_multiplier_deviation', 'order': 7, 'description': '', 'type': 'float', 'optional': False}, {'name': 'starting_frame', 'order': 8, 'description': '', 'type': 'float', 'optional': False}, {'name': 'starting_frame_deviation', 'order': 9, 'description': '', 'type': 'float', 'optional': False}]}",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "created_smoke"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.created_smoke",
    "content": "Description: The smoke trigger run when this entity is built, if any.",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "created_smoke"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.damage_hit_tint",
    "content": "Attribute: damage_hit_tint [Optional]\nRead_type: Color\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "damage_hit_tint"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.darkness_for_all_lamps_off",
    "content": "Attribute: darkness_for_all_lamps_off [Optional]\nRead_type: float\n\nDescription: Value between 0 and 1 darkness where all lamps of this lamp prototype are off.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "darkness_for_all_lamps_off"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.darkness_for_all_lamps_on",
    "content": "Attribute: darkness_for_all_lamps_on [Optional]\nRead_type: float\n\nDescription: Value between 0 and 1 darkness where all lamps of this lamp prototype are on.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "darkness_for_all_lamps_on"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.destroy_non_fuel_fluid",
    "content": "Attribute: destroy_non_fuel_fluid [Optional]\nRead_type: boolean\n\nDescription: Whether this generator prototype destroys non-fuel fluids.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "destroy_non_fuel_fluid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.distraction_cooldown",
    "content": "Attribute: distraction_cooldown [Optional]\nRead_type: uint\n\nDescription: The distraction cooldown of this unit prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "distraction_cooldown"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.distribution_effectivity",
    "content": "Attribute: distribution_effectivity [Optional]\nRead_type: double\n\nDescription: The distribution effectivity for this beacon prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "distribution_effectivity"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.distribution_effectivity_bonus_per_quality_level",
    "content": "Attribute: distribution_effectivity_bonus_per_quality_level [Optional]\nRead_type: double\n\nDescription: The distribution effectivity bonus per quality level for this beacon prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "distribution_effectivity_bonus_per_quality_level"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.door_opening_speed",
    "content": "Attribute: door_opening_speed [Optional]\nRead_type: double\n\nDescription: The door opening speed for this rocket silo prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "door_opening_speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.draw_cargo",
    "content": "Attribute: draw_cargo [Optional]\nRead_type: boolean\n\nDescription: Whether this logistics or construction robot renders its cargo when flying.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "draw_cargo"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.drawing_box_vertical_extension",
    "content": "Attribute: drawing_box_vertical_extension \nRead_type: double\n\nDescription: Extra vertical space needed to see the whole entity in GUIs. This is used to calculate the correct zoom and positioning in the entity info gui, for example in the entity tooltip.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "drawing_box_vertical_extension"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.drop_item_distance",
    "content": "Attribute: drop_item_distance [Optional]\nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "drop_item_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.dying_speed",
    "content": "Attribute: dying_speed [Optional]\nRead_type: float\n\nDescription: The dying time of this corpse prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "dying_speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.effect_receiver",
    "content": "Attribute: effect_receiver [Optional]\nRead_type: EffectReceiver\n\nDescription: Effect receiver prototype of this crafting machine, lab, or mining drill.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "effect_receiver"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.effectivity",
    "content": "Attribute: effectivity [Optional]\nRead_type: double\n\nDescription: The effectivity of this car prototype, generator prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "effectivity"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.electric_energy_source_prototype",
    "content": "Attribute: electric_energy_source_prototype [Optional]\nRead_type: LuaElectricEnergySourcePrototype\n\nDescription: The electric energy source prototype this entity uses, if any.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "electric_energy_source_prototype"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.emissions_per_second",
    "content": "Attribute: emissions_per_second \nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'double'}\n\nDescription: A table of pollution emissions per second the entity will create, grouped by the name of the pollution type.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "emissions_per_second"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.enemy_map_color",
    "content": "Attribute: enemy_map_color \nRead_type: Color\n\nDescription: The enemy map color used when charting this entity.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "enemy_map_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.energy_per_hit_point",
    "content": "Attribute: energy_per_hit_point [Optional]\nRead_type: double\n\nDescription: The energy used per hit point taken for this vehicle during collisions.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "energy_per_hit_point"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.energy_per_move",
    "content": "Attribute: energy_per_move [Optional]\nRead_type: double\n\nDescription: The energy consumed per tile moved for this flying robot.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "energy_per_move"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.energy_per_tick",
    "content": "Attribute: energy_per_tick [Optional]\nRead_type: double\n\nDescription: The energy consumed per tick for this flying robot.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "energy_per_tick"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.energy_usage",
    "content": "Attribute: energy_usage [Optional]\nRead_type: double\n\nDescription: The direct energy usage of this entity, if any.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "energy_usage"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.engine_starting_speed",
    "content": "Attribute: engine_starting_speed [Optional]\nRead_type: double\n\nDescription: The engine starting speed for this rocket silo rocket prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "engine_starting_speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.enter_vehicle_distance",
    "content": "Attribute: enter_vehicle_distance [Optional]\nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "enter_vehicle_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.explosion_beam",
    "content": "Attribute: explosion_beam [Optional]\nRead_type: double\n\nDescription: Whether this explosion has a beam.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "explosion_beam"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.explosion_rotate",
    "content": "Attribute: explosion_rotate [Optional]\nRead_type: double\n\nDescription: Whether this explosion rotates.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "explosion_rotate"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.fast_replaceable_group",
    "content": "Attribute: fast_replaceable_group [Optional]\nRead_type: string\n\nDescription: The group of mutually fast-replaceable entities, if any.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "fast_replaceable_group"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.filter_count",
    "content": "Attribute: filter_count [Optional]\nRead_type: uint\n\nDescription: The filter count of this inserter, loader, mining drill or logistic chest. For logistic containers, `nil` means no limit.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "filter_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.final_attack_result",
    "content": "Attribute: final_attack_result [Optional]\nRead_type: {'complex_type': 'array', 'value': 'TriggerItem'}\n\nDescription: The final attack result for this projectile.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "final_attack_result"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.fixed_recipe",
    "content": "Attribute: fixed_recipe [Optional]\nRead_type: string\n\nDescription: The fixed recipe name for this assembling machine prototype, if any.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "fixed_recipe"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.flags",
    "content": "Attribute: flags \nRead_type: EntityPrototypeFlags\n\nDescription: The flags for this entity prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "flags"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.fluid_capacity",
    "content": "Attribute: fluid_capacity \nRead_type: double\n\nDescription: The fluid capacity of this entity or 0 if this entity doesn't support fluids.\n\nCrafting machines will report 0 due to their fluid capacity being whatever a given recipe needs.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "fluid_capacity"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.fluid_energy_source_prototype",
    "content": "Attribute: fluid_energy_source_prototype [Optional]\nRead_type: LuaFluidEnergySourcePrototype\n\nDescription: The fluid energy source prototype this entity uses, if any.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "fluid_energy_source_prototype"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.fluid_usage_per_tick",
    "content": "Attribute: fluid_usage_per_tick [Optional]\nRead_type: double\n\nDescription: The fluid usage of this generator prototype. This property is deprecated in favor of [LuaEntityPrototype::get_fluid_usage_per_tick](runtime:LuaEntityPrototype::get_fluid_usage_per_tick) and should not be used.",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "fluid_usage_per_tick"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.fluidbox_prototypes",
    "content": "Attribute: fluidbox_prototypes \nRead_type: {'complex_type': 'array', 'value': 'LuaFluidBoxPrototype'}\n\nDescription: The fluidbox prototypes for this entity.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "fluidbox_prototypes"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.flying_acceleration",
    "content": "Attribute: flying_acceleration [Optional]\nRead_type: double\n\nDescription: The flying acceleration for this rocket silo rocket prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "flying_acceleration"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.flying_speed",
    "content": "Attribute: flying_speed [Optional]\nRead_type: double\n\nDescription: The flying speed for this rocket silo rocket prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "flying_speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.friction_force",
    "content": "Attribute: friction_force [Optional]\nRead_type: double\n\nDescription: The friction of this vehicle prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "friction_force"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.friendly_map_color",
    "content": "Attribute: friendly_map_color \nRead_type: Color\n\nDescription: The friendly map color used when charting this entity.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "friendly_map_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.grid_prototype",
    "content": "Attribute: grid_prototype [Optional]\nRead_type: LuaEquipmentGridPrototype\n\nDescription: The equipment grid prototype for this entity, if any.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "grid_prototype"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.growth_grid_tile_size",
    "content": "Attribute: growth_grid_tile_size [Optional]\nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "growth_grid_tile_size"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.growth_ticks",
    "content": "Attribute: growth_ticks [Optional]\nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "growth_ticks"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.guns",
    "content": "Attribute: guns [Optional]\nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'LuaItemPrototype'}\n\nDescription: A mapping of the gun name to the gun prototype this prototype uses. `nil` if this entity prototype doesn't use guns.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "guns"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.harvest_emissions",
    "content": "Attribute: harvest_emissions [Optional]\nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'double'}\n\nDescription: A table of pollutants that this plant will release when it is harvested.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "harvest_emissions"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.has_belt_immunity",
    "content": "Attribute: has_belt_immunity [Optional]\nRead_type: boolean\n\nDescription: Whether this unit, car, or character prototype has belt immunity.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "has_belt_immunity"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.healing_per_tick",
    "content": "Attribute: healing_per_tick [Optional]\nRead_type: float\n\nDescription: Amount this entity can heal per tick, if any.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "healing_per_tick"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.heat_buffer_prototype",
    "content": "Attribute: heat_buffer_prototype [Optional]\nRead_type: LuaHeatBufferPrototype\n\nDescription: The heat buffer prototype this entity uses, if any.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "heat_buffer_prototype"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.heat_energy_source_prototype",
    "content": "Attribute: heat_energy_source_prototype [Optional]\nRead_type: LuaHeatEnergySourcePrototype\n\nDescription: The heat energy source prototype this entity uses, if any.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "heat_energy_source_prototype"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.heating_energy",
    "content": "Attribute: heating_energy \nRead_type: double\n\nDescription: The energy required to keep this entity from freezing. Zero energy means it doesn't freeze.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "heating_energy"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.height",
    "content": "Attribute: height [Optional]\nRead_type: double\n\nDescription: The height of this spider vehicle prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "height"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.indexed_guns",
    "content": "Attribute: indexed_guns [Optional]\nRead_type: {'complex_type': 'array', 'value': 'LuaItemPrototype'}\n\nDescription: A vector of the gun prototypes of this car, spider vehicle, artillery wagon, or turret.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "indexed_guns"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.infinite_depletion_resource_amount",
    "content": "Attribute: infinite_depletion_resource_amount [Optional]\nRead_type: uint\n\nDescription: Every time this infinite resource 'ticks' down, it is reduced by this amount. Meaningless if this isn't an infinite resource.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "infinite_depletion_resource_amount"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.infinite_resource",
    "content": "Attribute: infinite_resource [Optional]\nRead_type: boolean\n\nDescription: Whether this resource is infinite.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "infinite_resource"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.ingredient_count",
    "content": "Attribute: ingredient_count [Optional]\nRead_type: uint\n\nDescription: The max number of ingredients this crafting machine prototype supports.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "ingredient_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.inserter_chases_belt_items",
    "content": "Attribute: inserter_chases_belt_items [Optional]\nRead_type: boolean\n\nDescription: True if this inserter chases items on belts for pickup.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "inserter_chases_belt_items"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.inserter_drop_position",
    "content": "Attribute: inserter_drop_position [Optional]\nRead_type: Vector\n\nDescription: The drop position for this inserter.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "inserter_drop_position"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.inserter_pickup_position",
    "content": "Attribute: inserter_pickup_position [Optional]\nRead_type: Vector\n\nDescription: The pickup position for this inserter.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "inserter_pickup_position"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.inserter_stack_size_bonus",
    "content": "Attribute: inserter_stack_size_bonus [Optional]\nRead_type: uint\n\nDescription: The built-in stack size bonus of this inserter prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "inserter_stack_size_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.instruments",
    "content": "Attribute: instruments [Optional]\nRead_type: {'complex_type': 'array', 'value': 'ProgrammableSpeakerInstrument'}\n\nDescription: The instruments for this programmable speaker.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "instruments"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.inventory_type",
    "content": "Attribute: inventory_type [Optional]\nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'normal'}, {'complex_type': 'literal', 'value': 'with_bar'}, {'complex_type': 'literal', 'value': 'with_filters_and_bar'}], 'full_format': False}\n\nDescription: The inventory type this container or linked container uses.",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "inventory_type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.is_building",
    "content": "Attribute: is_building \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "is_building"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.is_entity_with_owner",
    "content": "Attribute: is_entity_with_owner \nRead_type: boolean\n\nDescription: True if this is entity-with-owner\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "is_entity_with_owner"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.is_military_target",
    "content": "Attribute: is_military_target [Optional]\nRead_type: boolean\n\nDescription: True if this entity-with-owner is military target\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "is_military_target"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.item_pickup_distance",
    "content": "Attribute: item_pickup_distance [Optional]\nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "item_pickup_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.items_to_place_this",
    "content": "Attribute: items_to_place_this [Optional]\nRead_type: {'complex_type': 'array', 'value': 'ItemStackDefinition'}\n\nDescription: Items that when placed will produce this entity, if any. Construction bots will choose the first item in the list to build this entity.",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "items_to_place_this"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.joint_distance",
    "content": "Attribute: joint_distance [Optional]\nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "joint_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.lab_inputs",
    "content": "Attribute: lab_inputs [Optional]\nRead_type: {'complex_type': 'array', 'value': 'string'}\n\nDescription: The item prototype names that are the inputs of this lab prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "lab_inputs"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.lamp_energy_usage",
    "content": "Attribute: lamp_energy_usage [Optional]\nRead_type: double\n\nDescription: The lamp energy usage of this rocket silo prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "lamp_energy_usage"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.launch_wait_time",
    "content": "Attribute: launch_wait_time [Optional]\nRead_type: uint8\n\nDescription: The rocket launch delay for this rocket silo prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "launch_wait_time"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.light_blinking_speed",
    "content": "Attribute: light_blinking_speed [Optional]\nRead_type: double\n\nDescription: The light blinking speed for this rocket silo prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "light_blinking_speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.logistic_mode",
    "content": "Attribute: logistic_mode [Optional]\nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'requester'}, {'complex_type': 'literal', 'value': 'active-provider'}, {'complex_type': 'literal', 'value': 'passive-provider'}, {'complex_type': 'literal', 'value': 'buffer'}, {'complex_type': 'literal', 'value': 'storage'}, {'complex_type': 'literal', 'value': 'none'}], 'full_format': False}\n\nDescription: The logistic mode of this logistic container.",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "logistic_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.logistic_parameters",
    "content": "Attribute: logistic_parameters [Optional]",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "logistic_parameters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.logistic_parameters",
    "content": "Read_type: {'complex_type': 'table', 'parameters': [{'name': 'charge_approach_distance', 'order': 3, 'description': '', 'type': 'float', 'optional': False}, {'name': 'charging_distance', 'order': 7, 'description': '', 'type': 'float', 'optional': False}, {'name': 'charging_energy', 'order': 9, 'description': '', 'type': 'double', 'optional': False}, {'name': 'charging_station_count', 'order': 6, 'description': '', 'type': 'uint', 'optional': False}, {'name': 'charging_station_shift', 'order': 8,",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "logistic_parameters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.logistic_parameters",
    "content": "False}, {'name': 'charging_station_shift', 'order': 8, 'description': '', 'type': 'Vector', 'optional': False}, {'name': 'charging_threshold_distance', 'order': 10, 'description': '', 'type': 'float', 'optional': False}, {'name': 'construction_radius', 'order': 5, 'description': '', 'type': 'float', 'optional': False}, {'name': 'logistic_radius', 'order': 4, 'description': '', 'type': 'float', 'optional': False}, {'name': 'logistics_connection_distance', 'order': 14, 'description': '', 'type': 'float',",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "logistic_parameters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.logistic_parameters",
    "content": "'order': 14, 'description': '', 'type': 'float', 'optional': False}, {'name': 'robot_limit', 'order': 13, 'description': '', 'type': 'uint', 'optional': False}, {'name': 'robot_vertical_acceleration', 'order': 11, 'description': '', 'type': 'float', 'optional': False}, {'name': 'robots_shrink_when_entering_and_exiting', 'order': 15, 'description': '', 'type': 'boolean', 'optional': False}, {'name': 'spawn_and_station_height', 'order': 0, 'description': '', 'type': 'float', 'optional': False}, {'name':",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "logistic_parameters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.logistic_parameters",
    "content": "'', 'type': 'float', 'optional': False}, {'name': 'spawn_and_station_shadow_height_offset', 'order': 1, 'description': '', 'type': 'float', 'optional': False}, {'name': 'stationing_offset', 'order': 12, 'description': '', 'type': 'Vector', 'optional': False}, {'name': 'stationing_render_layer_swap_height', 'order': 2, 'description': '', 'type': 'float', 'optional': False}]}",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "logistic_parameters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.logistic_parameters",
    "content": "Description: The logistic parameters for this roboport.",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "logistic_parameters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.logistic_radius",
    "content": "Attribute: logistic_radius [Optional]\nRead_type: double\n\nDescription: The logistic radius for this roboport prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "logistic_radius"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.loot",
    "content": "Attribute: loot [Optional]\nRead_type: {'complex_type': 'array', 'value': 'Loot'}\n\nDescription: Loot that will be dropped when this entity is killed, if any.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "loot"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.loot_pickup_distance",
    "content": "Attribute: loot_pickup_distance [Optional]\nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "loot_pickup_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.manual_range_modifier",
    "content": "Attribute: manual_range_modifier [Optional]\nRead_type: double\n\nDescription: The manual range modifier for this artillery turret or wagon prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "manual_range_modifier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.map_color",
    "content": "Attribute: map_color [Optional]\nRead_type: Color\n\nDescription: The map color used when charting this entity if a friendly or enemy color isn't defined, if any.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "map_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.map_generator_bounding_box",
    "content": "Attribute: map_generator_bounding_box \nRead_type: BoundingBox\n\nDescription: The bounding box used for map generator collision checking.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "map_generator_bounding_box"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.max_count_of_owned_defensive_units",
    "content": "Attribute: max_count_of_owned_defensive_units [Optional]\nRead_type: double\n\nDescription: Count of defensive enemies this spawner can sustain.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "max_count_of_owned_defensive_units"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.max_count_of_owned_units",
    "content": "Attribute: max_count_of_owned_units [Optional]\nRead_type: double\n\nDescription: Count of enemies this spawner can sustain.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "max_count_of_owned_units"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.max_darkness_to_spawn",
    "content": "Attribute: max_darkness_to_spawn [Optional]\nRead_type: float\n\nDescription: The maximum darkness at which this unit spawner can spawn entities.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "max_darkness_to_spawn"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.max_defensive_friends_around_to_spawn",
    "content": "Attribute: max_defensive_friends_around_to_spawn [Optional]\nRead_type: double\n\nDescription: How many defensive friendly units are required within the spawning_radius of this spawner for it to stop producing more units.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "max_defensive_friends_around_to_spawn"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.max_friends_around_to_spawn",
    "content": "Attribute: max_friends_around_to_spawn [Optional]\nRead_type: double\n\nDescription: How many friendly units are required within the spawning_radius of this spawner for it to stop producing more units.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "max_friends_around_to_spawn"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.max_payload_size",
    "content": "Attribute: max_payload_size [Optional]\nRead_type: uint\n\nDescription: The max payload size of this logistics or construction robot.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "max_payload_size"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.max_polyphony",
    "content": "Attribute: max_polyphony [Optional]\nRead_type: uint\n\nDescription: The maximum polyphony for this programmable speaker.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "max_polyphony"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.max_power_output",
    "content": "Attribute: max_power_output [Optional]\nRead_type: double\n\nDescription: The default maximum power output of this generator prototype. This property is deprecated in favor of [LuaEntityPrototype::get_max_power_output](runtime:LuaEntityPrototype::get_max_power_output) and should not be used.",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "max_power_output"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.max_pursue_distance",
    "content": "Attribute: max_pursue_distance [Optional]\nRead_type: double\n\nDescription: The maximum pursue distance of this unit prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "max_pursue_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.max_speed",
    "content": "Attribute: max_speed [Optional]\nRead_type: double\n\nDescription: The max speed of this projectile or flying robot prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "max_speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.max_to_charge",
    "content": "Attribute: max_to_charge [Optional]\nRead_type: float\n\nDescription: The maximum energy for this flying robot above which it won't try to recharge when stationing.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "max_to_charge"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.max_underground_distance",
    "content": "Attribute: max_underground_distance [Optional]\nRead_type: uint8\n\nDescription: The max underground distance for underground belts and underground pipes.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "max_underground_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.maximum_corner_sliding_distance",
    "content": "Attribute: maximum_corner_sliding_distance [Optional]\nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "maximum_corner_sliding_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.maximum_temperature",
    "content": "Attribute: maximum_temperature [Optional]\nRead_type: double\n\nDescription: The maximum fluid temperature of this generator prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "maximum_temperature"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.min_darkness_to_spawn",
    "content": "Attribute: min_darkness_to_spawn [Optional]\nRead_type: float\n\nDescription: The minimum darkness at which this unit spawner can spawn entities.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "min_darkness_to_spawn"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.min_pursue_time",
    "content": "Attribute: min_pursue_time [Optional]\nRead_type: uint\n\nDescription: The minimum pursue time of this unit prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "min_pursue_time"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.min_to_charge",
    "content": "Attribute: min_to_charge [Optional]\nRead_type: float\n\nDescription: The minimum energy for this flying robot before it tries to recharge.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "min_to_charge"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.mineable_properties",
    "content": "Attribute: mineable_properties \nRead_type: MineableProperties\n\nDescription: Whether this entity is minable and what can be obtained by mining it.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "mineable_properties"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.minimum_resource_amount",
    "content": "Attribute: minimum_resource_amount [Optional]\nRead_type: uint\n\nDescription: Minimum amount of this resource.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "minimum_resource_amount"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.mining_drill_radius",
    "content": "Attribute: mining_drill_radius [Optional]\nRead_type: double\n\nDescription: The mining radius of this mining drill prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "mining_drill_radius"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.mining_speed",
    "content": "Attribute: mining_speed [Optional]\nRead_type: double\n\nDescription: The mining speed of this mining drill/character prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "mining_speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.module_inventory_size",
    "content": "Attribute: module_inventory_size [Optional]\nRead_type: uint\n\nDescription: The module inventory size. `nil` if this entity doesn't support modules.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "module_inventory_size"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.move_while_shooting",
    "content": "Attribute: move_while_shooting [Optional]\nRead_type: boolean\n\nDescription: Whether this unit prototype can move while shooting.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "move_while_shooting"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.neighbour_bonus",
    "content": "Attribute: neighbour_bonus [Optional]\nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "neighbour_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.next_upgrade",
    "content": "Attribute: next_upgrade [Optional]\nRead_type: LuaEntityPrototype\n\nDescription: The next upgrade for this entity, if any.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "next_upgrade"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.normal_resource_amount",
    "content": "Attribute: normal_resource_amount [Optional]\nRead_type: uint\n\nDescription: The normal amount for this resource.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "normal_resource_amount"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.per_lane_filters",
    "content": "Attribute: per_lane_filters [Optional]\nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "per_lane_filters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.profile",
    "content": "Attribute: profile [Optional]\nRead_type: {'complex_type': 'array', 'value': 'double'}\n\nDescription: The beacon profile: extra multiplier applied to the effects received from beacon by the effect receiver based on amount of beacons that reach that effect receiver",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "profile"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.protected_from_tile_building",
    "content": "Attribute: protected_from_tile_building \nRead_type: boolean\n\nDescription: True if this entity prototype should be included during tile collision checks with [LuaTilePrototype::check_collision_with_entities](runtime:LuaTilePrototype::check_collision_with_entities) enabled.",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "protected_from_tile_building"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.pumping_speed",
    "content": "Attribute: pumping_speed [Optional]\nRead_type: double\n\nDescription: The pumping speed of this offshore or normal pump.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "pumping_speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.radar_range",
    "content": "Attribute: radar_range [Optional]\nRead_type: uint\n\nDescription: The radar range of this unit prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "radar_range"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.radius",
    "content": "Attribute: radius \nRead_type: double\n\nDescription: The radius of this entity prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "radius"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.radius_visualisation_specification",
    "content": "Attribute: radius_visualisation_specification [Optional]\nRead_type: RadiusVisualisationSpecification\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "radius_visualisation_specification"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.reach_distance",
    "content": "Attribute: reach_distance [Optional]\nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "reach_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.reach_resource_distance",
    "content": "Attribute: reach_resource_distance [Optional]\nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "reach_resource_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.related_underground_belt",
    "content": "Attribute: related_underground_belt [Optional]\nRead_type: LuaEntityPrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "related_underground_belt"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.remains_when_mined",
    "content": "Attribute: remains_when_mined \nRead_type: {'complex_type': 'array', 'value': 'LuaEntityPrototype'}\n\nDescription: The remains left behind when this entity is mined.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "remains_when_mined"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.remove_decoratives",
    "content": "Attribute: remove_decoratives \nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'automatic'}, {'complex_type': 'literal', 'value': 'true'}, {'complex_type': 'literal', 'value': 'false'}], 'full_format': False}\n\nDescription: Whether this entity should remove decoratives that collide with it when this entity is built.",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "remove_decoratives"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.repair_speed_modifier",
    "content": "Attribute: repair_speed_modifier [Optional]\nRead_type: float\n\nDescription: Repair-speed modifier for this entity, if any. Actual repair speed will be `tool_repair_speed * entity_repair_speed_modifier`.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "repair_speed_modifier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.resistances",
    "content": "Attribute: resistances [Optional]\nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'Resistance'}\n\nDescription: List of resistances towards each damage type. It is a dictionary indexed by damage type names (see `data/base/prototypes/damage-type.lua`).",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "resistances"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.resource_categories",
    "content": "Attribute: resource_categories [Optional]\nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': {'complex_type': 'literal', 'value': True}}\n\nDescription: The [resource categories](runtime:LuaResourceCategoryPrototype) this character or mining drill supports.\n\nThe value in the dictionary is meaningless and exists just to allow for easy lookup.",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "resource_categories"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.resource_category",
    "content": "Attribute: resource_category [Optional]\nRead_type: string\n\nDescription: Name of the category of this resource.\n\nDuring data stage, this property is named \"category\".\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "resource_category"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.resource_drain_rate_percent",
    "content": "Attribute: resource_drain_rate_percent [Optional]\nRead_type: uint8\n\nDescription: The resource drain rate percent of this mining drill prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "resource_drain_rate_percent"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.respawn_time",
    "content": "Attribute: respawn_time [Optional]\nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "respawn_time"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.result_units",
    "content": "Attribute: result_units [Optional]\nRead_type: {'complex_type': 'array', 'value': 'UnitSpawnDefinition'}\n\nDescription: The result units and spawn points with weight and evolution factor for a biter spawner entity.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "result_units"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.rising_speed",
    "content": "Attribute: rising_speed [Optional]\nRead_type: double\n\nDescription: The rising speed for this rocket silo rocket prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "rising_speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.rocket_entity_prototype",
    "content": "Attribute: rocket_entity_prototype [Optional]\nRead_type: LuaEntityPrototype\n\nDescription: The rocket entity prototype associated with this rocket silo prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "rocket_entity_prototype"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.rocket_parts_required",
    "content": "Attribute: rocket_parts_required [Optional]\nRead_type: uint\n\nDescription: The rocket parts required for this rocket silo prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "rocket_parts_required"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.rocket_rising_delay",
    "content": "Attribute: rocket_rising_delay [Optional]\nRead_type: uint8\n\nDescription: The rocket rising delay for this rocket silo prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "rocket_rising_delay"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.rotation_speed",
    "content": "Attribute: rotation_speed [Optional]\nRead_type: double\n\nDescription: The rotation speed of this car prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "rotation_speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.running_speed",
    "content": "Attribute: running_speed [Optional]\nRead_type: double\n\nDescription: The movement speed of this character prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "running_speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.scale_fluid_usage",
    "content": "Attribute: scale_fluid_usage [Optional]\nRead_type: boolean\n\nDescription: Whether this generator prototype scales fluid usage.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "scale_fluid_usage"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.science_pack_drain_rate_percent",
    "content": "Attribute: science_pack_drain_rate_percent \nRead_type: uint8\n\nDescription: How much science pack durability is required to research one science point.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "science_pack_drain_rate_percent"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.secondary_collision_box",
    "content": "Attribute: secondary_collision_box [Optional]\nRead_type: BoundingBox\n\nDescription: The secondary bounding box used for collision checking, if any. This is only used in rails and rail remnants.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "secondary_collision_box"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.selectable_in_game",
    "content": "Attribute: selectable_in_game \nRead_type: boolean\n\nDescription: Is this entity selectable?\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "selectable_in_game"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.selection_box",
    "content": "Attribute: selection_box \nRead_type: BoundingBox\n\nDescription: The bounding box used for drawing selection.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "selection_box"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.selection_priority",
    "content": "Attribute: selection_priority \nRead_type: uint\n\nDescription: The selection priority of this entity - a value between `0` and `255`.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "selection_priority"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.shooting_cursor_size",
    "content": "Attribute: shooting_cursor_size \nRead_type: float\n\nDescription: The cursor size used when shooting at this entity.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "shooting_cursor_size"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.spawn_cooldown",
    "content": "Attribute: spawn_cooldown [Optional]\nRead_type: {'complex_type': 'table', 'parameters': [{'name': 'max', 'order': 1, 'description': '', 'type': 'double', 'optional': False}, {'name': 'min', 'order': 0, 'description': '', 'type': 'double', 'optional': False}]}\n\nDescription: The spawning cooldown for this enemy spawner prototype.",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "spawn_cooldown"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.spawn_decoration",
    "content": "Attribute: spawn_decoration [Optional]\nRead_type: {'complex_type': 'array', 'value': 'TriggerEffectItem'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "spawn_decoration"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.spawn_decorations_on_expansion",
    "content": "Attribute: spawn_decorations_on_expansion [Optional]\nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "spawn_decorations_on_expansion"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.spawning_radius",
    "content": "Attribute: spawning_radius [Optional]\nRead_type: double\n\nDescription: How far from the spawner can the units be spawned.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "spawning_radius"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.spawning_spacing",
    "content": "Attribute: spawning_spacing [Optional]\nRead_type: double\n\nDescription: What spaces should be between the spawned units.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "spawning_spacing"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.spawning_time_modifier",
    "content": "Attribute: spawning_time_modifier [Optional]\nRead_type: double\n\nDescription: The spawning time modifier of this unit prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "spawning_time_modifier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.speed",
    "content": "Attribute: speed [Optional]\nRead_type: double\n\nDescription: The default speed of this flying robot, rolling stock or unit. For rolling stocks, this is their `max_speed`.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.speed_multiplier_when_out_of_energy",
    "content": "Attribute: speed_multiplier_when_out_of_energy [Optional]\nRead_type: float\n\nDescription: The speed multiplier when this flying robot is out of energy.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "speed_multiplier_when_out_of_energy"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.sticker_box",
    "content": "Attribute: sticker_box \nRead_type: BoundingBox\n\nDescription: The bounding box used to attach sticker type entities.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "sticker_box"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.supports_direction",
    "content": "Attribute: supports_direction \nRead_type: boolean\n\nDescription: Whether this entity prototype could possibly ever be rotated.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "supports_direction"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.surface_conditions",
    "content": "Attribute: surface_conditions [Optional]\nRead_type: {'complex_type': 'array', 'value': 'SurfaceCondition'}\n\nDescription: The surface conditions required to build this entity.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "surface_conditions"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.tank_driving",
    "content": "Attribute: tank_driving [Optional]\nRead_type: boolean\n\nDescription: If this car prototype uses tank controls to drive.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "tank_driving"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.target_temperature",
    "content": "Attribute: target_temperature [Optional]\nRead_type: double\n\nDescription: The target temperature of this boiler prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "target_temperature"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.terrain_friction_modifier",
    "content": "Attribute: terrain_friction_modifier [Optional]\nRead_type: float\n\nDescription: The terrain friction modifier for this vehicle.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "terrain_friction_modifier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.ticks_to_keep_aiming_direction",
    "content": "Attribute: ticks_to_keep_aiming_direction [Optional]\nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "ticks_to_keep_aiming_direction"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.ticks_to_keep_gun",
    "content": "Attribute: ticks_to_keep_gun [Optional]\nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "ticks_to_keep_gun"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.ticks_to_stay_in_combat",
    "content": "Attribute: ticks_to_stay_in_combat [Optional]\nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "ticks_to_stay_in_combat"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.tile_height",
    "content": "Attribute: tile_height \nRead_type: uint\n\nDescription: Specifies the tiling size of the entity, is used to decide, if the center should be in the center of the tile (odd tile size dimension) or on the tile border (even tile size dimension)\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "tile_height"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.tile_width",
    "content": "Attribute: tile_width \nRead_type: uint\n\nDescription: Specifies the tiling size of the entity, is used to decide, if the center should be in the center of the tile (odd tile size dimension) or on the tile border (even tile size dimension)\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "tile_width"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.time_to_live",
    "content": "Attribute: time_to_live \nRead_type: uint\n\nDescription: The time to live for this prototype or `0` if prototype doesn't have time_to_live or time_before_removed.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "time_to_live"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.timeout",
    "content": "Attribute: timeout [Optional]\nRead_type: uint\n\nDescription: The time it takes this land mine to arm.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "timeout"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.torso_bob_speed",
    "content": "Attribute: torso_bob_speed [Optional]\nRead_type: double\n\nDescription: The torso bob speed of this spider vehicle prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "torso_bob_speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.torso_rotation_speed",
    "content": "Attribute: torso_rotation_speed [Optional]\nRead_type: double\n\nDescription: The torso rotation speed of this spider vehicle prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "torso_rotation_speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.tree_color_count",
    "content": "Attribute: tree_color_count [Optional]\nRead_type: uint8\n\nDescription: If it is a tree, return the number of colors it supports.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "tree_color_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.trigger_collision_mask",
    "content": "Attribute: trigger_collision_mask [Optional]\nRead_type: CollisionMask\n\nDescription: The collision mask entities must collide with to make this landmine blow up.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "trigger_collision_mask"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.trigger_target_mask",
    "content": "Attribute: trigger_target_mask \nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'boolean'}\n\nDescription: The trigger target mask for this entity prototype type.\n\nThe values in the dictionary are meaningless and exists just to allow the dictionary type for easy lookup.",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "trigger_target_mask"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.turret_range",
    "content": "Attribute: turret_range [Optional]\nRead_type: uint\n\nDescription: The range of this turret.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "turret_range"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.turret_rotation_speed",
    "content": "Attribute: turret_rotation_speed [Optional]\nRead_type: float\n\nDescription: The turret rotation speed of this car prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "turret_rotation_speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.use_exact_mode",
    "content": "Attribute: use_exact_mode [Optional]\nRead_type: boolean\n\nDescription: Whether this logistic container prototype uses exact mode\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "use_exact_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.vector_to_place_result",
    "content": "Attribute: vector_to_place_result [Optional]\nRead_type: Vector\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "vector_to_place_result"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.vertical_selection_shift",
    "content": "Attribute: vertical_selection_shift [Optional]\nRead_type: double\n\nDescription: Vertical selection shift used by rolling stocks. It affects selection box vertical position but is also used to shift rolling stock graphics along the rails to fine tune train's look.",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "vertical_selection_shift"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.vision_distance",
    "content": "Attribute: vision_distance [Optional]\nRead_type: double\n\nDescription: The vision distance of this unit prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "vision_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.void_energy_source_prototype",
    "content": "Attribute: void_energy_source_prototype [Optional]\nRead_type: LuaVoidEnergySourcePrototype\n\nDescription: The void energy source prototype this entity uses, if any.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "void_energy_source_prototype"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEntityPrototype.weight",
    "content": "Attribute: weight [Optional]\nRead_type: double\n\nDescription: The weight of this vehicle prototype.\n",
    "metadata": {
      "class_name": "LuaEntityPrototype",
      "attribute_name": "weight"
    }
  },
  {
    "type": "class",
    "name": "LuaEquipment",
    "content": "Class: LuaEquipment\nDescription: An item in a [LuaEquipmentGrid](runtime:LuaEquipmentGrid), for example a fusion reactor placed in one's power armor.\n\nAn equipment reference becomes invalid once the equipment is removed or the equipment grid it resides in is destroyed.",
    "metadata": {
      "class_name": "LuaEquipment",
      "parent_class": null
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipment.burner",
    "content": "Attribute: burner [Optional]\nRead_type: LuaBurner\n\nDescription: The burner energy source for this equipment, if any.\n",
    "metadata": {
      "class_name": "LuaEquipment",
      "attribute_name": "burner"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipment.energy",
    "content": "Attribute: energy \nRead_type: double\nWrite_type: double\nDescription: Current available energy.\n",
    "metadata": {
      "class_name": "LuaEquipment",
      "attribute_name": "energy"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipment.generator_power",
    "content": "Attribute: generator_power \nRead_type: double\n\nDescription: Energy generated per tick.\n",
    "metadata": {
      "class_name": "LuaEquipment",
      "attribute_name": "generator_power"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipment.ghost_name",
    "content": "Attribute: ghost_name \nRead_type: string\n\nDescription: Name of the equipment contained in this ghost\n",
    "metadata": {
      "class_name": "LuaEquipment",
      "attribute_name": "ghost_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipment.ghost_prototype",
    "content": "Attribute: ghost_prototype \nRead_type: LuaEquipmentPrototype\n\nDescription: The prototype of the equipment contained in this ghost.\n",
    "metadata": {
      "class_name": "LuaEquipment",
      "attribute_name": "ghost_prototype"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipment.ghost_type",
    "content": "Attribute: ghost_type \nRead_type: string\n\nDescription: Type of the equipment contained in this ghost.\n",
    "metadata": {
      "class_name": "LuaEquipment",
      "attribute_name": "ghost_type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipment.inventory_bonus",
    "content": "Attribute: inventory_bonus \nRead_type: uint\n\nDescription: Inventory size bonus.\n",
    "metadata": {
      "class_name": "LuaEquipment",
      "attribute_name": "inventory_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipment.max_energy",
    "content": "Attribute: max_energy \nRead_type: double\n\nDescription: Maximum amount of energy that can be stored in this equipment.\n",
    "metadata": {
      "class_name": "LuaEquipment",
      "attribute_name": "max_energy"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipment.max_shield",
    "content": "Attribute: max_shield \nRead_type: double\n\nDescription: Maximum shield value.\n",
    "metadata": {
      "class_name": "LuaEquipment",
      "attribute_name": "max_shield"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipment.max_solar_power",
    "content": "Attribute: max_solar_power \nRead_type: double\n\nDescription: Maximum energy per tick crated by this equipment on the current surface. Actual generated energy varies depending on the daylight levels.\n",
    "metadata": {
      "class_name": "LuaEquipment",
      "attribute_name": "max_solar_power"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipment.movement_bonus",
    "content": "Attribute: movement_bonus \nRead_type: double\n\nDescription: Movement speed bonus.\n",
    "metadata": {
      "class_name": "LuaEquipment",
      "attribute_name": "movement_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipment.name",
    "content": "Attribute: name \nRead_type: string\n\nDescription: Name of this equipment.\n",
    "metadata": {
      "class_name": "LuaEquipment",
      "attribute_name": "name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipment.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaEquipment",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipment.position",
    "content": "Attribute: position \nRead_type: EquipmentPosition\n\nDescription: Position of this equipment in the equipment grid.\n",
    "metadata": {
      "class_name": "LuaEquipment",
      "attribute_name": "position"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipment.prototype",
    "content": "Attribute: prototype \nRead_type: LuaEquipmentPrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEquipment",
      "attribute_name": "prototype"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipment.quality",
    "content": "Attribute: quality \nRead_type: LuaQualityPrototype\n\nDescription: Quality of this equipment.\n",
    "metadata": {
      "class_name": "LuaEquipment",
      "attribute_name": "quality"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipment.shape",
    "content": "Attribute: shape \nRead_type: {'complex_type': 'table', 'parameters': [{'name': 'height', 'order': 1, 'description': '', 'type': 'uint', 'optional': False}, {'name': 'width', 'order': 0, 'description': '', 'type': 'uint', 'optional': False}]}\n\nDescription: Shape of this equipment.",
    "metadata": {
      "class_name": "LuaEquipment",
      "attribute_name": "shape"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipment.shield",
    "content": "Attribute: shield \nRead_type: double\nWrite_type: double\nDescription: Current shield value of the equipment.\n\nCan't be set higher than [LuaEquipment::max_shield](runtime:LuaEquipment::max_shield).\n",
    "metadata": {
      "class_name": "LuaEquipment",
      "attribute_name": "shield"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipment.to_be_removed",
    "content": "Attribute: to_be_removed \nRead_type: boolean\n\nDescription: If this equipment is marked to be removed.\n",
    "metadata": {
      "class_name": "LuaEquipment",
      "attribute_name": "to_be_removed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipment.type",
    "content": "Attribute: type \nRead_type: string\n\nDescription: Type of this equipment.\n",
    "metadata": {
      "class_name": "LuaEquipment",
      "attribute_name": "type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipment.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaEquipment",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaEquipmentCategoryPrototype",
    "content": "Class: LuaEquipmentCategoryPrototype\nDescription: Prototype of an equipment category.",
    "metadata": {
      "class_name": "LuaEquipmentCategoryPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentCategoryPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaEquipmentCategoryPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentCategoryPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaEquipmentCategoryPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaEquipmentGrid",
    "content": "Class: LuaEquipmentGrid\nDescription: An equipment grid is for example the inside of a power armor.",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaEquipmentGrid.can_move",
    "content": "Method: LuaEquipmentGrid.can_move\nDescription: Check whether moving an equipment would succeed.\n\nParameters:\n- equipment (LuaEquipment): The equipment to move\n- position (EquipmentPosition): Where to put it\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "method_name": "can_move"
    }
  },
  {
    "type": "method",
    "name": "LuaEquipmentGrid.cancel_removal",
    "content": "Method: LuaEquipmentGrid.cancel_removal\nDescription: Cancels removal for the given equipment.\n\nParameters:\n- equipment (LuaEquipment): \n\nReturns:\n- boolean: If the equipment removal was successfully cancelled.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "method_name": "cancel_removal"
    }
  },
  {
    "type": "method",
    "name": "LuaEquipmentGrid.clear",
    "content": "Method: LuaEquipmentGrid.clear\nDescription: Clear all equipment from the grid, removing it without actually returning it.\n\nParameters:\n- by_player (PlayerIdentification)[Optional]: If provided, the action is done 'as' this player and [on_player_removed_equipment](runtime:on_player_removed_equipment) is triggered.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "method_name": "clear"
    }
  },
  {
    "type": "method",
    "name": "LuaEquipmentGrid.count",
    "content": "Method: LuaEquipmentGrid.count\nDescription: Get the number of all or some equipment in this grid.\n\nParameters:\n- equipment (EquipmentWithQualityID)[Optional]: The equipment to count. If not specified, count all equipment.\n\nReturns:\n- uint: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "method_name": "count"
    }
  },
  {
    "type": "method",
    "name": "LuaEquipmentGrid.find",
    "content": "Method: LuaEquipmentGrid.find\nDescription: Find equipment by name.\n\nParameters:\n- equipment (EquipmentWithQualityID): Prototype of the equipment to find.\n- search_ghosts (boolean)[Optional]: If ghosts inner equipment should be searched. Defaults to `false`\n\nReturns:\n- LuaEquipment: The first found equipment, or `nil` if equipment could not be found.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "method_name": "find"
    }
  },
  {
    "type": "method",
    "name": "LuaEquipmentGrid.get",
    "content": "Method: LuaEquipmentGrid.get\nDescription: Find equipment in the Equipment Grid colliding with this position.\n\nParameters:\n- position (EquipmentPosition): The position\n\nReturns:\n- LuaEquipment: The found equipment, or `nil` if equipment occupying the given position could not be found.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "method_name": "get"
    }
  },
  {
    "type": "method",
    "name": "LuaEquipmentGrid.get_contents",
    "content": "Method: LuaEquipmentGrid.get_contents\nDescription: Get counts of all equipment in this grid.\n\nReturns:\n- {'complex_type': 'array', 'value': 'EquipmentWithQualityCounts'}: List of all equipment in the grid.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "method_name": "get_contents"
    }
  },
  {
    "type": "method",
    "name": "LuaEquipmentGrid.get_generator_energy",
    "content": "Method: LuaEquipmentGrid.get_generator_energy\nDescription: Total energy per tick generated by the equipment inside this grid.\n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "method_name": "get_generator_energy"
    }
  },
  {
    "type": "method",
    "name": "LuaEquipmentGrid.move",
    "content": "Method: LuaEquipmentGrid.move\nDescription: Move an equipment within this grid.\n\nParameters:\n- equipment (LuaEquipment): The equipment to move\n- position (EquipmentPosition): Where to put it\n\nReturns:\n- boolean: `true` if the equipment was successfully moved.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "method_name": "move"
    }
  },
  {
    "type": "method",
    "name": "LuaEquipmentGrid.order_removal",
    "content": "Method: LuaEquipmentGrid.order_removal\nDescription: Marks the given equipment for removal. If the given equipment is a ghost it is removed.\n\nParameters:\n- equipment (LuaEquipment): \n\nReturns:\n- boolean: If the equipment was successfully marked for removal (or in the case of a ghost; removed.)\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "method_name": "order_removal"
    }
  },
  {
    "type": "method",
    "name": "LuaEquipmentGrid.put",
    "content": "Method: LuaEquipmentGrid.put\nDescription: Insert an equipment into the grid.",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "method_name": "put"
    }
  },
  {
    "type": "method",
    "name": "LuaEquipmentGrid.put",
    "content": "Parameters:\n- by_player (PlayerIdentification)[Optional]: If provided the action is done 'as' this player and [on_player_placed_equipment](runtime:on_player_placed_equipment) is triggered.\n- ghost (boolean)[Optional]: If true, place the equipment as a ghost.\n- name (EquipmentID): Equipment prototype name\n- position (EquipmentPosition)[Optional]: Grid position to put the equipment in.\n- quality (QualityID)[Optional]: The quality, `nil` for any or if not provided `normal` is used.",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "method_name": "put"
    }
  },
  {
    "type": "method",
    "name": "LuaEquipmentGrid.put",
    "content": "Returns:\n- LuaEquipment: The newly-added equipment, or `nil` if the equipment could not be added.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "method_name": "put"
    }
  },
  {
    "type": "method",
    "name": "LuaEquipmentGrid.revive",
    "content": "Method: LuaEquipmentGrid.revive\nDescription: Revives the given equipment ghost if possible.\n\nParameters:\n- equipment (LuaEquipment): The equipment ghost to revive.\n\nReturns:\n- LuaEquipment: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "method_name": "revive"
    }
  },
  {
    "type": "method",
    "name": "LuaEquipmentGrid.take",
    "content": "Method: LuaEquipmentGrid.take\nDescription: Remove an equipment from the grid.\n\nParameters:\n- by_player (PlayerIdentification)[Optional]: If provided the action is done 'as' this player and [on_player_removed_equipment](runtime:on_player_removed_equipment) is triggered.\n- equipment (LuaEquipment)[Optional]: Take this exact equipment.\n- position (EquipmentPosition)[Optional]: Take the equipment that contains this position in the grid.",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "method_name": "take"
    }
  },
  {
    "type": "method",
    "name": "LuaEquipmentGrid.take",
    "content": "Returns:\n- SimpleItemStack: The removed equipment, or `nil` if no equipment was removed.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "method_name": "take"
    }
  },
  {
    "type": "method",
    "name": "LuaEquipmentGrid.take_all",
    "content": "Method: LuaEquipmentGrid.take_all\nDescription: Remove all equipment from the grid.\n\nParameters:\n- by_player (PlayerIdentification)[Optional]: If provided, the action is done 'as' this player and [on_player_removed_equipment](runtime:on_player_removed_equipment) is triggered.\n\nReturns:\n- {'complex_type': 'array', 'value': 'ItemWithQualityCounts'}: List of the equipment that has been removed.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "method_name": "take_all"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentGrid.available_in_batteries",
    "content": "Attribute: available_in_batteries \nRead_type: double\n\nDescription: The total energy stored in all batteries in the equipment grid.\n",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "attribute_name": "available_in_batteries"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentGrid.battery_capacity",
    "content": "Attribute: battery_capacity \nRead_type: double\n\nDescription: Total energy storage capacity of all batteries in the equipment grid.\n",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "attribute_name": "battery_capacity"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentGrid.entity_owner",
    "content": "Attribute: entity_owner [Optional]\nRead_type: LuaEntity\n\nDescription: The entity that this equipment grid is owned by (in some inventory or item stack.)\n\nIf the owning entity is a character owned by some player and the player is disconnected this will return `nil`.",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "attribute_name": "entity_owner"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentGrid.equipment",
    "content": "Attribute: equipment \nRead_type: {'complex_type': 'array', 'value': 'LuaEquipment'}\n\nDescription: All the equipment in this grid.\n",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "attribute_name": "equipment"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentGrid.height",
    "content": "Attribute: height \nRead_type: uint\n\nDescription: Height of the equipment grid.\n",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "attribute_name": "height"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentGrid.inhibit_movement_bonus",
    "content": "Attribute: inhibit_movement_bonus \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether this grid's equipment movement bonus is active.\n",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "attribute_name": "inhibit_movement_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentGrid.inventory_bonus",
    "content": "Attribute: inventory_bonus \nRead_type: uint\n\nDescription: The total amount of inventory bonus this equipment grid gives.\n",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "attribute_name": "inventory_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentGrid.max_shield",
    "content": "Attribute: max_shield \nRead_type: float\n\nDescription: The maximum amount of shields this equipment grid has.\n",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "attribute_name": "max_shield"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentGrid.max_solar_energy",
    "content": "Attribute: max_solar_energy \nRead_type: double\n\nDescription: Maximum energy per tick that can be created by all solar panels in the equipment grid on the current surface. Actual generated energy varies depending on the daylight levels.\n",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "attribute_name": "max_solar_energy"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentGrid.movement_bonus",
    "content": "Attribute: movement_bonus \nRead_type: double\n\nDescription: The total amount of movement bonus this equipment grid gives.\n\nReturns `0` if [LuaEquipmentGrid::inhibit_movement_bonus](runtime:LuaEquipmentGrid::inhibit_movement_bonus) is `false`.\n",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "attribute_name": "movement_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentGrid.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentGrid.player_owner",
    "content": "Attribute: player_owner [Optional]\nRead_type: LuaPlayer\n\nDescription: The player that this equipment grid is owned by (in some inventory or item stack.)\n",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "attribute_name": "player_owner"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentGrid.prototype",
    "content": "Attribute: prototype \nRead_type: LuaEquipmentGridPrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "attribute_name": "prototype"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentGrid.shield",
    "content": "Attribute: shield \nRead_type: float\n\nDescription: The amount of shields this equipment grid has.\n",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "attribute_name": "shield"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentGrid.unique_id",
    "content": "Attribute: unique_id \nRead_type: uint\n\nDescription: Unique identifier of this equipment grid.\n",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "attribute_name": "unique_id"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentGrid.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "attribute_name": "valid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentGrid.width",
    "content": "Attribute: width \nRead_type: uint\n\nDescription: Width of the equipment grid.\n",
    "metadata": {
      "class_name": "LuaEquipmentGrid",
      "attribute_name": "width"
    }
  },
  {
    "type": "class",
    "name": "LuaEquipmentGridPrototype",
    "content": "Class: LuaEquipmentGridPrototype\nDescription: Prototype of an equipment grid.",
    "metadata": {
      "class_name": "LuaEquipmentGridPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentGridPrototype.equipment_categories",
    "content": "Attribute: equipment_categories \nRead_type: {'complex_type': 'array', 'value': 'string'}\n\nDescription: Equipment category names for the [categories](runtime:LuaEquipmentPrototype::equipment_categories) that may be inserted into this equipment grid. The grid will accept any equipment that has at least one category in this list.",
    "metadata": {
      "class_name": "LuaEquipmentGridPrototype",
      "attribute_name": "equipment_categories"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentGridPrototype.height",
    "content": "Attribute: height \nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEquipmentGridPrototype",
      "attribute_name": "height"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentGridPrototype.locked",
    "content": "Attribute: locked \nRead_type: boolean\n\nDescription: If the player can move equipment into or out of this grid.\n",
    "metadata": {
      "class_name": "LuaEquipmentGridPrototype",
      "attribute_name": "locked"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentGridPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaEquipmentGridPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentGridPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaEquipmentGridPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentGridPrototype.width",
    "content": "Attribute: width \nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaEquipmentGridPrototype",
      "attribute_name": "width"
    }
  },
  {
    "type": "class",
    "name": "LuaEquipmentPrototype",
    "content": "Class: LuaEquipmentPrototype\nDescription: Prototype of a modular equipment.",
    "metadata": {
      "class_name": "LuaEquipmentPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "method",
    "name": "LuaEquipmentPrototype.get_energy_consumption",
    "content": "Method: LuaEquipmentPrototype.get_energy_consumption\nDescription: \n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEquipmentPrototype",
      "method_name": "get_energy_consumption"
    }
  },
  {
    "type": "method",
    "name": "LuaEquipmentPrototype.get_inventory_bonus",
    "content": "Method: LuaEquipmentPrototype.get_inventory_bonus\nDescription: \n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- uint: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEquipmentPrototype",
      "method_name": "get_inventory_bonus"
    }
  },
  {
    "type": "method",
    "name": "LuaEquipmentPrototype.get_movement_bonus",
    "content": "Method: LuaEquipmentPrototype.get_movement_bonus\nDescription: \n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- float: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEquipmentPrototype",
      "method_name": "get_movement_bonus"
    }
  },
  {
    "type": "method",
    "name": "LuaEquipmentPrototype.get_shield",
    "content": "Method: LuaEquipmentPrototype.get_shield\nDescription: The shield value of this equipment. 0 for non-shield equipment.\n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- float: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaEquipmentPrototype",
      "method_name": "get_shield"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentPrototype.attack_parameters",
    "content": "Attribute: attack_parameters [Optional]\nRead_type: AttackParameters\n\nDescription: The equipment attack parameters.\n",
    "metadata": {
      "class_name": "LuaEquipmentPrototype",
      "attribute_name": "attack_parameters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentPrototype.automatic",
    "content": "Attribute: automatic \nRead_type: boolean\n\nDescription: Whether this active defense equipment is automatic. Returns false if not active defense equipment.\n",
    "metadata": {
      "class_name": "LuaEquipmentPrototype",
      "attribute_name": "automatic"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentPrototype.background_color",
    "content": "Attribute: background_color \nRead_type: Color\n\nDescription: The background color of this equipment prototype.\n",
    "metadata": {
      "class_name": "LuaEquipmentPrototype",
      "attribute_name": "background_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentPrototype.burner_prototype",
    "content": "Attribute: burner_prototype [Optional]\nRead_type: LuaBurnerPrototype\n\nDescription: The burner energy source prototype this equipment uses, if any.\n",
    "metadata": {
      "class_name": "LuaEquipmentPrototype",
      "attribute_name": "burner_prototype"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentPrototype.electric_energy_source_prototype",
    "content": "Attribute: electric_energy_source_prototype [Optional]\nRead_type: LuaElectricEnergySourcePrototype\n\nDescription: The electric energy source prototype this equipment uses, if any.\n",
    "metadata": {
      "class_name": "LuaEquipmentPrototype",
      "attribute_name": "electric_energy_source_prototype"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentPrototype.energy_per_shield",
    "content": "Attribute: energy_per_shield \nRead_type: double\n\nDescription: The energy per shield point restored. 0 for non-shield equipment.\n",
    "metadata": {
      "class_name": "LuaEquipmentPrototype",
      "attribute_name": "energy_per_shield"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentPrototype.energy_production",
    "content": "Attribute: energy_production \nRead_type: double\n\nDescription: The max power generated by this equipment.\n",
    "metadata": {
      "class_name": "LuaEquipmentPrototype",
      "attribute_name": "energy_production"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentPrototype.energy_source",
    "content": "Attribute: energy_source \nRead_type: LuaElectricEnergySourcePrototype\n\nDescription: The energy source prototype for the equipment.\n",
    "metadata": {
      "class_name": "LuaEquipmentPrototype",
      "attribute_name": "energy_source"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentPrototype.equipment_categories",
    "content": "Attribute: equipment_categories \nRead_type: {'complex_type': 'array', 'value': 'string'}\n\nDescription: Category names for this equipment. These [categories](runtime:LuaEquipmentGridPrototype::equipment_categories) will be used to determine whether this equipment is allowed in a particular equipment grid.",
    "metadata": {
      "class_name": "LuaEquipmentPrototype",
      "attribute_name": "equipment_categories"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentPrototype.logistic_parameters",
    "content": "Attribute: logistic_parameters [Optional]",
    "metadata": {
      "class_name": "LuaEquipmentPrototype",
      "attribute_name": "logistic_parameters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentPrototype.logistic_parameters",
    "content": "Read_type: {'complex_type': 'table', 'parameters': [{'name': 'charge_approach_distance', 'order': 3, 'description': '', 'type': 'float', 'optional': False}, {'name': 'charging_distance', 'order': 7, 'description': '', 'type': 'float', 'optional': False}, {'name': 'charging_energy', 'order': 9, 'description': '', 'type': 'double', 'optional': False}, {'name': 'charging_station_count', 'order': 6, 'description': '', 'type': 'uint', 'optional': False}, {'name': 'charging_station_shift', 'order': 8,",
    "metadata": {
      "class_name": "LuaEquipmentPrototype",
      "attribute_name": "logistic_parameters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentPrototype.logistic_parameters",
    "content": "False}, {'name': 'charging_station_shift', 'order': 8, 'description': '', 'type': 'Vector', 'optional': False}, {'name': 'charging_threshold_distance', 'order': 10, 'description': '', 'type': 'float', 'optional': False}, {'name': 'construction_radius', 'order': 5, 'description': '', 'type': 'float', 'optional': False}, {'name': 'logistic_radius', 'order': 4, 'description': '', 'type': 'float', 'optional': False}, {'name': 'logistics_connection_distance', 'order': 14, 'description': '', 'type': 'float',",
    "metadata": {
      "class_name": "LuaEquipmentPrototype",
      "attribute_name": "logistic_parameters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentPrototype.logistic_parameters",
    "content": "'order': 14, 'description': '', 'type': 'float', 'optional': False}, {'name': 'robot_limit', 'order': 13, 'description': '', 'type': 'uint', 'optional': False}, {'name': 'robot_vertical_acceleration', 'order': 11, 'description': '', 'type': 'float', 'optional': False}, {'name': 'robots_shrink_when_entering_and_exiting', 'order': 15, 'description': '', 'type': 'boolean', 'optional': False}, {'name': 'spawn_and_station_height', 'order': 0, 'description': '', 'type': 'float', 'optional': False}, {'name':",
    "metadata": {
      "class_name": "LuaEquipmentPrototype",
      "attribute_name": "logistic_parameters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentPrototype.logistic_parameters",
    "content": "'', 'type': 'float', 'optional': False}, {'name': 'spawn_and_station_shadow_height_offset', 'order': 1, 'description': '', 'type': 'float', 'optional': False}, {'name': 'stationing_offset', 'order': 12, 'description': '', 'type': 'Vector', 'optional': False}, {'name': 'stationing_render_layer_swap_height', 'order': 2, 'description': '', 'type': 'float', 'optional': False}]}",
    "metadata": {
      "class_name": "LuaEquipmentPrototype",
      "attribute_name": "logistic_parameters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentPrototype.logistic_parameters",
    "content": "Description: The logistic parameters for this roboport equipment.",
    "metadata": {
      "class_name": "LuaEquipmentPrototype",
      "attribute_name": "logistic_parameters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaEquipmentPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentPrototype.shape",
    "content": "Attribute: shape \nRead_type: {'complex_type': 'table', 'parameters': [{'name': 'height', 'order': 1, 'description': '', 'type': 'uint', 'optional': False}, {'name': 'points', 'order': 2, 'description': 'Only set when the shape is \"manual\"', 'type': {'complex_type': 'array', 'value': 'EquipmentPoint'}, 'optional': True}, {'name': 'width', 'order': 0, 'description': '', 'type': 'uint', 'optional': False}]}\n\nDescription: Shape of this equipment prototype.",
    "metadata": {
      "class_name": "LuaEquipmentPrototype",
      "attribute_name": "shape"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentPrototype.take_result",
    "content": "Attribute: take_result [Optional]\nRead_type: LuaItemPrototype\n\nDescription: The result item when taking this equipment out of an equipment grid, if any.\n",
    "metadata": {
      "class_name": "LuaEquipmentPrototype",
      "attribute_name": "take_result"
    }
  },
  {
    "type": "attribute",
    "name": "LuaEquipmentPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaEquipmentPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaFlowStatistics",
    "content": "Class: LuaFlowStatistics\nDescription: Encapsulates statistic data for different parts of the game.\n\nIn the context of flow statistics, `input`, `output` and `storage` describe in which position of the associated GUI the values are shown. Input values are shown on the far left side, output values to the immediate right, and storage values (if present) to the far right.",
    "metadata": {
      "class_name": "LuaFlowStatistics",
      "parent_class": null
    }
  },
  {
    "type": "class",
    "name": "LuaFlowStatistics",
    "content": "- The item production GUI shows \"consumption\" on the right, thus `output` describes the item consumption numbers. The same goes for fluid consumption.\n\n- The kills GUI shows \"losses\" on the right, so `output` describes how many of the force's entities were killed by enemies.",
    "metadata": {
      "class_name": "LuaFlowStatistics",
      "parent_class": null
    }
  },
  {
    "type": "class",
    "name": "LuaFlowStatistics",
    "content": "- The electric network GUI shows \"power consumption\" on the left side, so in this case `input` describes the power consumption numbers. In addition, electric networks are currently the only ones that utilize the `storage` part of their statistics, showing accumulator charges to the far right of the GUI.",
    "metadata": {
      "class_name": "LuaFlowStatistics",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaFlowStatistics.clear",
    "content": "Method: LuaFlowStatistics.clear\nDescription: Reset all the statistics data to 0.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaFlowStatistics",
      "method_name": "clear"
    }
  },
  {
    "type": "method",
    "name": "LuaFlowStatistics.get_flow_count",
    "content": "Method: LuaFlowStatistics.get_flow_count\nDescription: Gets the flow count value for the given time frame. If `sample_index` is not provided, then the value returned is the average across the provided precision time period. These are the values shown in the bottom section of the statistics GUIs.",
    "metadata": {
      "class_name": "LuaFlowStatistics",
      "method_name": "get_flow_count"
    }
  },
  {
    "type": "method",
    "name": "LuaFlowStatistics.get_flow_count",
    "content": "Use `sample_index` to access the data used to generate the statistics graphs. Each precision level contains 300 samples of data so at a precision of 1 minute, each sample contains data averaged across 60s / 300 = 0.2s = 12 ticks.\n\nAll return values are normalized to be per-tick for electric networks and per-minute for all other types.",
    "metadata": {
      "class_name": "LuaFlowStatistics",
      "method_name": "get_flow_count"
    }
  },
  {
    "type": "method",
    "name": "LuaFlowStatistics.get_flow_count",
    "content": "Parameters:\n- category (string): The statistics category to read from. Valid choices are `\"input\"`, `\"output\"` and `\"storage\"`.\n- count (boolean)[Optional]: If true, the count of items/fluids/entities is returned instead of the per-time-frame value.\n- name (FlowStatisticsID): The prototype ID.\n- precision_index (defines.flow_precision_index): The precision to read.",
    "metadata": {
      "class_name": "LuaFlowStatistics",
      "method_name": "get_flow_count"
    }
  },
  {
    "type": "method",
    "name": "LuaFlowStatistics.get_flow_count",
    "content": "- sample_index (uint16)[Optional]: The sample index to read from within the precision range. If not provided, the entire precision range is read. Must be between 1 and 300 where 1 is the most recent sample and 300 is the oldest.",
    "metadata": {
      "class_name": "LuaFlowStatistics",
      "method_name": "get_flow_count"
    }
  },
  {
    "type": "method",
    "name": "LuaFlowStatistics.get_flow_count",
    "content": "Returns:\n- double: \n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaFlowStatistics",
      "method_name": "get_flow_count"
    }
  },
  {
    "type": "method",
    "name": "LuaFlowStatistics.get_input_count",
    "content": "Method: LuaFlowStatistics.get_input_count\nDescription: Gets the total input count for a given prototype.\n\nParameters:\n- id (FlowStatisticsID): The prototype ID.\n\nReturns:\n- {'complex_type': 'union', 'options': ['uint64', 'double'], 'full_format': False}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaFlowStatistics",
      "method_name": "get_input_count"
    }
  },
  {
    "type": "method",
    "name": "LuaFlowStatistics.get_output_count",
    "content": "Method: LuaFlowStatistics.get_output_count\nDescription: Gets the total output count for a given prototype.\n\nParameters:\n- id (FlowStatisticsID): The prototype ID.\n\nReturns:\n- {'complex_type': 'union', 'options': ['uint64', 'double'], 'full_format': False}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaFlowStatistics",
      "method_name": "get_output_count"
    }
  },
  {
    "type": "method",
    "name": "LuaFlowStatistics.get_storage_count",
    "content": "Method: LuaFlowStatistics.get_storage_count\nDescription: Gets the total storage count for a given prototype.\n\nParameters:\n- id (FlowStatisticsID): The prototype ID.\n\nReturns:\n- {'complex_type': 'union', 'options': ['uint64', 'double'], 'full_format': False}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaFlowStatistics",
      "method_name": "get_storage_count"
    }
  },
  {
    "type": "method",
    "name": "LuaFlowStatistics.on_flow",
    "content": "Method: LuaFlowStatistics.on_flow\nDescription: Adds a value to this flow statistics.\n\nParameters:\n- count (float): The count: positive or negative determines if the value goes in the input or output statistics.\n- id (FlowStatisticsID): The prototype ID.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaFlowStatistics",
      "method_name": "on_flow"
    }
  },
  {
    "type": "method",
    "name": "LuaFlowStatistics.set_input_count",
    "content": "Method: LuaFlowStatistics.set_input_count\nDescription: Sets the total input count for a given prototype.\n\nParameters:\n- count ({'complex_type': 'union', 'options': ['uint64', 'double'], 'full_format': False}): The new count. The type depends on the instance of the statistics.\n- id (FlowStatisticsID): The prototype ID.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaFlowStatistics",
      "method_name": "set_input_count"
    }
  },
  {
    "type": "method",
    "name": "LuaFlowStatistics.set_output_count",
    "content": "Method: LuaFlowStatistics.set_output_count\nDescription: Sets the total output count for a given prototype.\n\nParameters:\n- count ({'complex_type': 'union', 'options': ['uint64', 'double'], 'full_format': False}): The new count. The type depends on the instance of the statistics.\n- id (FlowStatisticsID): The prototype ID.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaFlowStatistics",
      "method_name": "set_output_count"
    }
  },
  {
    "type": "method",
    "name": "LuaFlowStatistics.set_storage_count",
    "content": "Method: LuaFlowStatistics.set_storage_count\nDescription: Sets the total storage count for a given prototype.\n\nParameters:\n- count ({'complex_type': 'union', 'options': ['uint64', 'double'], 'full_format': False}): The new count. The type depends on the instance of the statistics.\n- id (FlowStatisticsID): The prototype ID.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaFlowStatistics",
      "method_name": "set_storage_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFlowStatistics.force",
    "content": "Attribute: force [Optional]\nRead_type: LuaForce\n\nDescription: The force these statistics belong to. `nil` for pollution statistics.\n",
    "metadata": {
      "class_name": "LuaFlowStatistics",
      "attribute_name": "force"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFlowStatistics.input_counts",
    "content": "Attribute: input_counts \nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': {'complex_type': 'union', 'options': ['uint64', 'double'], 'full_format': False}}\n\nDescription: List of input counts indexed by prototype name. Represents the data that is shown on the left side of the GUI for the given statistics.",
    "metadata": {
      "class_name": "LuaFlowStatistics",
      "attribute_name": "input_counts"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFlowStatistics.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaFlowStatistics",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFlowStatistics.output_counts",
    "content": "Attribute: output_counts \nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': {'complex_type': 'union', 'options': ['uint64', 'double'], 'full_format': False}}\n\nDescription: List of output counts indexed by prototype name. Represents the data that is shown in the middle of the GUI for electric networks and on the right side for all other statistics types.",
    "metadata": {
      "class_name": "LuaFlowStatistics",
      "attribute_name": "output_counts"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFlowStatistics.storage_counts",
    "content": "Attribute: storage_counts \nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': {'complex_type': 'union', 'options': ['uint64', 'double'], 'full_format': False}}\n\nDescription: List of storage counts indexed by prototype name. Represents the data that is shown on the right side of the GUI for electric networks. For other statistics types these values are currently unused and hidden.",
    "metadata": {
      "class_name": "LuaFlowStatistics",
      "attribute_name": "storage_counts"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFlowStatistics.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaFlowStatistics",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaFluidBox",
    "content": "Class: LuaFluidBox\nDescription: An array of fluid boxes of an entity. Entities may contain more than one fluid box, and some can change the number of fluid boxes -- for instance, an assembling machine will change its number of fluid boxes depending on its active recipe. See [Fluid](runtime:Fluid).",
    "metadata": {
      "class_name": "LuaFluidBox",
      "parent_class": null
    }
  },
  {
    "type": "class",
    "name": "LuaFluidBox",
    "content": "Do note that reading from a [LuaFluidBox](runtime:LuaFluidBox) creates a new table and writing will copy the given fields from the table into the engine's own fluid box structure. Therefore, the correct way to update a fluidbox of an entity is to read it first, modify the table, then write the modified table back. Directly accessing the returned table's attributes won't have the desired effect.",
    "metadata": {
      "class_name": "LuaFluidBox",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaFluidBox.add_linked_connection",
    "content": "Method: LuaFluidBox.add_linked_connection\nDescription: Registers a linked connection between this entity and other entity. Because entity may have multiple fluidboxes, each with multiple connections that could be linked, a unique value for this and other linked_connection_id may need to be given.",
    "metadata": {
      "class_name": "LuaFluidBox",
      "method_name": "add_linked_connection"
    }
  },
  {
    "type": "method",
    "name": "LuaFluidBox.add_linked_connection",
    "content": "It may happen a linked connection is not established immediately due to crafting machines being possible to not have certain fluidboxes exposed at a given point in time, but once they appear (due to recipe changes that would use them) they will be linked. Linked connections are persisted as (this_entity, this_linked_connection_id, other_entity, other_linked_connection_id) so if a pipe connection definition's value of linked_connection_id changes existing connections may not restore correct connections.",
    "metadata": {
      "class_name": "LuaFluidBox",
      "method_name": "add_linked_connection"
    }
  },
  {
    "type": "method",
    "name": "LuaFluidBox.add_linked_connection",
    "content": "Every fluidbox connection that was defined in prototypes as connection_type==\"linked\" may be linked to at most 1 other fluidbox. When trying to connect already used connection, previous connection will be removed.\n\nLinked connections cannot go to the same entity even if they would be part of other fluidbox.\n\nParameters:\n- other_entity (LuaEntity): \n- other_linked_connection_id (uint): \n- this_linked_connection_id (uint): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaFluidBox",
      "method_name": "add_linked_connection"
    }
  },
  {
    "type": "method",
    "name": "LuaFluidBox.flush",
    "content": "Method: LuaFluidBox.flush\nDescription: Flushes all fluid from this fluidbox and its fluid system.\n\nParameters:\n- fluid (FluidID)[Optional]: If provided, only this fluid is flushed.\n- index (uint): \n\nReturns:\n- {'complex_type': 'dictionary', 'key': 'string', 'value': 'float'}: The removed fluid.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaFluidBox",
      "method_name": "flush"
    }
  },
  {
    "type": "method",
    "name": "LuaFluidBox.get_capacity",
    "content": "Method: LuaFluidBox.get_capacity\nDescription: The capacity of the given fluidbox index.\n\nParameters:\n- index (uint): \n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaFluidBox",
      "method_name": "get_capacity"
    }
  },
  {
    "type": "method",
    "name": "LuaFluidBox.get_connections",
    "content": "Method: LuaFluidBox.get_connections\nDescription: The fluidboxes to which the fluidbox at the given index is connected.\n\nParameters:\n- index (uint): \n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaFluidBox'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaFluidBox",
      "method_name": "get_connections"
    }
  },
  {
    "type": "method",
    "name": "LuaFluidBox.get_filter",
    "content": "Method: LuaFluidBox.get_filter\nDescription: Get a fluid box filter\n\nParameters:\n- index (uint): The index of the filter to get.\n\nReturns:\n- FluidBoxFilter: The filter at the requested index, or `nil` if there isn't one.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaFluidBox",
      "method_name": "get_filter"
    }
  },
  {
    "type": "method",
    "name": "LuaFluidBox.get_fluid_segment_contents",
    "content": "Method: LuaFluidBox.get_fluid_segment_contents\nDescription: Gets counts of all fluids in the fluid segment. May return `nil` for fluid wagon, fluid turret's internal buffer, or a fluidbox which does not belong to a fluid segment.\n\nParameters:\n- index (uint): \n\nReturns:\n- {'complex_type': 'dictionary', 'key': 'string', 'value': 'uint'}: The counts, indexed by fluid name.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaFluidBox",
      "method_name": "get_fluid_segment_contents"
    }
  },
  {
    "type": "method",
    "name": "LuaFluidBox.get_fluid_segment_id",
    "content": "Method: LuaFluidBox.get_fluid_segment_id\nDescription: Gets the unique ID of the fluid segment this fluid box belongs to. May return `nil` for fluid wagon, fluid turret's internal buffer or a fluidbox which does not belong to a fluid segment.\n\nParameters:\n- index (uint): \n\nReturns:\n- uint: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaFluidBox",
      "method_name": "get_fluid_segment_id"
    }
  },
  {
    "type": "method",
    "name": "LuaFluidBox.get_linked_connection",
    "content": "Method: LuaFluidBox.get_linked_connection\nDescription: Returns other end of a linked connection.\n\nParameters:\n- this_linked_connection_id (uint): \n\nReturns:\n- LuaEntity: Other entity to which a linked connection was made\n- uint: linked_connection_id on other entity\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaFluidBox",
      "method_name": "get_linked_connection"
    }
  },
  {
    "type": "method",
    "name": "LuaFluidBox.get_linked_connections",
    "content": "Method: LuaFluidBox.get_linked_connections\nDescription: Returns list of all linked connections registered for this entity.\n\nReturns:\n- {'complex_type': 'array', 'value': 'FluidBoxConnectionRecord'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaFluidBox",
      "method_name": "get_linked_connections"
    }
  },
  {
    "type": "method",
    "name": "LuaFluidBox.get_locked_fluid",
    "content": "Method: LuaFluidBox.get_locked_fluid\nDescription: Returns the fluid the fluidbox is locked onto\n\nParameters:\n- index (uint): \n\nReturns:\n- string: `nil` if the fluidbox is not locked to any fluid.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaFluidBox",
      "method_name": "get_locked_fluid"
    }
  },
  {
    "type": "method",
    "name": "LuaFluidBox.get_pipe_connections",
    "content": "Method: LuaFluidBox.get_pipe_connections\nDescription: Get the fluid box's connections and associated data.\n\nParameters:\n- index (uint): \n\nReturns:\n- {'complex_type': 'array', 'value': 'PipeConnection'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaFluidBox",
      "method_name": "get_pipe_connections"
    }
  },
  {
    "type": "method",
    "name": "LuaFluidBox.get_prototype",
    "content": "Method: LuaFluidBox.get_prototype\nDescription: The prototype of this fluidbox index. If this is used on a fluidbox of a crafting machine which due to recipe was created by merging multiple prototypes, a table of prototypes that were merged will be returned instead\n\nParameters:\n- index (uint): \n\nReturns:\n- {'complex_type': 'union', 'options': ['LuaFluidBoxPrototype', {'complex_type': 'array', 'value': 'LuaFluidBoxPrototype'}], 'full_format': False}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaFluidBox",
      "method_name": "get_prototype"
    }
  },
  {
    "type": "method",
    "name": "LuaFluidBox.remove_linked_connection",
    "content": "Method: LuaFluidBox.remove_linked_connection\nDescription: Removes linked connection record. If connected, other end will be also removed.\n\nParameters:\n- this_linked_connection_id (uint): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaFluidBox",
      "method_name": "remove_linked_connection"
    }
  },
  {
    "type": "method",
    "name": "LuaFluidBox.set_filter",
    "content": "Method: LuaFluidBox.set_filter\nDescription: Set a fluid box filter.\n\nSome entities cannot have their fluidbox filter set, notably fluid wagons and crafting machines.\n\nParameters:\n- filter ({'complex_type': 'union', 'options': ['FluidBoxFilterSpec', 'nil'], 'full_format': False}): The filter to set. Setting `nil` clears the filter.\n- index (uint): The index of the filter to set.\n\nReturns:\n- boolean: Whether the filter was set successfully.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaFluidBox",
      "method_name": "set_filter"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidBox.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaFluidBox",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidBox.owner",
    "content": "Attribute: owner \nRead_type: LuaEntity\n\nDescription: The entity that owns this fluidbox.\n",
    "metadata": {
      "class_name": "LuaFluidBox",
      "attribute_name": "owner"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidBox.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaFluidBox",
      "attribute_name": "valid"
    }
  },
  {
    "type": "operator",
    "name": "LuaFluidBox.index",
    "content": "Operator: index [Optional]\nRead_type: Fluid\n\nDescription: Access, set or clear a fluid box. The index must always be in bounds (see [LuaFluidBox::length_operator](runtime:LuaFluidBox::length_operator)). New fluidboxes may not be added or removed using this operator.\n\nIs `nil` if the given fluid box does not contain any fluid. Writing `nil` removes all fluid from the fluid box.",
    "metadata": {
      "class_name": "LuaFluidBox",
      "operator_name": "index"
    }
  },
  {
    "type": "operator",
    "name": "LuaFluidBox.length",
    "content": "Operator: length \nRead_type: uint\n\nDescription: Number of fluid boxes.\n",
    "metadata": {
      "class_name": "LuaFluidBox",
      "operator_name": "length"
    }
  },
  {
    "type": "class",
    "name": "LuaFluidBoxPrototype",
    "content": "Class: LuaFluidBoxPrototype\nDescription: A prototype of a fluidbox owned by some [LuaEntityPrototype](runtime:LuaEntityPrototype).",
    "metadata": {
      "class_name": "LuaFluidBoxPrototype",
      "parent_class": null
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidBoxPrototype.entity",
    "content": "Attribute: entity \nRead_type: LuaEntityPrototype\n\nDescription: The entity that this belongs to.\n",
    "metadata": {
      "class_name": "LuaFluidBoxPrototype",
      "attribute_name": "entity"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidBoxPrototype.filter",
    "content": "Attribute: filter [Optional]\nRead_type: LuaFluidPrototype\n\nDescription: The filter, if any is set.\n",
    "metadata": {
      "class_name": "LuaFluidBoxPrototype",
      "attribute_name": "filter"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidBoxPrototype.index",
    "content": "Attribute: index \nRead_type: uint\n\nDescription: The index of this fluidbox prototype in the owning entity.\n",
    "metadata": {
      "class_name": "LuaFluidBoxPrototype",
      "attribute_name": "index"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidBoxPrototype.maximum_temperature",
    "content": "Attribute: maximum_temperature [Optional]\nRead_type: double\n\nDescription: The maximum temperature, if any is set.\n",
    "metadata": {
      "class_name": "LuaFluidBoxPrototype",
      "attribute_name": "maximum_temperature"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidBoxPrototype.minimum_temperature",
    "content": "Attribute: minimum_temperature [Optional]\nRead_type: double\n\nDescription: The minimum temperature, if any is set.\n",
    "metadata": {
      "class_name": "LuaFluidBoxPrototype",
      "attribute_name": "minimum_temperature"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidBoxPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaFluidBoxPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidBoxPrototype.pipe_connections",
    "content": "Attribute: pipe_connections \nRead_type: {'complex_type': 'array', 'value': 'PipeConnectionDefinition'}\n\nDescription: The pipe connection points.\n",
    "metadata": {
      "class_name": "LuaFluidBoxPrototype",
      "attribute_name": "pipe_connections"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidBoxPrototype.production_type",
    "content": "Attribute: production_type \nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'input'}, {'complex_type': 'literal', 'value': 'input-output'}, {'complex_type': 'literal', 'value': 'output'}, {'complex_type': 'literal', 'value': 'none'}], 'full_format': False}\n\nDescription: The production type.",
    "metadata": {
      "class_name": "LuaFluidBoxPrototype",
      "attribute_name": "production_type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidBoxPrototype.render_layer",
    "content": "Attribute: render_layer \nRead_type: string\n\nDescription: The render layer.\n",
    "metadata": {
      "class_name": "LuaFluidBoxPrototype",
      "attribute_name": "render_layer"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidBoxPrototype.secondary_draw_orders",
    "content": "Attribute: secondary_draw_orders \nRead_type: {'complex_type': 'array', 'value': 'int'}\n\nDescription: The secondary draw orders for the 4 possible connection directions.\n",
    "metadata": {
      "class_name": "LuaFluidBoxPrototype",
      "attribute_name": "secondary_draw_orders"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidBoxPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaFluidBoxPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidBoxPrototype.volume",
    "content": "Attribute: volume \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaFluidBoxPrototype",
      "attribute_name": "volume"
    }
  },
  {
    "type": "class",
    "name": "LuaFluidEnergySourcePrototype",
    "content": "Class: LuaFluidEnergySourcePrototype\nDescription: Prototype of a fluid energy source.",
    "metadata": {
      "class_name": "LuaFluidEnergySourcePrototype",
      "parent_class": null
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidEnergySourcePrototype.burns_fluid",
    "content": "Attribute: burns_fluid \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaFluidEnergySourcePrototype",
      "attribute_name": "burns_fluid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidEnergySourcePrototype.destroy_non_fuel_fluid",
    "content": "Attribute: destroy_non_fuel_fluid \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaFluidEnergySourcePrototype",
      "attribute_name": "destroy_non_fuel_fluid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidEnergySourcePrototype.effectivity",
    "content": "Attribute: effectivity \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaFluidEnergySourcePrototype",
      "attribute_name": "effectivity"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidEnergySourcePrototype.emissions_per_joule",
    "content": "Attribute: emissions_per_joule \nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'double'}\n\nDescription: The table of emissions of this energy source in `pollution/Joule`, indexed by pollutant type. Multiplying it by energy consumption in `Watt` gives `pollution/second`.",
    "metadata": {
      "class_name": "LuaFluidEnergySourcePrototype",
      "attribute_name": "emissions_per_joule"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidEnergySourcePrototype.fluid_box",
    "content": "Attribute: fluid_box \nRead_type: LuaFluidBoxPrototype\n\nDescription: The fluid box for this energy source.\n",
    "metadata": {
      "class_name": "LuaFluidEnergySourcePrototype",
      "attribute_name": "fluid_box"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidEnergySourcePrototype.fluid_usage_per_tick",
    "content": "Attribute: fluid_usage_per_tick \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaFluidEnergySourcePrototype",
      "attribute_name": "fluid_usage_per_tick"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidEnergySourcePrototype.maximum_temperature",
    "content": "Attribute: maximum_temperature \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaFluidEnergySourcePrototype",
      "attribute_name": "maximum_temperature"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidEnergySourcePrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaFluidEnergySourcePrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidEnergySourcePrototype.render_no_network_icon",
    "content": "Attribute: render_no_network_icon \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaFluidEnergySourcePrototype",
      "attribute_name": "render_no_network_icon"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidEnergySourcePrototype.render_no_power_icon",
    "content": "Attribute: render_no_power_icon \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaFluidEnergySourcePrototype",
      "attribute_name": "render_no_power_icon"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidEnergySourcePrototype.scale_fluid_usage",
    "content": "Attribute: scale_fluid_usage \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaFluidEnergySourcePrototype",
      "attribute_name": "scale_fluid_usage"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidEnergySourcePrototype.smoke",
    "content": "Attribute: smoke \nRead_type: {'complex_type': 'array', 'value': 'SmokeSource'}\n\nDescription: The smoke sources for this prototype, if any.\n",
    "metadata": {
      "class_name": "LuaFluidEnergySourcePrototype",
      "attribute_name": "smoke"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidEnergySourcePrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaFluidEnergySourcePrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaFluidPrototype",
    "content": "Class: LuaFluidPrototype\nDescription: Prototype of a fluid.",
    "metadata": {
      "class_name": "LuaFluidPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidPrototype.base_color",
    "content": "Attribute: base_color \nRead_type: Color\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaFluidPrototype",
      "attribute_name": "base_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidPrototype.default_temperature",
    "content": "Attribute: default_temperature \nRead_type: double\n\nDescription: Default temperature of this fluid.\n",
    "metadata": {
      "class_name": "LuaFluidPrototype",
      "attribute_name": "default_temperature"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidPrototype.emissions_multiplier",
    "content": "Attribute: emissions_multiplier \nRead_type: double\n\nDescription: A multiplier on the amount of emissions produced when this fluid is burnt in a generator. A value above `1.0` increases emissions and vice versa. The multiplier can't be negative.\n",
    "metadata": {
      "class_name": "LuaFluidPrototype",
      "attribute_name": "emissions_multiplier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidPrototype.flow_color",
    "content": "Attribute: flow_color \nRead_type: Color\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaFluidPrototype",
      "attribute_name": "flow_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidPrototype.fuel_value",
    "content": "Attribute: fuel_value \nRead_type: double\n\nDescription: The amount of energy in Joules one unit of this fluid will produce when burnt in a generator. A value of `0` means this fluid can't be used for energy generation. The value can't be negative.\n",
    "metadata": {
      "class_name": "LuaFluidPrototype",
      "attribute_name": "fuel_value"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidPrototype.gas_temperature",
    "content": "Attribute: gas_temperature \nRead_type: double\n\nDescription: The temperature above which this fluid will be shown as gaseous inside tanks and pipes.\n",
    "metadata": {
      "class_name": "LuaFluidPrototype",
      "attribute_name": "gas_temperature"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidPrototype.heat_capacity",
    "content": "Attribute: heat_capacity \nRead_type: double\n\nDescription: The amount of energy in Joules required to heat one unit of this fluid by 1°C.\n",
    "metadata": {
      "class_name": "LuaFluidPrototype",
      "attribute_name": "heat_capacity"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidPrototype.max_temperature",
    "content": "Attribute: max_temperature \nRead_type: double\n\nDescription: Maximum temperature this fluid can reach.\n",
    "metadata": {
      "class_name": "LuaFluidPrototype",
      "attribute_name": "max_temperature"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaFluidPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFluidPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaFluidPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaFontPrototype",
    "content": "Class: LuaFontPrototype\nDescription: Prototype of a font.",
    "metadata": {
      "class_name": "LuaFontPrototype",
      "parent_class": null
    }
  },
  {
    "type": "attribute",
    "name": "LuaFontPrototype.border",
    "content": "Attribute: border \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaFontPrototype",
      "attribute_name": "border"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFontPrototype.border_color",
    "content": "Attribute: border_color [Optional]\nRead_type: Color\n\nDescription: The border color, if any.\n",
    "metadata": {
      "class_name": "LuaFontPrototype",
      "attribute_name": "border_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFontPrototype.filtered",
    "content": "Attribute: filtered \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaFontPrototype",
      "attribute_name": "filtered"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFontPrototype.from",
    "content": "Attribute: from \nRead_type: string\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaFontPrototype",
      "attribute_name": "from"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFontPrototype.name",
    "content": "Attribute: name \nRead_type: string\n\nDescription: Name of this prototype.\n",
    "metadata": {
      "class_name": "LuaFontPrototype",
      "attribute_name": "name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFontPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaFontPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFontPrototype.size",
    "content": "Attribute: size \nRead_type: int\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaFontPrototype",
      "attribute_name": "size"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFontPrototype.spacing",
    "content": "Attribute: spacing \nRead_type: float\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaFontPrototype",
      "attribute_name": "spacing"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFontPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaFontPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaForce",
    "content": "Class: LuaForce\nDescription: `LuaForce` encapsulates data local to each \"force\" or \"faction\" of the game. Default forces are player, enemy and neutral. Players and mods can create additional forces (up to 64 total).",
    "metadata": {
      "class_name": "LuaForce",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaForce.add_chart_tag",
    "content": "Method: LuaForce.add_chart_tag\nDescription: Adds a custom chart tag to the given surface and returns the new tag or `nil` if the given position isn't valid for a chart tag.\n\nThe chunk must be charted for a tag to be valid at that location.\n\nParameters:\n- surface (SurfaceIdentification): Which surface to add the tag to.\n- tag (ChartTagSpec): The tag to add.\n\nReturns:\n- LuaCustomChartTag: \n\nRaises:\n- on_chart_tag_added: Raised if the chart tag was successfully added.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "add_chart_tag"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.add_research",
    "content": "Method: LuaForce.add_research\nDescription: Add this technology to the back of the research queue if the queue is enabled. Otherwise, set this technology to be researched now.\n\nParameters:\n- technology (TechnologyID): \n\nReturns:\n- boolean: Whether the technology was successfully added.\n\nRaises:\n- on_research_started: Raised if the technology was successfully added.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "add_research"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.cancel_charting",
    "content": "Method: LuaForce.cancel_charting\nDescription: Cancels pending chart requests for the given surface or all surfaces.\n\nParameters:\n- surface (SurfaceIdentification)[Optional]: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "cancel_charting"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.cancel_current_research",
    "content": "Method: LuaForce.cancel_current_research\nDescription: Stop the research currently in progress. This will remove any dependent technologies from the research queue.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "cancel_current_research"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.chart",
    "content": "Method: LuaForce.chart\nDescription: Chart a portion of the map. The chart for the given area is refreshed; it creates chart for any parts of the given area that haven't been charted yet.\n\nParameters:\n- area (BoundingBox): The area on the given surface to chart.\n- surface (SurfaceIdentification): \n\nExamples:\n```\n-- Charts a 2048x2048 rectangle centered around the origin.\ngame.player.force.chart(game.player.surface, {{x = -1024, y = -1024}, {x = 1024, y = 1024}})\n```\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "chart"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.chart_all",
    "content": "Method: LuaForce.chart_all\nDescription: Chart all generated chunks.\n\nParameters:\n- surface (SurfaceIdentification)[Optional]: Which surface to chart or all if not given.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "chart_all"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.clear_chart",
    "content": "Method: LuaForce.clear_chart\nDescription: Erases chart data for this force.\n\nParameters:\n- surface (SurfaceIdentification)[Optional]: Which surface to erase chart data for or if not provided all surfaces charts are erased.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "clear_chart"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.copy_chart",
    "content": "Method: LuaForce.copy_chart\nDescription: Copies the given surface's chart from the given force to this force.\n\nParameters:\n- destination_surface (SurfaceIdentification): The surface to copy to.\n- source_force (ForceID): The force to copy from\n- source_surface (SurfaceIdentification): The surface to copy from.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "copy_chart"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.copy_from",
    "content": "Method: LuaForce.copy_from\nDescription: Copies all of the given changeable values (except charts) from the given force to this force.\n\nParameters:\n- force (ForceID): The force to copy from.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "copy_from"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.create_space_platform",
    "content": "Method: LuaForce.create_space_platform\nDescription: Creates a new space platform on this force.\n\nParameters:\n- name (string)[Optional]: The platform name. If not provided, a random name will be used.\n- planet (SpaceLocationID): The planet that the platform will orbit.\n- starter_pack (ItemWithQualityID): The starter pack required to build the platform.\n\nReturns:\n- LuaSpacePlatform: \n\nFormat:\n- {'takes_table': True, 'table_optional': True}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "create_space_platform"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.disable_all_prototypes",
    "content": "Method: LuaForce.disable_all_prototypes\nDescription: Disable all recipes and technologies. Only recipes and technologies enabled explicitly will be useable from this point.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "disable_all_prototypes"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.disable_research",
    "content": "Method: LuaForce.disable_research\nDescription: Disable research for this force.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "disable_research"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.enable_all_prototypes",
    "content": "Method: LuaForce.enable_all_prototypes\nDescription: Enables all recipes and technologies. The opposite of [LuaForce::disable_all_prototypes](runtime:LuaForce::disable_all_prototypes).\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "enable_all_prototypes"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.enable_all_recipes",
    "content": "Method: LuaForce.enable_all_recipes\nDescription: Unlock all recipes.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "enable_all_recipes"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.enable_all_technologies",
    "content": "Method: LuaForce.enable_all_technologies\nDescription: Unlock all technologies.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "enable_all_technologies"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.enable_research",
    "content": "Method: LuaForce.enable_research\nDescription: Enable research for this force.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "enable_research"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.find_chart_tags",
    "content": "Method: LuaForce.find_chart_tags\nDescription: Finds all custom chart tags within the given bounding box on the given surface.\n\nParameters:\n- area (BoundingBox)[Optional]: \n- surface (SurfaceIdentification): \n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaCustomChartTag'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "find_chart_tags"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.find_logistic_network_by_position",
    "content": "Method: LuaForce.find_logistic_network_by_position\nDescription: \n\nParameters:\n- position (MapPosition): Position to find a network for\n- surface (SurfaceIdentification): Surface to search on\n\nReturns:\n- LuaLogisticNetwork: The found network or `nil`.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "find_logistic_network_by_position"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.get_ammo_damage_modifier",
    "content": "Method: LuaForce.get_ammo_damage_modifier\nDescription: \n\nParameters:\n- ammo (string): Ammo category\n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "get_ammo_damage_modifier"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.get_cease_fire",
    "content": "Method: LuaForce.get_cease_fire\nDescription: Is `other` force in this force's cease fire list?\n\nParameters:\n- other (ForceID): \n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "get_cease_fire"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.get_entity_build_count_statistics",
    "content": "Method: LuaForce.get_entity_build_count_statistics\nDescription: The entity build statistics for this force (built and mined) for the given surface.\n\nParameters:\n- surface (SurfaceIdentification): \n\nReturns:\n- LuaFlowStatistics: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "get_entity_build_count_statistics"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.get_entity_count",
    "content": "Method: LuaForce.get_entity_count\nDescription: Count entities of given type.\n\nThis function has O(1) time complexity as entity counts are kept and maintained in the game engine.\n\nParameters:\n- name (EntityID): Prototype name of the entity.\n\nReturns:\n- uint: Number of entities of given prototype belonging to this force.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "get_entity_count"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.get_evolution_factor",
    "content": "Method: LuaForce.get_evolution_factor\nDescription: Fetches the evolution factor of this force on the given surface.\n\nParameters:\n- surface (SurfaceIdentification)[Optional]: Defaults to \"nauvis\".\n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "get_evolution_factor"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.get_evolution_factor_by_killing_spawners",
    "content": "Method: LuaForce.get_evolution_factor_by_killing_spawners\nDescription: Fetches the spawner kill part of the evolution factor of this force on the given surface.\n\nParameters:\n- surface (SurfaceIdentification)[Optional]: Defaults to \"nauvis\".\n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "get_evolution_factor_by_killing_spawners"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.get_evolution_factor_by_pollution",
    "content": "Method: LuaForce.get_evolution_factor_by_pollution\nDescription: Fetches the pollution part of the evolution factor of this force on the given surface.\n\nParameters:\n- surface (SurfaceIdentification)[Optional]: Defaults to \"nauvis\".\n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "get_evolution_factor_by_pollution"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.get_evolution_factor_by_time",
    "content": "Method: LuaForce.get_evolution_factor_by_time\nDescription: Fetches the time part of the evolution factor of this force on the given surface.\n\nParameters:\n- surface (SurfaceIdentification)[Optional]: Defaults to \"nauvis\".\n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "get_evolution_factor_by_time"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.get_fluid_production_statistics",
    "content": "Method: LuaForce.get_fluid_production_statistics\nDescription: The fluid production statistics for this force for the given surface.\n\nParameters:\n- surface (SurfaceIdentification): \n\nReturns:\n- LuaFlowStatistics: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "get_fluid_production_statistics"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.get_friend",
    "content": "Method: LuaForce.get_friend\nDescription: Is `other` force in this force's friends list.\n\nParameters:\n- other (ForceID): \n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "get_friend"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.get_gun_speed_modifier",
    "content": "Method: LuaForce.get_gun_speed_modifier\nDescription: \n\nParameters:\n- ammo (string): Ammo category\n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "get_gun_speed_modifier"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.get_hand_crafting_disabled_for_recipe",
    "content": "Method: LuaForce.get_hand_crafting_disabled_for_recipe\nDescription: Gets if the given recipe is explicitly disabled from being hand crafted.\n\nParameters:\n- recipe (RecipeID): \n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "get_hand_crafting_disabled_for_recipe"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.get_item_launched",
    "content": "Method: LuaForce.get_item_launched\nDescription: Gets the count of a given item launched in rockets.\n\nParameters:\n- item (ItemID): The item to get\n\nReturns:\n- uint: The count of the item that has been launched.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "get_item_launched"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.get_item_production_statistics",
    "content": "Method: LuaForce.get_item_production_statistics\nDescription: The item production statistics for this force for the given surface.\n\nParameters:\n- surface (SurfaceIdentification): \n\nReturns:\n- LuaFlowStatistics: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "get_item_production_statistics"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.get_kill_count_statistics",
    "content": "Method: LuaForce.get_kill_count_statistics\nDescription: The kill counter statistics for this force for the given surface.\n\nParameters:\n- surface (SurfaceIdentification): \n\nReturns:\n- LuaFlowStatistics: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "get_kill_count_statistics"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.get_linked_inventory",
    "content": "Method: LuaForce.get_linked_inventory\nDescription: Gets the linked inventory for the given prototype and link ID if it exists or `nil`.\n\nParameters:\n- link_id (uint): \n- prototype (EntityID): \n\nReturns:\n- LuaInventory: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "get_linked_inventory"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.get_spawn_position",
    "content": "Method: LuaForce.get_spawn_position\nDescription: \n\nParameters:\n- surface (SurfaceIdentification): \n\nReturns:\n- MapPosition: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "get_spawn_position"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.get_surface_hidden",
    "content": "Method: LuaForce.get_surface_hidden\nDescription: \n\nParameters:\n- surface (SurfaceIdentification): \n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "get_surface_hidden"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.get_turret_attack_modifier",
    "content": "Method: LuaForce.get_turret_attack_modifier\nDescription: \n\nParameters:\n- turret (EntityID): Turret prototype name\n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "get_turret_attack_modifier"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.is_chunk_charted",
    "content": "Method: LuaForce.is_chunk_charted\nDescription: Has a chunk been charted?\n\nParameters:\n- position (ChunkPosition): Position of the chunk.\n- surface (SurfaceIdentification): \n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "is_chunk_charted"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.is_chunk_requested_for_charting",
    "content": "Method: LuaForce.is_chunk_requested_for_charting\nDescription: Has a chunk been requested for charting?\n\nParameters:\n- position (ChunkPosition): Position of the chunk.\n- surface (SurfaceIdentification): \n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "is_chunk_requested_for_charting"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.is_chunk_visible",
    "content": "Method: LuaForce.is_chunk_visible\nDescription: Is the given chunk currently charted and visible (not covered by fog of war) on the map.\n\nParameters:\n- position (ChunkPosition): \n- surface (SurfaceIdentification): \n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "is_chunk_visible"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.is_enemy",
    "content": "Method: LuaForce.is_enemy\nDescription: Is this force an enemy? This differs from `get_cease_fire` in that it is always false for neutral force. This is equivalent to checking the `enemy` ForceCondition.\n\nParameters:\n- other (ForceID): \n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "is_enemy"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.is_friend",
    "content": "Method: LuaForce.is_friend\nDescription: Is this force a friend? This differs from `get_friend` in that it is always true for neutral force. This is equivalent to checking the `friend` ForceCondition.\n\nParameters:\n- other (ForceID): \n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "is_friend"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.is_pathfinder_busy",
    "content": "Method: LuaForce.is_pathfinder_busy\nDescription: Is pathfinder busy? When the pathfinder is busy, it won't accept any more pathfinding requests.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "is_pathfinder_busy"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.is_quality_unlocked",
    "content": "Method: LuaForce.is_quality_unlocked\nDescription: Is the specified quality unlocked for this force?\n\nParameters:\n- quality (QualityID): Name of the quality.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "is_quality_unlocked"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.is_space_location_unlocked",
    "content": "Method: LuaForce.is_space_location_unlocked\nDescription: Is the specified planet unlocked for this force?\n\nParameters:\n- name (SpaceLocationID): Name of the planet.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "is_space_location_unlocked"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.is_space_platforms_unlocked",
    "content": "Method: LuaForce.is_space_platforms_unlocked\nDescription: Are the space platforms unlocked? This basically just controls the availability of the space platforms button.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "is_space_platforms_unlocked"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.kill_all_units",
    "content": "Method: LuaForce.kill_all_units\nDescription: Kill all units and flush the pathfinder.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "kill_all_units"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.lock_quality",
    "content": "Method: LuaForce.lock_quality\nDescription: Locks the quality to not be accessible to this force.\n\nParameters:\n- quality (QualityID): Name of the quality.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "lock_quality"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.lock_space_location",
    "content": "Method: LuaForce.lock_space_location\nDescription: Locks the planet to not be accessible to this force.\n\nParameters:\n- name (SpaceLocationID): Name of the planet.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "lock_space_location"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.lock_space_platforms",
    "content": "Method: LuaForce.lock_space_platforms\nDescription: Locks the space platforms, which disables the space platforms button\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "lock_space_platforms"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.play_sound",
    "content": "Method: LuaForce.play_sound\nDescription: Play a sound for every player in this force.\n\nThe sound is not played if its location is not [charted](runtime:LuaForce::chart) for this force.",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "play_sound"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.play_sound",
    "content": "Parameters:\n- override_sound_type (SoundType)[Optional]: The volume mixer to play the sound through. Defaults to the default mixer for the given sound type.\n- path (SoundPath): The sound to play.\n- position (MapPosition)[Optional]: Where the sound should be played. If not given, it's played at the current position of each player.\n- volume_modifier (double)[Optional]: The volume of the sound to play. Must be between 0 and 1 inclusive.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "play_sound"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.print",
    "content": "Method: LuaForce.print\nDescription: Print text to the chat console of all players on this force.\n\nBy default, messages that are identical to a message sent in the last 60 ticks are not printed again.\n\nParameters:\n- message (LocalisedString): \n- print_settings (PrintSettings)[Optional]: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "print"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.rechart",
    "content": "Method: LuaForce.rechart\nDescription: Force a rechart of the whole chart.\n\nParameters:\n- surface (SurfaceIdentification)[Optional]: Which surface to rechart or all if not given.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "rechart"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.research_all_technologies",
    "content": "Method: LuaForce.research_all_technologies\nDescription: Research all technologies.\n\nParameters:\n- include_disabled_prototypes (boolean)[Optional]: Whether technologies that are explicitly disabled in the prototype should also be researched. Defaults to `false`.\n\nRaises:\n- on_research_finished: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "research_all_technologies"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.reset",
    "content": "Method: LuaForce.reset\nDescription: Reset everything. All technologies are set to not researched, all modifiers are set to default values.\n\nRaises:\n- on_force_reset: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "reset"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.reset_evolution",
    "content": "Method: LuaForce.reset_evolution\nDescription: Resets evolution for this force to zero.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "reset_evolution"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.reset_recipes",
    "content": "Method: LuaForce.reset_recipes\nDescription: Load the original version of all recipes from the prototypes.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "reset_recipes"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.reset_technologies",
    "content": "Method: LuaForce.reset_technologies\nDescription: Load the original versions of technologies from prototypes. Preserves research state of technologies.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "reset_technologies"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.reset_technology_effects",
    "content": "Method: LuaForce.reset_technology_effects\nDescription: Reapplies all possible research effects, including unlocked recipes. Any custom changes are lost. Preserves research state of technologies.\n\nRaises:\n- on_technology_effects_reset: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "reset_technology_effects"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.set_ammo_damage_modifier",
    "content": "Method: LuaForce.set_ammo_damage_modifier\nDescription: \n\nParameters:\n- ammo (string): Ammo category\n- modifier (double): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "set_ammo_damage_modifier"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.set_cease_fire",
    "content": "Method: LuaForce.set_cease_fire\nDescription: Add `other` force to this force's cease fire list. Forces on the cease fire list won't be targeted for attack.\n\nParameters:\n- cease_fire (boolean): \n- other (ForceID): \n\nRaises:\n- on_force_cease_fire_changed: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "set_cease_fire"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.set_evolution_factor",
    "content": "Method: LuaForce.set_evolution_factor\nDescription: Sets the evolution factor of this force on the given surface.\n\nParameters:\n- factor (double): \n- surface (SurfaceIdentification)[Optional]: Defaults to \"nauvis\".\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "set_evolution_factor"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.set_evolution_factor_by_killing_spawners",
    "content": "Method: LuaForce.set_evolution_factor_by_killing_spawners\nDescription: Sets the spawner kill part of the evolution factor of this force on the given surface.\n\nParameters:\n- factor (double): \n- surface (SurfaceIdentification)[Optional]: Defaults to \"nauvis\".\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "set_evolution_factor_by_killing_spawners"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.set_evolution_factor_by_pollution",
    "content": "Method: LuaForce.set_evolution_factor_by_pollution\nDescription: Sets the pollution part of the evolution factor of this force on the given surface.\n\nParameters:\n- factor (double): \n- surface (SurfaceIdentification)[Optional]: Defaults to \"nauvis\".\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "set_evolution_factor_by_pollution"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.set_evolution_factor_by_time",
    "content": "Method: LuaForce.set_evolution_factor_by_time\nDescription: Sets the time part of the evolution factor of this force on the given surface.\n\nParameters:\n- factor (double): \n- surface (SurfaceIdentification)[Optional]: Defaults to \"nauvis\".\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "set_evolution_factor_by_time"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.set_friend",
    "content": "Method: LuaForce.set_friend\nDescription: Add `other` force to this force's friends list. Friends have unrestricted access to buildings and turrets won't fire at them.\n\nParameters:\n- friend (boolean): \n- other (ForceID): \n\nRaises:\n- on_force_friends_changed: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "set_friend"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.set_gun_speed_modifier",
    "content": "Method: LuaForce.set_gun_speed_modifier\nDescription: \n\nParameters:\n- ammo (string): Ammo category\n- modifier (double): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "set_gun_speed_modifier"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.set_hand_crafting_disabled_for_recipe",
    "content": "Method: LuaForce.set_hand_crafting_disabled_for_recipe\nDescription: Sets if the given recipe can be hand-crafted. This is used to explicitly disable hand crafting a recipe - it won't allow hand-crafting otherwise not hand-craftable recipes.\n\nParameters:\n- hand_crafting_disabled (boolean): \n- recipe (RecipeID): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "set_hand_crafting_disabled_for_recipe"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.set_item_launched",
    "content": "Method: LuaForce.set_item_launched\nDescription: Sets the count of a given item launched in rockets.\n\nParameters:\n- count (uint): The count to set\n- item (ItemID): The item to set\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "set_item_launched"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.set_spawn_position",
    "content": "Method: LuaForce.set_spawn_position\nDescription: \n\nParameters:\n- position (MapPosition): The new position on the given surface.\n- surface (SurfaceIdentification): Surface to set the spawn position for.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "set_spawn_position"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.set_surface_hidden",
    "content": "Method: LuaForce.set_surface_hidden\nDescription: \n\nParameters:\n- hidden (boolean): Whether to hide the surface or not.\n- surface (SurfaceIdentification): Surface to set hidden for.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "set_surface_hidden"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.set_turret_attack_modifier",
    "content": "Method: LuaForce.set_turret_attack_modifier\nDescription: \n\nParameters:\n- modifier (double): \n- turret (EntityID): Turret prototype name\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "set_turret_attack_modifier"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.unchart_chunk",
    "content": "Method: LuaForce.unchart_chunk\nDescription: \n\nParameters:\n- position (ChunkPosition): The chunk position to unchart.\n- surface (SurfaceIdentification): Surface to unchart on.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "unchart_chunk"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.unlock_quality",
    "content": "Method: LuaForce.unlock_quality\nDescription: Unlocks the quality to be accessible to this force.\n\nParameters:\n- quality (QualityID): Name of the quality.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "unlock_quality"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.unlock_space_location",
    "content": "Method: LuaForce.unlock_space_location\nDescription: Unlocks the planet to be accessible to this force.\n\nParameters:\n- name (SpaceLocationID): Name of the planet.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "unlock_space_location"
    }
  },
  {
    "type": "method",
    "name": "LuaForce.unlock_space_platforms",
    "content": "Method: LuaForce.unlock_space_platforms\nDescription: Unlocks the space platforms, which enables the space platforms button\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaForce",
      "method_name": "unlock_space_platforms"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.ai_controllable",
    "content": "Attribute: ai_controllable \nRead_type: boolean\nWrite_type: boolean\nDescription: Enables some higher-level AI behaviour for this force. When set to `true`, biters belonging to this force will automatically expand into new territories, build new spawners, and form unit groups. By default, this value is `true` for the enemy force and `false` for all others.\n\nSetting this to `false` does not turn off biters' AI. They will still move around and attack players who come close.",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "ai_controllable"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.ai_controllable",
    "content": "It is necessary for a force to be AI controllable in order to be able to create unit groups or build bases from scripts.",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "ai_controllable"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.artillery_range_modifier",
    "content": "Attribute: artillery_range_modifier \nRead_type: double\nWrite_type: double\nDescription: \n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "artillery_range_modifier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.beacon_distribution_modifier",
    "content": "Attribute: beacon_distribution_modifier \nRead_type: double\nWrite_type: double\nDescription: \n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "beacon_distribution_modifier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.belt_stack_size_bonus",
    "content": "Attribute: belt_stack_size_bonus \nRead_type: uint\nWrite_type: uint\nDescription: Belt stack size bonus.\n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "belt_stack_size_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.bulk_inserter_capacity_bonus",
    "content": "Attribute: bulk_inserter_capacity_bonus \nRead_type: uint\nWrite_type: uint\nDescription: Number of items that can be transferred by bulk inserters. When writing to this value, it must be >= 0 and <= 254.\n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "bulk_inserter_capacity_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.character_build_distance_bonus",
    "content": "Attribute: character_build_distance_bonus \nRead_type: uint\nWrite_type: uint\nDescription: \n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "character_build_distance_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.character_health_bonus",
    "content": "Attribute: character_health_bonus \nRead_type: double\nWrite_type: double\nDescription: \n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "character_health_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.character_inventory_slots_bonus",
    "content": "Attribute: character_inventory_slots_bonus \nRead_type: uint\nWrite_type: uint\nDescription: The number of additional inventory slots the character main inventory has.\n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "character_inventory_slots_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.character_item_drop_distance_bonus",
    "content": "Attribute: character_item_drop_distance_bonus \nRead_type: uint\nWrite_type: uint\nDescription: \n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "character_item_drop_distance_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.character_item_pickup_distance_bonus",
    "content": "Attribute: character_item_pickup_distance_bonus \nRead_type: double\nWrite_type: double\nDescription: \n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "character_item_pickup_distance_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.character_logistic_requests",
    "content": "Attribute: character_logistic_requests \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if character requester logistics is enabled.\n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "character_logistic_requests"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.character_loot_pickup_distance_bonus",
    "content": "Attribute: character_loot_pickup_distance_bonus \nRead_type: double\nWrite_type: double\nDescription: \n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "character_loot_pickup_distance_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.character_reach_distance_bonus",
    "content": "Attribute: character_reach_distance_bonus \nRead_type: uint\nWrite_type: uint\nDescription: \n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "character_reach_distance_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.character_resource_reach_distance_bonus",
    "content": "Attribute: character_resource_reach_distance_bonus \nRead_type: double\nWrite_type: double\nDescription: \n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "character_resource_reach_distance_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.character_running_speed_modifier",
    "content": "Attribute: character_running_speed_modifier \nRead_type: double\nWrite_type: double\nDescription: Modifies the running speed of all characters in this force by the given value as a percentage. Setting the running modifier to `0.5` makes the character run 50% faster. The minimum value of `-1` reduces the movement speed by 100%, resulting in a speed of `0`.",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "character_running_speed_modifier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.character_trash_slot_count",
    "content": "Attribute: character_trash_slot_count \nRead_type: double\nWrite_type: double\nDescription: Number of character trash slots.\n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "character_trash_slot_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.circuit_network_enabled",
    "content": "Attribute: circuit_network_enabled \nRead_type: boolean\nWrite_type: boolean\nDescription: \n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "circuit_network_enabled"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.cliff_deconstruction_enabled",
    "content": "Attribute: cliff_deconstruction_enabled \nRead_type: boolean\nWrite_type: boolean\nDescription: When true, cliffs will be marked for deconstruction when trying to force-build things that collide.\n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "cliff_deconstruction_enabled"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.color",
    "content": "Attribute: color \nRead_type: Color\n\nDescription: Effective color of this force.\n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.connected_players",
    "content": "Attribute: connected_players \nRead_type: {'complex_type': 'array', 'value': 'LuaPlayer'}\n\nDescription: The connected players belonging to this force.\n\nThis is primarily useful when you want to do some action against all online players of this force.\n\nThis does *not* index using player index. See [LuaPlayer::index](runtime:LuaPlayer::index) on each player instance for the player index.",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "connected_players"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.create_ghost_on_entity_death",
    "content": "Attribute: create_ghost_on_entity_death \nRead_type: boolean\nWrite_type: boolean\nDescription: When an entity dies, a ghost will be placed for automatic reconstruction.\n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "create_ghost_on_entity_death"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.current_research",
    "content": "Attribute: current_research [Optional]\nRead_type: LuaTechnology\n\nDescription: The currently ongoing technology research, if any.\n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "current_research"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.custom_color",
    "content": "Attribute: custom_color [Optional]\nRead_type: Color\nWrite_type: Color\nDescription: Custom color for this force. If specified, will take priority over other sources of the force color. Writing `nil` clears custom color. Will return `nil` if it was not specified or if was set to `{0,0,0,0}`.",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "custom_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.deconstruction_time_to_live",
    "content": "Attribute: deconstruction_time_to_live \nRead_type: uint\nWrite_type: uint\nDescription: The time, in ticks, before a deconstruction order is removed.\n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "deconstruction_time_to_live"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.following_robots_lifetime_modifier",
    "content": "Attribute: following_robots_lifetime_modifier \nRead_type: double\nWrite_type: double\nDescription: Additional lifetime for following robots.\n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "following_robots_lifetime_modifier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.friendly_fire",
    "content": "Attribute: friendly_fire \nRead_type: boolean\nWrite_type: boolean\nDescription: If friendly fire is enabled for this force.\n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "friendly_fire"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.index",
    "content": "Attribute: index \nRead_type: uint\n\nDescription: This force's index in [LuaGameScript::forces](runtime:LuaGameScript::forces) (unique ID). It is assigned when a force is created, and remains so until it is [merged](runtime:on_forces_merged) (ie. deleted). Indexes of merged forces can be reused.",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "index"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.inserter_stack_size_bonus",
    "content": "Attribute: inserter_stack_size_bonus \nRead_type: double\nWrite_type: double\nDescription: The inserter stack size bonus for non stack inserters\n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "inserter_stack_size_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.items_launched",
    "content": "Attribute: items_launched \nRead_type: {'complex_type': 'array', 'value': 'ItemWithQualityCounts'}\n\nDescription: All of the items that have been launched in rockets.\n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "items_launched"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.laboratory_productivity_bonus",
    "content": "Attribute: laboratory_productivity_bonus \nRead_type: double\nWrite_type: double\nDescription: \n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "laboratory_productivity_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.laboratory_speed_modifier",
    "content": "Attribute: laboratory_speed_modifier \nRead_type: double\nWrite_type: double\nDescription: \n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "laboratory_speed_modifier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.logistic_networks",
    "content": "Attribute: logistic_networks \nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': {'complex_type': 'array', 'value': 'LuaLogisticNetwork'}}\n\nDescription: List of logistic networks, grouped by surface.\n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "logistic_networks"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.manual_crafting_speed_modifier",
    "content": "Attribute: manual_crafting_speed_modifier \nRead_type: double\nWrite_type: double\nDescription: Multiplier of the manual crafting speed. Default value is `0`. The actual crafting speed will be multiplied by `1 + manual_crafting_speed_modifier`.\nExamples: [\"```\\n-- Double the player's crafting speed\\ngame.player.force.manual_crafting_speed_modifier = 1\\n```\"]",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "manual_crafting_speed_modifier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.manual_mining_speed_modifier",
    "content": "Attribute: manual_mining_speed_modifier \nRead_type: double\nWrite_type: double\nDescription: Multiplier of the manual mining speed. Default value is `0`. The actual mining speed will be multiplied by `1 + manual_mining_speed_modifier`.\nExamples: [\"```\\n-- Double the player's mining speed\\ngame.player.force.manual_mining_speed_modifier = 1\\n```\"]",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "manual_mining_speed_modifier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.max_failed_attempts_per_tick_per_construction_queue",
    "content": "Attribute: max_failed_attempts_per_tick_per_construction_queue \nRead_type: uint\nWrite_type: uint\nDescription: \n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "max_failed_attempts_per_tick_per_construction_queue"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.max_successful_attempts_per_tick_per_construction_queue",
    "content": "Attribute: max_successful_attempts_per_tick_per_construction_queue \nRead_type: uint\nWrite_type: uint\nDescription: \n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "max_successful_attempts_per_tick_per_construction_queue"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.maximum_following_robot_count",
    "content": "Attribute: maximum_following_robot_count \nRead_type: uint\nWrite_type: uint\nDescription: Maximum number of follower robots.\n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "maximum_following_robot_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.mining_drill_productivity_bonus",
    "content": "Attribute: mining_drill_productivity_bonus \nRead_type: double\nWrite_type: double\nDescription: \n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "mining_drill_productivity_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.mining_with_fluid",
    "content": "Attribute: mining_with_fluid \nRead_type: boolean\nWrite_type: boolean\nDescription: \n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "mining_with_fluid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.name",
    "content": "Attribute: name \nRead_type: string\n\nDescription: Name of the force.\nExamples: [\"```\\ngame.player.print(game.player.force.name) -- => \\\"player\\\"\\n```\"]",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.platforms",
    "content": "Attribute: platforms \nRead_type: {'complex_type': 'dictionary', 'key': 'uint', 'value': 'LuaSpacePlatform'}\n\nDescription: The space platforms that belong to this force mapped by their index value.\n\nThis will include platforms that are pending deletion.\n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "platforms"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.players",
    "content": "Attribute: players \nRead_type: {'complex_type': 'array', 'value': 'LuaPlayer'}\n\nDescription: Players belonging to this force.\n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "players"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.previous_research",
    "content": "Attribute: previous_research [Optional]\nRead_type: LuaTechnology\nWrite_type: LuaTechnology\nDescription: The previous research, if any.\n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "previous_research"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.rail_planner_allow_elevated_rails",
    "content": "Attribute: rail_planner_allow_elevated_rails \nRead_type: boolean\nWrite_type: boolean\nDescription: \n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "rail_planner_allow_elevated_rails"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.rail_support_on_deep_oil_ocean",
    "content": "Attribute: rail_support_on_deep_oil_ocean \nRead_type: boolean\nWrite_type: boolean\nDescription: \n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "rail_support_on_deep_oil_ocean"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.recipes",
    "content": "Attribute: recipes \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaRecipe'}\n\nDescription: Recipes available to this force, indexed by `name`.\nExamples: [\"```\\n-- Prints the category of the given recipe\\ngame.player.print(game.player.force.recipes[\\\"transport-belt\\\"].category)\\n```\"]",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "recipes"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.research_enabled",
    "content": "Attribute: research_enabled \nRead_type: boolean\n\nDescription: Whether research is enabled for this force, see [LuaForce::enable_research](runtime:LuaForce::enable_research) and [LuaForce::disable_research](runtime:LuaForce::disable_research).\n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "research_enabled"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.research_progress",
    "content": "Attribute: research_progress \nRead_type: double\nWrite_type: double\nDescription: Progress of current research, as a number in range `[0, 1]`.\n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "research_progress"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.research_queue",
    "content": "Attribute: research_queue \nRead_type: {'complex_type': 'array', 'value': 'TechnologyID'}\nWrite_type: {\"complex_type\": \"array\", \"value\": \"TechnologyID\"}\nDescription: The research queue of this force. The first technology in the array is the currently active one. Reading this attribute gives an array of [LuaTechnology](runtime:LuaTechnology).",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "research_queue"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.research_queue",
    "content": "To write to this, the entire table must be written. Providing an empty table or `nil` will empty the research queue and cancel the current research.  Writing to this when the research queue is disabled will simply set the last research in the table as the current research.",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "research_queue"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.research_queue",
    "content": "This only allows mods to queue research that this force is able to research in the first place. As an example, an already researched technology or one whose prerequisites are not fulfilled will not be queued, but dropped silently instead.",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "research_queue"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.rockets_launched",
    "content": "Attribute: rockets_launched \nRead_type: uint\nWrite_type: uint\nDescription: The number of rockets launched.\n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "rockets_launched"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.share_chart",
    "content": "Attribute: share_chart \nRead_type: boolean\nWrite_type: boolean\nDescription: If sharing chart data is enabled for this force.\n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "share_chart"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.technologies",
    "content": "Attribute: technologies \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaTechnology'}\n\nDescription: Technologies owned by this force, indexed by `name`.\nExamples: [\"```\\n-- Researches the technology for the player's force\\ngame.player.force.technologies[\\\"steel-processing\\\"].researched = true\\n```\"]",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "technologies"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.train_braking_force_bonus",
    "content": "Attribute: train_braking_force_bonus \nRead_type: double\nWrite_type: double\nDescription: \n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "train_braking_force_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "valid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.vehicle_logistics",
    "content": "Attribute: vehicle_logistics \nRead_type: boolean\nWrite_type: boolean\nDescription: When true, cars/tanks that support logistics will be able to use them.\n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "vehicle_logistics"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.worker_robots_battery_modifier",
    "content": "Attribute: worker_robots_battery_modifier \nRead_type: double\nWrite_type: double\nDescription: \n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "worker_robots_battery_modifier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.worker_robots_speed_modifier",
    "content": "Attribute: worker_robots_speed_modifier \nRead_type: double\nWrite_type: double\nDescription: \n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "worker_robots_speed_modifier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaForce.worker_robots_storage_bonus",
    "content": "Attribute: worker_robots_storage_bonus \nRead_type: double\nWrite_type: double\nDescription: \n",
    "metadata": {
      "class_name": "LuaForce",
      "attribute_name": "worker_robots_storage_bonus"
    }
  },
  {
    "type": "class",
    "name": "LuaFuelCategoryPrototype",
    "content": "Class: LuaFuelCategoryPrototype\nDescription: Prototype of a fuel category.",
    "metadata": {
      "class_name": "LuaFuelCategoryPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFuelCategoryPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaFuelCategoryPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaFuelCategoryPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaFuelCategoryPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaGameScript",
    "content": "Class: LuaGameScript\nDescription: Main toplevel type, provides access to most of the API though its members. An instance of LuaGameScript is available as the global object named `game`.",
    "metadata": {
      "class_name": "LuaGameScript",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.auto_save",
    "content": "Method: LuaGameScript.auto_save\nDescription: Instruct the game to perform an auto-save.\n\nOnly the server will save in multiplayer. In single player a standard auto-save is triggered.\n\nParameters:\n- name (string)[Optional]: The autosave name if any. Saves will be named _autosave-*name* when provided.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "auto_save"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.ban_player",
    "content": "Method: LuaGameScript.ban_player\nDescription: Bans the given player from this multiplayer game. Does nothing if this is a single player game of if the player running this isn't an admin.\n\nParameters:\n- player ({'complex_type': 'union', 'options': ['PlayerIdentification', 'string'], 'full_format': False}): The player to ban.\n- reason (string)[Optional]: The reason given if any.\n\nRaises:\n- on_console_command: \n- on_player_banned: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "ban_player"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.check_consistency",
    "content": "Method: LuaGameScript.check_consistency\nDescription: Run internal consistency checks. Allegedly prints any errors it finds.\n\nExists mainly for debugging reasons.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "check_consistency"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.create_force",
    "content": "Method: LuaGameScript.create_force\nDescription: Create a new force.\n\nThe game currently supports a maximum of 64 forces, including the three built-in forces. This means that a maximum of 61 new forces may be created. Force names must be unique.\n\nParameters:\n- force (string): Name of the new force\n\nReturns:\n- LuaForce: The force that was just created\n\nRaises:\n- on_force_created: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "create_force"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.create_inventory",
    "content": "Method: LuaGameScript.create_inventory\nDescription: Creates an inventory that is not owned by any game object.\n\nIt can be resized later with [LuaInventory::resize](runtime:LuaInventory::resize).\n\nMake sure to destroy it when you are done with it using [LuaInventory::destroy](runtime:LuaInventory::destroy).\n\nParameters:\n- gui_title (LocalisedString)[Optional]: The title of the GUI that is shown when this inventory is opened.\n- size (uint16): The number of slots the inventory initially has.",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "create_inventory"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.create_inventory",
    "content": "Returns:\n- LuaInventory: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "create_inventory"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.create_profiler",
    "content": "Method: LuaGameScript.create_profiler\nDescription: Creates a [LuaProfiler](runtime:LuaProfiler), which is used for measuring script performance.\n\nLuaProfiler cannot be serialized.\n\nParameters:\n- stopped (boolean)[Optional]: Create the timer stopped\n\nReturns:\n- LuaProfiler: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "create_profiler"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.create_random_generator",
    "content": "Method: LuaGameScript.create_random_generator\nDescription: Creates a deterministic standalone random generator with the given seed or if a seed is not provided the initial map seed is used.\n\n*Make sure* you actually want to use this over math.random(...) as this provides entirely different functionality over math.random(...).\n\nParameters:\n- seed (uint)[Optional]: \n\nReturns:\n- LuaRandomGenerator: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "create_random_generator"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.create_surface",
    "content": "Method: LuaGameScript.create_surface\nDescription: Create a new surface.\n\nThe game currently supports a maximum of 4 294 967 295 surfaces, including the default surface. Surface names must be unique.\n\nParameters:\n- name (string): Name of the new surface.\n- settings (MapGenSettings)[Optional]: Map generation settings.\n\nReturns:\n- LuaSurface: The surface that was just created.\n\nRaises:\n- on_surface_created: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "create_surface"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.delete_surface",
    "content": "Method: LuaGameScript.delete_surface\nDescription: Deletes the given surface and all entities on it if possible.\n\nParameters:\n- surface (SurfaceIdentification): The surface to be deleted. Currently the primary surface (1, 'nauvis') cannot be deleted.\n\nReturns:\n- boolean: If the surface was queued to be deleted.\n\nRaises:\n- on_pre_surface_deleted: \n- on_surface_deleted: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "delete_surface"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.disable_replay",
    "content": "Method: LuaGameScript.disable_replay\nDescription: Disables replay saving for the current save file. Once done there's no way to re-enable replay saving for the save file without loading an old save.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "disable_replay"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.force_crc",
    "content": "Method: LuaGameScript.force_crc\nDescription: Force a CRC check. Tells all peers to calculate their current CRC, which are then compared to each other. If a mismatch is detected, the game desyncs and some peers are forced to reconnect.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "force_crc"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.get_entity_by_tag",
    "content": "Method: LuaGameScript.get_entity_by_tag\nDescription: Gets an entity by its [name tag](runtime:LuaEntity::name_tag). Entity name tags can also be set in the entity \"extra settings\" GUI in the map editor.\n\nParameters:\n- tag (string): \n\nReturns:\n- LuaEntity: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "get_entity_by_tag"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.get_entity_by_unit_number",
    "content": "Method: LuaGameScript.get_entity_by_unit_number\nDescription: Returns entity with a specified unit number or nil if entity with such number was not found or prototype does not have [EntityPrototypeFlags::get-by-unit-number](prototype:EntityPrototypeFlags::get_by_unit_number) flag set.\n\nParameters:\n- unit_number (uint): \n\nReturns:\n- LuaEntity: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "get_entity_by_unit_number"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.get_map_exchange_string",
    "content": "Method: LuaGameScript.get_map_exchange_string\nDescription: Gets the map exchange string for the map generation settings that were used to create this map.\n\nReturns:\n- string: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "get_map_exchange_string"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.get_player",
    "content": "Method: LuaGameScript.get_player\nDescription: Gets the given player or returns `nil` if no player is found.\n\nParameters:\n- player ({'complex_type': 'union', 'options': ['uint', 'string'], 'full_format': False}): The player index or name.\n\nReturns:\n- LuaPlayer: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "get_player"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.get_pollution_statistics",
    "content": "Method: LuaGameScript.get_pollution_statistics\nDescription: The pollution statistics for this the given surface.\n\nParameters:\n- surface (SurfaceIdentification): \n\nReturns:\n- LuaFlowStatistics: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "get_pollution_statistics"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.get_script_inventories",
    "content": "Method: LuaGameScript.get_script_inventories\nDescription: Gets the inventories created through [LuaGameScript::create_inventory](runtime:LuaGameScript::create_inventory).\n\nInventories created through console commands will be owned by `\"core\"`.\n\nParameters:\n- mod (string)[Optional]: The mod whose inventories to get. If not provided all inventories are returned.",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "get_script_inventories"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.get_script_inventories",
    "content": "Returns:\n- {'complex_type': 'dictionary', 'key': 'string', 'value': {'complex_type': 'array', 'value': 'LuaInventory'}}: A mapping of mod name to array of inventories owned by that mod.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "get_script_inventories"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.get_surface",
    "content": "Method: LuaGameScript.get_surface\nDescription: Gets the given surface or returns `nil` if no surface is found.\n\nThis is a shortcut for [LuaGameScript::surfaces](runtime:LuaGameScript::surfaces).\n\nParameters:\n- surface ({'complex_type': 'union', 'options': ['uint', 'string'], 'full_format': False}): The surface index or name.\n\nReturns:\n- LuaSurface: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "get_surface"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.get_vehicles",
    "content": "Method: LuaGameScript.get_vehicles\nDescription: Returns vehicles in game\n\nParameters:\n- force (ForceID)[Optional]: \n- has_passenger (boolean)[Optional]: \n- is_moving (boolean)[Optional]: \n- surface (SurfaceIdentification)[Optional]: )\n- type ({'complex_type': 'union', 'options': ['EntityID', {'complex_type': 'array', 'value': 'EntityID'}], 'full_format': False})[Optional]: \n- unit_number (uint)[Optional]: \n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}:",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "get_vehicles"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.get_vehicles",
    "content": "Returns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}: \n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "get_vehicles"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.is_demo",
    "content": "Method: LuaGameScript.is_demo\nDescription: Is this the demo version of Factorio?\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "is_demo"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.is_multiplayer",
    "content": "Method: LuaGameScript.is_multiplayer\nDescription: Whether the save is loaded as a multiplayer map.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "is_multiplayer"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.kick_player",
    "content": "Method: LuaGameScript.kick_player\nDescription: Kicks the given player from this multiplayer game. Does nothing if this is a single player game or if the player running this isn't an admin.\n\nParameters:\n- player (PlayerIdentification): The player to kick.\n- reason (string)[Optional]: The reason given if any.\n\nRaises:\n- on_console_command: \n- on_player_kicked: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "kick_player"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.merge_forces",
    "content": "Method: LuaGameScript.merge_forces\nDescription: Marks two forces to be merged together. All players and entities in the source force will be reassigned to the target force. The source force will then be destroyed. Importantly, this does not merge technologies or bonuses, which are instead retained from the target force.\n\nThe three built-in forces (player, enemy and neutral) can't be destroyed, meaning they can't be used as the source argument to this function.",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "merge_forces"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.merge_forces",
    "content": "The source force is not removed until the end of the current tick, or if called during the [on_forces_merging](runtime:on_forces_merging) or [on_forces_merged](runtime:on_forces_merged) event, the end of the next tick.\n\nParameters:\n- destination (ForceID): The force to reassign all entities to.\n- source (ForceID): The force to remove.\n\nRaises:\n- on_forces_merged: \n- on_forces_merging: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "merge_forces"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.mute_player",
    "content": "Method: LuaGameScript.mute_player\nDescription: Mutes the given player. Does nothing if the player running this isn't an admin.\n\nParameters:\n- player (PlayerIdentification): The player to mute.\n\nRaises:\n- on_console_command: \n- on_player_muted: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "mute_player"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.play_sound",
    "content": "Method: LuaGameScript.play_sound\nDescription: Play a sound for every player in the game.\n\nThe sound is not played if its location is not [charted](runtime:LuaForce::chart) for that player.",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "play_sound"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.play_sound",
    "content": "Parameters:\n- override_sound_type (SoundType)[Optional]: The volume mixer to play the sound through. Defaults to the default mixer for the given sound type.\n- path (SoundPath): The sound to play.\n- position (MapPosition)[Optional]: Where the sound should be played. If not given, it's played at the current position of each player.\n- volume_modifier (double)[Optional]: The volume of the sound to play. Must be between 0 and 1 inclusive.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "play_sound"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.print",
    "content": "Method: LuaGameScript.print\nDescription: Print text to the chat console all players.\n\nBy default, messages that are identical to a message sent in the last 60 ticks are not printed again.\n\nParameters:\n- message (LocalisedString): \n- print_settings (PrintSettings)[Optional]: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "print"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.purge_player",
    "content": "Method: LuaGameScript.purge_player\nDescription: Purges the given players messages from the game. Does nothing if the player running this isn't an admin.\n\nParameters:\n- player (PlayerIdentification): The player to purge.\n\nRaises:\n- on_console_command: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "purge_player"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.regenerate_entity",
    "content": "Method: LuaGameScript.regenerate_entity\nDescription: Regenerate autoplacement of some entities on all surfaces. This can be used to autoplace newly-added entities.\n\nAll specified entity prototypes must be autoplacable.\n\nParameters:\n- entities ({'complex_type': 'union', 'options': ['string', {'complex_type': 'array', 'value': 'string'}], 'full_format': False}): Prototype names of entity or entities to autoplace.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "regenerate_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.reload_mods",
    "content": "Method: LuaGameScript.reload_mods\nDescription: Forces a reload of all mods.\n\nThis will act like saving and loading from the mod(s) perspective.\n\nThis will do nothing if run in multiplayer.\n\nThis disables the replay if replay is enabled.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "reload_mods"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.reload_script",
    "content": "Method: LuaGameScript.reload_script\nDescription: Forces a reload of the scenario script from the original scenario location.\n\nThis disables the replay if replay is enabled.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "reload_script"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.remove_offline_players",
    "content": "Method: LuaGameScript.remove_offline_players\nDescription: Remove players who are currently not connected from the map.\n\nParameters:\n- players ({'complex_type': 'array', 'value': 'PlayerIdentification'})[Optional]: List of players to remove. If not specified, remove all offline players.\n\nRaises:\n- on_player_removed: \n- on_pre_player_removed: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "remove_offline_players"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.reset_game_state",
    "content": "Method: LuaGameScript.reset_game_state\nDescription: Reset scenario state (game_finished, player_won, etc.).\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "reset_game_state"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.reset_time_played",
    "content": "Method: LuaGameScript.reset_time_played\nDescription: Resets the amount of time played for this map.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "reset_time_played"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.save_atlas",
    "content": "Method: LuaGameScript.save_atlas\nDescription: Saves the current configuration of Atlas to a file. This will result in huge file containing all of the game graphics moved to as small space as possible.\n\nExists mainly for debugging reasons.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "save_atlas"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.server_save",
    "content": "Method: LuaGameScript.server_save\nDescription: Instruct the server to save the map. Only actually saves when in multiplayer.\n\nParameters:\n- name (string)[Optional]: Save file name. If not specified, the currently running save is overwritten. If there is no current save, no save is made.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "server_save"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.set_game_state",
    "content": "Method: LuaGameScript.set_game_state\nDescription: Set scenario state. Any parameters not provided do not change the current state.\n\nParameters:\n- can_continue (boolean)[Optional]: \n- game_finished (boolean)[Optional]: \n- next_level (string)[Optional]: \n- player_won (boolean)[Optional]: \n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "set_game_state"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.set_lose_ending_info",
    "content": "Method: LuaGameScript.set_lose_ending_info\nDescription: Set losing ending information for the current scenario.\n\nParameters:\n- bullet_points ({'complex_type': 'array', 'value': 'LocalisedString'})[Optional]: \n- final_message (LocalisedString)[Optional]: \n- image_path (string)[Optional]: \n- message (LocalisedString)[Optional]: \n- title (LocalisedString): \n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "set_lose_ending_info"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.set_wait_for_screenshots_to_finish",
    "content": "Method: LuaGameScript.set_wait_for_screenshots_to_finish\nDescription: Forces the screenshot saving system to wait until all queued screenshots have been written to disk.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "set_wait_for_screenshots_to_finish"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.set_win_ending_info",
    "content": "Method: LuaGameScript.set_win_ending_info\nDescription: Set winning ending information for the current scenario.\n\nParameters:\n- bullet_points ({'complex_type': 'array', 'value': 'LocalisedString'})[Optional]: \n- final_message (LocalisedString)[Optional]: \n- image_path (string)[Optional]: \n- message (LocalisedString)[Optional]: \n- title (LocalisedString): \n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "set_win_ending_info"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.show_message_dialog",
    "content": "Method: LuaGameScript.show_message_dialog\nDescription: Show an in-game message dialog.\n\nCan only be used when the map contains exactly one player.",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "show_message_dialog"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.show_message_dialog",
    "content": "Parameters:\n- image (string)[Optional]: Path to an image to show on the dialog\n- point_to (GuiArrowSpecification)[Optional]: If specified, dialog will show an arrow pointing to this place. When not specified, the arrow will point to the player's position. (Use `point_to={type=\"nowhere\"}` to remove the arrow entirely.) The dialog itself will be placed near the arrow's target.\n- style (string)[Optional]: The gui style to use for this speech bubble. Must be of type speech_bubble.",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "show_message_dialog"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.show_message_dialog",
    "content": "- text (LocalisedString): What the dialog should say\n- wrapper_frame_style (string)[Optional]: Must be of type flow_style.",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "show_message_dialog"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.show_message_dialog",
    "content": "Format:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "show_message_dialog"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.take_screenshot",
    "content": "Method: LuaGameScript.take_screenshot\nDescription: Take a screenshot of the game and save it to the `script-output` folder, located in the game's [user data directory](https://wiki.factorio.com/User_data_directory). The name of the image file can be specified via the `path` parameter.\n\nIf Factorio is running headless, this function will do nothing.",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "take_screenshot"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.take_screenshot",
    "content": "Parameters:\n- allow_in_replay (boolean)[Optional]: Whether to save the screenshot even during replay playback. Defaults to `false`.\n- anti_alias (boolean)[Optional]: Whether to render in double resolution and downscale the result (including GUI). Defaults to `false`.\n- by_player (PlayerIdentification)[Optional]: If defined, the screenshot will only be taken for this player.\n- daytime (double)[Optional]: Overrides the current surface daytime for the duration of screenshot rendering.",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "take_screenshot"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.take_screenshot",
    "content": "- force_render (boolean)[Optional]: Screenshot requests are processed in between game update and render. The game may skip rendering (ie. drop frames) if the previous frame has not finished rendering or the game simulation starts to fall below 60 updates per second. If `force_render` is set to `true`, the game won't drop frames and process the screenshot request at the end of the update in which the request was created. This is not honored on multiplayer clients that are catching up to server. Defaults to",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "take_screenshot"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.take_screenshot",
    "content": "multiplayer clients that are catching up to server. Defaults to `false`.",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "take_screenshot"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.take_screenshot",
    "content": "- hide_clouds (boolean)[Optional]: If `true` cloud shadows on ground won't be rendered. Defaults to `false`.\n- hide_fog (boolean)[Optional]: If `true` fog effect and foreground space dust effect won't be rendered. Defaults to `false`.",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "take_screenshot"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.take_screenshot",
    "content": "- path (string)[Optional]: The name of the image file. It should include a file extension indicating the desired format. Supports `.png`, `.jpg` /`.jpeg`, `.tga` and `.bmp`. Providing a directory path (ex. `\"save/here/screenshot.png\"`) will create the necessary folder structure in `script-output`. Defaults to `\"screenshot.png\"`.\n- player (PlayerIdentification)[Optional]: The player to focus on. Defaults to the local player.",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "take_screenshot"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.take_screenshot",
    "content": "- position (MapPosition)[Optional]: If defined, the screenshot will be centered on this position. Otherwise, the screenshot will center on `player`.\n- quality (int)[Optional]: The `.jpg` render quality as a percentage (from 0% to 100% inclusive), if used. A lower value means a more compressed image. Defaults to `80`.",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "take_screenshot"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.take_screenshot",
    "content": "- resolution (TilePosition)[Optional]: The maximum allowed resolution is 16384x16384 (8192x8192 when `anti_alias` is `true`), but the maximum recommended resolution is 4096x4096 (resp. 2048x2048). The `x` value of the position is used as the width, the `y` value as the height.\n- show_cursor_building_preview (boolean)[Optional]: When `true` and when `player` is specified, the building preview for the item in the player's cursor will also be rendered. Defaults to `false`.",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "take_screenshot"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.take_screenshot",
    "content": "- show_entity_info (boolean)[Optional]: Whether to include entity info (\"Alt mode\") or not. Defaults to `false`.\n- show_gui (boolean)[Optional]: Whether to include GUIs in the screenshot or not. Defaults to `false`.\n- surface (SurfaceIdentification)[Optional]: If defined, the screenshot will be taken on this surface.\n- water_tick (uint)[Optional]: Overrides the tick of water animation, if animated water is enabled.\n- zoom (double)[Optional]: The map zoom to take the screenshot at. Defaults to `1`.",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "take_screenshot"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.take_screenshot",
    "content": "Format:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "take_screenshot"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.take_technology_screenshot",
    "content": "Method: LuaGameScript.take_technology_screenshot\nDescription: Take a screenshot of the technology screen and save it to the `script-output` folder, located in the game's [user data directory](https://wiki.factorio.com/User_data_directory). The name of the image file can be specified via the `path` parameter.",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "take_technology_screenshot"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.take_technology_screenshot",
    "content": "Parameters:\n- path (string)[Optional]: The name of the image file. It should include a file extension indicating the desired format. Supports `.png`, `.jpg` /`.jpeg`, `.tga` and `.bmp`. Providing a directory path (ex. `\"save/here/screenshot.png\"`) will create the necessary folder structure in `script-output`. Defaults to `\"technology-screenshot.png\"`.\n- player (PlayerIdentification): The screenshot will be taken for this player.",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "take_technology_screenshot"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.take_technology_screenshot",
    "content": "- quality (int)[Optional]: The `.jpg` render quality as a percentage (from 0% to 100% inclusive), if used. A lower value means a more compressed image. Defaults to `80`.\n- selected_technology (TechnologyID)[Optional]: The technology to highlight.\n- skip_disabled (boolean)[Optional]: If `true`, disabled technologies will be skipped. Their successors will be attached to the disabled technology's parents. Defaults to `false`.",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "take_technology_screenshot"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.take_technology_screenshot",
    "content": "Format:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "take_technology_screenshot"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.unban_player",
    "content": "Method: LuaGameScript.unban_player\nDescription: Unbans the given player from this multiplayer game. Does nothing if this is a single player game of if the player running this isn't an admin.\n\nParameters:\n- player ({'complex_type': 'union', 'options': ['PlayerIdentification', 'string'], 'full_format': False}): The player to unban.\n\nRaises:\n- on_console_command: \n- on_player_unbanned: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "unban_player"
    }
  },
  {
    "type": "method",
    "name": "LuaGameScript.unmute_player",
    "content": "Method: LuaGameScript.unmute_player\nDescription: Unmutes the given player. Does nothing if the player running this isn't an admin.\n\nParameters:\n- player (PlayerIdentification): The player to unmute.\n\nRaises:\n- on_console_command: \n- on_player_unmuted: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGameScript",
      "method_name": "unmute_player"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.allow_tip_activation",
    "content": "Attribute: allow_tip_activation \nRead_type: boolean\nWrite_type: boolean\nDescription: If the tips are allowed to be activated in this scenario, it is false by default.\n\nCan't be modified in a simulation (menu screen, tips and tricks simulation, factoriopedia simulation etc.)",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "allow_tip_activation"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.autosave_enabled",
    "content": "Attribute: autosave_enabled \nRead_type: boolean\nWrite_type: boolean\nDescription: True by default. Can be used to disable autosaving. Make sure to turn it back on soon after.\n",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "autosave_enabled"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.backer_names",
    "content": "Attribute: backer_names \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'uint', 'value': 'string'}\n\nDescription: Array of the names of all the backers that supported the game development early on. These are used as names for labs, locomotives, radars, roboports, and train stops.",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "backer_names"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.blueprints",
    "content": "Attribute: blueprints \nRead_type: {'complex_type': 'array', 'value': 'LuaRecord'}\n\nDescription: Records contained in the \"game blueprints\" tab of the blueprint library.\n",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "blueprints"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.connected_players",
    "content": "Attribute: connected_players \nRead_type: {'complex_type': 'array', 'value': 'LuaPlayer'}\n\nDescription: The players that are currently online.\n\nThis does *not* index using player index. See [LuaPlayer::index](runtime:LuaPlayer::index) on each player instance for the player index. This is primarily useful when you want to do some action against all online players.",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "connected_players"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.console_command_used",
    "content": "Attribute: console_command_used \nRead_type: boolean\n\nDescription: Whether a console command has been used.\n",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "console_command_used"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.default_map_gen_settings",
    "content": "Attribute: default_map_gen_settings \nRead_type: MapGenSettings\n\nDescription: The default map gen settings for this save.\n",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "default_map_gen_settings"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.difficulty",
    "content": "Attribute: difficulty \nRead_type: defines.difficulty\n\nDescription: Current scenario difficulty.\n",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "difficulty"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.difficulty_settings",
    "content": "Attribute: difficulty_settings \nRead_type: DifficultySettings\n\nDescription: The currently active set of difficulty settings. Even though this property is marked as read-only, the members of the dictionary that is returned can be modified mid-game.\nExamples: [\"```\\n-- This will set the technology price multiplier to 12.\\ngame.difficulty_settings.technology_price_multiplier = 12\\n```\"]",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "difficulty_settings"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.draw_resource_selection",
    "content": "Attribute: draw_resource_selection \nRead_type: boolean\nWrite_type: boolean\nDescription: True by default. Can be used to disable the highlighting of resource patches when they are hovered on the map.\n",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "draw_resource_selection"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.enemy_has_vision_on_land_mines",
    "content": "Attribute: enemy_has_vision_on_land_mines \nRead_type: boolean\nWrite_type: boolean\nDescription: Determines if enemy land mines are completely invisible or not.\n",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "enemy_has_vision_on_land_mines"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.finished",
    "content": "Attribute: finished \nRead_type: boolean\n\nDescription: True while the victory screen is shown.\n",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "finished"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.finished_but_continuing",
    "content": "Attribute: finished_but_continuing \nRead_type: boolean\n\nDescription: True after players finished the game and clicked \"continue\".\n",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "finished_but_continuing"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.forces",
    "content": "Attribute: forces \nRead_type: {'complex_type': 'LuaCustomTable', 'key': {'complex_type': 'union', 'options': ['uint', 'string'], 'full_format': False}, 'value': 'LuaForce'}\n\nDescription: Get a table of all the forces that currently exist. This sparse table allows you to find forces by indexing it with either their `name` or `index`. Iterating this table with `pairs()` will provide the `name`s as the keys. Iterating with `ipairs()` will not work at all.",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "forces"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.map_settings",
    "content": "Attribute: map_settings \nRead_type: MapSettings\n\nDescription: The currently active set of map settings. Even though this property is marked as read-only, the members of the dictionary that is returned can be modified mid-game.\n\nThis does not contain difficulty settings, use [LuaGameScript::difficulty_settings](runtime:LuaGameScript::difficulty_settings) instead.",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "map_settings"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.permissions",
    "content": "Attribute: permissions \nRead_type: LuaPermissionGroups\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "permissions"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.planets",
    "content": "Attribute: planets \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaPlanet'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "planets"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.player",
    "content": "Attribute: player [Optional]\nRead_type: LuaPlayer\n\nDescription: This property is only populated inside [custom command](runtime:LuaCommandProcessor) handlers and when writing [Lua console commands](https://wiki.factorio.com/Console#Scripting_and_cheat_commands). Returns the player that is typing the command, `nil` in all other instances.\n\nSee [LuaGameScript::players](runtime:LuaGameScript::players) for accessing all players.",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "player"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.players",
    "content": "Attribute: players \nRead_type: {'complex_type': 'LuaCustomTable', 'key': {'complex_type': 'union', 'options': ['uint', 'string'], 'full_format': False}, 'value': 'LuaPlayer'}\n\nDescription: Get a table of all the players that currently exist. This sparse table allows you to find players by indexing it with either their `name` or `index`. Iterating this table with `pairs()` will provide the `index`es as the keys. Iterating with `ipairs()` will not work at all.",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "players"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.players",
    "content": "If only a single player is required, [LuaGameScript::get_player](runtime:LuaGameScript::get_player) should be used instead, as it avoids the unnecessary overhead of passing the whole table to Lua.",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "players"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.simulation",
    "content": "Attribute: simulation \nRead_type: LuaSimulation\n\nDescription: Simulation-related functions, or `nil` if the current game is not a simulation.\n",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "simulation"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.speed",
    "content": "Attribute: speed \nRead_type: float\nWrite_type: float\nDescription: Speed to update the map at. 1.0 is normal speed -- 60 UPS. Minimum value is 0.01.\n",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.surfaces",
    "content": "Attribute: surfaces \nRead_type: {'complex_type': 'LuaCustomTable', 'key': {'complex_type': 'union', 'options': ['uint', 'string'], 'full_format': False}, 'value': 'LuaSurface'}\n\nDescription: Get a table of all the surfaces that currently exist. This sparse table allows you to find surfaces by indexing it with either their `name` or `index`. Iterating this table with `pairs()` will provide the `name`s as the keys. Iterating with `ipairs()` will not work at all.",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "surfaces"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.technology_notifications_enabled",
    "content": "Attribute: technology_notifications_enabled \nRead_type: boolean\nWrite_type: boolean\nDescription: True by default. Can be used to prevent the game engine from printing certain messages.\n",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "technology_notifications_enabled"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.tick",
    "content": "Attribute: tick \nRead_type: uint\n\nDescription: Current map tick.\n",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "tick"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.tick_paused",
    "content": "Attribute: tick_paused \nRead_type: boolean\nWrite_type: boolean\nDescription: If the tick has been paused. This means that entity update has been paused.\n",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "tick_paused"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.ticks_played",
    "content": "Attribute: ticks_played \nRead_type: uint\n\nDescription: The number of ticks since this game was created using either \"new game\" or \"new game from scenario\". Notably, this number progresses even when the game is [tick_paused](runtime:LuaGameScript::tick_paused).\n\nThis differs from [LuaGameScript::tick](runtime:LuaGameScript::tick) in that creating a game from a scenario always starts with this value at `0`, even if the scenario has its own level data where the `tick` has progressed past `0`.",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "ticks_played"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.ticks_to_run",
    "content": "Attribute: ticks_to_run \nRead_type: uint\nWrite_type: uint\nDescription: The number of ticks to be run while the tick is paused.\n\nWhen [LuaGameScript::tick_paused](runtime:LuaGameScript::tick_paused) is true, ticks_to_run behaves the following way: While this is > 0, the entity update is running normally and this value is decremented every tick. When this reaches 0, the game will pause again.",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "ticks_to_run"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGameScript.train_manager",
    "content": "Attribute: train_manager \nRead_type: LuaTrainManager\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaGameScript",
      "attribute_name": "train_manager"
    }
  },
  {
    "type": "class",
    "name": "LuaGenericOnOffControlBehavior",
    "content": "Class: LuaGenericOnOffControlBehavior\nDescription: An abstract base class for behaviors that support switching the entity on or off based on some condition.",
    "metadata": {
      "class_name": "LuaGenericOnOffControlBehavior",
      "parent_class": "LuaControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGenericOnOffControlBehavior.circuit_condition",
    "content": "Attribute: circuit_condition \nRead_type: CircuitConditionDefinition\nWrite_type: CircuitConditionDefinition\nDescription: The circuit condition. Writing `nil` clears the circuit condition.\nExamples: [\"```\\n-- Tell an entity to be active (for example a lamp to be lit) when it receives a\\n-- circuit signal of more than 4 chain signals.\\na_behavior.circuit_condition = {condition={\\n  comparator=\\\">\\\",\\n  first_signal={type=\\\"item\\\", name=\\\"rail-chain-signal\\\"},\\n  constant=4}\\n}\\n```\"]",
    "metadata": {
      "class_name": "LuaGenericOnOffControlBehavior",
      "attribute_name": "circuit_condition"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGenericOnOffControlBehavior.circuit_enable_disable",
    "content": "Attribute: circuit_enable_disable \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if this entity enable/disable state is controlled by circuit condition\n",
    "metadata": {
      "class_name": "LuaGenericOnOffControlBehavior",
      "attribute_name": "circuit_enable_disable"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGenericOnOffControlBehavior.connect_to_logistic_network",
    "content": "Attribute: connect_to_logistic_network \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if this should connect to the logistic network.\n",
    "metadata": {
      "class_name": "LuaGenericOnOffControlBehavior",
      "attribute_name": "connect_to_logistic_network"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGenericOnOffControlBehavior.disabled",
    "content": "Attribute: disabled \nRead_type: boolean\n\nDescription: If the entity is currently disabled because of the control behavior.\n",
    "metadata": {
      "class_name": "LuaGenericOnOffControlBehavior",
      "attribute_name": "disabled"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGenericOnOffControlBehavior.logistic_condition",
    "content": "Attribute: logistic_condition \nRead_type: CircuitConditionDefinition\nWrite_type: CircuitConditionDefinition\nDescription: The logistic condition. Writing `nil` clears the logistic condition.\nExamples: [\"```\\n-- Tell an entity to be active (for example a lamp to be lit) when the logistics\\n-- network it's connected to has more than four chain signals.\\na_behavior.logistic_condition = {condition={\\n  comparator=\\\">\\\",\\n  first_signal={type=\\\"item\\\", name=\\\"rail-chain-signal\\\"},\\n  constant=4}\\n}\\n```\"]",
    "metadata": {
      "class_name": "LuaGenericOnOffControlBehavior",
      "attribute_name": "logistic_condition"
    }
  },
  {
    "type": "class",
    "name": "LuaGroup",
    "content": "Class: LuaGroup\nDescription: Item group or subgroup.",
    "metadata": {
      "class_name": "LuaGroup",
      "parent_class": null
    }
  },
  {
    "type": "attribute",
    "name": "LuaGroup.group",
    "content": "Attribute: group \nRead_type: LuaGroup\n\nDescription: The parent group.\n",
    "metadata": {
      "class_name": "LuaGroup",
      "attribute_name": "group"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGroup.localised_name",
    "content": "Attribute: localised_name \nRead_type: LocalisedString\n\nDescription: Localised name of the group.\n",
    "metadata": {
      "class_name": "LuaGroup",
      "attribute_name": "localised_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGroup.name",
    "content": "Attribute: name \nRead_type: string\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaGroup",
      "attribute_name": "name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGroup.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaGroup",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGroup.order",
    "content": "Attribute: order \nRead_type: string\n\nDescription: The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning.\n",
    "metadata": {
      "class_name": "LuaGroup",
      "attribute_name": "order"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGroup.order_in_recipe",
    "content": "Attribute: order_in_recipe \nRead_type: string\n\nDescription: The additional order value used in recipe ordering.\n",
    "metadata": {
      "class_name": "LuaGroup",
      "attribute_name": "order_in_recipe"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGroup.subgroups",
    "content": "Attribute: subgroups \nRead_type: {'complex_type': 'array', 'value': 'LuaGroup'}\n\nDescription: Subgroups of this group.\n",
    "metadata": {
      "class_name": "LuaGroup",
      "attribute_name": "subgroups"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGroup.type",
    "content": "Attribute: type \nRead_type: string\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaGroup",
      "attribute_name": "type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGroup.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaGroup",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaGui",
    "content": "Class: LuaGui\nDescription: The root of the GUI. This type houses the root elements, `top`, `left`, `center`,  `goal`, and `screen`, to which other elements can be added to be displayed on screen.\n\nEvery player can have a different GUI state.",
    "metadata": {
      "class_name": "LuaGui",
      "parent_class": null
    }
  },
  {
    "type": "attribute",
    "name": "LuaGui.center",
    "content": "Attribute: center \nRead_type: LuaGuiElement\n\nDescription: The center part of the GUI. It is a flow element.\n",
    "metadata": {
      "class_name": "LuaGui",
      "attribute_name": "center"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGui.children",
    "content": "Attribute: children \nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'LuaGuiElement'}\n\nDescription: The children GUI elements mapped by name <> element.\n",
    "metadata": {
      "class_name": "LuaGui",
      "attribute_name": "children"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGui.goal",
    "content": "Attribute: goal \nRead_type: LuaGuiElement\n\nDescription: The flow used in the objectives window. It is a flow element. The objectives window is only visible when the flow is not empty or the objective text is set.\n",
    "metadata": {
      "class_name": "LuaGui",
      "attribute_name": "goal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGui.left",
    "content": "Attribute: left \nRead_type: LuaGuiElement\n\nDescription: The left part of the GUI. It is a flow element inside a scroll pane element.\n",
    "metadata": {
      "class_name": "LuaGui",
      "attribute_name": "left"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGui.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaGui",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGui.player",
    "content": "Attribute: player \nRead_type: LuaPlayer\n\nDescription: The player who owns this gui.\n",
    "metadata": {
      "class_name": "LuaGui",
      "attribute_name": "player"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGui.relative",
    "content": "Attribute: relative \nRead_type: LuaGuiElement\n\nDescription: For showing a GUI somewhere relative to one of the game GUIs. It is an empty-widget element.\n",
    "metadata": {
      "class_name": "LuaGui",
      "attribute_name": "relative"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGui.screen",
    "content": "Attribute: screen \nRead_type: LuaGuiElement\n\nDescription: For showing a GUI somewhere on the entire screen. It is an empty-widget element.\n",
    "metadata": {
      "class_name": "LuaGui",
      "attribute_name": "screen"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGui.top",
    "content": "Attribute: top \nRead_type: LuaGuiElement\n\nDescription: The top part of the GUI. It is a flow element inside a scroll pane element.\n",
    "metadata": {
      "class_name": "LuaGui",
      "attribute_name": "top"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGui.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaGui",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaGuiElement",
    "content": "Class: LuaGuiElement\nDescription: An element of a custom GUI. This type is used to represent [any kind](runtime:GuiElementType) of a GUI element - labels, buttons and frames are all instances of this type. Just like [LuaEntity](runtime:LuaEntity), different kinds of elements support different attributes; attempting to access an attribute on an element that doesn't support it (for instance, trying to access the `column_count` of a `textfield`) will result in a runtime error.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "parent_class": null
    }
  },
  {
    "type": "class",
    "name": "LuaGuiElement",
    "content": "For information on all supported GUI elements, see [GuiElementType](runtime:GuiElementType).\n\nEach GUI element allows access to its children by having them as attributes. Thus, one can use the `parent.child` syntax to refer to children. Lua also supports the `parent[\"child\"]` syntax to refer to the same element. This can be used in cases where the child has a name that isn't a valid Lua identifier.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.add",
    "content": "Method: LuaGuiElement.add\nDescription: Add a new child element to this GuiElement.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "add"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.add",
    "content": "Parameters:\n- anchor (GuiAnchor)[Optional]: Where to position the child element when in the `relative` element.\n- caption (LocalisedString)[Optional]: Text displayed on the child element. For frames, this is their title. For other elements, like buttons or labels, this is the content. Whilst this attribute may be used on all elements, it doesn't make sense for tables and flows as they won't display it.\n- elem_tooltip (ElemID)[Optional]: Elem tooltip of the child element. Will be displayed above `tooltip`.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "add"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.add",
    "content": "- enabled (boolean)[Optional]: Whether the child element is enabled. Defaults to `true`.\n- game_controller_interaction (defines.game_controller_interaction)[Optional]: How the element should interact with game controllers. Defaults to [defines.game_controller_interaction.normal](runtime:defines.game_controller_interaction.normal).\n- ignored_by_interaction (boolean)[Optional]: Whether the child element is ignored by interaction. Defaults to `false`.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "add"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.add",
    "content": "- index (uint)[Optional]: Location in its parent that the child element should slot into. By default, the child will be appended onto the end.\n- name (string)[Optional]: Name of the child element. It must be unique within the parent element.\n- raise_hover_events (boolean)[Optional]: Whether this element will raise [on_gui_hover](runtime:on_gui_hover) and [on_gui_leave](runtime:on_gui_leave). Defaults to `false`.\n- style (string)[Optional]: The name of the style prototype to apply to the new element.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "add"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.add",
    "content": "- tags (Tags)[Optional]: [Tags](runtime:Tags) associated with the child element.\n- tooltip (LocalisedString)[Optional]: Tooltip of the child element.\n- type (GuiElementType): The kind of element to add, which potentially has its own attributes as listed below.\n- visible (boolean)[Optional]: Whether the child element is visible. Defaults to `true`.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "add"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.add",
    "content": "Returns:\n- LuaGuiElement: The GUI element that was added.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "add"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.add",
    "content": "Variant Parameter Groups:\n- button: \n- auto_toggle (boolean)[Optional]: Whether the button will automatically toggle when clicked. Defaults to `false`.\n- mouse_button_filter (MouseButtonFlags)[Optional]: Which mouse buttons the button responds to. Defaults to `\"left-and-right\"`.\n- toggled (boolean)[Optional]: The initial toggled state of the button. Defaults to `false`.\n- camera: \n- position (MapPosition): The position the camera centers on.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "add"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.add",
    "content": "- position (MapPosition): The position the camera centers on.\n- surface_index (uint)[Optional]: The surface that the camera will render. Defaults to the player's current surface.\n- zoom (double)[Optional]: The initial camera zoom. Defaults to `0.75`.\n- checkbox: \n- state (boolean): The initial checked-state of the checkbox.\n- choose-elem-button: \n- achievement (string)[Optional]: If type is `\"achievement\"` - the default value for the button.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "add"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.add",
    "content": "- decorative (string)[Optional]: If type is `\"decorative\"` - the default value for the button.\n- elem_filters (PrototypeFilter)[Optional]: Filters describing what to show in the selection window. The applicable filter depends on the `elem_type`.\n- elem_type (ElemType): The type of the button.\n- entity (string)[Optional]: If type is `\"entity\"` - the default value for the button.\n- entity-with-quality (PrototypeWithQuality)[Optional]: If type is `\"entity-with-quality\"` - the default value for the button.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "add"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.add",
    "content": "- equipment (string)[Optional]: If type is `\"equipment\"` - the default value for the button.\n- equipment-with-quality (PrototypeWithQuality)[Optional]: If type is `\"equipment-with-quality\"` - the default value for the button.\n- fluid (string)[Optional]: If type is `\"fluid\"` - the default value for the button.\n- item (string)[Optional]: If type is `\"item\"` - the default value for the button.\n- item-group (string)[Optional]: If type is `\"item-group\"` - the default value for the button.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "add"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.add",
    "content": "- item-with-quality (PrototypeWithQuality)[Optional]: If type is `\"item-with-quality\"` - the default value for the button.\n- recipe (string)[Optional]: If type is `\"recipe\"` - the default value for the button.\n- recipe-with-quality (PrototypeWithQuality)[Optional]: If type is `\"recipe-with-quality\"` - the default value for the button.\n- signal (SignalID)[Optional]: If type is `\"signal\"` - the default value for the button.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "add"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.add",
    "content": "- technology (string)[Optional]: If type is `\"technology\"` - the default value for the button.\n- tile (string)[Optional]: If type is `\"tile\"` - the default value for the button.\n- drop-down: \n- items ({'complex_type': 'array', 'value': 'LocalisedString'})[Optional]: The initial items in the dropdown.\n- selected_index (uint)[Optional]: The index of the initially selected item. Defaults to 0.\n- flow:",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "add"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.add",
    "content": "- flow: \n- direction (GuiDirection)[Optional]: The initial direction of the flow's layout. Defaults to `\"horizontal\"`.\n- frame: \n- direction (GuiDirection)[Optional]: The initial direction of the frame's layout. Defaults to `\"horizontal\"`.\n- line: \n- direction (GuiDirection)[Optional]: The initial direction of the line. Defaults to `\"horizontal\"`.\n- list-box: \n- items ({'complex_type': 'array', 'value': 'LocalisedString'})[Optional]: The initial items in the listbox.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "add"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.add",
    "content": "- selected_index (uint)[Optional]: The index of the initially selected item. Defaults to 0.\n- minimap: \n- chart_player_index (uint)[Optional]: The player index the map should use. Defaults to the current player.\n- force (string)[Optional]: The force this minimap should use. Defaults to the player's current force.\n- position (MapPosition)[Optional]: The position the minimap centers on. Defaults to the player's current position.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "add"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.add",
    "content": "- surface_index (uint)[Optional]: The surface the camera will render. Defaults to the player's current surface.\n- zoom (double)[Optional]: The initial camera zoom. Defaults to `0.75`.\n- progressbar: \n- value (double)[Optional]: The initial value of the progressbar, in the range `[0, 1]`. Defaults to `0`.\n- radiobutton: \n- state (boolean): The initial checked-state of the radiobutton.\n- scroll-pane:",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "add"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.add",
    "content": "- scroll-pane: \n- horizontal_scroll_policy (ScrollPolicy)[Optional]: Policy of the horizontal scroll bar. Defaults to `\"auto\"`.\n- vertical_scroll_policy (ScrollPolicy)[Optional]: Policy of the vertical scroll bar. Defaults to `\"auto\"`.\n- slider: \n- discrete_values (boolean)[Optional]: Defaults to `true`.\n- maximum_value (double)[Optional]: The maximum value for the slider. Defaults to `30`.\n- minimum_value (double)[Optional]: The minimum value for the slider. Defaults to `0`.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "add"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.add",
    "content": "- value (double)[Optional]: The initial value for the slider. Defaults to `minimum_value`.\n- value_step (double)[Optional]: The minimum value the slider can move. Defaults to `1`.\n- sprite: \n- resize_to_sprite (boolean)[Optional]: Whether the widget should resize according to the sprite in it. Defaults to `true`.\n- sprite (SpritePath)[Optional]: Path to the image to display.\n- sprite-button: \n- auto_toggle (boolean)[Optional]: Whether the button will automatically toggle when clicked. Defaults to `false`.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "add"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.add",
    "content": "- clicked_sprite (SpritePath)[Optional]: Path to the image to display on the button when it is clicked.\n- hovered_sprite (SpritePath)[Optional]: Path to the image to display on the button when it is hovered.\n- mouse_button_filter (MouseButtonFlags)[Optional]: The mouse buttons that the button responds to. Defaults to `\"left-and-right\"`.\n- number (double)[Optional]: The number shown on the button.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "add"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.add",
    "content": "- number (double)[Optional]: The number shown on the button.\n- show_percent_for_small_numbers (boolean)[Optional]: Formats small numbers as percentages. Defaults to `false`.\n- sprite (SpritePath)[Optional]: Path to the image to display on the button.\n- toggled (boolean)[Optional]: The initial toggled state of the button. Defaults to `false`.\n- switch: \n- allow_none_state (boolean)[Optional]: Whether the switch can be set to a middle state. Defaults to `false`.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "add"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.add",
    "content": "- left_label_caption (LocalisedString)[Optional]: \n- left_label_tooltip (LocalisedString)[Optional]: \n- right_label_caption (LocalisedString)[Optional]: \n- right_label_tooltip (LocalisedString)[Optional]: \n- switch_state (SwitchState)[Optional]: If set to \"none\", `allow_none_state` must be `true`. Defaults to `\"left\"`.\n- tab: \n- badge_text (LocalisedString)[Optional]: The text to display after the normal tab text (designed to work with numbers).\n- table:",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "add"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.add",
    "content": "- table: \n- column_count (uint): Number of columns. This can't be changed after the table is created.\n- draw_horizontal_line_after_headers (boolean)[Optional]: Whether the table should draw a single horizontal grid line after the headers. Defaults to `false`.\n- draw_horizontal_lines (boolean)[Optional]: Whether the table should draw horizontal grid lines. Defaults to `false`.\n- draw_vertical_lines (boolean)[Optional]: Whether the table should draw vertical grid lines. Defaults to `false`.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "add"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.add",
    "content": "- vertical_centering (boolean)[Optional]: Whether the content of the table should be vertically centered. Defaults to `true`.\n- text-box: \n- icon_selector (boolean)[Optional]: Whether to add the rich text icon selector to the text box. This attribute can't be changed after creating the widget. Defaults to `false`.\n- text (string)[Optional]: The initial text contained in the text-box.\n- textfield: \n- allow_decimal (boolean)[Optional]: Defaults to `false`.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "add"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.add",
    "content": "- allow_decimal (boolean)[Optional]: Defaults to `false`.\n- allow_negative (boolean)[Optional]: Defaults to `false`.\n- icon_selector (boolean)[Optional]: Whether to add the rich text icon selector to the text field. This attribute can't be changed after creating the widget. Defaults to `false`.\n- is_password (boolean)[Optional]: Defaults to `false`.\n- lose_focus_on_confirm (boolean)[Optional]: Defaults to `false`.\n- numeric (boolean)[Optional]: Defaults to `false`.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "add"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.add",
    "content": "- numeric (boolean)[Optional]: Defaults to `false`.\n- text (string)[Optional]: The initial text contained in the textfield.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "add"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.add_item",
    "content": "Method: LuaGuiElement.add_item\nDescription: Inserts a string at the end or at the given index of this dropdown or listbox.\n\nParameters:\n- index (uint)[Optional]: The index at which to insert the item.\n- string (LocalisedString): The text to insert.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "add_item"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.add_tab",
    "content": "Method: LuaGuiElement.add_tab\nDescription: Adds the given tab and content widgets to this tabbed pane as a new tab.\n\nParameters:\n- content (LuaGuiElement): The content to show when this tab is selected. Can be any type of GUI element.\n- tab (LuaGuiElement): The tab to add, must be a GUI element of type \"tab\".\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "add_tab"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.bring_to_front",
    "content": "Method: LuaGuiElement.bring_to_front\nDescription: Moves this GUI element to the \"front\" so it will draw over other elements.\n\nOnly works for elements in [LuaGui::screen](runtime:LuaGui::screen).\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "bring_to_front"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.clear",
    "content": "Method: LuaGuiElement.clear\nDescription: Remove children of this element. Any [LuaGuiElement](runtime:LuaGuiElement) objects referring to the destroyed elements become invalid after this operation.\n\nExamples:\n```\ngame.player.gui.top.clear()\n```\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "clear"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.clear_items",
    "content": "Method: LuaGuiElement.clear_items\nDescription: Removes the items in this dropdown or listbox.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "clear_items"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.close_dropdown",
    "content": "Method: LuaGuiElement.close_dropdown\nDescription: Closes the dropdown list if this is a dropdown and it is open.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "close_dropdown"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.destroy",
    "content": "Method: LuaGuiElement.destroy\nDescription: Remove this element, along with its children. Any [LuaGuiElement](runtime:LuaGuiElement) objects referring to the destroyed elements become invalid after this operation.\n\nThe top-level GUI elements - [LuaGui::top](runtime:LuaGui::top), [LuaGui::left](runtime:LuaGui::left), [LuaGui::center](runtime:LuaGui::center) and [LuaGui::screen](runtime:LuaGui::screen) - can't be destroyed.\n\nExamples:\n```\ngame.player.gui.top.greeting.destroy()\n```",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "destroy"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.destroy",
    "content": "Examples:\n```\ngame.player.gui.top.greeting.destroy()\n```\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "destroy"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.focus",
    "content": "Method: LuaGuiElement.focus\nDescription: Focuses this GUI element if possible.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "focus"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.force_auto_center",
    "content": "Method: LuaGuiElement.force_auto_center\nDescription: Forces this frame to re-auto-center. Only works on frames stored directly in [LuaGui::screen](runtime:LuaGui::screen).\n\nRaises:\n- on_gui_location_changed: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "force_auto_center"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.get_index_in_parent",
    "content": "Method: LuaGuiElement.get_index_in_parent\nDescription: Gets the index that this element has in its parent element.\n\nThis iterates through the children of the parent of this element, meaning this has a non-free cost to get, but is faster than doing the equivalent in Lua.\n\nReturns:\n- uint: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "get_index_in_parent"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.get_item",
    "content": "Method: LuaGuiElement.get_item\nDescription: Gets the item at the given index from this dropdown or listbox.\n\nParameters:\n- index (uint): The index to get\n\nReturns:\n- LocalisedString: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "get_item"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.get_mod",
    "content": "Method: LuaGuiElement.get_mod\nDescription: The mod that owns this Gui element or `nil` if it's owned by the scenario script.\n\nThis has a not-super-expensive, but non-free cost to get.\n\nReturns:\n- string: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "get_mod"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.get_slider_discrete_values",
    "content": "Method: LuaGuiElement.get_slider_discrete_values\nDescription: Returns whether this slider only allows discrete values.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "get_slider_discrete_values"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.get_slider_maximum",
    "content": "Method: LuaGuiElement.get_slider_maximum\nDescription: Gets this sliders maximum value.\n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "get_slider_maximum"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.get_slider_minimum",
    "content": "Method: LuaGuiElement.get_slider_minimum\nDescription: Gets this sliders minimum value.\n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "get_slider_minimum"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.get_slider_value_step",
    "content": "Method: LuaGuiElement.get_slider_value_step\nDescription: Gets the minimum distance this slider can move.\n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "get_slider_value_step"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.remove_item",
    "content": "Method: LuaGuiElement.remove_item\nDescription: Removes the item at the given index from this dropdown or listbox.\n\nParameters:\n- index (uint): The index\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "remove_item"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.remove_tab",
    "content": "Method: LuaGuiElement.remove_tab\nDescription: Removes the given tab and its associated content from this tabbed pane.\n\nRemoving a tab does not destroy the tab or the tab contents. It just removes them from the view. When removing tabs, [LuaGuiElement::selected_tab_index](runtime:LuaGuiElement::selected_tab_index) needs to be manually updated.\n\nParameters:\n- tab (LuaGuiElement)[Optional]: The tab to remove or `nil` to remove all tabs.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "remove_tab"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.scroll_to_bottom",
    "content": "Method: LuaGuiElement.scroll_to_bottom\nDescription: Scrolls this scroll bar to the bottom.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "scroll_to_bottom"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.scroll_to_element",
    "content": "Method: LuaGuiElement.scroll_to_element\nDescription: Scrolls this scroll bar such that the specified GUI element is visible to the player.\n\nParameters:\n- element (LuaGuiElement): The element to scroll to.\n- scroll_mode ({'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'in-view'}, {'complex_type': 'literal', 'value': 'top-third'}], 'full_format': False})[Optional]: Where the element should be positioned in the scroll-pane. Defaults to `\"in-view\"`.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "scroll_to_element"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.scroll_to_item",
    "content": "Method: LuaGuiElement.scroll_to_item\nDescription: Scrolls the scroll bar such that the specified listbox item is visible to the player.\n\nParameters:\n- index (int): The item index to scroll to.\n- scroll_mode ({'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'in-view'}, {'complex_type': 'literal', 'value': 'top-third'}], 'full_format': False})[Optional]: Where the item should be positioned in the list-box. Defaults to `\"in-view\"`.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "scroll_to_item"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.scroll_to_left",
    "content": "Method: LuaGuiElement.scroll_to_left\nDescription: Scrolls this scroll bar to the left.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "scroll_to_left"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.scroll_to_right",
    "content": "Method: LuaGuiElement.scroll_to_right\nDescription: Scrolls this scroll bar to the right.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "scroll_to_right"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.scroll_to_top",
    "content": "Method: LuaGuiElement.scroll_to_top\nDescription: Scrolls this scroll bar to the top.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "scroll_to_top"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.select",
    "content": "Method: LuaGuiElement.select\nDescription: Selects a range of text in this textbox.\n\nParameters:\n- end_index (int): The index of the last character to select\n- start_index (int): The index of the first character to select\n\nExamples:\n```\n-- Select the characters \"amp\" from \"example\":\ntextbox.select(3, 5)\n```\n```\n-- Move the cursor to the start of the text box:\ntextbox.select(1, 0)\n```\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "select"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.select_all",
    "content": "Method: LuaGuiElement.select_all\nDescription: Selects all the text in this textbox.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "select_all"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.set_item",
    "content": "Method: LuaGuiElement.set_item\nDescription: Sets the given string at the given index in this dropdown or listbox.\n\nParameters:\n- index (uint): The index whose text to replace.\n- string (LocalisedString): The text to set at the given index.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "set_item"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.set_slider_discrete_values",
    "content": "Method: LuaGuiElement.set_slider_discrete_values\nDescription: Sets whether this slider only allows discrete values.\n\nParameters:\n- value (boolean): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "set_slider_discrete_values"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.set_slider_minimum_maximum",
    "content": "Method: LuaGuiElement.set_slider_minimum_maximum\nDescription: Sets this sliders minimum and maximum values. The minimum can't be >= the maximum.\n\nParameters:\n- maximum (double): \n- minimum (double): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "set_slider_minimum_maximum"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.set_slider_value_step",
    "content": "Method: LuaGuiElement.set_slider_value_step\nDescription: Sets the minimum distance this slider can move. The minimum distance can't be > (max - min).\n\nParameters:\n- value (double): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "set_slider_value_step"
    }
  },
  {
    "type": "method",
    "name": "LuaGuiElement.swap_children",
    "content": "Method: LuaGuiElement.swap_children\nDescription: Swaps the children at the given indices in this element.\n\nParameters:\n- index_1 (uint): The index of the first child.\n- index_2 (uint): The index of the second child.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaGuiElement",
      "method_name": "swap_children"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.allow_decimal",
    "content": "Attribute: allow_decimal \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether this textfield (when in numeric mode) allows decimal numbers.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "allow_decimal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.allow_negative",
    "content": "Attribute: allow_negative \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether this textfield (when in numeric mode) allows negative numbers.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "allow_negative"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.allow_none_state",
    "content": "Attribute: allow_none_state \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether the `\"none\"` state is allowed for this switch.\n\nThis can't be set to false if the current switch_state is 'none'.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "allow_none_state"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.anchor",
    "content": "Attribute: anchor [Optional]\nRead_type: GuiAnchor\nWrite_type: GuiAnchor\nDescription: The anchor for this relative widget, if any. Setting `nil` clears the anchor.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "anchor"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.auto_center",
    "content": "Attribute: auto_center \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether this frame auto-centers on window resize when stored in [LuaGui::screen](runtime:LuaGui::screen).\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "auto_center"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.auto_toggle",
    "content": "Attribute: auto_toggle \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether this button will automatically toggle when clicked.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "auto_toggle"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.badge_text",
    "content": "Attribute: badge_text \nRead_type: LocalisedString\nWrite_type: LocalisedString\nDescription: The text to display after the normal tab text (designed to work with numbers)\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "badge_text"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.caption",
    "content": "Attribute: caption \nRead_type: LocalisedString\nWrite_type: LocalisedString\nDescription: The text displayed on this element. For frames, this is the \"heading\". For other elements, like buttons or labels, this is the content.\n\nWhilst this attribute may be used on all elements without producing an error, it doesn't make sense for tables and flows as they won't display it.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "caption"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.children",
    "content": "Attribute: children \nRead_type: {'complex_type': 'array', 'value': 'LuaGuiElement'}\n\nDescription: The child-elements of this GUI element.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "children"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.children_names",
    "content": "Attribute: children_names \nRead_type: {'complex_type': 'array', 'value': 'string'}\n\nDescription: Names of all the children of this element. These are the identifiers that can be used to access the child as an attribute of this element.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "children_names"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.clicked_sprite",
    "content": "Attribute: clicked_sprite \nRead_type: SpritePath\nWrite_type: SpritePath\nDescription: The sprite to display on this sprite-button when it is clicked.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "clicked_sprite"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.column_count",
    "content": "Attribute: column_count \nRead_type: uint\n\nDescription: The number of columns in this table.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "column_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.direction",
    "content": "Attribute: direction \nRead_type: GuiDirection\n\nDescription: Direction of this element's layout.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "direction"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.drag_target",
    "content": "Attribute: drag_target [Optional]\nRead_type: LuaGuiElement\nWrite_type: LuaGuiElement\nDescription: The `frame` that is being moved when dragging this GUI element, if any. This element needs to be a child of the `drag_target` at some level.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "drag_target"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.drag_target",
    "content": "Only top-level elements in [LuaGui::screen](runtime:LuaGui::screen) can be `drag_target`s.\nExamples: [\"```\\n-- This creates a frame that contains a dragging handle which can move the frame.\\nlocal frame = player.gui.screen.add{type=\\\"frame\\\", direction=\\\"vertical\\\"}\\nlocal dragger = frame.add{type=\\\"empty-widget\\\", style=\\\"draggable_space\\\"}\\ndragger.style.size = {128, 24}\\ndragger.drag_target = frame\\n```\"]",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "drag_target"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.draw_horizontal_line_after_headers",
    "content": "Attribute: draw_horizontal_line_after_headers \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether this table should draw a horizontal grid line below the first table row.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "draw_horizontal_line_after_headers"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.draw_horizontal_lines",
    "content": "Attribute: draw_horizontal_lines \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether this table should draw horizontal grid lines.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "draw_horizontal_lines"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.draw_vertical_lines",
    "content": "Attribute: draw_vertical_lines \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether this table should draw vertical grid lines.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "draw_vertical_lines"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.elem_filters",
    "content": "Attribute: elem_filters [Optional]\nRead_type: PrototypeFilter\nWrite_type: PrototypeFilter\nDescription: The elem filters of this choose-elem-button, if any. The compatible type of filter is determined by `elem_type`.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "elem_filters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.elem_filters",
    "content": "Writing to this field does not change or clear the currently selected element.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "elem_filters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.elem_filters",
    "content": "Examples: [\"```\\n-- This will configure a choose-elem-button of type \\\"entity\\\" to only show items of type \\\"furnace\\\".\\nbutton.elem_filters = {{filter = \\\"type\\\", type = \\\"furnace\\\"}}\\n```\", \"```\\n-- Then, there are some types of filters that work on a specific kind of attribute. The following will configure a\\n--   choose-elem-button of type \\\"entity\\\" to only show entities that have their \\\"hidden\\\" flags set.\\nbutton.elem_filters = {{filter = \\\"hidden\\\"}}\\n```\", \"```\\n-- Lastly, these filters can be",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "elem_filters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.elem_filters",
    "content": "= \\\"hidden\\\"}}\\n```\", \"```\\n-- Lastly, these filters can be combined at will, taking care to specify how they should be combined (either \\\"and\\\" or \\\"or\\\").\\n--   The following will filter for any entities that are \\\"furnaces\\\" and that are not \\\"hidden\\\".\\nbutton.elem_filters = {{filter = \\\"type\\\", type = \\\"furnace\\\"}, {filter = \\\"hidden\\\", invert = true, mode = \\\"and\\\"}}\\n```\"]",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "elem_filters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.elem_tooltip",
    "content": "Attribute: elem_tooltip [Optional]\nRead_type: ElemID\nWrite_type: ElemID\nDescription: The element tooltip to display when hovering over this element, or `nil`.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "elem_tooltip"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.elem_type",
    "content": "Attribute: elem_type \nRead_type: ElemType\n\nDescription: The elem type of this choose-elem-button.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "elem_type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.elem_value",
    "content": "Attribute: elem_value [Optional]\nRead_type: {'complex_type': 'union', 'options': ['string', 'SignalID', 'PrototypeWithQuality'], 'full_format': False}\nWrite_type: {\"complex_type\": \"union\", \"options\": [\"string\", \"SignalID\", \"PrototypeWithQuality\"], \"full_format\": false}\nDescription: The elem value of this choose-elem-button, if any.\n\nThe `\"signal\"` type operates with [SignalID](runtime:SignalID).\n\nThe `\"with-quality\"` types operate with [PrototypeWithQuality](runtime:PrototypeWithQuality).",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "elem_value"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.elem_value",
    "content": "The remaining types use strings.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "elem_value"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.enabled",
    "content": "Attribute: enabled \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether this GUI element is enabled. Disabled GUI elements don't trigger events when clicked.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "enabled"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.entity",
    "content": "Attribute: entity [Optional]\nRead_type: LuaEntity\nWrite_type: LuaEntity\nDescription: The entity associated with this entity-preview, camera, minimap, if any.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "entity"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.force",
    "content": "Attribute: force [Optional]\nRead_type: string\nWrite_type: string\nDescription: The force this minimap is using, if any.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "force"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.game_controller_interaction",
    "content": "Attribute: game_controller_interaction \nRead_type: defines.game_controller_interaction\nWrite_type: defines.game_controller_interaction\nDescription: How this element should interact with game controllers.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "game_controller_interaction"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.gui",
    "content": "Attribute: gui \nRead_type: LuaGui\n\nDescription: The GUI this element is a child of.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "gui"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.horizontal_scroll_policy",
    "content": "Attribute: horizontal_scroll_policy \nRead_type: ScrollPolicy\nWrite_type: ScrollPolicy\nDescription: Policy of the horizontal scroll bar.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "horizontal_scroll_policy"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.hovered_sprite",
    "content": "Attribute: hovered_sprite \nRead_type: SpritePath\nWrite_type: SpritePath\nDescription: The sprite to display on this sprite-button when it is hovered.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "hovered_sprite"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.ignored_by_interaction",
    "content": "Attribute: ignored_by_interaction \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether this GUI element is ignored by interaction. This makes clicks on this element 'go through' to the GUI element or even the game surface below it.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "ignored_by_interaction"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.index",
    "content": "Attribute: index \nRead_type: uint\n\nDescription: The index of this GUI element (unique amongst the GUI elements of a LuaPlayer).\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "index"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.is_password",
    "content": "Attribute: is_password \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether this textfield displays as a password field, which renders all characters as `*`.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "is_password"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.items",
    "content": "Attribute: items \nRead_type: {'complex_type': 'array', 'value': 'LocalisedString'}\nWrite_type: {\"complex_type\": \"array\", \"value\": \"LocalisedString\"}\nDescription: The items in this dropdown or listbox.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "items"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.left_label_caption",
    "content": "Attribute: left_label_caption \nRead_type: LocalisedString\nWrite_type: LocalisedString\nDescription: The text shown for the left switch label.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "left_label_caption"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.left_label_tooltip",
    "content": "Attribute: left_label_tooltip \nRead_type: LocalisedString\nWrite_type: LocalisedString\nDescription: The tooltip shown on the left switch label.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "left_label_tooltip"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.location",
    "content": "Attribute: location [Optional]\nRead_type: GuiLocation\nWrite_type: GuiLocation\nDescription: The location of this widget when stored in [LuaGui::screen](runtime:LuaGui::screen). `nil` if not set or not in [LuaGui::screen](runtime:LuaGui::screen).\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "location"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.locked",
    "content": "Attribute: locked \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether this choose-elem-button can be changed by the player.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "locked"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.lose_focus_on_confirm",
    "content": "Attribute: lose_focus_on_confirm \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether this textfield loses focus after [defines.events.on_gui_confirmed](runtime:defines.events.on_gui_confirmed) is fired.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "lose_focus_on_confirm"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.minimap_player_index",
    "content": "Attribute: minimap_player_index \nRead_type: uint\nWrite_type: uint\nDescription: The player index this minimap is using.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "minimap_player_index"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.mouse_button_filter",
    "content": "Attribute: mouse_button_filter \nRead_type: MouseButtonFlags\nWrite_type: MouseButtonFlags\nDescription: The mouse button filters for this button or sprite-button.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "mouse_button_filter"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.name",
    "content": "Attribute: name \nRead_type: string\nWrite_type: string\nDescription: The name of this element. `\"\"` if no name was set.\nExamples: [\"```\\ngame.player.gui.top.greeting.name == \\\"greeting\\\"\\n```\"]",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.number",
    "content": "Attribute: number [Optional]\nRead_type: double\nWrite_type: double\nDescription: The number to be shown in the bottom right corner of this sprite-button, or `nil` to show nothing.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "number"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.numeric",
    "content": "Attribute: numeric \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether this textfield is limited to only numeric characters.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "numeric"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.parent",
    "content": "Attribute: parent [Optional]\nRead_type: LuaGuiElement\n\nDescription: The direct parent of this element. `nil` if this is a top-level element.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "parent"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.player_index",
    "content": "Attribute: player_index \nRead_type: uint\n\nDescription: Index into [LuaGameScript::players](runtime:LuaGameScript::players) specifying the player who owns this element.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "player_index"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.position",
    "content": "Attribute: position \nRead_type: MapPosition\nWrite_type: MapPosition\nDescription: The position this camera or minimap is focused on, if any.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "position"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.raise_hover_events",
    "content": "Attribute: raise_hover_events \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether this element will raise [on_gui_hover](runtime:on_gui_hover) and [on_gui_leave](runtime:on_gui_leave).\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "raise_hover_events"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.read_only",
    "content": "Attribute: read_only \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether this text-box is read-only. Defaults to `false`.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "read_only"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.resize_to_sprite",
    "content": "Attribute: resize_to_sprite \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether the sprite widget should resize according to the sprite in it. Defaults to `true`.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "resize_to_sprite"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.right_label_caption",
    "content": "Attribute: right_label_caption \nRead_type: LocalisedString\nWrite_type: LocalisedString\nDescription: The text shown for the right switch label.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "right_label_caption"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.right_label_tooltip",
    "content": "Attribute: right_label_tooltip \nRead_type: LocalisedString\nWrite_type: LocalisedString\nDescription: The tooltip shown on the right switch label.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "right_label_tooltip"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.selectable",
    "content": "Attribute: selectable \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether the contents of this text-box are selectable. Defaults to `true`.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "selectable"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.selected_index",
    "content": "Attribute: selected_index \nRead_type: uint\nWrite_type: uint\nDescription: The selected index for this dropdown or listbox. Returns `0` if none is selected.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "selected_index"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.selected_tab_index",
    "content": "Attribute: selected_tab_index [Optional]\nRead_type: uint\nWrite_type: uint\nDescription: The selected tab index for this tabbed pane, if any.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "selected_tab_index"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.show_percent_for_small_numbers",
    "content": "Attribute: show_percent_for_small_numbers \nRead_type: boolean\nWrite_type: boolean\nDescription: Related to the number to be shown in the bottom right corner of this sprite-button. When set to `true`, numbers that are non-zero and smaller than one are shown as a percentage rather than the value. For example, `0.5` will be shown as `50%` instead.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "show_percent_for_small_numbers"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.slider_value",
    "content": "Attribute: slider_value \nRead_type: double\nWrite_type: double\nDescription: The value of this slider element.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "slider_value"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.sprite",
    "content": "Attribute: sprite \nRead_type: SpritePath\nWrite_type: SpritePath\nDescription: The sprite to display on this sprite-button or sprite in the default state.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "sprite"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.state",
    "content": "Attribute: state \nRead_type: boolean\nWrite_type: boolean\nDescription: Is this checkbox or radiobutton checked?\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "state"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.style",
    "content": "Attribute: style \nRead_type: {'complex_type': 'union', 'options': ['LuaStyle', 'string'], 'full_format': False}\nWrite_type: {\"complex_type\": \"union\", \"options\": [\"LuaStyle\", \"string\"], \"full_format\": false}\nDescription: The style of this element. When read, this evaluates to a [LuaStyle](runtime:LuaStyle). For writing, it only accepts a string that specifies the textual identifier (prototype name) of the desired style.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "style"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.surface_index",
    "content": "Attribute: surface_index \nRead_type: uint\nWrite_type: uint\nDescription: The surface index this camera or minimap is using.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "surface_index"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.switch_state",
    "content": "Attribute: switch_state \nRead_type: SwitchState\nWrite_type: SwitchState\nDescription: The switch state for this switch.\n\nIf [LuaGuiElement::allow_none_state](runtime:LuaGuiElement::allow_none_state) is false this can't be set to `\"none\"`.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "switch_state"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.tabs",
    "content": "Attribute: tabs \nRead_type: {'complex_type': 'array', 'value': 'TabAndContent'}\n\nDescription: The tabs and contents being shown in this tabbed-pane.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "tabs"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.tags",
    "content": "Attribute: tags \nRead_type: Tags\nWrite_type: Tags\nDescription: The tags associated with this LuaGuiElement.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "tags"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.text",
    "content": "Attribute: text \nRead_type: string\nWrite_type: string\nDescription: The text contained in this textfield or text-box.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "text"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.toggled",
    "content": "Attribute: toggled \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether this button is currently toggled. When a button is toggled, it will use the `selected_graphical_set` and `selected_font_color` defined in its style.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "toggled"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.tooltip",
    "content": "Attribute: tooltip \nRead_type: LocalisedString\nWrite_type: LocalisedString\nDescription: The text to display when hovering over this element. Writing `\"\"` or `nil` will disable the tooltip.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "tooltip"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.type",
    "content": "Attribute: type \nRead_type: GuiElementType\n\nDescription: The type of this GUI element.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "valid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.value",
    "content": "Attribute: value \nRead_type: double\nWrite_type: double\nDescription: How much this progress bar is filled. It is a value in the range `[0, 1]`.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "value"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.vertical_centering",
    "content": "Attribute: vertical_centering \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether the content of this table should be vertically centered. Overrides [LuaStyle::column_alignments](runtime:LuaStyle::column_alignments). Defaults to `true`.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "vertical_centering"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.vertical_scroll_policy",
    "content": "Attribute: vertical_scroll_policy \nRead_type: ScrollPolicy\nWrite_type: ScrollPolicy\nDescription: Policy of the vertical scroll bar.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "vertical_scroll_policy"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.visible",
    "content": "Attribute: visible \nRead_type: boolean\nWrite_type: boolean\nDescription: Sets whether this GUI element is visible or completely hidden, taking no space in the layout.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "visible"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.word_wrap",
    "content": "Attribute: word_wrap \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether this text-box will word-wrap automatically. Defaults to `false`.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "word_wrap"
    }
  },
  {
    "type": "attribute",
    "name": "LuaGuiElement.zoom",
    "content": "Attribute: zoom \nRead_type: double\nWrite_type: double\nDescription: The zoom this camera or minimap is using. This value must be positive.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "attribute_name": "zoom"
    }
  },
  {
    "type": "operator",
    "name": "LuaGuiElement.index",
    "content": "Operator: index [Optional]\nRead_type: LuaGuiElement\n\nDescription: The indexing operator. Gets children by name.\n",
    "metadata": {
      "class_name": "LuaGuiElement",
      "operator_name": "index"
    }
  },
  {
    "type": "class",
    "name": "LuaHeatBufferPrototype",
    "content": "Class: LuaHeatBufferPrototype\nDescription: Prototype of a heat buffer.",
    "metadata": {
      "class_name": "LuaHeatBufferPrototype",
      "parent_class": null
    }
  },
  {
    "type": "attribute",
    "name": "LuaHeatBufferPrototype.connections",
    "content": "Attribute: connections \nRead_type: {'complex_type': 'array', 'value': 'HeatConnection'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaHeatBufferPrototype",
      "attribute_name": "connections"
    }
  },
  {
    "type": "attribute",
    "name": "LuaHeatBufferPrototype.default_temperature",
    "content": "Attribute: default_temperature \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaHeatBufferPrototype",
      "attribute_name": "default_temperature"
    }
  },
  {
    "type": "attribute",
    "name": "LuaHeatBufferPrototype.max_temperature",
    "content": "Attribute: max_temperature \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaHeatBufferPrototype",
      "attribute_name": "max_temperature"
    }
  },
  {
    "type": "attribute",
    "name": "LuaHeatBufferPrototype.max_transfer",
    "content": "Attribute: max_transfer \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaHeatBufferPrototype",
      "attribute_name": "max_transfer"
    }
  },
  {
    "type": "attribute",
    "name": "LuaHeatBufferPrototype.min_temperature_gradient",
    "content": "Attribute: min_temperature_gradient \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaHeatBufferPrototype",
      "attribute_name": "min_temperature_gradient"
    }
  },
  {
    "type": "attribute",
    "name": "LuaHeatBufferPrototype.min_working_temperature",
    "content": "Attribute: min_working_temperature \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaHeatBufferPrototype",
      "attribute_name": "min_working_temperature"
    }
  },
  {
    "type": "attribute",
    "name": "LuaHeatBufferPrototype.minimum_glow_temperature",
    "content": "Attribute: minimum_glow_temperature \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaHeatBufferPrototype",
      "attribute_name": "minimum_glow_temperature"
    }
  },
  {
    "type": "attribute",
    "name": "LuaHeatBufferPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaHeatBufferPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaHeatBufferPrototype.specific_heat",
    "content": "Attribute: specific_heat \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaHeatBufferPrototype",
      "attribute_name": "specific_heat"
    }
  },
  {
    "type": "attribute",
    "name": "LuaHeatBufferPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaHeatBufferPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaHeatEnergySourcePrototype",
    "content": "Class: LuaHeatEnergySourcePrototype\nDescription: Prototype of a heat energy source.",
    "metadata": {
      "class_name": "LuaHeatEnergySourcePrototype",
      "parent_class": null
    }
  },
  {
    "type": "attribute",
    "name": "LuaHeatEnergySourcePrototype.connections",
    "content": "Attribute: connections \nRead_type: {'complex_type': 'array', 'value': 'HeatConnection'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaHeatEnergySourcePrototype",
      "attribute_name": "connections"
    }
  },
  {
    "type": "attribute",
    "name": "LuaHeatEnergySourcePrototype.default_temperature",
    "content": "Attribute: default_temperature \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaHeatEnergySourcePrototype",
      "attribute_name": "default_temperature"
    }
  },
  {
    "type": "attribute",
    "name": "LuaHeatEnergySourcePrototype.emissions_per_joule",
    "content": "Attribute: emissions_per_joule \nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'double'}\n\nDescription: The table of emissions of this energy source in `pollution/Joule`, indexed by pollutant type. Multiplying it by energy consumption in `Watt` gives `pollution/second`.",
    "metadata": {
      "class_name": "LuaHeatEnergySourcePrototype",
      "attribute_name": "emissions_per_joule"
    }
  },
  {
    "type": "attribute",
    "name": "LuaHeatEnergySourcePrototype.heat_buffer_prototype",
    "content": "Attribute: heat_buffer_prototype \nRead_type: LuaHeatBufferPrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaHeatEnergySourcePrototype",
      "attribute_name": "heat_buffer_prototype"
    }
  },
  {
    "type": "attribute",
    "name": "LuaHeatEnergySourcePrototype.max_temperature",
    "content": "Attribute: max_temperature \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaHeatEnergySourcePrototype",
      "attribute_name": "max_temperature"
    }
  },
  {
    "type": "attribute",
    "name": "LuaHeatEnergySourcePrototype.max_transfer",
    "content": "Attribute: max_transfer \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaHeatEnergySourcePrototype",
      "attribute_name": "max_transfer"
    }
  },
  {
    "type": "attribute",
    "name": "LuaHeatEnergySourcePrototype.min_temperature_gradient",
    "content": "Attribute: min_temperature_gradient \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaHeatEnergySourcePrototype",
      "attribute_name": "min_temperature_gradient"
    }
  },
  {
    "type": "attribute",
    "name": "LuaHeatEnergySourcePrototype.min_working_temperature",
    "content": "Attribute: min_working_temperature \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaHeatEnergySourcePrototype",
      "attribute_name": "min_working_temperature"
    }
  },
  {
    "type": "attribute",
    "name": "LuaHeatEnergySourcePrototype.minimum_glow_temperature",
    "content": "Attribute: minimum_glow_temperature \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaHeatEnergySourcePrototype",
      "attribute_name": "minimum_glow_temperature"
    }
  },
  {
    "type": "attribute",
    "name": "LuaHeatEnergySourcePrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaHeatEnergySourcePrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaHeatEnergySourcePrototype.render_no_network_icon",
    "content": "Attribute: render_no_network_icon \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaHeatEnergySourcePrototype",
      "attribute_name": "render_no_network_icon"
    }
  },
  {
    "type": "attribute",
    "name": "LuaHeatEnergySourcePrototype.render_no_power_icon",
    "content": "Attribute: render_no_power_icon \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaHeatEnergySourcePrototype",
      "attribute_name": "render_no_power_icon"
    }
  },
  {
    "type": "attribute",
    "name": "LuaHeatEnergySourcePrototype.specific_heat",
    "content": "Attribute: specific_heat \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaHeatEnergySourcePrototype",
      "attribute_name": "specific_heat"
    }
  },
  {
    "type": "attribute",
    "name": "LuaHeatEnergySourcePrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaHeatEnergySourcePrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaHelpers",
    "content": "Class: LuaHelpers\nDescription: Provides various helper and utility functions. It is accessible through the global object named `helpers`.",
    "metadata": {
      "class_name": "LuaHelpers",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaHelpers.check_prototype_translations",
    "content": "Method: LuaHelpers.check_prototype_translations\nDescription: Goes over all items, entities, tiles, recipes, technologies among other things and logs if the locale is incorrect.\n\nAlso prints true/false if called from the console.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaHelpers",
      "method_name": "check_prototype_translations"
    }
  },
  {
    "type": "method",
    "name": "LuaHelpers.create_profiler",
    "content": "Method: LuaHelpers.create_profiler\nDescription: Creates a [LuaProfiler](runtime:LuaProfiler), which is used for measuring script performance.\n\nLuaProfiler cannot be serialized.\n\nParameters:\n- stopped (boolean)[Optional]: Create the timer stopped\n\nReturns:\n- LuaProfiler: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaHelpers",
      "method_name": "create_profiler"
    }
  },
  {
    "type": "method",
    "name": "LuaHelpers.decode_string",
    "content": "Method: LuaHelpers.decode_string\nDescription: Base64 decodes and inflates the given string.\n\nParameters:\n- string (string): The string to decode.\n\nReturns:\n- string: The decoded string or `nil` if the decode failed.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaHelpers",
      "method_name": "decode_string"
    }
  },
  {
    "type": "method",
    "name": "LuaHelpers.direction_to_string",
    "content": "Method: LuaHelpers.direction_to_string\nDescription: Converts the given direction into the string version of the direction.\n\nParameters:\n- direction (defines.direction): \n\nReturns:\n- string: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaHelpers",
      "method_name": "direction_to_string"
    }
  },
  {
    "type": "method",
    "name": "LuaHelpers.encode_string",
    "content": "Method: LuaHelpers.encode_string\nDescription: Deflates and base64 encodes the given string.\n\nParameters:\n- string (string): The string to encode.\n\nReturns:\n- string: The encoded string or `nil` if the encode failed.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaHelpers",
      "method_name": "encode_string"
    }
  },
  {
    "type": "method",
    "name": "LuaHelpers.evaluate_expression",
    "content": "Method: LuaHelpers.evaluate_expression\nDescription: Evaluate an expression, substituting variables as provided.\n\nParameters:\n- expression (MathExpression): The expression to evaluate.\n- variables ({'complex_type': 'dictionary', 'key': 'string', 'value': 'double'})[Optional]: Variables to be substituted.\n\nReturns:\n- double:",
    "metadata": {
      "class_name": "LuaHelpers",
      "method_name": "evaluate_expression"
    }
  },
  {
    "type": "method",
    "name": "LuaHelpers.evaluate_expression",
    "content": "Returns:\n- double: \n\nExamples:\n```\n-- Calculate the number of research units required to unlock mining productivity level 10\nlocal formula = game.forces[\"player\"].technologies[\"mining-productivity-4\"].research_unit_count_formula\nlocal units = helpers.evaluate_expression(formula, { L = 10, l = 10 })\n```\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaHelpers",
      "method_name": "evaluate_expression"
    }
  },
  {
    "type": "method",
    "name": "LuaHelpers.is_valid_sound_path",
    "content": "Method: LuaHelpers.is_valid_sound_path\nDescription: Checks if the given SoundPath is valid.\n\nParameters:\n- sound_path (SoundPath): Path to the sound.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaHelpers",
      "method_name": "is_valid_sound_path"
    }
  },
  {
    "type": "method",
    "name": "LuaHelpers.is_valid_sprite_path",
    "content": "Method: LuaHelpers.is_valid_sprite_path\nDescription: Checks if the given SpritePath is valid and contains a loaded sprite. The existence of the image is not checked for paths of type `file`.\n\nParameters:\n- sprite_path (SpritePath): Path to the image.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaHelpers",
      "method_name": "is_valid_sprite_path"
    }
  },
  {
    "type": "method",
    "name": "LuaHelpers.json_to_table",
    "content": "Method: LuaHelpers.json_to_table\nDescription: Convert a JSON string to a table.\n\nParameters:\n- json (string): The string to convert.\n\nReturns:\n- AnyBasic: The returned object, or `nil` if the JSON string was invalid.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaHelpers",
      "method_name": "json_to_table"
    }
  },
  {
    "type": "method",
    "name": "LuaHelpers.parse_map_exchange_string",
    "content": "Method: LuaHelpers.parse_map_exchange_string\nDescription: Convert a map exchange string to map gen settings and map settings.\n\nParameters:\n- map_exchange_string (string): \n\nReturns:\n- MapExchangeStringData: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaHelpers",
      "method_name": "parse_map_exchange_string"
    }
  },
  {
    "type": "method",
    "name": "LuaHelpers.remove_path",
    "content": "Method: LuaHelpers.remove_path\nDescription: Remove a file or directory in the `script-output` folder, located in the game's [user data directory](https://wiki.factorio.com/User_data_directory). Can be used to remove files created by [LuaHelpers::write_file](runtime:LuaHelpers::write_file).\n\nParameters:\n- path (string): The path to the file or directory to remove, relative to `script-output`.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaHelpers",
      "method_name": "remove_path"
    }
  },
  {
    "type": "method",
    "name": "LuaHelpers.table_to_json",
    "content": "Method: LuaHelpers.table_to_json\nDescription: Convert a table to a JSON string\n\nParameters:\n- data (table): \n\nReturns:\n- string: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaHelpers",
      "method_name": "table_to_json"
    }
  },
  {
    "type": "method",
    "name": "LuaHelpers.write_file",
    "content": "Method: LuaHelpers.write_file\nDescription: Write a file to the `script-output` folder, located in the game's [user data directory](https://wiki.factorio.com/User_data_directory). The name and file extension of the file can be specified via the `filename` parameter.",
    "metadata": {
      "class_name": "LuaHelpers",
      "method_name": "write_file"
    }
  },
  {
    "type": "method",
    "name": "LuaHelpers.write_file",
    "content": "Parameters:\n- append (boolean)[Optional]: If `true`, `data` will be appended to the end of the file. Defaults to `false`, which will overwrite any pre-existing file with the new `data`.\n- data (LocalisedString): The content to write to the file.\n- filename (string): The name of the file. Providing a directory path (ex. `\"save/here/example.txt\"`) will create the necessary folder structure in `script-output`.",
    "metadata": {
      "class_name": "LuaHelpers",
      "method_name": "write_file"
    }
  },
  {
    "type": "method",
    "name": "LuaHelpers.write_file",
    "content": "- for_player (uint)[Optional]: If given, the file will only be written for this `player_index`. Providing `0` will only write to the server's output if present.",
    "metadata": {
      "class_name": "LuaHelpers",
      "method_name": "write_file"
    }
  },
  {
    "type": "method",
    "name": "LuaHelpers.write_file",
    "content": "Format:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaHelpers",
      "method_name": "write_file"
    }
  },
  {
    "type": "attribute",
    "name": "LuaHelpers.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaHelpers",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "class",
    "name": "LuaInserterControlBehavior",
    "content": "Class: LuaInserterControlBehavior\nDescription: Control behavior for inserters.",
    "metadata": {
      "class_name": "LuaInserterControlBehavior",
      "parent_class": "LuaGenericOnOffControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaInserterControlBehavior.circuit_hand_read_mode",
    "content": "Attribute: circuit_hand_read_mode \nRead_type: defines.control_behavior.inserter.hand_read_mode\nWrite_type: defines.control_behavior.inserter.hand_read_mode\nDescription: The hand read mode for the inserter.\n",
    "metadata": {
      "class_name": "LuaInserterControlBehavior",
      "attribute_name": "circuit_hand_read_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaInserterControlBehavior.circuit_read_hand_contents",
    "content": "Attribute: circuit_read_hand_contents \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if the contents of the inserter hand should be sent to the circuit network\n",
    "metadata": {
      "class_name": "LuaInserterControlBehavior",
      "attribute_name": "circuit_read_hand_contents"
    }
  },
  {
    "type": "attribute",
    "name": "LuaInserterControlBehavior.circuit_set_filters",
    "content": "Attribute: circuit_set_filters \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if filters are set from circuit network\n",
    "metadata": {
      "class_name": "LuaInserterControlBehavior",
      "attribute_name": "circuit_set_filters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaInserterControlBehavior.circuit_set_stack_size",
    "content": "Attribute: circuit_set_stack_size \nRead_type: boolean\nWrite_type: boolean\nDescription: If the stack size of the inserter is set through the circuit network or not.\n",
    "metadata": {
      "class_name": "LuaInserterControlBehavior",
      "attribute_name": "circuit_set_stack_size"
    }
  },
  {
    "type": "attribute",
    "name": "LuaInserterControlBehavior.circuit_stack_control_signal",
    "content": "Attribute: circuit_stack_control_signal [Optional]\nRead_type: SignalID\nWrite_type: SignalID\nDescription: The signal used to set the stack size of the inserter.\n",
    "metadata": {
      "class_name": "LuaInserterControlBehavior",
      "attribute_name": "circuit_stack_control_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaInserterControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaInserterControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaInserterControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaInserterControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaInventory",
    "content": "Class: LuaInventory\nDescription: A storage of item stacks.",
    "metadata": {
      "class_name": "LuaInventory",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaInventory.can_insert",
    "content": "Method: LuaInventory.can_insert\nDescription: Can at least some items be inserted?\n\nParameters:\n- items (ItemStackIdentification): Items that would be inserted.\n\nReturns:\n- boolean: `true` if at least a part of the given items could be inserted into this inventory.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaInventory",
      "method_name": "can_insert"
    }
  },
  {
    "type": "method",
    "name": "LuaInventory.can_set_filter",
    "content": "Method: LuaInventory.can_set_filter\nDescription: If the given inventory slot filter can be set to the given filter.\n\nParameters:\n- filter (ItemFilter): The item filter\n- index (uint): The item stack index\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaInventory",
      "method_name": "can_set_filter"
    }
  },
  {
    "type": "method",
    "name": "LuaInventory.clear",
    "content": "Method: LuaInventory.clear\nDescription: Make this inventory empty.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaInventory",
      "method_name": "clear"
    }
  },
  {
    "type": "method",
    "name": "LuaInventory.count_empty_stacks",
    "content": "Method: LuaInventory.count_empty_stacks\nDescription: Counts the number of empty stacks.\n\nParameters:\n- include_bar (boolean)[Optional]: If true, slots blocked by the current bar will be included. Defaults to true.\n- include_filtered (boolean)[Optional]: If true, filtered slots will be included. Defaults to false.\n\nReturns:\n- uint: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaInventory",
      "method_name": "count_empty_stacks"
    }
  },
  {
    "type": "method",
    "name": "LuaInventory.destroy",
    "content": "Method: LuaInventory.destroy\nDescription: Destroys this inventory.\n\nOnly inventories created by [LuaGameScript::create_inventory](runtime:LuaGameScript::create_inventory) can be destroyed this way.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaInventory",
      "method_name": "destroy"
    }
  },
  {
    "type": "method",
    "name": "LuaInventory.find_empty_stack",
    "content": "Method: LuaInventory.find_empty_stack\nDescription: Finds the first empty stack. Filtered slots are excluded unless a filter item is given.\n\nParameters:\n- item (ItemWithQualityID)[Optional]: If given, empty stacks that are filtered for this item will be included.\n\nReturns:\n- LuaItemStack: The first empty stack, or `nil` if there aren't any empty stacks.\n- uint: The stack index of the matching stack, if any is found.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaInventory",
      "method_name": "find_empty_stack"
    }
  },
  {
    "type": "method",
    "name": "LuaInventory.find_item_stack",
    "content": "Method: LuaInventory.find_item_stack\nDescription: Finds the first LuaItemStack in the inventory that matches the given item name.\n\nParameters:\n- item (ItemWithQualityID): The item to find\n\nReturns:\n- LuaItemStack: The first matching stack, or `nil` if none match.\n- uint: The stack index of the matching stack, if any is found.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaInventory",
      "method_name": "find_item_stack"
    }
  },
  {
    "type": "method",
    "name": "LuaInventory.get_bar",
    "content": "Method: LuaInventory.get_bar\nDescription: Get the current bar. This is the index at which the red area starts.\n\nOnly useable if this inventory supports having a bar.\n\nReturns:\n- uint: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaInventory",
      "method_name": "get_bar"
    }
  },
  {
    "type": "method",
    "name": "LuaInventory.get_contents",
    "content": "Method: LuaInventory.get_contents\nDescription: Get counts of all items in this inventory.\n\nReturns:\n- {'complex_type': 'array', 'value': 'ItemWithQualityCounts'}: List of all items in the inventory.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaInventory",
      "method_name": "get_contents"
    }
  },
  {
    "type": "method",
    "name": "LuaInventory.get_filter",
    "content": "Method: LuaInventory.get_filter\nDescription: Gets the filter for the given item stack index.\n\nParameters:\n- index (uint): The item stack index\n\nReturns:\n- ItemFilter: The current filter or `nil` if none.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaInventory",
      "method_name": "get_filter"
    }
  },
  {
    "type": "method",
    "name": "LuaInventory.get_insertable_count",
    "content": "Method: LuaInventory.get_insertable_count\nDescription: Gets the number of the given item that can be inserted into this inventory.\n\nThis is a \"best guess\" number; things like assembling machine filtered slots, module slots, items with durability, and items with mixed health will cause the result to be inaccurate. The main use for this is in checking how many of a basic item can fit into a basic inventory.\n\nThis accounts for the 'bar' on the inventory.",
    "metadata": {
      "class_name": "LuaInventory",
      "method_name": "get_insertable_count"
    }
  },
  {
    "type": "method",
    "name": "LuaInventory.get_insertable_count",
    "content": "This accounts for the 'bar' on the inventory.\n\nParameters:\n- item (ItemWithQualityID): The item to check.\n\nReturns:\n- uint: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaInventory",
      "method_name": "get_insertable_count"
    }
  },
  {
    "type": "method",
    "name": "LuaInventory.get_item_count",
    "content": "Method: LuaInventory.get_item_count\nDescription: Get the number of all or some items in this inventory.\n\nParameters:\n- item (ItemWithQualityID)[Optional]: The item to count. If not specified, count all items.\n\nReturns:\n- uint: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaInventory",
      "method_name": "get_item_count"
    }
  },
  {
    "type": "method",
    "name": "LuaInventory.insert",
    "content": "Method: LuaInventory.insert\nDescription: Insert items into this inventory.\n\nParameters:\n- items (ItemStackIdentification): Items to insert.\n\nReturns:\n- uint: Number of items actually inserted.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaInventory",
      "method_name": "insert"
    }
  },
  {
    "type": "method",
    "name": "LuaInventory.is_empty",
    "content": "Method: LuaInventory.is_empty\nDescription: Does this inventory contain nothing?\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaInventory",
      "method_name": "is_empty"
    }
  },
  {
    "type": "method",
    "name": "LuaInventory.is_filtered",
    "content": "Method: LuaInventory.is_filtered\nDescription: If this inventory supports filters and has at least 1 filter set.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaInventory",
      "method_name": "is_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaInventory.is_full",
    "content": "Method: LuaInventory.is_full\nDescription: Is every stack in this inventory full? Ignores stacks blocked by the current bar.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaInventory",
      "method_name": "is_full"
    }
  },
  {
    "type": "method",
    "name": "LuaInventory.remove",
    "content": "Method: LuaInventory.remove\nDescription: Remove items from this inventory.\n\nParameters:\n- items (ItemStackIdentification): Items to remove.\n\nReturns:\n- uint: Number of items actually removed.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaInventory",
      "method_name": "remove"
    }
  },
  {
    "type": "method",
    "name": "LuaInventory.resize",
    "content": "Method: LuaInventory.resize\nDescription: Resizes the inventory.\n\nItems in slots beyond the new capacity are deleted.\n\nOnly inventories created by [LuaGameScript::create_inventory](runtime:LuaGameScript::create_inventory) can be resized.\n\nParameters:\n- size (uint16): New size of a inventory\n\nRaises:\n- on_pre_script_inventory_resized: \n- on_script_inventory_resized: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaInventory",
      "method_name": "resize"
    }
  },
  {
    "type": "method",
    "name": "LuaInventory.set_bar",
    "content": "Method: LuaInventory.set_bar\nDescription: Set the current bar.\n\nOnly useable if this inventory supports having a bar.\n\nParameters:\n- bar (uint)[Optional]: The new limit. Omitting this parameter will clear the limit.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaInventory",
      "method_name": "set_bar"
    }
  },
  {
    "type": "method",
    "name": "LuaInventory.set_filter",
    "content": "Method: LuaInventory.set_filter\nDescription: Sets the filter for the given item stack index.\n\nSome inventory slots don't allow some filters (gun ammo can't be filtered for non-ammo).\n\nParameters:\n- filter ({'complex_type': 'union', 'options': ['ItemFilter', 'nil'], 'full_format': False}): The new filter. `nil` erases any existing filter.\n- index (uint): The item stack index.\n\nReturns:\n- boolean: If the filter was allowed to be set.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaInventory",
      "method_name": "set_filter"
    }
  },
  {
    "type": "method",
    "name": "LuaInventory.sort_and_merge",
    "content": "Method: LuaInventory.sort_and_merge\nDescription: Sorts and merges the items in this inventory.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaInventory",
      "method_name": "sort_and_merge"
    }
  },
  {
    "type": "method",
    "name": "LuaInventory.supports_bar",
    "content": "Method: LuaInventory.supports_bar\nDescription: Does this inventory support a bar? Bar is the draggable red thing, found for example on chests, that limits the portion of the inventory that may be manipulated by machines.\n\n\"Supporting a bar\" doesn't mean that the bar is set to some nontrivial value. Supporting a bar means the inventory supports having this limit at all. The character's inventory is an example of an inventory without a bar; the wooden chest's inventory is an example of one with a bar.",
    "metadata": {
      "class_name": "LuaInventory",
      "method_name": "supports_bar"
    }
  },
  {
    "type": "method",
    "name": "LuaInventory.supports_bar",
    "content": "Returns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaInventory",
      "method_name": "supports_bar"
    }
  },
  {
    "type": "method",
    "name": "LuaInventory.supports_filters",
    "content": "Method: LuaInventory.supports_filters\nDescription: If this inventory supports filters.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaInventory",
      "method_name": "supports_filters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaInventory.entity_owner",
    "content": "Attribute: entity_owner [Optional]\nRead_type: LuaEntity\n\nDescription: The entity that owns this inventory, if any.\n",
    "metadata": {
      "class_name": "LuaInventory",
      "attribute_name": "entity_owner"
    }
  },
  {
    "type": "attribute",
    "name": "LuaInventory.equipment_owner",
    "content": "Attribute: equipment_owner [Optional]\nRead_type: LuaEquipment\n\nDescription: The equipment that owns this inventory, if any.\n",
    "metadata": {
      "class_name": "LuaInventory",
      "attribute_name": "equipment_owner"
    }
  },
  {
    "type": "attribute",
    "name": "LuaInventory.index",
    "content": "Attribute: index [Optional]\nRead_type: defines.inventory\n\nDescription: The inventory index this inventory uses, if any.\n",
    "metadata": {
      "class_name": "LuaInventory",
      "attribute_name": "index"
    }
  },
  {
    "type": "attribute",
    "name": "LuaInventory.mod_owner",
    "content": "Attribute: mod_owner [Optional]\nRead_type: string\n\nDescription: The mod that owns this inventory, if any.\n",
    "metadata": {
      "class_name": "LuaInventory",
      "attribute_name": "mod_owner"
    }
  },
  {
    "type": "attribute",
    "name": "LuaInventory.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaInventory",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaInventory.player_owner",
    "content": "Attribute: player_owner [Optional]\nRead_type: LuaPlayer\n\nDescription: The player that owns this inventory, if any.\n",
    "metadata": {
      "class_name": "LuaInventory",
      "attribute_name": "player_owner"
    }
  },
  {
    "type": "attribute",
    "name": "LuaInventory.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaInventory",
      "attribute_name": "valid"
    }
  },
  {
    "type": "operator",
    "name": "LuaInventory.index",
    "content": "Operator: index \nRead_type: LuaItemStack\n\nDescription: The indexing operator.\nExamples: [\"```\\n-- Will get the first item in the player's inventory.\\ngame.player.get_main_inventory()[1]\\n```\"]",
    "metadata": {
      "class_name": "LuaInventory",
      "operator_name": "index"
    }
  },
  {
    "type": "operator",
    "name": "LuaInventory.length",
    "content": "Operator: length \nRead_type: uint\n\nDescription: Get the number of slots in this inventory.\nExamples: [\"```\\n-- Will print the number of slots in the player's main inventory.\\ngame.player.print(#game.player.get_main_inventory())\\n```\"]",
    "metadata": {
      "class_name": "LuaInventory",
      "operator_name": "length"
    }
  },
  {
    "type": "class",
    "name": "LuaItem",
    "content": "Class: LuaItem\nDescription: A reference to an item with data. In contrast to LuaItemStack, this is binding to a specific item data even if it would move between entities or inventories.",
    "metadata": {
      "class_name": "LuaItem",
      "parent_class": "LuaItemCommon"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItem.item_stack",
    "content": "Attribute: item_stack [Optional]\nRead_type: LuaItemStack\n\nDescription: Object representing the item stack this item is located in right now. If its not possible to locate the item stack holding this item, a nil will be returned\n",
    "metadata": {
      "class_name": "LuaItem",
      "attribute_name": "item_stack"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItem.name",
    "content": "Attribute: name \nRead_type: string\n\nDescription: Name of the item prototype\n",
    "metadata": {
      "class_name": "LuaItem",
      "attribute_name": "name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItem.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaItem",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItem.prototype",
    "content": "Attribute: prototype \nRead_type: LuaItemPrototype\n\nDescription: Item prototype of this item\n",
    "metadata": {
      "class_name": "LuaItem",
      "attribute_name": "prototype"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItem.quality",
    "content": "Attribute: quality \nRead_type: LuaQualityPrototype\n\nDescription: The quality of this item.\n",
    "metadata": {
      "class_name": "LuaItem",
      "attribute_name": "quality"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItem.type",
    "content": "Attribute: type \nRead_type: string\n\nDescription: Type of the item prototype\n",
    "metadata": {
      "class_name": "LuaItem",
      "attribute_name": "type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItem.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaItem",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaItemCommon",
    "content": "Class: LuaItemCommon\nDescription: Common methods related to usage of item with data. It is useful when LuaItemStack contains item with data or in general with LuaItem as it can only point at an item with data.",
    "metadata": {
      "class_name": "LuaItemCommon",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.build_blueprint",
    "content": "Method: LuaItemCommon.build_blueprint\nDescription: Build this blueprint at the given location.\n\nBuilt entities can be come invalid between the building of the blueprint and the function returning if by_player or raise_built is used and one of those events invalidates the entity.",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "build_blueprint"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.build_blueprint",
    "content": "Parameters:\n- build_mode (defines.build_mode)[Optional]: If `normal`, blueprint will not be built if any one thing can't be built. If `forced`, anything that can be built is built and obstructing nature entities will be deconstructed. If `superforced`, all obstructions will be deconstructed and the blueprint will be built.",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "build_blueprint"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.build_blueprint",
    "content": "- by_player (PlayerIdentification)[Optional]: The player to use if any. If provided [defines.events.on_built_entity](runtime:defines.events.on_built_entity) will also be fired on successful entity creation.\n- direction (defines.direction)[Optional]: The direction to use when building\n- force (ForceID): Force to use for the building\n- position (MapPosition): The position to build at",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "build_blueprint"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.build_blueprint",
    "content": "- position (MapPosition): The position to build at\n- raise_built (boolean)[Optional]: If true; [defines.events.script_raised_built](runtime:defines.events.script_raised_built) will be fired on successful entity creation. Note: this is ignored if by_player is provided.\n- skip_fog_of_war (boolean)[Optional]: If chunks covered by fog-of-war are skipped.\n- surface (SurfaceIdentification): Surface to build on",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "build_blueprint"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.build_blueprint",
    "content": "Returns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}: Array of created ghosts\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "build_blueprint"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.cancel_deconstruct_area",
    "content": "Method: LuaItemCommon.cancel_deconstruct_area\nDescription: Cancel deconstruct the given area with this deconstruction item.",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "cancel_deconstruct_area"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.cancel_deconstruct_area",
    "content": "Parameters:\n- area (BoundingBox): The area to deconstruct\n- by_player (PlayerIdentification)[Optional]: The player to use if any.\n- force (ForceID): Force to use for canceling deconstruction\n- skip_fog_of_war (boolean)[Optional]: If chunks covered by fog-of-war are skipped. Defaults to `false`.\n- super_forced (boolean)[Optional]: If the cancel deconstruction is super-forced. Defaults to `false`.\n- surface (SurfaceIdentification): Surface to cancel deconstruct on",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "cancel_deconstruct_area"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.cancel_deconstruct_area",
    "content": "Format:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "cancel_deconstruct_area"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.clear_blueprint",
    "content": "Method: LuaItemCommon.clear_blueprint\nDescription: Clears this blueprint item.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "clear_blueprint"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.clear_deconstruction_item",
    "content": "Method: LuaItemCommon.clear_deconstruction_item\nDescription: Clears all settings/filters on this deconstruction item resetting it to default values.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "clear_deconstruction_item"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.clear_upgrade_item",
    "content": "Method: LuaItemCommon.clear_upgrade_item\nDescription: Clears all settings/filters on this upgrade item resetting it to default values.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "clear_upgrade_item"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.create_blueprint",
    "content": "Method: LuaItemCommon.create_blueprint\nDescription: Sets up this blueprint using the found blueprintable entities/tiles on the surface.",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "create_blueprint"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.create_blueprint",
    "content": "Parameters:\n- always_include_tiles (boolean)[Optional]: When true, blueprintable tiles are always included in the blueprint. When false they're only included if no entities exist in the setup area. Defaults to false.\n- area (BoundingBox): The bounding box\n- force (ForceID): Force to use for the creation\n- include_entities (boolean)[Optional]: When true, entities are included in the blueprint. Defaults to true.",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "create_blueprint"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.create_blueprint",
    "content": "- include_fuel (boolean)[Optional]: When true, train fuel is included in the blueprint, Defaults to true.\n- include_modules (boolean)[Optional]: When true, modules are included in the blueprint. Defaults to true.\n- include_station_names (boolean)[Optional]: When true, station names are included in the blueprint. Defaults to false.\n- include_trains (boolean)[Optional]: When true, trains are included in the blueprint. Defaults to false.\n- surface (SurfaceIdentification): Surface to create from",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "create_blueprint"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.create_blueprint",
    "content": "Returns:\n- {'complex_type': 'dictionary', 'key': 'uint', 'value': 'LuaEntity'}: The blueprint entity index to source entity mapping.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "create_blueprint"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.deconstruct_area",
    "content": "Method: LuaItemCommon.deconstruct_area\nDescription: Deconstruct the given area with this deconstruction item.",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "deconstruct_area"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.deconstruct_area",
    "content": "Parameters:\n- area (BoundingBox): The area to deconstruct\n- by_player (PlayerIdentification)[Optional]: The player to use if any.\n- force (ForceID): Force to use for the deconstruction\n- skip_fog_of_war (boolean)[Optional]: If chunks covered by fog-of-war are skipped. Defaults to `false`.\n- super_forced (boolean)[Optional]: If the deconstruction is super-forced. Defaults to `false`.\n- surface (SurfaceIdentification): Surface to deconstruct on\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "deconstruct_area"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.get_blueprint_entities",
    "content": "Method: LuaItemCommon.get_blueprint_entities\nDescription: The entities in this blueprint.\n\nReturns:\n- {'complex_type': 'array', 'value': 'BlueprintEntity'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "get_blueprint_entities"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.get_blueprint_entity_count",
    "content": "Method: LuaItemCommon.get_blueprint_entity_count\nDescription: Gets the number of entities in this blueprint item.\n\nReturns:\n- uint: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "get_blueprint_entity_count"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.get_blueprint_entity_tag",
    "content": "Method: LuaItemCommon.get_blueprint_entity_tag\nDescription: Gets the given tag on the given blueprint entity index in this blueprint item.\n\nParameters:\n- index (uint): The entity index.\n- tag (string): The tag to get.\n\nReturns:\n- AnyBasic: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "get_blueprint_entity_tag"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.get_blueprint_entity_tags",
    "content": "Method: LuaItemCommon.get_blueprint_entity_tags\nDescription: Gets the tags for the given blueprint entity index in this blueprint item.\n\nParameters:\n- index (uint): \n\nReturns:\n- Tags: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "get_blueprint_entity_tags"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.get_blueprint_tiles",
    "content": "Method: LuaItemCommon.get_blueprint_tiles\nDescription: A list of the tiles in this blueprint.\n\nReturns:\n- {'complex_type': 'array', 'value': 'Tile'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "get_blueprint_tiles"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.get_entity_filter",
    "content": "Method: LuaItemCommon.get_entity_filter\nDescription: Gets the entity filter at the given index for this deconstruction item.\n\nParameters:\n- index (uint): \n\nReturns:\n- ItemFilter: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "get_entity_filter"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.get_inventory",
    "content": "Method: LuaItemCommon.get_inventory\nDescription: Access the inner inventory of an item.\n\nParameters:\n- inventory (defines.inventory): Index of the inventory to access, which can only be [defines.inventory.item_main](runtime:defines.inventory.item_main).\n\nReturns:\n- LuaInventory: `nil` if there is no inventory with the given index.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "get_inventory"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.get_mapper",
    "content": "Method: LuaItemCommon.get_mapper\nDescription: Gets the filter at the given index for this upgrade item.\n\nIn contrast to [LuaItemCommon::set_mapper](runtime:LuaItemCommon::set_mapper), indices past the upgrade item's current size are considered to be out of bounds.\n\nParameters:\n- index (uint): The index of the mapper to read.\n- type ({'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'from'}, {'complex_type': 'literal', 'value': 'to'}], 'full_format': False}):",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "get_mapper"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.get_mapper",
    "content": "Returns:\n- {'complex_type': 'union', 'options': ['UpgradeMapperSource', 'UpgradeMapperDestination'], 'full_format': False}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "get_mapper"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.get_tag",
    "content": "Method: LuaItemCommon.get_tag\nDescription: Gets the tag with the given name or returns `nil` if it doesn't exist.\n\nParameters:\n- tag_name (string): \n\nReturns:\n- AnyBasic: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "get_tag"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.get_tile_filter",
    "content": "Method: LuaItemCommon.get_tile_filter\nDescription: Gets the tile filter at the given index for this deconstruction item.\n\nParameters:\n- index (uint): \n\nReturns:\n- string: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "get_tile_filter"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.is_blueprint_setup",
    "content": "Method: LuaItemCommon.is_blueprint_setup\nDescription: Is this blueprint item setup? I.e. is it a non-empty blueprint?\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "is_blueprint_setup"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.remove_tag",
    "content": "Method: LuaItemCommon.remove_tag\nDescription: Removes a tag with the given name.\n\nParameters:\n- tag (string): \n\nReturns:\n- boolean: If the tag existed and was removed.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "remove_tag"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.set_blueprint_entities",
    "content": "Method: LuaItemCommon.set_blueprint_entities\nDescription: Set new entities to be a part of this blueprint.\n\nParameters:\n- entities ({'complex_type': 'array', 'value': 'BlueprintEntity'}): The new blueprint entities.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "set_blueprint_entities"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.set_blueprint_entity_tag",
    "content": "Method: LuaItemCommon.set_blueprint_entity_tag\nDescription: Sets the given tag on the given blueprint entity index in this blueprint item.\n\nParameters:\n- index (uint): The entity index.\n- tag (string): The tag to set.\n- value (AnyBasic): The tag value to set or `nil` to clear the tag.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "set_blueprint_entity_tag"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.set_blueprint_entity_tags",
    "content": "Method: LuaItemCommon.set_blueprint_entity_tags\nDescription: Sets the tags on the given blueprint entity index in this blueprint item.\n\nParameters:\n- index (uint): The entity index\n- tags (Tags): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "set_blueprint_entity_tags"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.set_blueprint_tiles",
    "content": "Method: LuaItemCommon.set_blueprint_tiles\nDescription: Set specific tiles in this blueprint.\n\nParameters:\n- tiles ({'complex_type': 'array', 'value': 'Tile'}): Tiles to be a part of the blueprint.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "set_blueprint_tiles"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.set_entity_filter",
    "content": "Method: LuaItemCommon.set_entity_filter\nDescription: Sets the entity filter at the given index for this deconstruction item.\n\nParameters:\n- filter ({'complex_type': 'union', 'options': ['ItemFilter', 'nil'], 'full_format': False}): Writing `nil` removes the filter.\n- index (uint): \n\nReturns:\n- boolean: Whether the new filter was successfully set (meaning it was valid).\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "set_entity_filter"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.set_mapper",
    "content": "Method: LuaItemCommon.set_mapper\nDescription: Sets the module filter at the given index for this upgrade item.\n\nIn contrast to [LuaItemCommon::get_mapper](runtime:LuaItemCommon::get_mapper), indices past the upgrade item's current size are valid and expand the list of mappings accordingly, if within reasonable bounds.",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "set_mapper"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.set_mapper",
    "content": "Parameters:\n- index (uint): The index of the mapper to set.\n- mapper ({'complex_type': 'union', 'options': ['UpgradeMapperSource', 'UpgradeMapperDestination', 'nil'], 'full_format': False}): The mapper to set or `nil`\n- type ({'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'from'}, {'complex_type': 'literal', 'value': 'to'}], 'full_format': False}): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "set_mapper"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.set_tag",
    "content": "Method: LuaItemCommon.set_tag\nDescription: Sets the tag with the given name and value.\n\nParameters:\n- tag (AnyBasic): \n- tag_name (string): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "set_tag"
    }
  },
  {
    "type": "method",
    "name": "LuaItemCommon.set_tile_filter",
    "content": "Method: LuaItemCommon.set_tile_filter\nDescription: Sets the tile filter at the given index for this deconstruction item.\n\nParameters:\n- filter ({'complex_type': 'union', 'options': ['string', 'LuaTilePrototype', 'LuaTile', 'nil'], 'full_format': False}): Writing `nil` removes the filter.\n- index (uint): \n\nReturns:\n- boolean: Whether the new filter was successfully set (meaning it was valid).\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemCommon",
      "method_name": "set_tile_filter"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.active_index",
    "content": "Attribute: active_index [Optional]\nRead_type: uint\nWrite_type: uint\nDescription: The active blueprint index for this blueprint book. `nil` if this blueprint book is empty.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "active_index"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.allow_manual_label_change",
    "content": "Attribute: allow_manual_label_change \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether the label for this item can be manually changed. When false the label can only be changed through the API.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "allow_manual_label_change"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.ammo",
    "content": "Attribute: ammo \nRead_type: uint\nWrite_type: uint\nDescription: Number of bullets left in the magazine.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "ammo"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.blueprint_absolute_snapping",
    "content": "Attribute: blueprint_absolute_snapping \nRead_type: boolean\nWrite_type: boolean\nDescription: If absolute snapping is enabled on this blueprint item.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "blueprint_absolute_snapping"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.blueprint_position_relative_to_grid",
    "content": "Attribute: blueprint_position_relative_to_grid [Optional]\nRead_type: TilePosition\nWrite_type: TilePosition\nDescription: The offset from the absolute grid. `nil` if absolute snapping is not enabled.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "blueprint_position_relative_to_grid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.blueprint_snap_to_grid",
    "content": "Attribute: blueprint_snap_to_grid [Optional]\nRead_type: TilePosition\nWrite_type: TilePosition\nDescription: The snapping grid size in this blueprint item. `nil` if snapping is not enabled.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "blueprint_snap_to_grid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.cost_to_build",
    "content": "Attribute: cost_to_build \nRead_type: {'complex_type': 'array', 'value': 'ItemWithQualityCounts'}\n\nDescription: List of raw materials required to build this blueprint.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "cost_to_build"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.custom_description",
    "content": "Attribute: custom_description \nRead_type: LocalisedString\nWrite_type: LocalisedString\nDescription: The custom description this item-with-tags. This is shown over the normal item description if this is set to a non-empty value.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "custom_description"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.default_icons",
    "content": "Attribute: default_icons \nRead_type: {'complex_type': 'array', 'value': 'BlueprintSignalIcon'}\n\nDescription: The default icons for a blueprint item.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "default_icons"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.durability",
    "content": "Attribute: durability \nRead_type: double\nWrite_type: double\nDescription: Durability of the contained item. Automatically capped at the item's maximum durability.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "durability"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.entity_color",
    "content": "Attribute: entity_color [Optional]\nRead_type: Color\nWrite_type: Color\nDescription: If this is an item with entity data, get the stored entity color.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "entity_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.entity_filter_count",
    "content": "Attribute: entity_filter_count \nRead_type: uint\n\nDescription: The number of entity filters this deconstruction item supports.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "entity_filter_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.entity_filter_mode",
    "content": "Attribute: entity_filter_mode \nRead_type: defines.deconstruction_item.entity_filter_mode\nWrite_type: defines.deconstruction_item.entity_filter_mode\nDescription: The blacklist/whitelist entity filter mode for this deconstruction item.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "entity_filter_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.entity_filters",
    "content": "Attribute: entity_filters \nRead_type: {'complex_type': 'array', 'value': 'ItemFilter'}\nWrite_type: {\"complex_type\": \"array\", \"value\": \"ItemFilter\"}\nDescription: The entity filters for this deconstruction item. The attribute is a sparse array with the keys representing the index of the filter. All prototypes in this array must not have the `\"not-deconstructable\"` flag set and are either a `cliff` or marked as `minable`.",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "entity_filters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.entity_label",
    "content": "Attribute: entity_label [Optional]\nRead_type: string\nWrite_type: string\nDescription: If this is an item with entity data, get the stored entity label.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "entity_label"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.grid",
    "content": "Attribute: grid [Optional]\nRead_type: LuaEquipmentGrid\n\nDescription: The equipment grid of this item, if any.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "grid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.is_ammo",
    "content": "Attribute: is_ammo \nRead_type: boolean\n\nDescription: If this is an ammo item.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "is_ammo"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.is_armor",
    "content": "Attribute: is_armor \nRead_type: boolean\n\nDescription: If this is an armor item.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "is_armor"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.is_blueprint",
    "content": "Attribute: is_blueprint \nRead_type: boolean\n\nDescription: If this is a blueprint item.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "is_blueprint"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.is_blueprint_book",
    "content": "Attribute: is_blueprint_book \nRead_type: boolean\n\nDescription: If this is a blueprint book item.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "is_blueprint_book"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.is_deconstruction_item",
    "content": "Attribute: is_deconstruction_item \nRead_type: boolean\n\nDescription: If this is a deconstruction tool item.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "is_deconstruction_item"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.is_item_with_entity_data",
    "content": "Attribute: is_item_with_entity_data \nRead_type: boolean\n\nDescription: If this is an item with entity data item.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "is_item_with_entity_data"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.is_item_with_inventory",
    "content": "Attribute: is_item_with_inventory \nRead_type: boolean\n\nDescription: If this is an item with inventory item.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "is_item_with_inventory"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.is_item_with_label",
    "content": "Attribute: is_item_with_label \nRead_type: boolean\n\nDescription: If this is an item with label item.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "is_item_with_label"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.is_item_with_tags",
    "content": "Attribute: is_item_with_tags \nRead_type: boolean\n\nDescription: If this is an item with tags item.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "is_item_with_tags"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.is_repair_tool",
    "content": "Attribute: is_repair_tool \nRead_type: boolean\n\nDescription: If this is a repair tool item.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "is_repair_tool"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.is_selection_tool",
    "content": "Attribute: is_selection_tool \nRead_type: boolean\n\nDescription: If this is a selection tool item.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "is_selection_tool"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.is_tool",
    "content": "Attribute: is_tool \nRead_type: boolean\n\nDescription: If this is a tool item.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "is_tool"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.is_upgrade_item",
    "content": "Attribute: is_upgrade_item \nRead_type: boolean\n\nDescription: If this is a upgrade item.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "is_upgrade_item"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.item_number",
    "content": "Attribute: item_number [Optional]\nRead_type: uint\n\nDescription: The unique identifier for this item, if any. Note that this ID stays the same no matter where the item is moved to.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "item_number"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.label",
    "content": "Attribute: label [Optional]\nRead_type: string\nWrite_type: string\nDescription: The current label for this item, if any.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "label"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.label_color",
    "content": "Attribute: label_color [Optional]\nRead_type: Color\nWrite_type: Color\nDescription: The current label color for this item, if any.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "label_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.mapper_count",
    "content": "Attribute: mapper_count \nRead_type: uint\n\nDescription: The current count of mappers in the upgrade item.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "mapper_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.owner_location",
    "content": "Attribute: owner_location \nRead_type: ItemLocationData\n\nDescription: The location of this item if it can be found.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "owner_location"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.preview_icons",
    "content": "Attribute: preview_icons [Optional]\nRead_type: {'complex_type': 'array', 'value': 'BlueprintSignalIcon'}\nWrite_type: {\"complex_type\": \"array\", \"value\": \"BlueprintSignalIcon\"}\nDescription: Icons of this blueprint item, blueprint book, deconstruction item or upgrade planner. An item that doesn't have icons returns `nil` on read and throws error on write.",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "preview_icons"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.tags",
    "content": "Attribute: tags \nRead_type: Tags\nWrite_type: Tags\nDescription: \n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "tags"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.tile_filter_count",
    "content": "Attribute: tile_filter_count \nRead_type: uint\n\nDescription: The number of tile filters this deconstruction item supports.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "tile_filter_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.tile_filter_mode",
    "content": "Attribute: tile_filter_mode \nRead_type: defines.deconstruction_item.tile_filter_mode\nWrite_type: defines.deconstruction_item.tile_filter_mode\nDescription: The blacklist/whitelist tile filter mode for this deconstruction item.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "tile_filter_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.tile_filters",
    "content": "Attribute: tile_filters \nRead_type: {'complex_type': 'array', 'value': 'TileID'}\nWrite_type: {\"complex_type\": \"array\", \"value\": \"TileID\"}\nDescription: The tile filters for this deconstruction item. The attribute is a sparse array with the keys representing the index of the filter. Reading filters always returns an array of strings which are the tile prototype names.",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "tile_filters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.tile_selection_mode",
    "content": "Attribute: tile_selection_mode \nRead_type: defines.deconstruction_item.tile_selection_mode\nWrite_type: defines.deconstruction_item.tile_selection_mode\nDescription: The tile selection mode for this deconstruction item.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "tile_selection_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemCommon.trees_and_rocks_only",
    "content": "Attribute: trees_and_rocks_only \nRead_type: boolean\nWrite_type: boolean\nDescription: If this deconstruction item is set to allow trees and rocks only.\n",
    "metadata": {
      "class_name": "LuaItemCommon",
      "attribute_name": "trees_and_rocks_only"
    }
  },
  {
    "type": "class",
    "name": "LuaItemPrototype",
    "content": "Class: LuaItemPrototype\nDescription: Prototype of an item. For example, an item prototype can be obtained from [LuaPrototypes::item](runtime:LuaPrototypes::item) by its name: `prototypes.item[\"iron-plate\"]`.",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "method",
    "name": "LuaItemPrototype.get_ammo_type",
    "content": "Method: LuaItemPrototype.get_ammo_type\nDescription: The type of this ammo prototype.\n\nParameters:\n- ammo_source_type ({'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'default'}, {'complex_type': 'literal', 'value': 'player'}, {'complex_type': 'literal', 'value': 'turret'}, {'complex_type': 'literal', 'value': 'vehicle'}], 'full_format': False})[Optional]: Defaults to `\"default\"`.\n\nReturns:\n- AmmoType: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "method_name": "get_ammo_type"
    }
  },
  {
    "type": "method",
    "name": "LuaItemPrototype.get_cursor_box_type",
    "content": "Method: LuaItemPrototype.get_cursor_box_type\nDescription: \n\nParameters:\n- selection_mode (defines.selection_mode): \n\nReturns:\n- CursorBoxRenderType: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "method_name": "get_cursor_box_type"
    }
  },
  {
    "type": "method",
    "name": "LuaItemPrototype.get_durability",
    "content": "Method: LuaItemPrototype.get_durability\nDescription: The durability of this tool item prototype.\n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "method_name": "get_durability"
    }
  },
  {
    "type": "method",
    "name": "LuaItemPrototype.get_entity_filter_mode",
    "content": "Method: LuaItemPrototype.get_entity_filter_mode\nDescription: The entity filter mode used by this selection tool.\n\nParameters:\n- selection_mode (defines.selection_mode): \n\nReturns:\n- PrototypeFilterMode: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "method_name": "get_entity_filter_mode"
    }
  },
  {
    "type": "method",
    "name": "LuaItemPrototype.get_entity_filters",
    "content": "Method: LuaItemPrototype.get_entity_filters\nDescription: The entity filters used by this selection tool.\n\nParameters:\n- selection_mode (defines.selection_mode): \n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaEntityPrototype'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "method_name": "get_entity_filters"
    }
  },
  {
    "type": "method",
    "name": "LuaItemPrototype.get_entity_type_filters",
    "content": "Method: LuaItemPrototype.get_entity_type_filters\nDescription: The entity type filters used by this selection tool indexed by entity type.\n\nThe boolean value is meaningless and is used to allow easy lookup if a type exists in the dictionary.\n\nParameters:\n- selection_mode (defines.selection_mode): \n\nReturns:\n- {'complex_type': 'dictionary', 'key': 'string', 'value': {'complex_type': 'literal', 'value': True}}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "method_name": "get_entity_type_filters"
    }
  },
  {
    "type": "method",
    "name": "LuaItemPrototype.get_inventory_size_bonus",
    "content": "Method: LuaItemPrototype.get_inventory_size_bonus\nDescription: The inventory size bonus for this armor prototype.\n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- uint: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "method_name": "get_inventory_size_bonus"
    }
  },
  {
    "type": "method",
    "name": "LuaItemPrototype.get_selection_border_color",
    "content": "Method: LuaItemPrototype.get_selection_border_color\nDescription: The color used when doing normal selection with this selection tool prototype.\n\nParameters:\n- selection_mode (defines.selection_mode): \n\nReturns:\n- Color: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "method_name": "get_selection_border_color"
    }
  },
  {
    "type": "method",
    "name": "LuaItemPrototype.get_selection_mode_flags",
    "content": "Method: LuaItemPrototype.get_selection_mode_flags\nDescription: Flags that affect which entities will be selected.\n\nParameters:\n- selection_mode (defines.selection_mode): \n\nReturns:\n- SelectionModeFlags: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "method_name": "get_selection_mode_flags"
    }
  },
  {
    "type": "method",
    "name": "LuaItemPrototype.get_spoil_ticks",
    "content": "Method: LuaItemPrototype.get_spoil_ticks\nDescription: The number of ticks before this item spoils, or `0` if it does not spoil.\n\nParameters:\n- quality (QualityID)[Optional]: \n\nReturns:\n- uint: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "method_name": "get_spoil_ticks"
    }
  },
  {
    "type": "method",
    "name": "LuaItemPrototype.get_tile_filter_mode",
    "content": "Method: LuaItemPrototype.get_tile_filter_mode\nDescription: The tile filter mode used by this selection tool.\n\nParameters:\n- selection_mode (defines.selection_mode): \n\nReturns:\n- PrototypeFilterMode: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "method_name": "get_tile_filter_mode"
    }
  },
  {
    "type": "method",
    "name": "LuaItemPrototype.get_tile_filters",
    "content": "Method: LuaItemPrototype.get_tile_filters\nDescription: The tile filters used by this selection tool.\n\nParameters:\n- selection_mode (defines.selection_mode): \n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaTilePrototype'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "method_name": "get_tile_filters"
    }
  },
  {
    "type": "method",
    "name": "LuaItemPrototype.has_flag",
    "content": "Method: LuaItemPrototype.has_flag\nDescription: Test whether this item prototype has a certain flag set.\n\nParameters:\n- flag (ItemPrototypeFlag): The flag to test.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "method_name": "has_flag"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.always_include_tiles",
    "content": "Attribute: always_include_tiles [Optional]\nRead_type: boolean\n\nDescription: If tiles area always included when doing selection with this selection tool prototype.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "always_include_tiles"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.ammo_category",
    "content": "Attribute: ammo_category [Optional]\nRead_type: LuaAmmoCategoryPrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "ammo_category"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.attack_parameters",
    "content": "Attribute: attack_parameters [Optional]\nRead_type: AttackParameters\n\nDescription: The gun attack parameters.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "attack_parameters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.beacon_tint",
    "content": "Attribute: beacon_tint [Optional]\nRead_type: {'complex_type': 'array', 'value': 'Color'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "beacon_tint"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.burnt_result",
    "content": "Attribute: burnt_result [Optional]\nRead_type: LuaItemPrototype\n\nDescription: The result of burning this item as fuel, if any.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "burnt_result"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.can_be_mod_opened",
    "content": "Attribute: can_be_mod_opened \nRead_type: boolean\n\nDescription: If this item can be mod-opened.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "can_be_mod_opened"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.capsule_action",
    "content": "Attribute: capsule_action [Optional]\nRead_type: CapsuleAction\n\nDescription: The capsule action for this capsule item prototype.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "capsule_action"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.category",
    "content": "Attribute: category [Optional]\nRead_type: string\n\nDescription: The name of a [LuaModuleCategoryPrototype](runtime:LuaModuleCategoryPrototype). Used when upgrading modules: Ctrl + click modules into an entity and it will replace lower tier modules of the same category with higher tier modules.",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "category"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.collision_box",
    "content": "Attribute: collision_box [Optional]\nRead_type: BoundingBox\n\nDescription: The collision box used by character entities when wearing this armor.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "collision_box"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.default_import_location",
    "content": "Attribute: default_import_location \nRead_type: LuaSpaceLocationPrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "default_import_location"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.default_label_color",
    "content": "Attribute: default_label_color [Optional]\nRead_type: Color\n\nDescription: The default label color used for this item with label, if any.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "default_label_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.destroyed_by_dropping_trigger",
    "content": "Attribute: destroyed_by_dropping_trigger [Optional]\nRead_type: {'complex_type': 'array', 'value': 'TriggerItem'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "destroyed_by_dropping_trigger"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.draw_label_for_cursor_render",
    "content": "Attribute: draw_label_for_cursor_render [Optional]\nRead_type: boolean\n\nDescription: If true, and this item with label has a label it is drawn in place of the normal number when held in the cursor.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "draw_label_for_cursor_render"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.drawing_box",
    "content": "Attribute: drawing_box [Optional]\nRead_type: BoundingBox\n\nDescription: The drawing box used by character entities when wearing this armor.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "drawing_box"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.durability_description_key",
    "content": "Attribute: durability_description_key [Optional]\nRead_type: string\n\nDescription: The durability message key used when displaying the durability of this tool.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "durability_description_key"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.durability_description_value",
    "content": "Attribute: durability_description_value [Optional]\nRead_type: string\n\nDescription: The durability message value used when displaying the durability of this tool.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "durability_description_value"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.entity_filter_slots",
    "content": "Attribute: entity_filter_slots [Optional]\nRead_type: uint\n\nDescription: The number of entity filters this deconstruction item has.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "entity_filter_slots"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.equipment_grid",
    "content": "Attribute: equipment_grid [Optional]\nRead_type: LuaEquipmentGridPrototype\n\nDescription: The prototype of this armor's equipment grid, if any.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "equipment_grid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.factoriopedia_durability_description_key",
    "content": "Attribute: factoriopedia_durability_description_key [Optional]\nRead_type: string\n\nDescription: The durability message key used when displaying the durability of this tool in Factoriopedia.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "factoriopedia_durability_description_key"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.filter_mode",
    "content": "Attribute: filter_mode [Optional]\nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'none'}, {'complex_type': 'literal', 'value': 'whitelist'}, {'complex_type': 'literal', 'value': 'blacklist'}], 'full_format': False}\n\nDescription: The filter mode used by this item with inventory.",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "filter_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.flags",
    "content": "Attribute: flags \nRead_type: ItemPrototypeFlags\n\nDescription: The flags for this item prototype.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "flags"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.fuel_acceleration_multiplier",
    "content": "Attribute: fuel_acceleration_multiplier \nRead_type: double\n\nDescription: The acceleration multiplier when this item is used as fuel in a vehicle.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "fuel_acceleration_multiplier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.fuel_acceleration_multiplier_quality_bonus",
    "content": "Attribute: fuel_acceleration_multiplier_quality_bonus \nRead_type: double\n\nDescription: Additional fuel acceleration multiplier per quality level.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "fuel_acceleration_multiplier_quality_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.fuel_category",
    "content": "Attribute: fuel_category [Optional]\nRead_type: string\n\nDescription: The fuel category, if any.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "fuel_category"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.fuel_emissions_multiplier",
    "content": "Attribute: fuel_emissions_multiplier \nRead_type: double\n\nDescription: The emissions multiplier if this is used as fuel.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "fuel_emissions_multiplier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.fuel_glow_color",
    "content": "Attribute: fuel_glow_color [Optional]\nRead_type: Color\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "fuel_glow_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.fuel_top_speed_multiplier",
    "content": "Attribute: fuel_top_speed_multiplier \nRead_type: double\n\nDescription: The fuel top speed multiplier when this item is used as fuel in a vehicle.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "fuel_top_speed_multiplier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.fuel_top_speed_multiplier_quality_bonus",
    "content": "Attribute: fuel_top_speed_multiplier_quality_bonus \nRead_type: double\n\nDescription: Additional fuel top speed multiplier per quality level.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "fuel_top_speed_multiplier_quality_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.fuel_value",
    "content": "Attribute: fuel_value \nRead_type: float\n\nDescription: Fuel value when burned.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "fuel_value"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.infinite",
    "content": "Attribute: infinite [Optional]\nRead_type: boolean\n\nDescription: If this tool item has infinite durability.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "infinite"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.ingredient_to_weight_coefficient",
    "content": "Attribute: ingredient_to_weight_coefficient \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "ingredient_to_weight_coefficient"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.inventory_size",
    "content": "Attribute: inventory_size [Optional]\nRead_type: uint\n\nDescription: The main inventory size for item-with-inventory-prototype.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "inventory_size"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.item_filters",
    "content": "Attribute: item_filters [Optional]\nRead_type: {'complex_type': 'array', 'value': 'LuaItemPrototype'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "item_filters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.item_group_filters",
    "content": "Attribute: item_group_filters [Optional]\nRead_type: {'complex_type': 'array', 'value': 'LuaGroup'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "item_group_filters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.item_subgroup_filters",
    "content": "Attribute: item_subgroup_filters [Optional]\nRead_type: {'complex_type': 'array', 'value': 'LuaGroup'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "item_subgroup_filters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.localised_filter_message",
    "content": "Attribute: localised_filter_message [Optional]\nRead_type: LocalisedString\n\nDescription: The localised string used when the player attempts to put items into this item with inventory that aren't allowed.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "localised_filter_message"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.magazine_size",
    "content": "Attribute: magazine_size [Optional]\nRead_type: float\n\nDescription: Size of full magazine.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "magazine_size"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.manual_length_limit",
    "content": "Attribute: manual_length_limit [Optional]\nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "manual_length_limit"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.module_effects",
    "content": "Attribute: module_effects [Optional]\nRead_type: ModuleEffects\n\nDescription: Effects of this module.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "module_effects"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.place_as_equipment_result",
    "content": "Attribute: place_as_equipment_result [Optional]\nRead_type: LuaEquipmentPrototype\n\nDescription: Prototype of the equipment that will be created by placing this item in an equipment grid, if any.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "place_as_equipment_result"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.place_as_tile_result",
    "content": "Attribute: place_as_tile_result [Optional]\nRead_type: PlaceAsTileResult\n\nDescription: The place-as-tile result if one is defined, if any.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "place_as_tile_result"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.place_result",
    "content": "Attribute: place_result [Optional]\nRead_type: LuaEntityPrototype\n\nDescription: Prototype of the entity that will be created by placing this item, if any.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "place_result"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.plant_result",
    "content": "Attribute: plant_result [Optional]\nRead_type: LuaEntityPrototype\n\nDescription: The result entity when planting this item as a seed.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "plant_result"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.provides_flight",
    "content": "Attribute: provides_flight [Optional]\nRead_type: boolean\n\nDescription: If this armor provides flight to character entities when worm.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "provides_flight"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.radius_color",
    "content": "Attribute: radius_color [Optional]\nRead_type: Color\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "radius_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.rails",
    "content": "Attribute: rails [Optional]\nRead_type: {'complex_type': 'array', 'value': 'LuaEntityPrototype'}\n\nDescription: Prototypes of all rails possible to be used by this rail planner prototype.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "rails"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.reload_time",
    "content": "Attribute: reload_time [Optional]\nRead_type: float\n\nDescription: Amount of extra time (in ticks) it takes to reload the weapon after depleting the magazine.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "reload_time"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.requires_beacon_alt_mode",
    "content": "Attribute: requires_beacon_alt_mode [Optional]\nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "requires_beacon_alt_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.resistances",
    "content": "Attribute: resistances [Optional]\nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'Resistance'}\n\nDescription: Resistances of this armor item, if any, indexed by damage type name.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "resistances"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.rocket_launch_products",
    "content": "Attribute: rocket_launch_products \nRead_type: {'complex_type': 'array', 'value': 'Product'}\n\nDescription: The results of launching this item in a rocket.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "rocket_launch_products"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.skip_fog_of_war",
    "content": "Attribute: skip_fog_of_war [Optional]\nRead_type: boolean\n\nDescription: If this selection tool skips things covered by fog of war.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "skip_fog_of_war"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.speed",
    "content": "Attribute: speed [Optional]\nRead_type: float\n\nDescription: The repairing speed if this is a repairing tool.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.spoil_result",
    "content": "Attribute: spoil_result [Optional]\nRead_type: LuaItemPrototype\n\nDescription: The spoil result of this item, if any\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "spoil_result"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.spoil_to_trigger_result",
    "content": "Attribute: spoil_to_trigger_result [Optional]\nRead_type: SpoilToTriggerResult\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "spoil_to_trigger_result"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.stack_size",
    "content": "Attribute: stack_size \nRead_type: uint\n\nDescription: Maximum stack size of the item specified by this prototype.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "stack_size"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.stackable",
    "content": "Attribute: stackable \nRead_type: boolean\n\nDescription: Is this item allowed to stack at all?\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "stackable"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.support",
    "content": "Attribute: support [Optional]\nRead_type: LuaEntityPrototype\n\nDescription: The rail support used by this rail planner.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "support"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.tier",
    "content": "Attribute: tier [Optional]\nRead_type: uint\n\nDescription: Tier of the module inside its category. Used when upgrading modules: Ctrl + click modules into an entity and it will replace lower tier modules with higher tier modules if they have the same category.",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "tier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.tile_filter_slots",
    "content": "Attribute: tile_filter_slots [Optional]\nRead_type: uint\n\nDescription: The number of tile filters this deconstruction item has.\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "tile_filter_slots"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemPrototype.weight",
    "content": "Attribute: weight \nRead_type: double\n\nDescription: Weight of this item\n",
    "metadata": {
      "class_name": "LuaItemPrototype",
      "attribute_name": "weight"
    }
  },
  {
    "type": "class",
    "name": "LuaItemStack",
    "content": "Class: LuaItemStack\nDescription: A reference to an item and count owned by some external entity.\n\nIn most instances this is a simple reference as in: it points at a specific slot in an inventory and not the item in the slot.\n\nIn the instance this references an item on a [LuaTransportLine](runtime:LuaTransportLine) the reference is only guaranteed to stay valid (and refer to the same item) as long as nothing changes the transport line.",
    "metadata": {
      "class_name": "LuaItemStack",
      "parent_class": "LuaItemCommon"
    }
  },
  {
    "type": "method",
    "name": "LuaItemStack.add_ammo",
    "content": "Method: LuaItemStack.add_ammo\nDescription: Add ammo to this ammo item.\n\nParameters:\n- amount (float): Amount of ammo to add.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemStack",
      "method_name": "add_ammo"
    }
  },
  {
    "type": "method",
    "name": "LuaItemStack.add_durability",
    "content": "Method: LuaItemStack.add_durability\nDescription: Add durability to this tool item.\n\nParameters:\n- amount (double): Amount of durability to add.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemStack",
      "method_name": "add_durability"
    }
  },
  {
    "type": "method",
    "name": "LuaItemStack.can_set_stack",
    "content": "Method: LuaItemStack.can_set_stack\nDescription: Would a call to [LuaItemStack::set_stack](runtime:LuaItemStack::set_stack) succeed?\n\nParameters:\n- stack (ItemStackIdentification)[Optional]: Stack that would be set, possibly `nil`.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemStack",
      "method_name": "can_set_stack"
    }
  },
  {
    "type": "method",
    "name": "LuaItemStack.clear",
    "content": "Method: LuaItemStack.clear\nDescription: Clear this item stack.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemStack",
      "method_name": "clear"
    }
  },
  {
    "type": "method",
    "name": "LuaItemStack.create_grid",
    "content": "Method: LuaItemStack.create_grid\nDescription: Creates the equipment grid for this item if it doesn't exist and this is an item-with-entity-data that supports equipment grids.\n\nReturns:\n- LuaEquipmentGrid: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemStack",
      "method_name": "create_grid"
    }
  },
  {
    "type": "method",
    "name": "LuaItemStack.drain_ammo",
    "content": "Method: LuaItemStack.drain_ammo\nDescription: Remove ammo from this ammo item.\n\nParameters:\n- amount (float): Amount of ammo to remove.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemStack",
      "method_name": "drain_ammo"
    }
  },
  {
    "type": "method",
    "name": "LuaItemStack.drain_durability",
    "content": "Method: LuaItemStack.drain_durability\nDescription: Remove durability from this tool item.\n\nParameters:\n- amount (double): Amount of durability to remove.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemStack",
      "method_name": "drain_durability"
    }
  },
  {
    "type": "method",
    "name": "LuaItemStack.export_stack",
    "content": "Method: LuaItemStack.export_stack\nDescription: Export a supported item (blueprint, blueprint-book, deconstruction-planner, upgrade-planner, item-with-tags) to a string.\n\nReturns:\n- string: The exported string\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemStack",
      "method_name": "export_stack"
    }
  },
  {
    "type": "method",
    "name": "LuaItemStack.import_stack",
    "content": "Method: LuaItemStack.import_stack\nDescription: Import a supported item (blueprint, blueprint-book, deconstruction-planner, upgrade-planner, item-with-tags) from a string.\n\nParameters:\n- data (string): The string to import\n\nReturns:\n- int: 0 if the import succeeded with no errors. -1 if the import succeeded with errors. 1 if the import failed.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemStack",
      "method_name": "import_stack"
    }
  },
  {
    "type": "method",
    "name": "LuaItemStack.set_stack",
    "content": "Method: LuaItemStack.set_stack\nDescription: Set this item stack to another item stack.\n\nParameters:\n- stack (ItemStackIdentification)[Optional]: Item stack to set it to. Omitting this parameter or passing `nil` will clear this item stack, as if [LuaItemStack::clear](runtime:LuaItemStack::clear) was called.\n\nReturns:\n- boolean: Whether the stack was set successfully. Returns `false` if this stack was not [valid for write](runtime:LuaItemStack::can_set_stack).\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemStack",
      "method_name": "set_stack"
    }
  },
  {
    "type": "method",
    "name": "LuaItemStack.spoil",
    "content": "Method: LuaItemStack.spoil\nDescription: Spoils this item if the item can spoil.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemStack",
      "method_name": "spoil"
    }
  },
  {
    "type": "method",
    "name": "LuaItemStack.swap_stack",
    "content": "Method: LuaItemStack.swap_stack\nDescription: Swaps this item stack with the given item stack if allowed.\n\nParameters:\n- stack (LuaItemStack): \n\nReturns:\n- boolean: Whether the 2 stacks were swapped successfully.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemStack",
      "method_name": "swap_stack"
    }
  },
  {
    "type": "method",
    "name": "LuaItemStack.transfer_stack",
    "content": "Method: LuaItemStack.transfer_stack\nDescription: Transfers the given item stack into this item stack.\n\nParameters:\n- stack (ItemStackIdentification): \n\nReturns:\n- boolean: `true` if the full stack was transferred.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemStack",
      "method_name": "transfer_stack"
    }
  },
  {
    "type": "method",
    "name": "LuaItemStack.use_capsule",
    "content": "Method: LuaItemStack.use_capsule\nDescription: Use the capsule item with the entity as the source, targeting the given position.\n\nParameters:\n- entity (LuaEntity): The entity to use the capsule item with.\n- target_position (MapPosition): The position to use the capsule item with.\n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}: Array of the entities that were created by the capsule action.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaItemStack",
      "method_name": "use_capsule"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemStack.count",
    "content": "Attribute: count \nRead_type: uint\nWrite_type: uint\nDescription: Number of items in this stack.\n",
    "metadata": {
      "class_name": "LuaItemStack",
      "attribute_name": "count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemStack.health",
    "content": "Attribute: health \nRead_type: float\nWrite_type: float\nDescription: How much health the item has, as a number in range `[0, 1]`.\n",
    "metadata": {
      "class_name": "LuaItemStack",
      "attribute_name": "health"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemStack.is_module",
    "content": "Attribute: is_module \nRead_type: boolean\n\nDescription: If this is a module\n",
    "metadata": {
      "class_name": "LuaItemStack",
      "attribute_name": "is_module"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemStack.item",
    "content": "Attribute: item [Optional]\nRead_type: LuaItem\n\nDescription: If the item has additional data, returns LuaItem pointing at the extra data, otherwise returns nil.\n",
    "metadata": {
      "class_name": "LuaItemStack",
      "attribute_name": "item"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemStack.name",
    "content": "Attribute: name \nRead_type: string\n\nDescription: Prototype name of the item held in this stack.\n",
    "metadata": {
      "class_name": "LuaItemStack",
      "attribute_name": "name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemStack.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaItemStack",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemStack.prototype",
    "content": "Attribute: prototype \nRead_type: LuaItemPrototype\n\nDescription: Prototype of the item held in this stack.\n",
    "metadata": {
      "class_name": "LuaItemStack",
      "attribute_name": "prototype"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemStack.quality",
    "content": "Attribute: quality \nRead_type: LuaQualityPrototype\n\nDescription: The quality of this item.\n",
    "metadata": {
      "class_name": "LuaItemStack",
      "attribute_name": "quality"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemStack.spoil_percent",
    "content": "Attribute: spoil_percent \nRead_type: double\nWrite_type: double\nDescription: The percent spoiled this item is if it spoils. `0` in the case of the item not spoiling.\n",
    "metadata": {
      "class_name": "LuaItemStack",
      "attribute_name": "spoil_percent"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemStack.spoil_tick",
    "content": "Attribute: spoil_tick \nRead_type: uint\nWrite_type: uint\nDescription: The tick this item spoils, or `0` if it does not spoil. When writing, setting to anything < the current game tick will spoil the item instantly.\n",
    "metadata": {
      "class_name": "LuaItemStack",
      "attribute_name": "spoil_tick"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemStack.type",
    "content": "Attribute: type \nRead_type: string\n\nDescription: Type of the item prototype.\n",
    "metadata": {
      "class_name": "LuaItemStack",
      "attribute_name": "type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemStack.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaItemStack",
      "attribute_name": "valid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaItemStack.valid_for_read",
    "content": "Attribute: valid_for_read \nRead_type: boolean\n\nDescription: Is this valid for reading? Differs from the usual `valid` in that `valid` will be `true` even if the item stack is blank but the entity that holds it is still valid.\n",
    "metadata": {
      "class_name": "LuaItemStack",
      "attribute_name": "valid_for_read"
    }
  },
  {
    "type": "class",
    "name": "LuaLampControlBehavior",
    "content": "Class: LuaLampControlBehavior\nDescription: Control behavior for lamps.",
    "metadata": {
      "class_name": "LuaLampControlBehavior",
      "parent_class": "LuaGenericOnOffControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLampControlBehavior.blue_signal",
    "content": "Attribute: blue_signal [Optional]\nRead_type: SignalID\nWrite_type: SignalID\nDescription: \n",
    "metadata": {
      "class_name": "LuaLampControlBehavior",
      "attribute_name": "blue_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLampControlBehavior.color",
    "content": "Attribute: color [Optional]\nRead_type: Color\n\nDescription: The color the lamp is showing, if any.\n",
    "metadata": {
      "class_name": "LuaLampControlBehavior",
      "attribute_name": "color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLampControlBehavior.color_mode",
    "content": "Attribute: color_mode \nRead_type: defines.control_behavior.lamp.color_mode\nWrite_type: defines.control_behavior.lamp.color_mode\nDescription: \n",
    "metadata": {
      "class_name": "LuaLampControlBehavior",
      "attribute_name": "color_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLampControlBehavior.green_signal",
    "content": "Attribute: green_signal [Optional]\nRead_type: SignalID\nWrite_type: SignalID\nDescription: \n",
    "metadata": {
      "class_name": "LuaLampControlBehavior",
      "attribute_name": "green_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLampControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaLampControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLampControlBehavior.red_signal",
    "content": "Attribute: red_signal [Optional]\nRead_type: SignalID\nWrite_type: SignalID\nDescription: \n",
    "metadata": {
      "class_name": "LuaLampControlBehavior",
      "attribute_name": "red_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLampControlBehavior.rgb_signal",
    "content": "Attribute: rgb_signal [Optional]\nRead_type: SignalID\nWrite_type: SignalID\nDescription: \n",
    "metadata": {
      "class_name": "LuaLampControlBehavior",
      "attribute_name": "rgb_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLampControlBehavior.use_colors",
    "content": "Attribute: use_colors \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if the lamp should set the color from the circuit network signals.\n",
    "metadata": {
      "class_name": "LuaLampControlBehavior",
      "attribute_name": "use_colors"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLampControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaLampControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaLazyLoadedValue",
    "content": "Class: LuaLazyLoadedValue\nDescription: A lazily loaded value. For performance reasons, we sometimes return a custom lazily-loaded value type instead of the native Lua value. This custom type lazily constructs the necessary value when [LuaLazyLoadedValue::get](runtime:LuaLazyLoadedValue::get) is called, therefore preventing its unnecessary construction in some cases.\n\nAn instance of LuaLazyLoadedValue is only valid during the event it was created from and cannot be saved.",
    "metadata": {
      "class_name": "LuaLazyLoadedValue",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaLazyLoadedValue.get",
    "content": "Method: LuaLazyLoadedValue.get\nDescription: Gets the value of this lazy loaded value.\n\nReturns:\n- Any: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaLazyLoadedValue",
      "method_name": "get"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLazyLoadedValue.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaLazyLoadedValue",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLazyLoadedValue.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaLazyLoadedValue",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaLoaderControlBehavior",
    "content": "Class: LuaLoaderControlBehavior\nDescription: Control behavior for loaders.",
    "metadata": {
      "class_name": "LuaLoaderControlBehavior",
      "parent_class": "LuaGenericOnOffControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLoaderControlBehavior.circuit_read_transfers",
    "content": "Attribute: circuit_read_transfers \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if the transfers between loader's belt and container should be pulsed to the circuit network\n",
    "metadata": {
      "class_name": "LuaLoaderControlBehavior",
      "attribute_name": "circuit_read_transfers"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLoaderControlBehavior.circuit_set_filters",
    "content": "Attribute: circuit_set_filters \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if filters are set from circuit network\n",
    "metadata": {
      "class_name": "LuaLoaderControlBehavior",
      "attribute_name": "circuit_set_filters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLoaderControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaLoaderControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLoaderControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaLoaderControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaLogisticCell",
    "content": "Class: LuaLogisticCell\nDescription: Logistic cell of a particular [LuaEntity](runtime:LuaEntity). A \"Logistic Cell\" is the given name for settings and properties used by what would normally be seen as a \"Roboport\". A logistic cell however doesn't have to be attached to the roboport entity (the character has one for the personal roboport).",
    "metadata": {
      "class_name": "LuaLogisticCell",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticCell.is_in_construction_range",
    "content": "Method: LuaLogisticCell.is_in_construction_range\nDescription: Is a given position within the construction range of this cell?\n\nParameters:\n- position (MapPosition): \n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaLogisticCell",
      "method_name": "is_in_construction_range"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticCell.is_in_logistic_range",
    "content": "Method: LuaLogisticCell.is_in_logistic_range\nDescription: Is a given position within the logistic range of this cell?\n\nParameters:\n- position (MapPosition): \n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaLogisticCell",
      "method_name": "is_in_logistic_range"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticCell.is_neighbour_with",
    "content": "Method: LuaLogisticCell.is_neighbour_with\nDescription: Are two cells neighbours?\n\nParameters:\n- other (LuaLogisticCell): \n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaLogisticCell",
      "method_name": "is_neighbour_with"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticCell.charge_approach_distance",
    "content": "Attribute: charge_approach_distance \nRead_type: float\n\nDescription: Radius at which the robots hover when waiting to be charged.\n",
    "metadata": {
      "class_name": "LuaLogisticCell",
      "attribute_name": "charge_approach_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticCell.charging_robot_count",
    "content": "Attribute: charging_robot_count \nRead_type: uint\n\nDescription: Number of robots currently charging.\n",
    "metadata": {
      "class_name": "LuaLogisticCell",
      "attribute_name": "charging_robot_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticCell.charging_robots",
    "content": "Attribute: charging_robots \nRead_type: {'complex_type': 'array', 'value': 'LuaEntity'}\n\nDescription: Robots currently being charged.\n",
    "metadata": {
      "class_name": "LuaLogisticCell",
      "attribute_name": "charging_robots"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticCell.construction_radius",
    "content": "Attribute: construction_radius \nRead_type: float\n\nDescription: Construction radius of this cell.\n",
    "metadata": {
      "class_name": "LuaLogisticCell",
      "attribute_name": "construction_radius"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticCell.logistic_network",
    "content": "Attribute: logistic_network [Optional]\nRead_type: LuaLogisticNetwork\n\nDescription: The network that owns this cell, if any.\n",
    "metadata": {
      "class_name": "LuaLogisticCell",
      "attribute_name": "logistic_network"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticCell.logistic_radius",
    "content": "Attribute: logistic_radius \nRead_type: float\n\nDescription: Logistic radius of this cell.\n",
    "metadata": {
      "class_name": "LuaLogisticCell",
      "attribute_name": "logistic_radius"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticCell.logistics_connection_distance",
    "content": "Attribute: logistics_connection_distance \nRead_type: float\n\nDescription: Logistic connection distance of this cell.\n",
    "metadata": {
      "class_name": "LuaLogisticCell",
      "attribute_name": "logistics_connection_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticCell.mobile",
    "content": "Attribute: mobile \nRead_type: boolean\n\nDescription: `true` if this is a mobile cell. In vanilla, only the logistic cell created by a character's personal roboport is mobile.\n",
    "metadata": {
      "class_name": "LuaLogisticCell",
      "attribute_name": "mobile"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticCell.neighbours",
    "content": "Attribute: neighbours \nRead_type: {'complex_type': 'array', 'value': 'LuaLogisticCell'}\n\nDescription: Neighbouring cells.\n",
    "metadata": {
      "class_name": "LuaLogisticCell",
      "attribute_name": "neighbours"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticCell.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaLogisticCell",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticCell.owner",
    "content": "Attribute: owner \nRead_type: LuaEntity\n\nDescription: This cell's owner.\n",
    "metadata": {
      "class_name": "LuaLogisticCell",
      "attribute_name": "owner"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticCell.stationed_construction_robot_count",
    "content": "Attribute: stationed_construction_robot_count \nRead_type: uint\n\nDescription: Number of stationed construction robots in this cell.\n",
    "metadata": {
      "class_name": "LuaLogisticCell",
      "attribute_name": "stationed_construction_robot_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticCell.stationed_logistic_robot_count",
    "content": "Attribute: stationed_logistic_robot_count \nRead_type: uint\n\nDescription: Number of stationed logistic robots in this cell.\n",
    "metadata": {
      "class_name": "LuaLogisticCell",
      "attribute_name": "stationed_logistic_robot_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticCell.to_charge_robot_count",
    "content": "Attribute: to_charge_robot_count \nRead_type: uint\n\nDescription: Number of robots waiting to charge.\n",
    "metadata": {
      "class_name": "LuaLogisticCell",
      "attribute_name": "to_charge_robot_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticCell.to_charge_robots",
    "content": "Attribute: to_charge_robots \nRead_type: {'complex_type': 'array', 'value': 'LuaEntity'}\n\nDescription: Robots waiting to charge.\n",
    "metadata": {
      "class_name": "LuaLogisticCell",
      "attribute_name": "to_charge_robots"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticCell.transmitting",
    "content": "Attribute: transmitting \nRead_type: boolean\n\nDescription: `true` if this cell is active.\n",
    "metadata": {
      "class_name": "LuaLogisticCell",
      "attribute_name": "transmitting"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticCell.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaLogisticCell",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaLogisticContainerControlBehavior",
    "content": "Class: LuaLogisticContainerControlBehavior\nDescription: Control behavior for logistic chests.",
    "metadata": {
      "class_name": "LuaLogisticContainerControlBehavior",
      "parent_class": "LuaControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticContainerControlBehavior.circuit_condition",
    "content": "Attribute: circuit_condition \nRead_type: CircuitConditionDefinition\nWrite_type: CircuitConditionDefinition\nDescription: The circuit condition for the logistic container.\n",
    "metadata": {
      "class_name": "LuaLogisticContainerControlBehavior",
      "attribute_name": "circuit_condition"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticContainerControlBehavior.circuit_condition_enabled",
    "content": "Attribute: circuit_condition_enabled \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether the circuit condition is in effect\n",
    "metadata": {
      "class_name": "LuaLogisticContainerControlBehavior",
      "attribute_name": "circuit_condition_enabled"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticContainerControlBehavior.circuit_exclusive_mode_of_operation",
    "content": "Attribute: circuit_exclusive_mode_of_operation \nRead_type: defines.control_behavior.logistic_container.exclusive_mode\nWrite_type: defines.control_behavior.logistic_container.exclusive_mode\nDescription: The circuit mode of operations for the logistic container. Can only be set on containers whose [logistic_mode](runtime:LuaEntityPrototype::logistic_mode) is set to `\"requester\"` or `\"buffer\"`.",
    "metadata": {
      "class_name": "LuaLogisticContainerControlBehavior",
      "attribute_name": "circuit_exclusive_mode_of_operation"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticContainerControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaLogisticContainerControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticContainerControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaLogisticContainerControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaLogisticNetwork",
    "content": "Class: LuaLogisticNetwork\nDescription: A single logistic network of a given force on a given surface.",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticNetwork.can_satisfy_request",
    "content": "Method: LuaLogisticNetwork.can_satisfy_request\nDescription: Can the network satisfy a request for a given item and count.\n\nParameters:\n- count (uint)[Optional]: Count to check. Defaults to 1.\n- include_buffers (boolean)[Optional]: Should buffers be considered? Defaults to false.\n- item (ItemWithQualityID): Item name to check.\n\nReturns:\n- boolean: Whether the network can satisfy the request.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "method_name": "can_satisfy_request"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticNetwork.find_cell_closest_to",
    "content": "Method: LuaLogisticNetwork.find_cell_closest_to\nDescription: Find logistic cell closest to a given position.\n\nParameters:\n- position (MapPosition): \n\nReturns:\n- LuaLogisticCell: `nil` if no cell was found.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "method_name": "find_cell_closest_to"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticNetwork.get_contents",
    "content": "Method: LuaLogisticNetwork.get_contents\nDescription: Get item counts for the entire network, similar to how [LuaInventory::get_contents](runtime:LuaInventory::get_contents) does.\n\nReturns:\n- {'complex_type': 'array', 'value': 'ItemWithQualityCounts'}: List of all items in the network.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "method_name": "get_contents"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticNetwork.get_item_count",
    "content": "Method: LuaLogisticNetwork.get_item_count\nDescription: Count given or all items in the network or given members.\n\nParameters:\n- item (ItemWithQualityID)[Optional]: Item name to count. If not given, gives counts of all items in the network.\n- member ({'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'storage'}, {'complex_type': 'literal', 'value': 'providers'}], 'full_format': False})[Optional]: Logistic members to check. If not given, gives count in the entire network.",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "method_name": "get_item_count"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticNetwork.get_item_count",
    "content": "Returns:\n- int: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "method_name": "get_item_count"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticNetwork.get_supply_counts",
    "content": "Method: LuaLogisticNetwork.get_supply_counts\nDescription: Get the amount of items of the given type indexed by the storage member.\n\nParameters:\n- item (ItemWithQualityID): Item name to check.\n\nReturns:\n- LogisticsNetworkSupplyCounts: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "method_name": "get_supply_counts"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticNetwork.get_supply_points",
    "content": "Method: LuaLogisticNetwork.get_supply_points\nDescription: Gets the logistic points with of the given type indexed by the storage member.\n\nParameters:\n- item (ItemWithQualityID): Item name to check.\n\nReturns:\n- LogisticsNetworkSupplyPoints: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "method_name": "get_supply_points"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticNetwork.insert",
    "content": "Method: LuaLogisticNetwork.insert\nDescription: Insert items into the logistic network. This will actually insert the items into some logistic chests.",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "method_name": "insert"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticNetwork.insert",
    "content": "Parameters:\n- item (ItemStackIdentification): What to insert.",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "method_name": "insert"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticNetwork.insert",
    "content": "- members ({'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'storage'}, {'complex_type': 'literal', 'value': 'storage-empty'}, {'complex_type': 'literal', 'value': 'storage-empty-slot'}, {'complex_type': 'literal', 'value': 'requester'}], 'full_format': False})[Optional]: Which logistic members to insert the items to. `\"storage-empty\"` inserts into storage chests that are completely empty, `\"storage-empty-slot\"` inserts into storage chests that have an empty slot. If not",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "method_name": "insert"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticNetwork.insert",
    "content": "inserts into storage chests that have an empty slot. If not specified, inserts items into the logistic network in the usual order.",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "method_name": "insert"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticNetwork.insert",
    "content": "Returns:\n- uint: Number of items actually inserted.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "method_name": "insert"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticNetwork.remove_item",
    "content": "Method: LuaLogisticNetwork.remove_item\nDescription: Remove items from the logistic network. This will actually remove the items from some logistic chests.",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "method_name": "remove_item"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticNetwork.remove_item",
    "content": "Parameters:\n- item (ItemStackIdentification): What to remove.\n- members ({'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'active-provider'}, {'complex_type': 'literal', 'value': 'passive-provider'}, {'complex_type': 'literal', 'value': 'buffer'}, {'complex_type': 'literal', 'value': 'storage'}], 'full_format': False})[Optional]: Which logistic members to remove from. If not specified, removes from the network in the usual order.\n\nReturns:\n- uint: Number of items removed.",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "method_name": "remove_item"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticNetwork.remove_item",
    "content": "Returns:\n- uint: Number of items removed.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "method_name": "remove_item"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticNetwork.select_drop_point",
    "content": "Method: LuaLogisticNetwork.select_drop_point\nDescription: Find a logistic point to drop the specific item stack.",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "method_name": "select_drop_point"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticNetwork.select_drop_point",
    "content": "Parameters:\n- members ({'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'storage'}, {'complex_type': 'literal', 'value': 'storage-empty'}, {'complex_type': 'literal', 'value': 'storage-empty-slot'}, {'complex_type': 'literal', 'value': 'requester'}], 'full_format': False})[Optional]: When given, it will find from only the specific type of member. If not specified, selects with normal priorities.\n- stack (ItemStackIdentification): Name of the item to drop off.",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "method_name": "select_drop_point"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticNetwork.select_drop_point",
    "content": "Returns:\n- LuaLogisticPoint: `nil` if no point was found.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "method_name": "select_drop_point"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticNetwork.select_pickup_point",
    "content": "Method: LuaLogisticNetwork.select_pickup_point\nDescription: Find the 'best' logistic point with this item ID and from the given position or from given chest type.",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "method_name": "select_pickup_point"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticNetwork.select_pickup_point",
    "content": "Parameters:\n- include_buffers (boolean)[Optional]: Whether to consider buffer chests or not. Defaults to false. Only considered if selecting with position.",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "method_name": "select_pickup_point"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticNetwork.select_pickup_point",
    "content": "- members ({'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'active-provider'}, {'complex_type': 'literal', 'value': 'passive-provider'}, {'complex_type': 'literal', 'value': 'buffer'}, {'complex_type': 'literal', 'value': 'storage'}], 'full_format': False})[Optional]: When given, it will find from only the specific type of member. If not specified, selects with normal priorities. Not considered if position is specified.\n- name (ItemWithQualityID): Name of the item to pick up.",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "method_name": "select_pickup_point"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticNetwork.select_pickup_point",
    "content": "- name (ItemWithQualityID): Name of the item to pick up.\n- position (MapPosition)[Optional]: When given, it will find the storage 'best' storage point from this position.",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "method_name": "select_pickup_point"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticNetwork.select_pickup_point",
    "content": "Returns:\n- LuaLogisticPoint: `nil` if no point was found.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "method_name": "select_pickup_point"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticNetwork.active_provider_points",
    "content": "Attribute: active_provider_points \nRead_type: {'complex_type': 'array', 'value': 'LuaLogisticPoint'}\n\nDescription: All active provider points in this network.\n",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "attribute_name": "active_provider_points"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticNetwork.all_construction_robots",
    "content": "Attribute: all_construction_robots \nRead_type: uint\n\nDescription: The total number of construction robots in the network (idle and active + in roboports).\n",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "attribute_name": "all_construction_robots"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticNetwork.all_logistic_robots",
    "content": "Attribute: all_logistic_robots \nRead_type: uint\n\nDescription: The total number of logistic robots in the network (idle and active + in roboports).\n",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "attribute_name": "all_logistic_robots"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticNetwork.available_construction_robots",
    "content": "Attribute: available_construction_robots \nRead_type: uint\n\nDescription: Number of construction robots available for a job.\n",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "attribute_name": "available_construction_robots"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticNetwork.available_logistic_robots",
    "content": "Attribute: available_logistic_robots \nRead_type: uint\n\nDescription: Number of logistic robots available for a job.\n",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "attribute_name": "available_logistic_robots"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticNetwork.cells",
    "content": "Attribute: cells \nRead_type: {'complex_type': 'array', 'value': 'LuaLogisticCell'}\n\nDescription: All cells in this network.\n",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "attribute_name": "cells"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticNetwork.construction_robots",
    "content": "Attribute: construction_robots \nRead_type: {'complex_type': 'array', 'value': 'LuaEntity'}\n\nDescription: All construction robots in this logistic network.\n",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "attribute_name": "construction_robots"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticNetwork.empty_provider_points",
    "content": "Attribute: empty_provider_points \nRead_type: {'complex_type': 'array', 'value': 'LuaLogisticPoint'}\n\nDescription: All things that have empty provider points in this network.\n",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "attribute_name": "empty_provider_points"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticNetwork.empty_providers",
    "content": "Attribute: empty_providers \nRead_type: {'complex_type': 'array', 'value': 'LuaEntity'}\n\nDescription: All entities that have empty logistic provider points in this network.\n",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "attribute_name": "empty_providers"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticNetwork.force",
    "content": "Attribute: force \nRead_type: LuaForce\n\nDescription: The force this logistic network belongs to.\n",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "attribute_name": "force"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticNetwork.logistic_members",
    "content": "Attribute: logistic_members \nRead_type: {'complex_type': 'array', 'value': 'LuaEntity'}\n\nDescription: All other entities that have logistic points in this network (inserters mostly).\n",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "attribute_name": "logistic_members"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticNetwork.logistic_robots",
    "content": "Attribute: logistic_robots \nRead_type: {'complex_type': 'array', 'value': 'LuaEntity'}\n\nDescription: All logistic robots in this logistic network.\n",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "attribute_name": "logistic_robots"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticNetwork.network_id",
    "content": "Attribute: network_id \nRead_type: uint\n\nDescription: The unique logistic network ID.\n",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "attribute_name": "network_id"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticNetwork.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticNetwork.passive_provider_points",
    "content": "Attribute: passive_provider_points \nRead_type: {'complex_type': 'array', 'value': 'LuaLogisticPoint'}\n\nDescription: All passive provider points in this network.\n",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "attribute_name": "passive_provider_points"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticNetwork.provider_points",
    "content": "Attribute: provider_points \nRead_type: {'complex_type': 'array', 'value': 'LuaLogisticPoint'}\n\nDescription: All things that have provider points in this network.\n",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "attribute_name": "provider_points"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticNetwork.providers",
    "content": "Attribute: providers \nRead_type: {'complex_type': 'array', 'value': 'LuaEntity'}\n\nDescription: All entities that have logistic provider points in this network.\n",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "attribute_name": "providers"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticNetwork.requester_points",
    "content": "Attribute: requester_points \nRead_type: {'complex_type': 'array', 'value': 'LuaLogisticPoint'}\n\nDescription: All things that have requester points in this network.\n",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "attribute_name": "requester_points"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticNetwork.requesters",
    "content": "Attribute: requesters \nRead_type: {'complex_type': 'array', 'value': 'LuaEntity'}\n\nDescription: All entities that have logistic requester points in this network.\n",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "attribute_name": "requesters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticNetwork.robot_limit",
    "content": "Attribute: robot_limit \nRead_type: uint\n\nDescription: Maximum number of robots the network can work with. Currently only used for the personal roboport.\n",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "attribute_name": "robot_limit"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticNetwork.robots",
    "content": "Attribute: robots \nRead_type: {'complex_type': 'array', 'value': 'LuaEntity'}\n\nDescription: All robots in this logistic network.\n",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "attribute_name": "robots"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticNetwork.storage_points",
    "content": "Attribute: storage_points \nRead_type: {'complex_type': 'array', 'value': 'LuaLogisticPoint'}\n\nDescription: All things that have storage points in this network.\n",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "attribute_name": "storage_points"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticNetwork.storages",
    "content": "Attribute: storages \nRead_type: {'complex_type': 'array', 'value': 'LuaEntity'}\n\nDescription: All entities that have logistic storage points in this network.\n",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "attribute_name": "storages"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticNetwork.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaLogisticNetwork",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaLogisticPoint",
    "content": "Class: LuaLogisticPoint\nDescription: Logistic point of a particular [LuaEntity](runtime:LuaEntity). A \"Logistic point\" is the name given for settings and properties used by requester, provider, and storage points in a given logistic network. These \"points\" don't have to be a logistic container but often are. One other entity that can own several points is the \"character\" character type entity.",
    "metadata": {
      "class_name": "LuaLogisticPoint",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticPoint.add_section",
    "content": "Method: LuaLogisticPoint.add_section\nDescription: Adds a new logistic section to this logistic point if possible.\n\nParameters:\n- group (string)[Optional]: The group to assign this section to.\n\nReturns:\n- LuaLogisticSection: The added logistic section.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaLogisticPoint",
      "method_name": "add_section"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticPoint.get_section",
    "content": "Method: LuaLogisticPoint.get_section\nDescription: Gets section on the selected index, if it exists\n\nParameters:\n- section_index (uint): Index of the section\n\nReturns:\n- LuaLogisticSection: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaLogisticPoint",
      "method_name": "get_section"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticPoint.remove_section",
    "content": "Method: LuaLogisticPoint.remove_section\nDescription: Removes the given logistic section if possible. Removal may fail if the section index is out of range or the section is not [manual](runtime:LuaLogisticSection::is_manual).\n\nParameters:\n- section_index (uint): Index of the section\n\nReturns:\n- boolean: Whether section was removed.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaLogisticPoint",
      "method_name": "remove_section"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticPoint.enabled",
    "content": "Attribute: enabled \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether this logistic point is active, related to disabling logistics on player/spidertron.\n\nWhen the logistic point is disabled it won't request and auto trash will do nothing.\n",
    "metadata": {
      "class_name": "LuaLogisticPoint",
      "attribute_name": "enabled"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticPoint.exact",
    "content": "Attribute: exact \nRead_type: boolean\n\nDescription: If this logistic point is using the exact mode. In exact mode robots never over-deliver requests.\n",
    "metadata": {
      "class_name": "LuaLogisticPoint",
      "attribute_name": "exact"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticPoint.filters",
    "content": "Attribute: filters [Optional]\nRead_type: {'complex_type': 'array', 'value': 'CompiledLogisticFilter'}\n\nDescription: The logistic filters for this logistic point, if this uses any.\n\nThe returned array will always have an entry for each filter and will be indexed in sequence when not `nil`.",
    "metadata": {
      "class_name": "LuaLogisticPoint",
      "attribute_name": "filters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticPoint.force",
    "content": "Attribute: force \nRead_type: LuaForce\n\nDescription: The force of this logistic point.\n\nThis will always be the same as the [LuaLogisticPoint::owner](runtime:LuaLogisticPoint::owner) force.\n",
    "metadata": {
      "class_name": "LuaLogisticPoint",
      "attribute_name": "force"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticPoint.logistic_member_index",
    "content": "Attribute: logistic_member_index \nRead_type: uint\n\nDescription: The Logistic member index of this logistic point.\n",
    "metadata": {
      "class_name": "LuaLogisticPoint",
      "attribute_name": "logistic_member_index"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticPoint.logistic_network",
    "content": "Attribute: logistic_network \nRead_type: LuaLogisticNetwork\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaLogisticPoint",
      "attribute_name": "logistic_network"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticPoint.mode",
    "content": "Attribute: mode \nRead_type: defines.logistic_mode\n\nDescription: The logistic mode.\n",
    "metadata": {
      "class_name": "LuaLogisticPoint",
      "attribute_name": "mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticPoint.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaLogisticPoint",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticPoint.owner",
    "content": "Attribute: owner \nRead_type: LuaEntity\n\nDescription: The [LuaEntity](runtime:LuaEntity) owner of this LuaLogisticPoint.\n",
    "metadata": {
      "class_name": "LuaLogisticPoint",
      "attribute_name": "owner"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticPoint.sections",
    "content": "Attribute: sections \nRead_type: {'complex_type': 'array', 'value': 'LuaLogisticSection'}\n\nDescription: All logistic sections of this logistic point.\n",
    "metadata": {
      "class_name": "LuaLogisticPoint",
      "attribute_name": "sections"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticPoint.sections_count",
    "content": "Attribute: sections_count \nRead_type: uint\n\nDescription: Amount of logistic sections this logistic point has.\n",
    "metadata": {
      "class_name": "LuaLogisticPoint",
      "attribute_name": "sections_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticPoint.targeted_items_deliver",
    "content": "Attribute: targeted_items_deliver \nRead_type: {'complex_type': 'array', 'value': 'ItemWithQualityCounts'}\n\nDescription: Items targeted to be dropped off into this logistic point by robots.\n",
    "metadata": {
      "class_name": "LuaLogisticPoint",
      "attribute_name": "targeted_items_deliver"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticPoint.targeted_items_pickup",
    "content": "Attribute: targeted_items_pickup \nRead_type: {'complex_type': 'array', 'value': 'ItemWithQualityCounts'}\n\nDescription: Items targeted to be picked up from this logistic point by robots.\n",
    "metadata": {
      "class_name": "LuaLogisticPoint",
      "attribute_name": "targeted_items_pickup"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticPoint.trash_not_requested",
    "content": "Attribute: trash_not_requested \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether this logistic point is set to trash unrequested items.\n",
    "metadata": {
      "class_name": "LuaLogisticPoint",
      "attribute_name": "trash_not_requested"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticPoint.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaLogisticPoint",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaLogisticSection",
    "content": "Class: LuaLogisticSection\nDescription: Logistic section of a particular [LuaLogisticPoint](runtime:LuaLogisticPoint) or [LuaConstantCombinatorControlBehavior](runtime:LuaConstantCombinatorControlBehavior).",
    "metadata": {
      "class_name": "LuaLogisticSection",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticSection.clear_slot",
    "content": "Method: LuaLogisticSection.clear_slot\nDescription: Clears the logistic request and auto-trash from the given slot.\n\nThis can only be called when the section [is manual](runtime:LuaLogisticSection::is_manual).\n\nParameters:\n- slot_index (LogisticFilterIndex): Index of a slot to clear.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaLogisticSection",
      "method_name": "clear_slot"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticSection.get_slot",
    "content": "Method: LuaLogisticSection.get_slot\nDescription: Gets current settings of logistic request and auto-trash from the given slot.\n\nParameters:\n- slot_index (LogisticFilterIndex): Index of a slot to read.\n\nReturns:\n- LogisticFilter: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaLogisticSection",
      "method_name": "get_slot"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticSection.set_slot",
    "content": "Method: LuaLogisticSection.set_slot\nDescription: Sets logistic request and auto-trash slot to the given value.\n\nThis will silently fail if personal logistics are not researched yet.\n\nThis can only be called when the section [is manual](runtime:LuaLogisticSection::is_manual).\n\nParameters:\n- filter (LogisticFilter): The details of the filter to set.\n- slot_index (LogisticFilterIndex): Index of a slot to set.\n\nRaises:\n- on_entity_logistic_slot_changed: Raised if setting of logistic slot was successful.",
    "metadata": {
      "class_name": "LuaLogisticSection",
      "method_name": "set_slot"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticSection.set_slot",
    "content": "Format:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaLogisticSection",
      "method_name": "set_slot"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticSection.active",
    "content": "Attribute: active \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether this section is active. This can only be written to when the section [is manual](runtime:LuaLogisticSection::is_manual).\n",
    "metadata": {
      "class_name": "LuaLogisticSection",
      "attribute_name": "active"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticSection.filters",
    "content": "Attribute: filters \nRead_type: {'complex_type': 'array', 'value': 'LogisticFilter'}\nWrite_type: {\"complex_type\": \"array\", \"value\": \"LogisticFilter\"}\nDescription: The logistic filters for this section.\n\nThis can only be written to when the section [is manual](runtime:LuaLogisticSection::is_manual).",
    "metadata": {
      "class_name": "LuaLogisticSection",
      "attribute_name": "filters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticSection.filters_count",
    "content": "Attribute: filters_count \nRead_type: uint\n\nDescription: Amount of filters this section has\n",
    "metadata": {
      "class_name": "LuaLogisticSection",
      "attribute_name": "filters_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticSection.group",
    "content": "Attribute: group \nRead_type: string\nWrite_type: string\nDescription: The group this section belongs to.\n\nAn empty string when in no group.\n\nThis can only be written to when the section [is manual](runtime:LuaLogisticSection::is_manual).\n",
    "metadata": {
      "class_name": "LuaLogisticSection",
      "attribute_name": "group"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticSection.index",
    "content": "Attribute: index \nRead_type: uint\n\nDescription: The section index of this section.\n",
    "metadata": {
      "class_name": "LuaLogisticSection",
      "attribute_name": "index"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticSection.is_manual",
    "content": "Attribute: is_manual \nRead_type: boolean\n\nDescription: Shortcut to check whether [LuaLogisticSection::type](runtime:LuaLogisticSection::type) is equal to [manual](runtime:defines.logistic_section_type.manual).\n",
    "metadata": {
      "class_name": "LuaLogisticSection",
      "attribute_name": "is_manual"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticSection.multiplier",
    "content": "Attribute: multiplier \nRead_type: float\nWrite_type: float\nDescription: Multiplier applied to all filters before they are used by game. This can only be written to when the section [is manual](runtime:LuaLogisticSection::is_manual).\n",
    "metadata": {
      "class_name": "LuaLogisticSection",
      "attribute_name": "multiplier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticSection.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaLogisticSection",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticSection.owner",
    "content": "Attribute: owner \nRead_type: LuaEntity\n\nDescription: The [LuaEntity](runtime:LuaEntity) owner of this LuaLogisticSection.\n",
    "metadata": {
      "class_name": "LuaLogisticSection",
      "attribute_name": "owner"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticSection.type",
    "content": "Attribute: type \nRead_type: defines.logistic_section_type\n\nDescription: The type of this logistic section. Sections that are not manual are controlled by game itself and may not be allowed to be changed by script.\n",
    "metadata": {
      "class_name": "LuaLogisticSection",
      "attribute_name": "type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticSection.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaLogisticSection",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaLogisticSections",
    "content": "Class: LuaLogisticSections\nDescription: Logistic sections of an entity.",
    "metadata": {
      "class_name": "LuaLogisticSections",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticSections.add_section",
    "content": "Method: LuaLogisticSections.add_section\nDescription: Adds a new logistic section if possible.\n\nParameters:\n- group (string)[Optional]: The group to assign this section to.\n\nReturns:\n- LuaLogisticSection: Logistic section if added.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaLogisticSections",
      "method_name": "add_section"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticSections.get_section",
    "content": "Method: LuaLogisticSections.get_section\nDescription: Gets section on the selected index, if it exists.\n\nParameters:\n- section_index (uint): Index of the section.\n\nReturns:\n- LuaLogisticSection: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaLogisticSections",
      "method_name": "get_section"
    }
  },
  {
    "type": "method",
    "name": "LuaLogisticSections.remove_section",
    "content": "Method: LuaLogisticSections.remove_section\nDescription: Removes the given logistic section if possible. Removal may fail if the section index is out of range or the section is not [manual](runtime:LuaLogisticSection::is_manual).\n\nParameters:\n- section_index (uint): Index of the section.\n\nReturns:\n- boolean: Whether section was removed.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaLogisticSections",
      "method_name": "remove_section"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticSections.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaLogisticSections",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticSections.sections",
    "content": "Attribute: sections \nRead_type: {'complex_type': 'array', 'value': 'LuaLogisticSection'}\n\nDescription: All logistic sections of this entity.\n",
    "metadata": {
      "class_name": "LuaLogisticSections",
      "attribute_name": "sections"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticSections.sections_count",
    "content": "Attribute: sections_count \nRead_type: uint\n\nDescription: Amount of logistic sections this entity has.\n",
    "metadata": {
      "class_name": "LuaLogisticSections",
      "attribute_name": "sections_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaLogisticSections.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaLogisticSections",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaMiningDrillControlBehavior",
    "content": "Class: LuaMiningDrillControlBehavior\nDescription: Control behavior for mining drills.",
    "metadata": {
      "class_name": "LuaMiningDrillControlBehavior",
      "parent_class": "LuaGenericOnOffControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaMiningDrillControlBehavior.circuit_read_resources",
    "content": "Attribute: circuit_read_resources \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if this drill should send the resources in the field to the circuit network.\n\nWhich resources depends on [LuaMiningDrillControlBehavior::resource_read_mode](runtime:LuaMiningDrillControlBehavior::resource_read_mode)",
    "metadata": {
      "class_name": "LuaMiningDrillControlBehavior",
      "attribute_name": "circuit_read_resources"
    }
  },
  {
    "type": "attribute",
    "name": "LuaMiningDrillControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaMiningDrillControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaMiningDrillControlBehavior.resource_read_mode",
    "content": "Attribute: resource_read_mode \nRead_type: defines.control_behavior.mining_drill.resource_read_mode\nWrite_type: defines.control_behavior.mining_drill.resource_read_mode\nDescription: If the mining drill should send just the resources in its area or the entire field it's on to the circuit network.",
    "metadata": {
      "class_name": "LuaMiningDrillControlBehavior",
      "attribute_name": "resource_read_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaMiningDrillControlBehavior.resource_read_targets",
    "content": "Attribute: resource_read_targets \nRead_type: {'complex_type': 'array', 'value': 'LuaEntity'}\n\nDescription: The resource entities that the mining drill will send information about to the circuit network or an empty array.\n",
    "metadata": {
      "class_name": "LuaMiningDrillControlBehavior",
      "attribute_name": "resource_read_targets"
    }
  },
  {
    "type": "attribute",
    "name": "LuaMiningDrillControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaMiningDrillControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaModSettingPrototype",
    "content": "Class: LuaModSettingPrototype\nDescription: Prototype of a mod setting.",
    "metadata": {
      "class_name": "LuaModSettingPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaModSettingPrototype.allow_blank",
    "content": "Attribute: allow_blank [Optional]\nRead_type: boolean\n\nDescription: Whether this string setting allows blank values. `nil` if not a string setting.\n",
    "metadata": {
      "class_name": "LuaModSettingPrototype",
      "attribute_name": "allow_blank"
    }
  },
  {
    "type": "attribute",
    "name": "LuaModSettingPrototype.allowed_values",
    "content": "Attribute: allowed_values [Optional]\nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'array', 'value': 'string'}, {'complex_type': 'array', 'value': 'int'}, {'complex_type': 'array', 'value': 'double'}], 'full_format': False}\n\nDescription: The allowed values for this setting. `nil` if this setting doesn't use the a fixed set of values.",
    "metadata": {
      "class_name": "LuaModSettingPrototype",
      "attribute_name": "allowed_values"
    }
  },
  {
    "type": "attribute",
    "name": "LuaModSettingPrototype.auto_trim",
    "content": "Attribute: auto_trim [Optional]\nRead_type: boolean\n\nDescription: Whether this string setting auto-trims values. `nil` if not a string setting\n",
    "metadata": {
      "class_name": "LuaModSettingPrototype",
      "attribute_name": "auto_trim"
    }
  },
  {
    "type": "attribute",
    "name": "LuaModSettingPrototype.default_value",
    "content": "Attribute: default_value \nRead_type: {'complex_type': 'union', 'options': ['boolean', 'double', 'int', 'string', 'Color'], 'full_format': False}\n\nDescription: The default value of this setting.\n",
    "metadata": {
      "class_name": "LuaModSettingPrototype",
      "attribute_name": "default_value"
    }
  },
  {
    "type": "attribute",
    "name": "LuaModSettingPrototype.maximum_value",
    "content": "Attribute: maximum_value [Optional]\nRead_type: {'complex_type': 'union', 'options': ['double', 'int'], 'full_format': False}\n\nDescription: The maximum value for this setting. `nil` if this setting type doesn't support a maximum.\n",
    "metadata": {
      "class_name": "LuaModSettingPrototype",
      "attribute_name": "maximum_value"
    }
  },
  {
    "type": "attribute",
    "name": "LuaModSettingPrototype.minimum_value",
    "content": "Attribute: minimum_value [Optional]\nRead_type: {'complex_type': 'union', 'options': ['double', 'int'], 'full_format': False}\n\nDescription: The minimum value for this setting. `nil` if this setting type doesn't support a minimum.\n",
    "metadata": {
      "class_name": "LuaModSettingPrototype",
      "attribute_name": "minimum_value"
    }
  },
  {
    "type": "attribute",
    "name": "LuaModSettingPrototype.mod",
    "content": "Attribute: mod \nRead_type: string\n\nDescription: The mod that owns this setting.\n",
    "metadata": {
      "class_name": "LuaModSettingPrototype",
      "attribute_name": "mod"
    }
  },
  {
    "type": "attribute",
    "name": "LuaModSettingPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaModSettingPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaModSettingPrototype.setting_type",
    "content": "Attribute: setting_type \nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'startup'}, {'complex_type': 'literal', 'value': 'runtime-global'}, {'complex_type': 'literal', 'value': 'runtime-per-user'}], 'full_format': False}\n\nDescription:",
    "metadata": {
      "class_name": "LuaModSettingPrototype",
      "attribute_name": "setting_type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaModSettingPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaModSettingPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaModuleCategoryPrototype",
    "content": "Class: LuaModuleCategoryPrototype\nDescription: Prototype of a module category.",
    "metadata": {
      "class_name": "LuaModuleCategoryPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaModuleCategoryPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaModuleCategoryPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaModuleCategoryPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaModuleCategoryPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaNamedNoiseExpression",
    "content": "Class: LuaNamedNoiseExpression\nDescription: Prototype of a named noise expression.",
    "metadata": {
      "class_name": "LuaNamedNoiseExpression",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaNamedNoiseExpression.expression",
    "content": "Attribute: expression \nRead_type: string\n\nDescription: The expression itself.\n",
    "metadata": {
      "class_name": "LuaNamedNoiseExpression",
      "attribute_name": "expression"
    }
  },
  {
    "type": "attribute",
    "name": "LuaNamedNoiseExpression.intended_property",
    "content": "Attribute: intended_property \nRead_type: string\n\nDescription: Name of the property that this expression is intended to provide a value for, if any.\n",
    "metadata": {
      "class_name": "LuaNamedNoiseExpression",
      "attribute_name": "intended_property"
    }
  },
  {
    "type": "attribute",
    "name": "LuaNamedNoiseExpression.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaNamedNoiseExpression",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaNamedNoiseExpression.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaNamedNoiseExpression",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaNamedNoiseFunction",
    "content": "Class: LuaNamedNoiseFunction\nDescription: Prototype of a named noise function.",
    "metadata": {
      "class_name": "LuaNamedNoiseFunction",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaNamedNoiseFunction.expression",
    "content": "Attribute: expression \nRead_type: string\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaNamedNoiseFunction",
      "attribute_name": "expression"
    }
  },
  {
    "type": "attribute",
    "name": "LuaNamedNoiseFunction.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaNamedNoiseFunction",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaNamedNoiseFunction.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaNamedNoiseFunction",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaParticlePrototype",
    "content": "Class: LuaParticlePrototype\nDescription: Prototype of an optimized particle.",
    "metadata": {
      "class_name": "LuaParticlePrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaParticlePrototype.ended_in_water_trigger_effect",
    "content": "Attribute: ended_in_water_trigger_effect \nRead_type: TriggerEffectItem\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaParticlePrototype",
      "attribute_name": "ended_in_water_trigger_effect"
    }
  },
  {
    "type": "attribute",
    "name": "LuaParticlePrototype.ended_on_ground_trigger_effect",
    "content": "Attribute: ended_on_ground_trigger_effect \nRead_type: TriggerEffectItem\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaParticlePrototype",
      "attribute_name": "ended_on_ground_trigger_effect"
    }
  },
  {
    "type": "attribute",
    "name": "LuaParticlePrototype.fade_out_time",
    "content": "Attribute: fade_out_time \nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaParticlePrototype",
      "attribute_name": "fade_out_time"
    }
  },
  {
    "type": "attribute",
    "name": "LuaParticlePrototype.life_time",
    "content": "Attribute: life_time \nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaParticlePrototype",
      "attribute_name": "life_time"
    }
  },
  {
    "type": "attribute",
    "name": "LuaParticlePrototype.mining_particle_frame_speed",
    "content": "Attribute: mining_particle_frame_speed \nRead_type: float\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaParticlePrototype",
      "attribute_name": "mining_particle_frame_speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaParticlePrototype.movement_modifier",
    "content": "Attribute: movement_modifier \nRead_type: float\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaParticlePrototype",
      "attribute_name": "movement_modifier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaParticlePrototype.movement_modifier_when_on_ground",
    "content": "Attribute: movement_modifier_when_on_ground \nRead_type: float\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaParticlePrototype",
      "attribute_name": "movement_modifier_when_on_ground"
    }
  },
  {
    "type": "attribute",
    "name": "LuaParticlePrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaParticlePrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaParticlePrototype.regular_trigger_effect",
    "content": "Attribute: regular_trigger_effect \nRead_type: TriggerEffectItem\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaParticlePrototype",
      "attribute_name": "regular_trigger_effect"
    }
  },
  {
    "type": "attribute",
    "name": "LuaParticlePrototype.regular_trigger_effect_frequency",
    "content": "Attribute: regular_trigger_effect_frequency \nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaParticlePrototype",
      "attribute_name": "regular_trigger_effect_frequency"
    }
  },
  {
    "type": "attribute",
    "name": "LuaParticlePrototype.render_layer",
    "content": "Attribute: render_layer \nRead_type: RenderLayer\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaParticlePrototype",
      "attribute_name": "render_layer"
    }
  },
  {
    "type": "attribute",
    "name": "LuaParticlePrototype.render_layer_when_on_ground",
    "content": "Attribute: render_layer_when_on_ground \nRead_type: RenderLayer\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaParticlePrototype",
      "attribute_name": "render_layer_when_on_ground"
    }
  },
  {
    "type": "attribute",
    "name": "LuaParticlePrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaParticlePrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaParticlePrototype.vertical_acceleration",
    "content": "Attribute: vertical_acceleration \nRead_type: float\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaParticlePrototype",
      "attribute_name": "vertical_acceleration"
    }
  },
  {
    "type": "class",
    "name": "LuaPermissionGroup",
    "content": "Class: LuaPermissionGroup\nDescription: A permission group that defines what players in this group are allowed to do.",
    "metadata": {
      "class_name": "LuaPermissionGroup",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaPermissionGroup.add_player",
    "content": "Method: LuaPermissionGroup.add_player\nDescription: Adds the given player to this group.\n\nParameters:\n- player (PlayerIdentification): \n\nReturns:\n- boolean: Whether the player was added.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPermissionGroup",
      "method_name": "add_player"
    }
  },
  {
    "type": "method",
    "name": "LuaPermissionGroup.allows_action",
    "content": "Method: LuaPermissionGroup.allows_action\nDescription: Whether this group allows the given action.\n\nParameters:\n- action (defines.input_action): The action in question.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPermissionGroup",
      "method_name": "allows_action"
    }
  },
  {
    "type": "method",
    "name": "LuaPermissionGroup.destroy",
    "content": "Method: LuaPermissionGroup.destroy\nDescription: Destroys this group.\n\nReturns:\n- boolean: Whether the group was successfully destroyed.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPermissionGroup",
      "method_name": "destroy"
    }
  },
  {
    "type": "method",
    "name": "LuaPermissionGroup.remove_player",
    "content": "Method: LuaPermissionGroup.remove_player\nDescription: Removes the given player from this group.\n\nParameters:\n- player (PlayerIdentification): \n\nReturns:\n- boolean: Whether the player was removed.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPermissionGroup",
      "method_name": "remove_player"
    }
  },
  {
    "type": "method",
    "name": "LuaPermissionGroup.set_allows_action",
    "content": "Method: LuaPermissionGroup.set_allows_action\nDescription: Sets whether this group allows the performance the given action.\n\nParameters:\n- action (defines.input_action): The action in question.\n- allow_action (boolean): Whether to allow the specified action.\n\nReturns:\n- boolean: Whether the value was successfully applied.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPermissionGroup",
      "method_name": "set_allows_action"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPermissionGroup.group_id",
    "content": "Attribute: group_id \nRead_type: uint\n\nDescription: The group ID\n",
    "metadata": {
      "class_name": "LuaPermissionGroup",
      "attribute_name": "group_id"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPermissionGroup.name",
    "content": "Attribute: name \nRead_type: string\nWrite_type: string\nDescription: The name of this group. Setting the name to `nil` or an empty string sets the name to the default value.\n",
    "metadata": {
      "class_name": "LuaPermissionGroup",
      "attribute_name": "name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPermissionGroup.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaPermissionGroup",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPermissionGroup.players",
    "content": "Attribute: players \nRead_type: {'complex_type': 'array', 'value': 'LuaPlayer'}\n\nDescription: The players in this group.\n",
    "metadata": {
      "class_name": "LuaPermissionGroup",
      "attribute_name": "players"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPermissionGroup.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaPermissionGroup",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaPermissionGroups",
    "content": "Class: LuaPermissionGroups\nDescription: All permission groups.",
    "metadata": {
      "class_name": "LuaPermissionGroups",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaPermissionGroups.create_group",
    "content": "Method: LuaPermissionGroups.create_group\nDescription: Creates a new permission group.\n\nParameters:\n- name (string)[Optional]: \n\nReturns:\n- LuaPermissionGroup: `nil` if the calling player doesn't have permission to make groups.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPermissionGroups",
      "method_name": "create_group"
    }
  },
  {
    "type": "method",
    "name": "LuaPermissionGroups.get_group",
    "content": "Method: LuaPermissionGroups.get_group\nDescription: Gets the permission group with the given name or group ID.\n\nParameters:\n- group ({'complex_type': 'union', 'options': ['string', 'uint'], 'full_format': False}): \n\nReturns:\n- LuaPermissionGroup: `nil` if there is no matching group.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPermissionGroups",
      "method_name": "get_group"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPermissionGroups.groups",
    "content": "Attribute: groups \nRead_type: {'complex_type': 'array', 'value': 'LuaPermissionGroup'}\n\nDescription: All of the permission groups.\n",
    "metadata": {
      "class_name": "LuaPermissionGroups",
      "attribute_name": "groups"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPermissionGroups.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaPermissionGroups",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPermissionGroups.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaPermissionGroups",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaPlanet",
    "content": "Class: LuaPlanet\nDescription: The runtime values of a planet",
    "metadata": {
      "class_name": "LuaPlanet",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaPlanet.associate_surface",
    "content": "Method: LuaPlanet.associate_surface\nDescription: Associates the given surface with this planet. Surface must not already be associated with a planet and the planet must not already have an associated surface.\n\nPlanet must not be using [entities_require_heating](runtime:LuaSpaceLocationPrototype::entities_require_heating).\n\nParameters:\n- surface (SurfaceIdentification): The surface to be associated.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlanet",
      "method_name": "associate_surface"
    }
  },
  {
    "type": "method",
    "name": "LuaPlanet.create_surface",
    "content": "Method: LuaPlanet.create_surface\nDescription: Creates the associated surface if one doesn't already exist.\n\nReturns:\n- LuaSurface: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlanet",
      "method_name": "create_surface"
    }
  },
  {
    "type": "method",
    "name": "LuaPlanet.reset_map_gen_settings",
    "content": "Method: LuaPlanet.reset_map_gen_settings\nDescription: Resets the map gen settings on this planet to the default from-prototype state.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlanet",
      "method_name": "reset_map_gen_settings"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlanet.name",
    "content": "Attribute: name \nRead_type: string\n\nDescription: The planets name.\n",
    "metadata": {
      "class_name": "LuaPlanet",
      "attribute_name": "name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlanet.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaPlanet",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlanet.prototype",
    "content": "Attribute: prototype \nRead_type: LuaSpaceLocationPrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaPlanet",
      "attribute_name": "prototype"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlanet.surface",
    "content": "Attribute: surface [Optional]\nRead_type: LuaSurface\n\nDescription: The surface for this planet if one currently exists.\n\nPlanets do not default generate their surface. [LuaPlanet::create_surface](runtime:LuaPlanet::create_surface) can be used to force the surface to exist.\n\n[LuaPlanet::associate_surface](runtime:LuaPlanet::associate_surface) can be used to create an association with an existing surface.",
    "metadata": {
      "class_name": "LuaPlanet",
      "attribute_name": "surface"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlanet.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaPlanet",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaPlayer",
    "content": "Class: LuaPlayer\nDescription: A player in the game. Pay attention that a player may or may not have a character, which is the [LuaEntity](runtime:LuaEntity) of the little guy running around the world doing things.",
    "metadata": {
      "class_name": "LuaPlayer",
      "parent_class": "LuaControl"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.activate_paste",
    "content": "Method: LuaPlayer.activate_paste\nDescription: Gets a copy of the currently selected blueprint in the clipboard queue into the player's cursor, as if the player activated Paste.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "activate_paste"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.add_alert",
    "content": "Method: LuaPlayer.add_alert\nDescription: Adds an alert to this player for the given entity of the given alert type.\n\nParameters:\n- entity (LuaEntity): \n- type (defines.alert_type): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "add_alert"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.add_custom_alert",
    "content": "Method: LuaPlayer.add_custom_alert\nDescription: Adds a custom alert to this player.\n\nParameters:\n- entity (LuaEntity): If the alert is clicked, the map will open at the position of this entity.\n- icon (SignalID): \n- message (LocalisedString): \n- show_on_map (boolean): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "add_custom_alert"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.add_recipe_notification",
    "content": "Method: LuaPlayer.add_recipe_notification\nDescription: Adds the given recipe to the list of recipe notifications for this player.\n\nParameters:\n- recipe (RecipeID): Recipe to add.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "add_recipe_notification"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.add_to_clipboard",
    "content": "Method: LuaPlayer.add_to_clipboard\nDescription: Adds the given blueprint to this player's clipboard queue.\n\nParameters:\n- blueprint (LuaItemStack): The blueprint to add.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "add_to_clipboard"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.associate_character",
    "content": "Method: LuaPlayer.associate_character\nDescription: Associates a character with this player.\n\nThe character must not be connected to any controller.\n\nIf this player is currently disconnected (see [LuaPlayer::connected](runtime:LuaPlayer::connected)) the character will be immediately \"logged off\".\n\nSee [LuaPlayer::get_associated_characters](runtime:LuaPlayer::get_associated_characters) for more information.\n\nParameters:\n- character (LuaEntity): The character entity.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "associate_character"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.build_from_cursor",
    "content": "Method: LuaPlayer.build_from_cursor\nDescription: Builds whatever is in the cursor on the surface the player is on. The cursor stack will automatically be reduced as if the player built normally.",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "build_from_cursor"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.build_from_cursor",
    "content": "Parameters:\n- build_mode (defines.build_mode)[Optional]: Which build mode should be used instead of normal build. Defaults to normal.\n- direction (defines.direction)[Optional]: Direction the entity would be placed\n- mirror (boolean)[Optional]: Whether to mirror the entity\n- position (MapPosition): Where the entity would be placed\n- skip_fog_of_war (boolean)[Optional]: If chunks covered by fog-of-war are skipped.",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "build_from_cursor"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.build_from_cursor",
    "content": "- terrain_building_size (uint)[Optional]: The size for building terrain if building terrain. Defaults to 2.",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "build_from_cursor"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.build_from_cursor",
    "content": "Raises:\n- on_built_entity: Raised if the cursor was successfully built.\n- on_pre_build: Raised if the cursor was successfully built.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "build_from_cursor"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.can_build_from_cursor",
    "content": "Method: LuaPlayer.can_build_from_cursor\nDescription: Checks if this player can build what ever is in the cursor on the surface the player is on.",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "can_build_from_cursor"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.can_build_from_cursor",
    "content": "Parameters:\n- build_mode (defines.build_mode)[Optional]: Which build mode should be used instead of normal build. Defaults to normal.\n- direction (defines.direction)[Optional]: Direction the entity would be placed\n- position (MapPosition): Where the entity would be placed\n- skip_fog_of_war (boolean)[Optional]: If chunks covered by fog-of-war are skipped.\n- terrain_building_size (uint)[Optional]: The size for building terrain if building terrain. Defaults to 2.\n\nReturns:\n- boolean:",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "can_build_from_cursor"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.can_build_from_cursor",
    "content": "Returns:\n- boolean: \n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "can_build_from_cursor"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.can_place_entity",
    "content": "Method: LuaPlayer.can_place_entity\nDescription: Checks if this player can build the given entity at the given location on the surface the player is on.\n\nParameters:\n- direction (defines.direction)[Optional]: Direction the entity would be placed. Defaults to `north`.\n- name (EntityID): Name of the entity to check.\n- position (MapPosition): Where the entity would be placed.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "can_place_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.clear_console",
    "content": "Method: LuaPlayer.clear_console\nDescription: Clear the chat console.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "clear_console"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.clear_cursor",
    "content": "Method: LuaPlayer.clear_cursor\nDescription: Invokes the \"clear cursor\" action on the player as if the user pressed it.\n\nReturns:\n- boolean: Whether the cursor is now empty.\n\nRaises:\n- on_player_cursor_stack_changed: Raised when the cursor was successfully cleared.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "clear_cursor"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.clear_inventory_highlights",
    "content": "Method: LuaPlayer.clear_inventory_highlights\nDescription: Clears the blinking of the inventory based on insertion of items\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "clear_inventory_highlights"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.clear_local_flying_texts",
    "content": "Method: LuaPlayer.clear_local_flying_texts\nDescription: Clear any active flying texts for this player.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "clear_local_flying_texts"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.clear_recipe_notification",
    "content": "Method: LuaPlayer.clear_recipe_notification\nDescription: Clears the given recipe from the list of recipe notifications for this player.\n\nParameters:\n- recipe (RecipeID): Recipe to clear.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "clear_recipe_notification"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.clear_recipe_notifications",
    "content": "Method: LuaPlayer.clear_recipe_notifications\nDescription: Clears all recipe notifications for this player.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "clear_recipe_notifications"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.clear_selection",
    "content": "Method: LuaPlayer.clear_selection\nDescription: Clears the player's selection tool selection position.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "clear_selection"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.connect_to_server",
    "content": "Method: LuaPlayer.connect_to_server\nDescription: Asks the player if they would like to connect to the given server.\n\nThis only does anything when used on a multiplayer peer. Single player and server hosts will ignore the prompt.",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "connect_to_server"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.connect_to_server",
    "content": "Parameters:\n- address (string): The server (address:port) if port is not given the default Factorio port is used.\n- description (LocalisedString)[Optional]: \n- name (LocalisedString)[Optional]: The name of the server.\n- password (string)[Optional]: The password if different from the one used to join this game. Note, if the current password is not empty but the one required to join the new server is an empty string should be given for this field.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "connect_to_server"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.create_character",
    "content": "Method: LuaPlayer.create_character\nDescription: Creates and attaches a character entity to this player.\n\nThe player must not have a character already connected and must be online (see [LuaPlayer::connected](runtime:LuaPlayer::connected)).\n\nParameters:\n- character (EntityWithQualityID)[Optional]: The character to create else the default is used.\n\nReturns:\n- boolean: Whether the character was created.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "create_character"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.create_local_flying_text",
    "content": "Method: LuaPlayer.create_local_flying_text\nDescription: Spawn flying text that is only visible to this player. Either `position` or `create_at_cursor` are required. When `create_at_cursor` is `true`, all parameters other than `text` are ignored.\n\nIf no custom `speed` is set and the text is longer than 25 characters, its `time_to_live` and `speed` are dynamically adjusted to give the player more time to read it.\n\nLocal flying text is not saved, which means it will disappear after a save/load-cycle.",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "create_local_flying_text"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.create_local_flying_text",
    "content": "Parameters:\n- color (Color)[Optional]: The color of the flying text. Defaults to white text.\n- create_at_cursor (boolean)[Optional]: If `true`, the flying text is created at the player's cursor. Defaults to `false`.\n- position (MapPosition)[Optional]: The location on the map at which to show the flying text.\n- speed (double)[Optional]: The speed at which the text rises upwards in tiles/second. Can't be a negative value.\n- text (LocalisedString): The flying text to show.",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "create_local_flying_text"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.create_local_flying_text",
    "content": "- text (LocalisedString): The flying text to show.\n- time_to_live (uint)[Optional]: The amount of ticks that the flying text will be shown for. Defaults to `80`.",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "create_local_flying_text"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.create_local_flying_text",
    "content": "Format:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "create_local_flying_text"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.disable_alert",
    "content": "Method: LuaPlayer.disable_alert\nDescription: Disables alerts for the given alert category.\n\nParameters:\n- alert_type (defines.alert_type): \n\nReturns:\n- boolean: Whether the alert type was disabled (false if it was already disabled).\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "disable_alert"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.disable_recipe_groups",
    "content": "Method: LuaPlayer.disable_recipe_groups\nDescription: Disable recipe groups.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "disable_recipe_groups"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.disable_recipe_subgroups",
    "content": "Method: LuaPlayer.disable_recipe_subgroups\nDescription: Disable recipe subgroups.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "disable_recipe_subgroups"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.disassociate_character",
    "content": "Method: LuaPlayer.disassociate_character\nDescription: Disassociates a character from this player. This is functionally the same as setting [LuaEntity::associated_player](runtime:LuaEntity::associated_player) to `nil`.\n\nSee [LuaPlayer::get_associated_characters](runtime:LuaPlayer::get_associated_characters) for more information.\n\nParameters:\n- character (LuaEntity): The character entity\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "disassociate_character"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.drag_wire",
    "content": "Method: LuaPlayer.drag_wire\nDescription: Start/end wire dragging at the specified location, wire type is based on the cursor contents\n\nParameters:\n- position (MapPosition): Position at which cursor was clicked. Used only to decide which side of arithmetic combinator, decider combinator or power switch is to be connected. Entity itself to be connected is based on the player's selected entity.\n\nReturns:\n- boolean: `true` if the action did something\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "drag_wire"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.enable_alert",
    "content": "Method: LuaPlayer.enable_alert\nDescription: Enables alerts for the given alert category.\n\nParameters:\n- alert_type (defines.alert_type): \n\nReturns:\n- boolean: Whether the alert type was enabled (false if it was already enabled).\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "enable_alert"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.enable_recipe_groups",
    "content": "Method: LuaPlayer.enable_recipe_groups\nDescription: Enable recipe groups.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "enable_recipe_groups"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.enable_recipe_subgroups",
    "content": "Method: LuaPlayer.enable_recipe_subgroups\nDescription: Enable recipe subgroups.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "enable_recipe_subgroups"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.enter_space_platform",
    "content": "Method: LuaPlayer.enter_space_platform\nDescription: Enters the given space platform if possible.\n\nParameters:\n- space_platform (SpacePlatformIdentification): \n\nReturns:\n- boolean: If the player entered the platform.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "enter_space_platform"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.exit_cutscene",
    "content": "Method: LuaPlayer.exit_cutscene\nDescription: Exit the current cutscene. Errors if not in a cutscene.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "exit_cutscene"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.get_active_quick_bar_page",
    "content": "Method: LuaPlayer.get_active_quick_bar_page\nDescription: Gets which quick bar page is being used for the given screen page or `nil` if not known.\n\nParameters:\n- index (uint): The screen page. Index 1 is the top row in the gui. Index can go beyond the visible number of bars on the screen to account for the interface config setting change.\n\nReturns:\n- uint8: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "get_active_quick_bar_page"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.get_alerts",
    "content": "Method: LuaPlayer.get_alerts\nDescription: Get all alerts matching the given filters, or all alerts if no filters are given.\n\nParameters:\n- entity (LuaEntity)[Optional]: \n- position (MapPosition)[Optional]: \n- prototype (LuaEntityPrototype)[Optional]: \n- surface (SurfaceIdentification)[Optional]: \n- type (defines.alert_type)[Optional]:",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "get_alerts"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.get_alerts",
    "content": "Returns:\n- {'complex_type': 'dictionary', 'key': 'uint', 'value': {'complex_type': 'dictionary', 'key': 'defines.alert_type', 'value': {'complex_type': 'array', 'value': 'Alert'}}}: A mapping of surface index to an array of arrays of [alerts](runtime:Alert) indexed by the [alert type](runtime:defines.alert_type).\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "get_alerts"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.get_associated_characters",
    "content": "Method: LuaPlayer.get_associated_characters\nDescription: The characters associated with this player.\n\nThe array will always be empty when the player is disconnected (see [LuaPlayer::connected](runtime:LuaPlayer::connected)) regardless of there being associated characters.\n\nCharacters associated with this player will be logged off when this player disconnects but are not controlled by any player.\n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "get_associated_characters"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.get_goal_description",
    "content": "Method: LuaPlayer.get_goal_description\nDescription: Get the current goal description, as a localised string.\n\nReturns:\n- LocalisedString: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "get_goal_description"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.get_infinity_inventory_filter",
    "content": "Method: LuaPlayer.get_infinity_inventory_filter\nDescription: Gets the filter for this map editor infinity filters at the given index or `nil` if the filter index doesn't exist or is empty.\n\nParameters:\n- index (uint): The index to get.\n\nReturns:\n- InfinityInventoryFilter: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "get_infinity_inventory_filter"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.get_quick_bar_slot",
    "content": "Method: LuaPlayer.get_quick_bar_slot\nDescription: Gets the quick bar filter for the given slot or `nil`.\n\nParameters:\n- index (uint): The slot index. 1 for the first slot of page one, 2 for slot two of page one, 11 for the first slot of page 2, etc.\n\nReturns:\n- ItemFilter: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "get_quick_bar_slot"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.is_alert_enabled",
    "content": "Method: LuaPlayer.is_alert_enabled\nDescription: If the given alert type is currently enabled.\n\nParameters:\n- alert_type (defines.alert_type): \n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "is_alert_enabled"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.is_alert_muted",
    "content": "Method: LuaPlayer.is_alert_muted\nDescription: If the given alert type is currently muted.\n\nParameters:\n- alert_type (defines.alert_type): \n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "is_alert_muted"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.is_shortcut_available",
    "content": "Method: LuaPlayer.is_shortcut_available\nDescription: Is a custom Lua shortcut currently available?\n\nParameters:\n- prototype_name (string): Prototype name of the custom shortcut.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "is_shortcut_available"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.is_shortcut_toggled",
    "content": "Method: LuaPlayer.is_shortcut_toggled\nDescription: Is a custom Lua shortcut currently toggled?\n\nParameters:\n- prototype_name (string): Prototype name of the custom shortcut.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "is_shortcut_toggled"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.jump_to_cutscene_waypoint",
    "content": "Method: LuaPlayer.jump_to_cutscene_waypoint\nDescription: Jump to the specified cutscene waypoint. Only works when the player is viewing a cutscene.\n\nParameters:\n- waypoint_index (uint): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "jump_to_cutscene_waypoint"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.land_on_planet",
    "content": "Method: LuaPlayer.land_on_planet\nDescription: Ejects this player from the current space platform and lands on the current planet.\n\nReturns:\n- boolean: If the player successfully landed on the planet.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "land_on_planet"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.leave_space_platform",
    "content": "Method: LuaPlayer.leave_space_platform\nDescription: Ejects this player from the current space platform if in a platform. The player is left on the platform at the position of the hub.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "leave_space_platform"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.mute_alert",
    "content": "Method: LuaPlayer.mute_alert\nDescription: Mutes alerts for the given alert category.\n\nParameters:\n- alert_type (defines.alert_type): \n\nReturns:\n- boolean: Whether the alert type was muted (false if it was already muted).\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "mute_alert"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.pipette_entity",
    "content": "Method: LuaPlayer.pipette_entity\nDescription: Invokes the \"smart pipette\" action on the player as if the user pressed it.\n\nParameters:\n- allow_ghost (boolean)[Optional]: Defaults to false.\n- entity (EntityWithQualityID): \n\nReturns:\n- boolean: Whether the smart pipette found something to place.\n\nRaises:\n- on_player_pipette: Raised if the entity was successfully pipetted.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "pipette_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.play_sound",
    "content": "Method: LuaPlayer.play_sound\nDescription: Play a sound for this player.\n\nThe sound is not played if its location is not [charted](runtime:LuaForce::chart) for this player.",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "play_sound"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.play_sound",
    "content": "Parameters:\n- override_sound_type (SoundType)[Optional]: The volume mixer to play the sound through. Defaults to the default mixer for the given sound type.\n- path (SoundPath): The sound to play.\n- position (MapPosition)[Optional]: Where the sound should be played. If not given, it's played at the current position of the player.\n- volume_modifier (double)[Optional]: The volume of the sound to play. Must be between 0 and 1 inclusive.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "play_sound"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.print",
    "content": "Method: LuaPlayer.print\nDescription: Print text to the chat console.\n\nBy default, messages that are identical to a message sent in the last 60 ticks are not printed again.\n\nParameters:\n- message (LocalisedString): \n- print_settings (PrintSettings)[Optional]: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "print"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.print_entity_statistics",
    "content": "Method: LuaPlayer.print_entity_statistics\nDescription: Print entity statistics to the player's console.\n\nParameters:\n- entities ({'complex_type': 'array', 'value': 'EntityWithQualityID'})[Optional]: Entity prototypes to get statistics for. If not specified or empty, display statistics for all entities.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "print_entity_statistics"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.print_lua_object_statistics",
    "content": "Method: LuaPlayer.print_lua_object_statistics\nDescription: Print LuaObject counts per mod.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "print_lua_object_statistics"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.print_robot_jobs",
    "content": "Method: LuaPlayer.print_robot_jobs\nDescription: Print construction robot job counts to the player's console.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "print_robot_jobs"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.remove_alert",
    "content": "Method: LuaPlayer.remove_alert\nDescription: Removes all alerts matching the given filters or if an empty filters table is given all alerts are removed.\n\nParameters:\n- entity (LuaEntity)[Optional]: \n- icon (SignalID)[Optional]: \n- message (LocalisedString)[Optional]: \n- position (MapPosition)[Optional]: \n- prototype (EntityID)[Optional]: \n- surface (SurfaceIdentification)[Optional]: \n- type (defines.alert_type)[Optional]: \n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "remove_alert"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.request_translation",
    "content": "Method: LuaPlayer.request_translation\nDescription: Requests a translation for the given localised string. If the request is successful, the [on_string_translated](runtime:on_string_translated) event will be fired with the results.\n\nDoes nothing if this player is not connected (see [LuaPlayer::connected](runtime:LuaPlayer::connected)).\n\nParameters:\n- localised_string (LocalisedString): \n\nReturns:\n- uint: The unique ID for the requested translation.",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "request_translation"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.request_translation",
    "content": "Returns:\n- uint: The unique ID for the requested translation.\n\nRaises:\n- on_string_translated: Raised if the request was successfully sent.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "request_translation"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.request_translations",
    "content": "Method: LuaPlayer.request_translations\nDescription: Requests translation for the given set of localised strings. If the request is successful, a [on_string_translated](runtime:on_string_translated) event will be fired for each string with the results.\n\nDoes nothing if this player is not connected (see [LuaPlayer::connected](runtime:LuaPlayer::connected)).\n\nParameters:\n- localised_strings ({'complex_type': 'array', 'value': 'LocalisedString'}):",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "request_translations"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.request_translations",
    "content": "Returns:\n- {'complex_type': 'array', 'value': 'uint'}: The unique IDs for the requested translations.\n\nRaises:\n- on_string_translated: Raised if the request was successfully sent.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "request_translations"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.set_active_quick_bar_page",
    "content": "Method: LuaPlayer.set_active_quick_bar_page\nDescription: Sets which quick bar page is being used for the given screen page.\n\nParameters:\n- page_index (uint): The new quick bar page.\n- screen_index (uint): The screen page. Index 1 is the top row in the gui. Index can go beyond the visible number of bars on the screen to account for the interface config setting change.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "set_active_quick_bar_page"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.set_controller",
    "content": "Method: LuaPlayer.set_controller\nDescription: Set the controller type of the player.\n\nSetting a player to [defines.controllers.editor](runtime:defines.controllers.editor) auto promotes the player to admin and enables cheat mode. Setting a player to [defines.controllers.editor](runtime:defines.controllers.editor) also requires the calling player be an admin.",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "set_controller"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.set_controller",
    "content": "Parameters:\n- character (LuaEntity)[Optional]: Entity to control. Mandatory when `type` is [defines.controllers.character](runtime:defines.controllers.character), ignored otherwise.\n- chart_mode_cutoff (double)[Optional]: If specified and `type` is [defines.controllers.cutscene](runtime:defines.controllers.cutscene), the game will switch to chart-mode (map zoomed out) rendering when the zoom level is less than this value.",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "set_controller"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.set_controller",
    "content": "- final_transition_time (uint)[Optional]: If specified and `type` is [defines.controllers.cutscene](runtime:defines.controllers.cutscene), it is the time in ticks it will take for the camera to pan from the final waypoint back to the starting position. If not given the camera will not pan back to the start position/zoom.\n- position (MapPosition)[Optional]: If specified and `type` is [defines.controllers.remote](runtime:defines.controllers.remote), the position the remote controller will be centered on.",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "set_controller"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.set_controller",
    "content": "- start_position (MapPosition)[Optional]: If specified and `type` is [defines.controllers.cutscene](runtime:defines.controllers.cutscene), the cutscene will start at this position. If not given the start position will be the player position.\n- start_zoom (double)[Optional]: If specified and `type` is [defines.controllers.cutscene](runtime:defines.controllers.cutscene), the cutscene will start at this zoom level. If not given the start zoom will be the player's zoom.",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "set_controller"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.set_controller",
    "content": "- surface (SurfaceIdentification)[Optional]: If specified and `type` is [defines.controllers.remote](runtime:defines.controllers.remote), the surface the remote controller will be put on.\n- type (defines.controllers): Which controller to use.\n- waypoints (CutsceneWaypoint)[Optional]: List of waypoints for the cutscene controller. This parameter is mandatory when `type` is [defines.controllers.cutscene](runtime:defines.controllers.cutscene).",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "set_controller"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.set_controller",
    "content": "Format:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "set_controller"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.set_ending_screen_data",
    "content": "Method: LuaPlayer.set_ending_screen_data\nDescription: Setup the screen to be shown when the game is finished.\n\nParameters:\n- file (string)[Optional]: Path to image to be shown.\n- message (LocalisedString): Message to be shown.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "set_ending_screen_data"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.set_goal_description",
    "content": "Method: LuaPlayer.set_goal_description\nDescription: Set the text in the goal window (top left).\n\nParameters:\n- only_update (boolean)[Optional]: When `true`, won't play the \"goal updated\" sound.\n- text (LocalisedString)[Optional]: The text to display. Lines can be delimited with `\\n`. Passing an empty string or omitting this parameter entirely will make the goal window disappear.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "set_goal_description"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.set_infinity_inventory_filter",
    "content": "Method: LuaPlayer.set_infinity_inventory_filter\nDescription: Sets the filter for this map editor infinity filters at the given index.\n\nParameters:\n- filter ({'complex_type': 'union', 'options': ['InfinityInventoryFilter', 'nil'], 'full_format': False}): The new filter or `nil` to clear the filter.\n- index (uint): The index to set.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "set_infinity_inventory_filter"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.set_quick_bar_slot",
    "content": "Method: LuaPlayer.set_quick_bar_slot\nDescription: Sets the quick bar filter for the given slot. If a [LuaItemStack](runtime:LuaItemStack) is provided, the slot will be set to that particular item instance if it has extra data, for example a specific blueprint or spidertron remote. Otherwise, it will be set to all items of that prototype, for example iron plates.",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "set_quick_bar_slot"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.set_quick_bar_slot",
    "content": "Parameters:\n- filter ({'complex_type': 'union', 'options': ['LuaItemStack', 'ItemWithQualityID', 'nil'], 'full_format': False}): The filter or `nil` to clear it.\n- index (uint): The slot index. 1 for the first slot of page one, 2 for slot two of page one, 11 for the first slot of page 2, etc.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "set_quick_bar_slot"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.set_shortcut_available",
    "content": "Method: LuaPlayer.set_shortcut_available\nDescription: Make a custom Lua shortcut available or unavailable.\n\nParameters:\n- available (boolean): \n- prototype_name (string): Prototype name of the custom shortcut.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "set_shortcut_available"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.set_shortcut_toggled",
    "content": "Method: LuaPlayer.set_shortcut_toggled\nDescription: Toggle or untoggle a custom Lua shortcut\n\nParameters:\n- prototype_name (string): Prototype name of the custom shortcut.\n- toggled (boolean): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "set_shortcut_toggled"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.start_selection",
    "content": "Method: LuaPlayer.start_selection\nDescription: Starts selection with selection tool from the specified position. Does nothing if the player's cursor is not a selection tool.\n\nParameters:\n- position (MapPosition): The position to start selection from.\n- selection_mode (defines.selection_mode): The type of selection to start.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "start_selection"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.toggle_map_editor",
    "content": "Method: LuaPlayer.toggle_map_editor\nDescription: Toggles this player into or out of the map editor. Does nothing if this player isn't an admin or if the player doesn't have permission to use the map editor.\n\nRaises:\n- on_player_toggled_map_editor: Raised if the map editor was successfully toggled.\n- on_pre_player_toggled_map_editor: Raised if the map editor was successfully toggled.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "toggle_map_editor"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.unlock_achievement",
    "content": "Method: LuaPlayer.unlock_achievement\nDescription: Unlock the achievements of the given player. This has any effect only when this is the local player, the achievement isn't unlocked so far and the achievement is of the type \"achievement\".\n\nParameters:\n- name (string): name of the achievement to unlock\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "unlock_achievement"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.unmute_alert",
    "content": "Method: LuaPlayer.unmute_alert\nDescription: Unmutes alerts for the given alert category.\n\nParameters:\n- alert_type (defines.alert_type): \n\nReturns:\n- boolean: Whether the alert type was unmuted (false if it was wasn't muted).\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "unmute_alert"
    }
  },
  {
    "type": "method",
    "name": "LuaPlayer.use_from_cursor",
    "content": "Method: LuaPlayer.use_from_cursor\nDescription: Uses the current item in the cursor if it's a capsule or does nothing if not.\n\nParameters:\n- position (MapPosition): Where the item would be used.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPlayer",
      "method_name": "use_from_cursor"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.admin",
    "content": "Attribute: admin \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if the player is an admin.\n\nTrying to change player admin status from the console when you aren't an admin does nothing.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "admin"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.afk_time",
    "content": "Attribute: afk_time \nRead_type: uint\n\nDescription: How many ticks since the last action of this player.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "afk_time"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.auto_sort_main_inventory",
    "content": "Attribute: auto_sort_main_inventory \nRead_type: boolean\n\nDescription: If the main inventory will be auto sorted.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "auto_sort_main_inventory"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.blueprint_to_setup",
    "content": "Attribute: blueprint_to_setup \nRead_type: LuaItemStack\n\nDescription: The item stack containing a blueprint to be setup.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "blueprint_to_setup"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.blueprints",
    "content": "Attribute: blueprints \nRead_type: {'complex_type': 'array', 'value': 'LuaRecord'}\n\nDescription: Records contained in the player's blueprint library.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "blueprints"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.centered_on",
    "content": "Attribute: centered_on [Optional]\nRead_type: LuaEntity\nWrite_type: LuaEntity\nDescription: The entity being centered on in remote view.\n\nWhen writing, the player will be switched to remote view (if not already in it) and centered on the given entity.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "centered_on"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.character",
    "content": "Attribute: character [Optional]\nRead_type: LuaEntity\nWrite_type: LuaEntity\nDescription: The character attached to this player, if any. Returns `nil` when the player is disconnected (see [LuaPlayer::connected](runtime:LuaPlayer::connected)).\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "character"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.chat_color",
    "content": "Attribute: chat_color \nRead_type: Color\nWrite_type: Color\nDescription: The color used when this player talks in game.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "chat_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.color",
    "content": "Attribute: color \nRead_type: Color\nWrite_type: Color\nDescription: The color associated with the player. This will be used to tint the player's character as well as their buildings and vehicles.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.connected",
    "content": "Attribute: connected \nRead_type: boolean\n\nDescription: `true` if the player is currently connected to the game.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "connected"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.controller_type",
    "content": "Attribute: controller_type \nRead_type: defines.controllers\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "controller_type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.cursor_stack_temporary",
    "content": "Attribute: cursor_stack_temporary \nRead_type: boolean\nWrite_type: boolean\nDescription: Returns true if the current item stack in cursor will be destroyed after clearing the cursor. Manually putting it into inventory still preserves the item. If the cursor stack is not one of the supported types (blueprint, blueprint-book, deconstruction-planner, upgrade-planner), write operation will be silently ignored.",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "cursor_stack_temporary"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.cutscene_character",
    "content": "Attribute: cutscene_character [Optional]\nRead_type: LuaEntity\n\nDescription: When in a cutscene; the character this player would be using once the cutscene is over, if any. Returns `nil` when the player is disconnected (see [LuaPlayer::connected](runtime:LuaPlayer::connected)).",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "cutscene_character"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.display_density_scale",
    "content": "Attribute: display_density_scale \nRead_type: double\n\nDescription: The display density scale for this player. The display density scale is the factor of [LuaPlayer::display_scale](runtime:LuaPlayer::display_scale) that is determined by the physical DPI of the screen that Factorio is running on. In most cases, the default value is 1. If the player is playing on a high-density display, this value may be 2 or greater.",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "display_density_scale"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.display_density_scale",
    "content": "During [on_player_created](runtime:on_player_created), this attribute will always return a scale of `1`. To get the actual scale, listen to the [on_player_display_density_scale_changed](runtime:on_player_display_density_scale_changed) event raised shortly afterwards.",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "display_density_scale"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.display_resolution",
    "content": "Attribute: display_resolution \nRead_type: DisplayResolution\n\nDescription: The display resolution for this player.\n\nDuring [on_player_created](runtime:on_player_created), this attribute will always return a resolution of `{width=1920, height=1080}`. To get the actual resolution, listen to the [on_player_display_resolution_changed](runtime:on_player_display_resolution_changed) event raised shortly afterwards.",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "display_resolution"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.display_scale",
    "content": "Attribute: display_scale \nRead_type: double\n\nDescription: The display scale for this player.\n\nDuring [on_player_created](runtime:on_player_created), this attribute will always return a scale of `1`. To get the actual scale, listen to the [on_player_display_scale_changed](runtime:on_player_display_scale_changed) event raised shortly afterwards.",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "display_scale"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.drag_target",
    "content": "Attribute: drag_target [Optional]\nRead_type: DragTarget\n\nDescription: The wire drag target for this player, if any.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "drag_target"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.entity_copy_source",
    "content": "Attribute: entity_copy_source [Optional]\nRead_type: LuaEntity\n\nDescription: The source entity used during entity settings copy-paste, if any.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "entity_copy_source"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.game_view_settings",
    "content": "Attribute: game_view_settings \nRead_type: GameViewSettings\nWrite_type: GameViewSettings\nDescription: The player's game view settings.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "game_view_settings"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.gui",
    "content": "Attribute: gui \nRead_type: LuaGui\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "gui"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.hand_location",
    "content": "Attribute: hand_location [Optional]\nRead_type: ItemStackLocation\nWrite_type: ItemStackLocation\nDescription: The original location of the item in the cursor, marked with a hand. `nil` if the cursor stack is empty. When writing, the specified inventory slot must be empty and the cursor stack must not be empty.",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "hand_location"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.index",
    "content": "Attribute: index \nRead_type: uint\n\nDescription: This player's index in [LuaGameScript::players](runtime:LuaGameScript::players) (unique ID). It is assigned when a player is created, and remains so (even when the player is not [connected](runtime:LuaPlayer::connected)) until the player is irreversibly [removed](runtime:on_player_removed). Indexes of removed players can be reused.",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "index"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.infinity_inventory_filters",
    "content": "Attribute: infinity_inventory_filters \nRead_type: {'complex_type': 'array', 'value': 'InfinityInventoryFilter'}\nWrite_type: {\"complex_type\": \"array\", \"value\": \"InfinityInventoryFilter\"}\nDescription: The filters for this map editor infinity inventory settings.",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "infinity_inventory_filters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.input_method",
    "content": "Attribute: input_method \nRead_type: defines.input_method\n\nDescription: The input method of the player, mouse and keyboard or game controller\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "input_method"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.last_online",
    "content": "Attribute: last_online \nRead_type: uint\n\nDescription: At what tick this player was last online.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "last_online"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.locale",
    "content": "Attribute: locale \nRead_type: string\n\nDescription: The active locale for this player.\n\nDuring [on_player_created](runtime:on_player_created), this attribute will be `en`. To get the actual value, listen to the [on_player_locale_changed](runtime:on_player_locale_changed) event raised shortly afterwards.",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "locale"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.map_view_settings",
    "content": "Attribute: map_view_settings \nRead_type: None\nWrite_type: MapViewSettings\nDescription: The player's map view settings. To write to this, use a table containing the fields that should be changed.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "map_view_settings"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.minimap_enabled",
    "content": "Attribute: minimap_enabled \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if the minimap is visible.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "minimap_enabled"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.mod_settings",
    "content": "Attribute: mod_settings \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'ModSetting'}\n\nDescription: The current per-player settings for the this player, indexed by prototype name. Returns the same structure as [LuaSettings::get_player_settings](runtime:LuaSettings::get_player_settings). This table becomes invalid if its associated player does.",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "mod_settings"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.mod_settings",
    "content": "Even though this attribute is marked as read-only, individual settings can be changed by overwriting their [ModSetting](runtime:ModSetting) table. Mods can only change their own settings. Using the in-game console, all player settings can be changed.\nExamples: [\"```\\n-- Change the value of the \\\"active_lifestyle\\\" setting\\nplayer.mod_settings[\\\"active_lifestyle\\\"] = {value = true}\\n```\"]",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "mod_settings"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.name",
    "content": "Attribute: name \nRead_type: string\n\nDescription: The player's username.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.online_time",
    "content": "Attribute: online_time \nRead_type: uint\n\nDescription: How many ticks did this player spend playing this save (all sessions combined).\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "online_time"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.opened_self",
    "content": "Attribute: opened_self \nRead_type: boolean\n\nDescription: `true` if the player opened itself. I.e. if they opened the character or god-controller GUI.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "opened_self"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.permission_group",
    "content": "Attribute: permission_group [Optional]\nRead_type: LuaPermissionGroup\nWrite_type: LuaPermissionGroup\nDescription: The permission group this player is part of, if any.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "permission_group"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.physical_controller_type",
    "content": "Attribute: physical_controller_type \nRead_type: defines.controllers\n\nDescription: The player's \"physical\" controller. When a player is in the remote controller, this specifies the controller they will return to. When the player is not in the remote controller, this is equivalent to [LuaPlayer::controller_type](runtime:LuaPlayer::controller_type).",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "physical_controller_type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.physical_position",
    "content": "Attribute: physical_position \nRead_type: MapPosition\n\nDescription: The current position of this player's physical controller.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "physical_position"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.physical_surface",
    "content": "Attribute: physical_surface \nRead_type: LuaSurface\n\nDescription: The surface this player's physical controller is on.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "physical_surface"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.physical_surface_index",
    "content": "Attribute: physical_surface_index \nRead_type: uint\n\nDescription: Unique ID associated with the surface this player's physical controller is currently on.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "physical_surface_index"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.physical_vehicle",
    "content": "Attribute: physical_vehicle [Optional]\nRead_type: LuaEntity\n\nDescription: The current vehicle of this player's physical controller.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "physical_vehicle"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.remove_unfiltered_items",
    "content": "Attribute: remove_unfiltered_items \nRead_type: boolean\nWrite_type: boolean\nDescription: If items not included in this map editor infinity inventory filters should be removed.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "remove_unfiltered_items"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.render_mode",
    "content": "Attribute: render_mode \nRead_type: defines.render_mode\n\nDescription: The render mode of the player, like map or zoom to world. The render mode can be set using [LuaPlayer::open_map](runtime:LuaPlayer::open_map), [LuaPlayer::zoom_to_world](runtime:LuaPlayer::zoom_to_world) and [LuaPlayer::close_map](runtime:LuaPlayer::close_map).",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "render_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.show_on_map",
    "content": "Attribute: show_on_map \nRead_type: boolean\nWrite_type: boolean\nDescription: If `true`, circle and name of given player is rendered on the map/chart.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "show_on_map"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.spectator",
    "content": "Attribute: spectator \nRead_type: boolean\nWrite_type: boolean\nDescription: If `true`, zoom-to-world noise effect will be disabled and environmental sounds will be based on zoom-to-world view instead of position of player's character.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "spectator"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.spidertron_remote_selection",
    "content": "Attribute: spidertron_remote_selection [Optional]\nRead_type: {'complex_type': 'array', 'value': 'LuaEntity'}\nWrite_type: {\"complex_type\": \"array\", \"value\": \"LuaEntity\"}\nDescription: All SpiderVehicles currently selected by the player, if they are holding a spidertron remote.",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "spidertron_remote_selection"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.stashed_controller_type",
    "content": "Attribute: stashed_controller_type [Optional]\nRead_type: defines.controllers\n\nDescription: The stashed controller type, if any. This is mainly useful when a player is in the map editor.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "stashed_controller_type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.tag",
    "content": "Attribute: tag \nRead_type: string\nWrite_type: string\nDescription: The tag that is shown after the player in chat, on the map and above multiplayer selection rectangles.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "tag"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.ticks_to_respawn",
    "content": "Attribute: ticks_to_respawn [Optional]\nRead_type: uint\nWrite_type: uint\nDescription: The number of ticks until this player will respawn. `nil` if this player is not waiting to respawn.\n\nSet to `nil` to immediately respawn the player.\n\nSet to any positive value to trigger the respawn state for this player.",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "ticks_to_respawn"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.undo_redo_stack",
    "content": "Attribute: undo_redo_stack \nRead_type: LuaUndoRedoStack\n\nDescription: The undo and redo stack for this player.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "undo_redo_stack"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "valid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPlayer.zoom",
    "content": "Attribute: zoom \nRead_type: None\nWrite_type: double\nDescription: The player's zoom-level. Must be positive.\n",
    "metadata": {
      "class_name": "LuaPlayer",
      "attribute_name": "zoom"
    }
  },
  {
    "type": "class",
    "name": "LuaProcessionLayerInheritanceGroupPrototype",
    "content": "Class: LuaProcessionLayerInheritanceGroupPrototype\nDescription: Prototype of a procession inheritance group which synchronizes offsets between procession steps.",
    "metadata": {
      "class_name": "LuaProcessionLayerInheritanceGroupPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaProcessionLayerInheritanceGroupPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaProcessionLayerInheritanceGroupPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaProcessionLayerInheritanceGroupPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaProcessionLayerInheritanceGroupPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaProcessionPrototype",
    "content": "Class: LuaProcessionPrototype\nDescription: Prototype of a procession.",
    "metadata": {
      "class_name": "LuaProcessionPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaProcessionPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaProcessionPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaProcessionPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaProcessionPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaProfiler",
    "content": "Class: LuaProfiler\nDescription: An object used to measure script performance.\n\nSince performance is non-deterministic, these objects don't allow reading the raw time values from Lua. They can be used anywhere a [LocalisedString](runtime:LocalisedString) is used, except for [LuaGuiElement::add](runtime:LuaGuiElement::add)'s LocalisedString arguments, [LuaSurface::create_entity](runtime:LuaSurface::create_entity)'s `text` argument, and [LuaEntity::add_market_item](runtime:LuaEntity::add_market_item).",
    "metadata": {
      "class_name": "LuaProfiler",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaProfiler.add",
    "content": "Method: LuaProfiler.add\nDescription: Add the duration of another timer to this timer. Useful to reduce start/stop overhead when accumulating time onto many timers at once.\n\nIf other is running, the time to now will be added.\n\nParameters:\n- other (LuaProfiler): The timer to add to this timer.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaProfiler",
      "method_name": "add"
    }
  },
  {
    "type": "method",
    "name": "LuaProfiler.divide",
    "content": "Method: LuaProfiler.divide\nDescription: Divides the current duration by a set value. Useful for calculating the average of many iterations.\n\nDoes nothing if this isn't stopped.\n\nParameters:\n- number (double): The number to divide by. Must be > 0.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaProfiler",
      "method_name": "divide"
    }
  },
  {
    "type": "method",
    "name": "LuaProfiler.reset",
    "content": "Method: LuaProfiler.reset\nDescription: Resets the clock, also restarting it.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaProfiler",
      "method_name": "reset"
    }
  },
  {
    "type": "method",
    "name": "LuaProfiler.restart",
    "content": "Method: LuaProfiler.restart\nDescription: Start the clock again, without resetting it.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaProfiler",
      "method_name": "restart"
    }
  },
  {
    "type": "method",
    "name": "LuaProfiler.stop",
    "content": "Method: LuaProfiler.stop\nDescription: Stops the clock.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaProfiler",
      "method_name": "stop"
    }
  },
  {
    "type": "attribute",
    "name": "LuaProfiler.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaProfiler",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaProfiler.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaProfiler",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaProgrammableSpeakerControlBehavior",
    "content": "Class: LuaProgrammableSpeakerControlBehavior\nDescription: Control behavior for programmable speakers.",
    "metadata": {
      "class_name": "LuaProgrammableSpeakerControlBehavior",
      "parent_class": "LuaControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaProgrammableSpeakerControlBehavior.circuit_condition",
    "content": "Attribute: circuit_condition \nRead_type: CircuitConditionDefinition\nWrite_type: CircuitConditionDefinition\nDescription: \n",
    "metadata": {
      "class_name": "LuaProgrammableSpeakerControlBehavior",
      "attribute_name": "circuit_condition"
    }
  },
  {
    "type": "attribute",
    "name": "LuaProgrammableSpeakerControlBehavior.circuit_parameters",
    "content": "Attribute: circuit_parameters \nRead_type: ProgrammableSpeakerCircuitParameters\nWrite_type: ProgrammableSpeakerCircuitParameters\nDescription: \n",
    "metadata": {
      "class_name": "LuaProgrammableSpeakerControlBehavior",
      "attribute_name": "circuit_parameters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaProgrammableSpeakerControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaProgrammableSpeakerControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaProgrammableSpeakerControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaProgrammableSpeakerControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaPrototypeBase",
    "content": "Class: LuaPrototypeBase\nDescription: Base for all prototype classes.",
    "metadata": {
      "class_name": "LuaPrototypeBase",
      "parent_class": null
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypeBase.group",
    "content": "Attribute: group \nRead_type: LuaGroup\n\nDescription: Group of this prototype.\n",
    "metadata": {
      "class_name": "LuaPrototypeBase",
      "attribute_name": "group"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypeBase.hidden",
    "content": "Attribute: hidden \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaPrototypeBase",
      "attribute_name": "hidden"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypeBase.hidden_in_factoriopedia",
    "content": "Attribute: hidden_in_factoriopedia \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaPrototypeBase",
      "attribute_name": "hidden_in_factoriopedia"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypeBase.localised_description",
    "content": "Attribute: localised_description \nRead_type: LocalisedString\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaPrototypeBase",
      "attribute_name": "localised_description"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypeBase.localised_name",
    "content": "Attribute: localised_name \nRead_type: LocalisedString\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaPrototypeBase",
      "attribute_name": "localised_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypeBase.name",
    "content": "Attribute: name \nRead_type: string\n\nDescription: Name of this prototype.\n",
    "metadata": {
      "class_name": "LuaPrototypeBase",
      "attribute_name": "name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypeBase.order",
    "content": "Attribute: order \nRead_type: string\n\nDescription: The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning.\n",
    "metadata": {
      "class_name": "LuaPrototypeBase",
      "attribute_name": "order"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypeBase.parameter",
    "content": "Attribute: parameter \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaPrototypeBase",
      "attribute_name": "parameter"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypeBase.subgroup",
    "content": "Attribute: subgroup \nRead_type: LuaGroup\n\nDescription: Subgroup of this prototype.\n",
    "metadata": {
      "class_name": "LuaPrototypeBase",
      "attribute_name": "subgroup"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypeBase.type",
    "content": "Attribute: type \nRead_type: string\n\nDescription: Type of this prototype.\n",
    "metadata": {
      "class_name": "LuaPrototypeBase",
      "attribute_name": "type"
    }
  },
  {
    "type": "class",
    "name": "LuaPrototypes",
    "content": "Class: LuaPrototypes\nDescription: Provides read-only access to prototypes. It is accessible through the global object named `prototypes`.",
    "metadata": {
      "class_name": "LuaPrototypes",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaPrototypes.get_achievement_filtered",
    "content": "Method: LuaPrototypes.get_achievement_filtered\nDescription: Returns a dictionary of all LuaAchievementPrototypes that fit the given filters. The prototypes are indexed by `name`.\n\nParameters:\n- filters ({'complex_type': 'array', 'value': 'AchievementPrototypeFilter'}): \n\nReturns:\n- {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaAchievementPrototype'}:",
    "metadata": {
      "class_name": "LuaPrototypes",
      "method_name": "get_achievement_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaPrototypes.get_achievement_filtered",
    "content": "Examples:\n```\n-- Get every achievement prototype that is not allowed to be completed on the peaceful difficulty setting.\nlocal prototypes = prototypes.get_achievement_filtered{{filter=\"allowed-without-fight\", invert=true}}\n```\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPrototypes",
      "method_name": "get_achievement_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaPrototypes.get_decorative_filtered",
    "content": "Method: LuaPrototypes.get_decorative_filtered\nDescription: Returns a dictionary of all LuaDecorativePrototypes that fit the given filters. The prototypes are indexed by `name`.\n\nParameters:\n- filters ({'complex_type': 'array', 'value': 'DecorativePrototypeFilter'}): \n\nReturns:\n- {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaDecorativePrototype'}:",
    "metadata": {
      "class_name": "LuaPrototypes",
      "method_name": "get_decorative_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaPrototypes.get_decorative_filtered",
    "content": "Examples:\n```\n-- Get every decorative prototype that is auto-placed.\nlocal prototypes = prototypes.get_decorative_filtered{{filter=\"autoplace\"}}\n```\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPrototypes",
      "method_name": "get_decorative_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaPrototypes.get_entity_filtered",
    "content": "Method: LuaPrototypes.get_entity_filtered\nDescription: Returns a dictionary of all LuaEntityPrototypes that fit the given filters. The prototypes are indexed by `name`.\n\nParameters:\n- filters ({'complex_type': 'array', 'value': 'EntityPrototypeFilter'}): \n\nReturns:\n- {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaEntityPrototype'}:",
    "metadata": {
      "class_name": "LuaPrototypes",
      "method_name": "get_entity_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaPrototypes.get_entity_filtered",
    "content": "Examples:\n```\n-- Get every entity prototype that can craft recipes involving fluids in the way some assembling machines can\nlocal prototypes = prototypes.get_entity_filtered{{filter=\"crafting-category\", crafting_category=\"crafting-with-fluid\"}}\n```\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPrototypes",
      "method_name": "get_entity_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaPrototypes.get_equipment_filtered",
    "content": "Method: LuaPrototypes.get_equipment_filtered\nDescription: Returns a dictionary of all LuaEquipmentPrototypes that fit the given filters. The prototypes are indexed by `name`.\n\nParameters:\n- filters ({'complex_type': 'array', 'value': 'EquipmentPrototypeFilter'}): \n\nReturns:\n- {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaEquipmentPrototype'}:",
    "metadata": {
      "class_name": "LuaPrototypes",
      "method_name": "get_equipment_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaPrototypes.get_equipment_filtered",
    "content": "Examples:\n```\n-- Get every equipment prototype that functions as a battery.\nlocal prototypes = prototypes.get_equipment_filtered{{filter=\"type\", type=\"battery-equipment\"}}\n```\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPrototypes",
      "method_name": "get_equipment_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaPrototypes.get_fluid_filtered",
    "content": "Method: LuaPrototypes.get_fluid_filtered\nDescription: Returns a dictionary of all LuaFluidPrototypes that fit the given filters. The prototypes are indexed by `name`.\n\nParameters:\n- filters ({'complex_type': 'array', 'value': 'FluidPrototypeFilter'}): \n\nReturns:\n- {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaFluidPrototype'}:",
    "metadata": {
      "class_name": "LuaPrototypes",
      "method_name": "get_fluid_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaPrototypes.get_fluid_filtered",
    "content": "Examples:\n```\n-- Get every fluid prototype that has a heat capacity of exactly `100`.\nlocal prototypes = prototypes.get_fluid_filtered{{filter=\"heat-capacity\", comparison=\"=\", value=100}}\n```\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPrototypes",
      "method_name": "get_fluid_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaPrototypes.get_history",
    "content": "Method: LuaPrototypes.get_history\nDescription: Gets the prototype history for the given type and name.\n\nParameters:\n- name (string): \n- type (string): \n\nReturns:\n- PrototypeHistory: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPrototypes",
      "method_name": "get_history"
    }
  },
  {
    "type": "method",
    "name": "LuaPrototypes.get_item_filtered",
    "content": "Method: LuaPrototypes.get_item_filtered\nDescription: Returns a dictionary of all LuaItemPrototypes that fit the given filters. The prototypes are indexed by `name`.\n\nParameters:\n- filters ({'complex_type': 'array', 'value': 'ItemPrototypeFilter'}): \n\nReturns:\n- {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaItemPrototype'}:",
    "metadata": {
      "class_name": "LuaPrototypes",
      "method_name": "get_item_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaPrototypes.get_item_filtered",
    "content": "Examples:\n```\n-- Get every item prototype that has a fuel top speed multiplier larger than 1.\nlocal prototypes = prototypes.get_item_filtered{{filter = \"fuel-top-speed-multiplier\", comparison = \">\", value = 1}}\n```\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPrototypes",
      "method_name": "get_item_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaPrototypes.get_mod_setting_filtered",
    "content": "Method: LuaPrototypes.get_mod_setting_filtered\nDescription: Returns a dictionary of all LuaModSettingPrototypes that fit the given filters. The prototypes are indexed by `name`.\n\nParameters:\n- filters ({'complex_type': 'array', 'value': 'ModSettingPrototypeFilter'}): \n\nReturns:\n- {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaModSettingPrototype'}:",
    "metadata": {
      "class_name": "LuaPrototypes",
      "method_name": "get_mod_setting_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaPrototypes.get_mod_setting_filtered",
    "content": "Examples:\n```\n-- Get every mod setting prototype that belongs to the specified mod.\nlocal prototypes = prototypes.get_mod_setting_filtered{{filter=\"mod\", mod=\"space-exploration\"}}\n```\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPrototypes",
      "method_name": "get_mod_setting_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaPrototypes.get_recipe_filtered",
    "content": "Method: LuaPrototypes.get_recipe_filtered\nDescription: Returns a dictionary of all LuaRecipePrototypes that fit the given filters. The prototypes are indexed by `name`.\n\nParameters:\n- filters ({'complex_type': 'array', 'value': 'RecipePrototypeFilter'}): \n\nReturns:\n- {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaRecipePrototype'}:",
    "metadata": {
      "class_name": "LuaPrototypes",
      "method_name": "get_recipe_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaPrototypes.get_recipe_filtered",
    "content": "Examples:\n```\n-- Get every recipe prototype that takes less than half a second to craft (at crafting speed `1`).\nlocal prototypes = prototypes.get_recipe_filtered{{filter=\"energy\", comparison=\"<\", value=0.5}}\n```\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPrototypes",
      "method_name": "get_recipe_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaPrototypes.get_technology_filtered",
    "content": "Method: LuaPrototypes.get_technology_filtered\nDescription: Returns a dictionary of all LuaTechnologyPrototypes that fit the given filters. The prototypes are indexed by `name`.\n\nParameters:\n- filters ({'complex_type': 'array', 'value': 'TechnologyPrototypeFilter'}): \n\nReturns:\n- {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaTechnologyPrototype'}:",
    "metadata": {
      "class_name": "LuaPrototypes",
      "method_name": "get_technology_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaPrototypes.get_technology_filtered",
    "content": "Examples:\n```\n-- Get every technology prototype that can be researched at the start of the game.\nlocal prototypes = prototypes.get_technology_filtered{{filter=\"has-prerequisites\", invert=true}}\n```\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPrototypes",
      "method_name": "get_technology_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaPrototypes.get_tile_filtered",
    "content": "Method: LuaPrototypes.get_tile_filtered\nDescription: Returns a dictionary of all LuaTilePrototypes that fit the given filters. The prototypes are indexed by `name`.\n\nParameters:\n- filters ({'complex_type': 'array', 'value': 'TilePrototypeFilter'}): \n\nReturns:\n- {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaTilePrototype'}:",
    "metadata": {
      "class_name": "LuaPrototypes",
      "method_name": "get_tile_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaPrototypes.get_tile_filtered",
    "content": "Examples:\n```\n-- Get every tile prototype that improves a player's walking speed by at least 50%.\nlocal prototypes = prototypes.get_tile_filtered{{filter=\"walking-speed-modifier\", comparison=\"≥\", value=1.5}}\n```\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaPrototypes",
      "method_name": "get_tile_filtered"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.achievement",
    "content": "Attribute: achievement \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaAchievementPrototype'}\n\nDescription: A dictionary containing every LuaAchievementPrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "achievement"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.active_trigger",
    "content": "Attribute: active_trigger \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaActiveTriggerPrototype'}\n\nDescription: A dictionary containing every LuaActiveTriggerPrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "active_trigger"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.airborne_pollutant",
    "content": "Attribute: airborne_pollutant \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaAirbornePollutantPrototype'}\n\nDescription: A dictionary containing every LuaAirbornePollutantPrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "airborne_pollutant"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.ammo_category",
    "content": "Attribute: ammo_category \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaAmmoCategoryPrototype'}\n\nDescription: A dictionary containing every LuaAmmoCategoryPrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "ammo_category"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.asteroid_chunk",
    "content": "Attribute: asteroid_chunk \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaAsteroidChunkPrototype'}\n\nDescription: A dictionary containing every LuaAsteroidChunkPrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "asteroid_chunk"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.autoplace_control",
    "content": "Attribute: autoplace_control \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaAutoplaceControlPrototype'}\n\nDescription: A dictionary containing every LuaAutoplaceControlPrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "autoplace_control"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.burner_usage",
    "content": "Attribute: burner_usage \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaBurnerUsagePrototype'}\n\nDescription: A dictionary containing every LuaBurnerUsagePrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "burner_usage"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.collision_layer",
    "content": "Attribute: collision_layer \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaCollisionLayerPrototype'}\n\nDescription: A dictionary containing every LuaCollisionLayerPrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "collision_layer"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.custom_event",
    "content": "Attribute: custom_event \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaCustomEventPrototype'}\n\nDescription: A dictionary containing every defined custom event, indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "custom_event"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.custom_input",
    "content": "Attribute: custom_input \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaCustomInputPrototype'}\n\nDescription: A dictionary containing every LuaCustomInputPrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "custom_input"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.damage",
    "content": "Attribute: damage \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaDamagePrototype'}\n\nDescription: A dictionary containing every LuaDamagePrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "damage"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.decorative",
    "content": "Attribute: decorative \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaDecorativePrototype'}\n\nDescription: A dictionary containing every LuaDecorativePrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "decorative"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.entity",
    "content": "Attribute: entity \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaEntityPrototype'}\n\nDescription: A dictionary containing every LuaEntityPrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "entity"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.equipment",
    "content": "Attribute: equipment \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaEquipmentPrototype'}\n\nDescription: A dictionary containing every LuaEquipmentPrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "equipment"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.equipment_category",
    "content": "Attribute: equipment_category \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaEquipmentCategoryPrototype'}\n\nDescription: A dictionary containing every LuaEquipmentCategoryPrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "equipment_category"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.equipment_grid",
    "content": "Attribute: equipment_grid \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaEquipmentGridPrototype'}\n\nDescription: A dictionary containing every LuaEquipmentGridPrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "equipment_grid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.fluid",
    "content": "Attribute: fluid \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaFluidPrototype'}\n\nDescription: A dictionary containing every LuaFluidPrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "fluid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.font",
    "content": "Attribute: font \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaFontPrototype'}\n\nDescription: A dictionary containing every LuaFontPrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "font"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.fuel_category",
    "content": "Attribute: fuel_category \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaFuelCategoryPrototype'}\n\nDescription: A dictionary containing every LuaFuelCategoryPrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "fuel_category"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.item",
    "content": "Attribute: item \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaItemPrototype'}\n\nDescription: A dictionary containing every LuaItemPrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "item"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.item_group",
    "content": "Attribute: item_group \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaGroup'}\n\nDescription: A dictionary containing every ItemGroup indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "item_group"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.item_subgroup",
    "content": "Attribute: item_subgroup \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaGroup'}\n\nDescription: A dictionary containing every ItemSubgroup indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "item_subgroup"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.map_gen_preset",
    "content": "Attribute: map_gen_preset \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'MapGenPreset'}\n\nDescription: A dictionary containing every MapGenPreset indexed by `name`.\n\nA MapGenPreset is an exact copy of the prototype table provided from the data stage.",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "map_gen_preset"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.max_beacon_supply_area_distance",
    "content": "Attribute: max_beacon_supply_area_distance \nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "max_beacon_supply_area_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.max_electric_pole_connection_distance",
    "content": "Attribute: max_electric_pole_connection_distance \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "max_electric_pole_connection_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.max_electric_pole_supply_area_distance",
    "content": "Attribute: max_electric_pole_supply_area_distance \nRead_type: float\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "max_electric_pole_supply_area_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.max_force_distraction_chunk_distance",
    "content": "Attribute: max_force_distraction_chunk_distance \nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "max_force_distraction_chunk_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.max_force_distraction_distance",
    "content": "Attribute: max_force_distraction_distance \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "max_force_distraction_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.max_gate_activation_distance",
    "content": "Attribute: max_gate_activation_distance \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "max_gate_activation_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.max_inserter_reach_distance",
    "content": "Attribute: max_inserter_reach_distance \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "max_inserter_reach_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.max_pipe_to_ground_distance",
    "content": "Attribute: max_pipe_to_ground_distance \nRead_type: uint8\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "max_pipe_to_ground_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.max_underground_belt_distance",
    "content": "Attribute: max_underground_belt_distance \nRead_type: uint8\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "max_underground_belt_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.mod_setting",
    "content": "Attribute: mod_setting \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaModSettingPrototype'}\n\nDescription: A dictionary containing every LuaModSettingPrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "mod_setting"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.module_category",
    "content": "Attribute: module_category \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaModuleCategoryPrototype'}\n\nDescription: A dictionary containing every LuaModuleCategoryPrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "module_category"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.named_noise_expression",
    "content": "Attribute: named_noise_expression \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaNamedNoiseExpression'}\n\nDescription: A dictionary containing every LuaNamedNoiseExpression indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "named_noise_expression"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.named_noise_function",
    "content": "Attribute: named_noise_function \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaNamedNoiseFunction'}\n\nDescription: A dictionary containing every LuaNamedNoiseFunction indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "named_noise_function"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.particle",
    "content": "Attribute: particle \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaParticlePrototype'}\n\nDescription: A dictionary containing every LuaParticlePrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "particle"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.procession",
    "content": "Attribute: procession \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaProcessionPrototype'}\n\nDescription: A dictionary containing every LuaProcessionPrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "procession"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.procession_layer_inheritance_group",
    "content": "Attribute: procession_layer_inheritance_group \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaProcessionLayerInheritanceGroupPrototype'}\n\nDescription: A dictionary containing every LuaProcessionLayerInheritanceGroupPrototype indexed by `name`.",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "procession_layer_inheritance_group"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.quality",
    "content": "Attribute: quality \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaQualityPrototype'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "quality"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.recipe",
    "content": "Attribute: recipe \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaRecipePrototype'}\n\nDescription: A dictionary containing every LuaRecipePrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "recipe"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.recipe_category",
    "content": "Attribute: recipe_category \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaRecipeCategoryPrototype'}\n\nDescription: A dictionary containing every LuaRecipeCategoryPrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "recipe_category"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.resource_category",
    "content": "Attribute: resource_category \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaResourceCategoryPrototype'}\n\nDescription: A dictionary containing every LuaResourceCategoryPrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "resource_category"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.shortcut",
    "content": "Attribute: shortcut \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaShortcutPrototype'}\n\nDescription: A dictionary containing every LuaShortcutPrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "shortcut"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.space_connection",
    "content": "Attribute: space_connection \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaSpaceConnectionPrototype'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "space_connection"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.space_location",
    "content": "Attribute: space_location \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaSpaceLocationPrototype'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "space_location"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.style",
    "content": "Attribute: style \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'string'}\n\nDescription: A map of styles that [LuaGuiElement](runtime:LuaGuiElement) can use.\n\nMaps from the style's name to its type, as seen on [StyleSpecification](prototype:StyleSpecification).",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "style"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.surface",
    "content": "Attribute: surface \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaSurfacePrototype'}\n\nDescription: A dictionary containing every LuaSurfacePrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "surface"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.surface_property",
    "content": "Attribute: surface_property \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaSurfacePropertyPrototype'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "surface_property"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.technology",
    "content": "Attribute: technology \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaTechnologyPrototype'}\n\nDescription: A dictionary containing every [LuaTechnologyPrototype](runtime:LuaTechnologyPrototype) indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "technology"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.tile",
    "content": "Attribute: tile \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaTilePrototype'}\n\nDescription: A dictionary containing every LuaTilePrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "tile"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.trivial_smoke",
    "content": "Attribute: trivial_smoke \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaTrivialSmokePrototype'}\n\nDescription: A dictionary containing every LuaTrivialSmokePrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "trivial_smoke"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPrototypes.virtual_signal",
    "content": "Attribute: virtual_signal \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'LuaVirtualSignalPrototype'}\n\nDescription: A dictionary containing every LuaVirtualSignalPrototype indexed by `name`.\n",
    "metadata": {
      "class_name": "LuaPrototypes",
      "attribute_name": "virtual_signal"
    }
  },
  {
    "type": "class",
    "name": "LuaPumpControlBehavior",
    "content": "Class: LuaPumpControlBehavior\nDescription: Control behavior for pumps.",
    "metadata": {
      "class_name": "LuaPumpControlBehavior",
      "parent_class": "LuaGenericOnOffControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPumpControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaPumpControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPumpControlBehavior.set_filter",
    "content": "Attribute: set_filter \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if the pump should set its fluid filter from the circuit network signals.\n",
    "metadata": {
      "class_name": "LuaPumpControlBehavior",
      "attribute_name": "set_filter"
    }
  },
  {
    "type": "attribute",
    "name": "LuaPumpControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaPumpControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaQualityPrototype",
    "content": "Class: LuaQualityPrototype\nDescription: Prototype of a quality.",
    "metadata": {
      "class_name": "LuaQualityPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaQualityPrototype.beacon_power_usage_multiplier",
    "content": "Attribute: beacon_power_usage_multiplier \nRead_type: float\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaQualityPrototype",
      "attribute_name": "beacon_power_usage_multiplier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaQualityPrototype.color",
    "content": "Attribute: color \nRead_type: Color\n\nDescription: The color of the prototype\n",
    "metadata": {
      "class_name": "LuaQualityPrototype",
      "attribute_name": "color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaQualityPrototype.draw_sprite_by_default",
    "content": "Attribute: draw_sprite_by_default \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaQualityPrototype",
      "attribute_name": "draw_sprite_by_default"
    }
  },
  {
    "type": "attribute",
    "name": "LuaQualityPrototype.level",
    "content": "Attribute: level \nRead_type: uint\n\nDescription: Level basically specifies the stat-increasing value of this quality level\n",
    "metadata": {
      "class_name": "LuaQualityPrototype",
      "attribute_name": "level"
    }
  },
  {
    "type": "attribute",
    "name": "LuaQualityPrototype.mining_drill_resource_drain_multiplier",
    "content": "Attribute: mining_drill_resource_drain_multiplier \nRead_type: float\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaQualityPrototype",
      "attribute_name": "mining_drill_resource_drain_multiplier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaQualityPrototype.next",
    "content": "Attribute: next \nRead_type: LuaQualityPrototype\n\nDescription: The next higher level of the quality\n",
    "metadata": {
      "class_name": "LuaQualityPrototype",
      "attribute_name": "next"
    }
  },
  {
    "type": "attribute",
    "name": "LuaQualityPrototype.next_probability",
    "content": "Attribute: next_probability \nRead_type: double\n\nDescription: The probability multiplier of getting the next level of quality\n",
    "metadata": {
      "class_name": "LuaQualityPrototype",
      "attribute_name": "next_probability"
    }
  },
  {
    "type": "attribute",
    "name": "LuaQualityPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaQualityPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaQualityPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaQualityPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaRCON",
    "content": "Class: LuaRCON\nDescription: An interface to send messages to the calling RCON interface through the global object named `rcon`.",
    "metadata": {
      "class_name": "LuaRCON",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaRCON.print",
    "content": "Method: LuaRCON.print\nDescription: Print text to the calling RCON interface if any.\n\nParameters:\n- message (LocalisedString): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRCON",
      "method_name": "print"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRCON.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaRCON",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "class",
    "name": "LuaRadarControlBehavior",
    "content": "Class: LuaRadarControlBehavior\nDescription: Control behavior for radars",
    "metadata": {
      "class_name": "LuaRadarControlBehavior",
      "parent_class": "LuaControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRadarControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaRadarControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRadarControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaRadarControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaRailEnd",
    "content": "Class: LuaRailEnd\nDescription: Utility object that binds to a rail entity and rail_direction to allow easier traversal over rails",
    "metadata": {
      "class_name": "LuaRailEnd",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaRailEnd.flip_direction",
    "content": "Method: LuaRailEnd.flip_direction\nDescription: Moves to opposite end on the rail this object points to\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRailEnd",
      "method_name": "flip_direction"
    }
  },
  {
    "type": "method",
    "name": "LuaRailEnd.get_rail_extensions",
    "content": "Method: LuaRailEnd.get_rail_extensions\nDescription: Returns all possible rail extensions from this position as defined by the planner item.\n\nParameters:\n- planner_item (ItemID): Rail planner that defines possible rail extensions\n\nReturns:\n- {'complex_type': 'array', 'value': 'RailExtensionData'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRailEnd",
      "method_name": "get_rail_extensions"
    }
  },
  {
    "type": "method",
    "name": "LuaRailEnd.make_copy",
    "content": "Method: LuaRailEnd.make_copy\nDescription: Creates a copy of this LuaRailEnd object.\n\nReturns:\n- LuaRailEnd: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRailEnd",
      "method_name": "make_copy"
    }
  },
  {
    "type": "method",
    "name": "LuaRailEnd.move_forward",
    "content": "Method: LuaRailEnd.move_forward\nDescription: Moves forward by 1 rail to the specified connection direction\n\nParameters:\n- connection_direction (defines.rail_connection_direction): \n\nReturns:\n- boolean: If the move was successful. False if there is no rail connected in given connection_direction\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRailEnd",
      "method_name": "move_forward"
    }
  },
  {
    "type": "method",
    "name": "LuaRailEnd.move_natural",
    "content": "Method: LuaRailEnd.move_natural\nDescription: Moves forward by 1 rail in the natural direction. Natural direction is a move in the direction taken by the train over rail connection related to this rail end. If there are no trains, the natural direction is straight if straight connected rail exists, otherwise it is right if right connected rail exists, otherwise it is left if left connected rail exists. Natural direction is not defined if there are no rails connected to this end and this method will fail.",
    "metadata": {
      "class_name": "LuaRailEnd",
      "method_name": "move_natural"
    }
  },
  {
    "type": "method",
    "name": "LuaRailEnd.move_natural",
    "content": "Returns:\n- boolean: If the move was successful. False only when there are no rails connected on this end\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRailEnd",
      "method_name": "move_natural"
    }
  },
  {
    "type": "method",
    "name": "LuaRailEnd.move_to_segment_end",
    "content": "Method: LuaRailEnd.move_to_segment_end\nDescription: Moves forward until a rail segment boundary is reached. If this rail end is at the segment boundary, it will not move at all. When a rail segment is cyclical, it will reach the rail segment boundary at some arbitrary position unless the segment boundary is well defined by presence of rail signals, train stop or other rails connecting to the rails loop.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRailEnd",
      "method_name": "move_to_segment_end"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRailEnd.alternative_in_signal_location",
    "content": "Attribute: alternative_in_signal_location [Optional]\nRead_type: RailLocation\n\nDescription: Location of the alternative incoming signal, which goes to the right relative to the rail end movement. Not all places have alternative incoming signal spot, so when it is not available, a nil will be given instead",
    "metadata": {
      "class_name": "LuaRailEnd",
      "attribute_name": "alternative_in_signal_location"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRailEnd.alternative_out_signal_location",
    "content": "Attribute: alternative_out_signal_location [Optional]\nRead_type: RailLocation\n\nDescription: Location of the alternative outgoing signal, which goes to the right relative to the rail end movement. Not all places have alternative outgoing signal spot, so when it is not available, a nil will be given instead",
    "metadata": {
      "class_name": "LuaRailEnd",
      "attribute_name": "alternative_out_signal_location"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRailEnd.direction",
    "content": "Attribute: direction \nRead_type: defines.rail_direction\n\nDescription: Which end of the rail this RailEnd is binding to.\n",
    "metadata": {
      "class_name": "LuaRailEnd",
      "attribute_name": "direction"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRailEnd.in_signal_location",
    "content": "Attribute: in_signal_location \nRead_type: RailLocation\n\nDescription: Location of an incoming signal, which goes to the left relative to the rail end movement.\n",
    "metadata": {
      "class_name": "LuaRailEnd",
      "attribute_name": "in_signal_location"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRailEnd.location",
    "content": "Attribute: location \nRead_type: RailLocation\n\nDescription: Location of the rail end\n",
    "metadata": {
      "class_name": "LuaRailEnd",
      "attribute_name": "location"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRailEnd.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaRailEnd",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRailEnd.out_signal_location",
    "content": "Attribute: out_signal_location \nRead_type: RailLocation\n\nDescription: Location of an outgoing signal, which goes to the right relative to the rail end movement.\n",
    "metadata": {
      "class_name": "LuaRailEnd",
      "attribute_name": "out_signal_location"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRailEnd.rail",
    "content": "Attribute: rail \nRead_type: LuaEntity\n\nDescription: Rail to which this RailEnd is binding to.\n",
    "metadata": {
      "class_name": "LuaRailEnd",
      "attribute_name": "rail"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRailEnd.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaRailEnd",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaRailPath",
    "content": "Class: LuaRailPath\nDescription: A rail path.",
    "metadata": {
      "class_name": "LuaRailPath",
      "parent_class": null
    }
  },
  {
    "type": "attribute",
    "name": "LuaRailPath.current",
    "content": "Attribute: current \nRead_type: uint\n\nDescription: The current rail index.\n",
    "metadata": {
      "class_name": "LuaRailPath",
      "attribute_name": "current"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRailPath.is_front",
    "content": "Attribute: is_front \nRead_type: boolean\n\nDescription: If the path goes from the front of the train\n",
    "metadata": {
      "class_name": "LuaRailPath",
      "attribute_name": "is_front"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRailPath.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaRailPath",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRailPath.rails",
    "content": "Attribute: rails \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'uint', 'value': 'LuaEntity'}\n\nDescription: Array of the rails that this path travels over.\n",
    "metadata": {
      "class_name": "LuaRailPath",
      "attribute_name": "rails"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRailPath.size",
    "content": "Attribute: size \nRead_type: uint\n\nDescription: The total number of rails in this path.\n",
    "metadata": {
      "class_name": "LuaRailPath",
      "attribute_name": "size"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRailPath.total_distance",
    "content": "Attribute: total_distance \nRead_type: double\n\nDescription: The total path distance.\n",
    "metadata": {
      "class_name": "LuaRailPath",
      "attribute_name": "total_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRailPath.travelled_distance",
    "content": "Attribute: travelled_distance \nRead_type: double\n\nDescription: The total distance traveled.\n",
    "metadata": {
      "class_name": "LuaRailPath",
      "attribute_name": "travelled_distance"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRailPath.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaRailPath",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaRailSignalBaseControlBehavior",
    "content": "Class: LuaRailSignalBaseControlBehavior\nDescription: Control behavior for rail signals and rail chain signals.",
    "metadata": {
      "class_name": "LuaRailSignalBaseControlBehavior",
      "parent_class": "LuaControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRailSignalBaseControlBehavior.blue_signal",
    "content": "Attribute: blue_signal [Optional]\nRead_type: SignalID\nWrite_type: SignalID\nDescription: \n",
    "metadata": {
      "class_name": "LuaRailSignalBaseControlBehavior",
      "attribute_name": "blue_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRailSignalBaseControlBehavior.circuit_condition",
    "content": "Attribute: circuit_condition \nRead_type: CircuitConditionDefinition\nWrite_type: CircuitConditionDefinition\nDescription: The circuit condition when controlling the signal through the circuit network.\n",
    "metadata": {
      "class_name": "LuaRailSignalBaseControlBehavior",
      "attribute_name": "circuit_condition"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRailSignalBaseControlBehavior.close_signal",
    "content": "Attribute: close_signal \nRead_type: boolean\nWrite_type: boolean\nDescription: If this will close the rail signal based off the circuit condition.\n",
    "metadata": {
      "class_name": "LuaRailSignalBaseControlBehavior",
      "attribute_name": "close_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRailSignalBaseControlBehavior.green_signal",
    "content": "Attribute: green_signal [Optional]\nRead_type: SignalID\nWrite_type: SignalID\nDescription: \n",
    "metadata": {
      "class_name": "LuaRailSignalBaseControlBehavior",
      "attribute_name": "green_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRailSignalBaseControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaRailSignalBaseControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRailSignalBaseControlBehavior.orange_signal",
    "content": "Attribute: orange_signal [Optional]\nRead_type: SignalID\nWrite_type: SignalID\nDescription: \n",
    "metadata": {
      "class_name": "LuaRailSignalBaseControlBehavior",
      "attribute_name": "orange_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRailSignalBaseControlBehavior.read_signal",
    "content": "Attribute: read_signal \nRead_type: boolean\nWrite_type: boolean\nDescription: If this will read the rail signal state.\n",
    "metadata": {
      "class_name": "LuaRailSignalBaseControlBehavior",
      "attribute_name": "read_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRailSignalBaseControlBehavior.red_signal",
    "content": "Attribute: red_signal [Optional]\nRead_type: SignalID\nWrite_type: SignalID\nDescription: \n",
    "metadata": {
      "class_name": "LuaRailSignalBaseControlBehavior",
      "attribute_name": "red_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRailSignalBaseControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaRailSignalBaseControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaRandomGenerator",
    "content": "Class: LuaRandomGenerator\nDescription: A deterministic random generator independent from the core games random generator that can be seeded and re-seeded at will. This random generator can be saved and loaded and will maintain its state.\n\nNote this is entirely different from calling [math.random](libraries.html)() and you should be sure you actually want to use this over calling `math.random()`. If you aren't sure if you need to use this over calling `math.random()` then you probably don't need to use this.",
    "metadata": {
      "class_name": "LuaRandomGenerator",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaRandomGenerator.re_seed",
    "content": "Method: LuaRandomGenerator.re_seed\nDescription: Re-seeds the random generator with the given value.\n\nSeeds that are close together will produce similar results. Seeds from 0 to 341 will produce the same results.\n\nParameters:\n- seed (uint): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRandomGenerator",
      "method_name": "re_seed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRandomGenerator.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaRandomGenerator",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRandomGenerator.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaRandomGenerator",
      "attribute_name": "valid"
    }
  },
  {
    "type": "operator",
    "name": "LuaRandomGenerator.call",
    "content": "Operator: call \nRead_type: None\n\nDescription: Generates a random number. If no parameters are given a number in the `[0, 1)` range is returned. If a single parameter is given a floored number in the `[1, N]` range is returned. If 2 parameters are given a floored number in the `[N1, N2]` range is returned.",
    "metadata": {
      "class_name": "LuaRandomGenerator",
      "operator_name": "call"
    }
  },
  {
    "type": "class",
    "name": "LuaReactorControlBehavior",
    "content": "Class: LuaReactorControlBehavior\nDescription: Control behavior for Reactor",
    "metadata": {
      "class_name": "LuaReactorControlBehavior",
      "parent_class": "LuaControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaReactorControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaReactorControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaReactorControlBehavior.read_fuel",
    "content": "Attribute: read_fuel \nRead_type: boolean\nWrite_type: boolean\nDescription: If this will read fuel inventory and currently burning fuel\n",
    "metadata": {
      "class_name": "LuaReactorControlBehavior",
      "attribute_name": "read_fuel"
    }
  },
  {
    "type": "attribute",
    "name": "LuaReactorControlBehavior.read_temperature",
    "content": "Attribute: read_temperature \nRead_type: boolean\nWrite_type: boolean\nDescription: If this will read temperature of the reactor\n",
    "metadata": {
      "class_name": "LuaReactorControlBehavior",
      "attribute_name": "read_temperature"
    }
  },
  {
    "type": "attribute",
    "name": "LuaReactorControlBehavior.temperature_signal",
    "content": "Attribute: temperature_signal [Optional]\nRead_type: SignalID\nWrite_type: SignalID\nDescription: \n",
    "metadata": {
      "class_name": "LuaReactorControlBehavior",
      "attribute_name": "temperature_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaReactorControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaReactorControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaRecipe",
    "content": "Class: LuaRecipe\nDescription: A crafting recipe. Recipes belong to forces (see [LuaForce](runtime:LuaForce)) because some recipes are unlocked by research, and researches are per-force.",
    "metadata": {
      "class_name": "LuaRecipe",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaRecipe.reload",
    "content": "Method: LuaRecipe.reload\nDescription: Reload the recipe from the prototype.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRecipe",
      "method_name": "reload"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipe.category",
    "content": "Attribute: category \nRead_type: string\n\nDescription: Category of the recipe.\n",
    "metadata": {
      "class_name": "LuaRecipe",
      "attribute_name": "category"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipe.enabled",
    "content": "Attribute: enabled \nRead_type: boolean\nWrite_type: boolean\nDescription: Can the recipe be used?\n",
    "metadata": {
      "class_name": "LuaRecipe",
      "attribute_name": "enabled"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipe.energy",
    "content": "Attribute: energy \nRead_type: double\n\nDescription: Energy required to execute this recipe. This directly affects the crafting time: Recipe's energy is exactly its crafting time in seconds, when crafted in an assembling machine with crafting speed exactly equal to one.",
    "metadata": {
      "class_name": "LuaRecipe",
      "attribute_name": "energy"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipe.force",
    "content": "Attribute: force \nRead_type: LuaForce\n\nDescription: The force that owns this recipe.\n",
    "metadata": {
      "class_name": "LuaRecipe",
      "attribute_name": "force"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipe.group",
    "content": "Attribute: group \nRead_type: LuaGroup\n\nDescription: Group of this recipe.\n",
    "metadata": {
      "class_name": "LuaRecipe",
      "attribute_name": "group"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipe.hidden",
    "content": "Attribute: hidden \nRead_type: boolean\n\nDescription: Is the recipe hidden? Hidden recipes don't show up in the crafting menu.\n",
    "metadata": {
      "class_name": "LuaRecipe",
      "attribute_name": "hidden"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipe.hidden_from_flow_stats",
    "content": "Attribute: hidden_from_flow_stats \nRead_type: boolean\nWrite_type: boolean\nDescription: Is the recipe hidden from flow statistics?\n",
    "metadata": {
      "class_name": "LuaRecipe",
      "attribute_name": "hidden_from_flow_stats"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipe.ingredients",
    "content": "Attribute: ingredients \nRead_type: {'complex_type': 'array', 'value': 'Ingredient'}\n\nDescription: The ingredients to this recipe.\nExamples: [\"```\\n-- The ingredients of \\\"advanced-oil-processing\\\" would look like this:\\n{{type=\\\"fluid\\\", name=\\\"crude-oil\\\", amount=100}, {type=\\\"fluid\\\", name=\\\"water\\\", amount=50}}\\n```\"]",
    "metadata": {
      "class_name": "LuaRecipe",
      "attribute_name": "ingredients"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipe.localised_description",
    "content": "Attribute: localised_description \nRead_type: LocalisedString\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaRecipe",
      "attribute_name": "localised_description"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipe.localised_name",
    "content": "Attribute: localised_name \nRead_type: LocalisedString\n\nDescription: Localised name of the recipe.\n",
    "metadata": {
      "class_name": "LuaRecipe",
      "attribute_name": "localised_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipe.name",
    "content": "Attribute: name \nRead_type: string\n\nDescription: Name of the recipe. This can be different than the name of the result items as there could be more recipes to make the same item.\n",
    "metadata": {
      "class_name": "LuaRecipe",
      "attribute_name": "name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipe.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaRecipe",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipe.order",
    "content": "Attribute: order \nRead_type: string\n\nDescription: The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning.\n",
    "metadata": {
      "class_name": "LuaRecipe",
      "attribute_name": "order"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipe.productivity_bonus",
    "content": "Attribute: productivity_bonus \nRead_type: float\nWrite_type: float\nDescription: The productivity bonus for this recipe.\n",
    "metadata": {
      "class_name": "LuaRecipe",
      "attribute_name": "productivity_bonus"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipe.products",
    "content": "Attribute: products \nRead_type: {'complex_type': 'array', 'value': 'Product'}\n\nDescription: The results/products of this recipe.\nExamples: [\"```\\n-- The products of \\\"advanced-oil-processing\\\" would look like this:\\n{{type=\\\"fluid\\\", name=\\\"heavy-oil\\\", amount=25}, {type=\\\"fluid\\\", name=\\\"light-oil\\\", amount=45}, {type=\\\"fluid\\\", name=\\\"petroleum-gas\\\", amount=55}}\\n```\"]",
    "metadata": {
      "class_name": "LuaRecipe",
      "attribute_name": "products"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipe.prototype",
    "content": "Attribute: prototype \nRead_type: LuaRecipePrototype\n\nDescription: The prototype for this recipe.\n",
    "metadata": {
      "class_name": "LuaRecipe",
      "attribute_name": "prototype"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipe.subgroup",
    "content": "Attribute: subgroup \nRead_type: LuaGroup\n\nDescription: Subgroup of this recipe.\n",
    "metadata": {
      "class_name": "LuaRecipe",
      "attribute_name": "subgroup"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipe.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaRecipe",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaRecipeCategoryPrototype",
    "content": "Class: LuaRecipeCategoryPrototype\nDescription: Prototype of a recipe category.",
    "metadata": {
      "class_name": "LuaRecipeCategoryPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipeCategoryPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaRecipeCategoryPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipeCategoryPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaRecipeCategoryPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaRecipePrototype",
    "content": "Class: LuaRecipePrototype\nDescription: A crafting recipe prototype.",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.allow_as_intermediate",
    "content": "Attribute: allow_as_intermediate \nRead_type: boolean\n\nDescription: If this recipe is enabled for the purpose of intermediate hand-crafting.\n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "allow_as_intermediate"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.allow_decomposition",
    "content": "Attribute: allow_decomposition \nRead_type: boolean\n\nDescription: Is this recipe allowed to be broken down for the recipe tooltip \"Total raw\" calculations?\n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "allow_decomposition"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.allow_inserter_overload",
    "content": "Attribute: allow_inserter_overload \nRead_type: boolean\n\nDescription: If the recipe is allowed to have the extra inserter overload bonus applied (4 * stack inserter stack size).\n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "allow_inserter_overload"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.allow_intermediates",
    "content": "Attribute: allow_intermediates \nRead_type: boolean\n\nDescription: If this recipe is allowed to use intermediate recipes when hand-crafting.\n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "allow_intermediates"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.allowed_effects",
    "content": "Attribute: allowed_effects [Optional]\nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'boolean'}\n\nDescription: The allowed module effects for this recipe, if any.\n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "allowed_effects"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.allowed_module_categories",
    "content": "Attribute: allowed_module_categories [Optional]\nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': {'complex_type': 'literal', 'value': True}}\n\nDescription: The allowed module categories for this recipe, if any.\n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "allowed_module_categories"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.alternative_unlock_methods",
    "content": "Attribute: alternative_unlock_methods [Optional]\nRead_type: {'complex_type': 'array', 'value': 'LuaTechnologyPrototype'}\n\nDescription: Alternative technologies that can unlocked this recipe.\n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "alternative_unlock_methods"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.always_show_made_in",
    "content": "Attribute: always_show_made_in \nRead_type: boolean\n\nDescription: Should this recipe always show \"Made in\" in the tooltip?\n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "always_show_made_in"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.always_show_products",
    "content": "Attribute: always_show_products \nRead_type: boolean\n\nDescription: If the products are always shown in the recipe tooltip.\n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "always_show_products"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.category",
    "content": "Attribute: category \nRead_type: string\n\nDescription: Category of the recipe.\n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "category"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.crafting_machine_tints",
    "content": "Attribute: crafting_machine_tints \nRead_type: {'complex_type': 'array', 'value': 'Color'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "crafting_machine_tints"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.effect_limitation_messages",
    "content": "Attribute: effect_limitation_messages [Optional]\nRead_type: {'complex_type': 'array', 'value': 'LocalisedString'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "effect_limitation_messages"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.emissions_multiplier",
    "content": "Attribute: emissions_multiplier \nRead_type: double\n\nDescription: The emissions multiplier for this recipe.\n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "emissions_multiplier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.enabled",
    "content": "Attribute: enabled \nRead_type: boolean\n\nDescription: If this recipe prototype is enabled by default (enabled at the beginning of a game).\n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "enabled"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.energy",
    "content": "Attribute: energy \nRead_type: double\n\nDescription: Energy required to execute this recipe. This directly affects the crafting time: Recipe's energy is exactly its crafting time in seconds, when crafted in an assembling machine with crafting speed exactly equal to one.",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "energy"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.hidden_from_flow_stats",
    "content": "Attribute: hidden_from_flow_stats \nRead_type: boolean\n\nDescription: Is the recipe hidden from flow statistics (item/fluid production statistics)?\n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "hidden_from_flow_stats"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.hidden_from_player_crafting",
    "content": "Attribute: hidden_from_player_crafting \nRead_type: boolean\n\nDescription: Is the recipe hidden from player crafting? The recipe will still show up for selection in machines.\n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "hidden_from_player_crafting"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.hide_from_flow_stats",
    "content": "Attribute: hide_from_flow_stats \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "hide_from_flow_stats"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.hide_from_player_crafting",
    "content": "Attribute: hide_from_player_crafting \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "hide_from_player_crafting"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.hide_from_signal_gui",
    "content": "Attribute: hide_from_signal_gui \nRead_type: boolean\n\nDescription: Is this recipe is marked to be hidden from the signal GUI.\n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "hide_from_signal_gui"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.ingredients",
    "content": "Attribute: ingredients \nRead_type: {'complex_type': 'array', 'value': 'Ingredient'}\n\nDescription: The ingredients to this recipe.\nExamples: [\"```\\n-- The ingredients of \\\"advanced-oil-processing\\\" would look like this\\n{{type=\\\"fluid\\\", name=\\\"crude-oil\\\", amount=100}, {type=\\\"fluid\\\", name=\\\"water\\\", amount=50}}\\n```\"]",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "ingredients"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.is_parameter",
    "content": "Attribute: is_parameter \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "is_parameter"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.main_product",
    "content": "Attribute: main_product [Optional]\nRead_type: Product\n\nDescription: The main product of this recipe, if any.\n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "main_product"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.maximum_productivity",
    "content": "Attribute: maximum_productivity \nRead_type: double\n\nDescription: The maximal productivity bonus that can be achieved with this recipe.\n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "maximum_productivity"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.overload_multiplier",
    "content": "Attribute: overload_multiplier \nRead_type: uint\n\nDescription: Used to determine how many extra items are put into an assembling machine before it's considered \"full enough\".\n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "overload_multiplier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.preserve_products_in_machine_output",
    "content": "Attribute: preserve_products_in_machine_output \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "preserve_products_in_machine_output"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.products",
    "content": "Attribute: products \nRead_type: {'complex_type': 'array', 'value': 'Product'}\n\nDescription: The results/products of this recipe.\nExamples: [\"```\\n-- The products of \\\"advanced-oil-processing\\\" would look like this:\\n{{type=\\\"fluid\\\", name=\\\"heavy-oil\\\", amount=25}, {type=\\\"fluid\\\", name=\\\"light-oil\\\", amount=45}, {type=\\\"fluid\\\", name=\\\"petroleum-gas\\\", amount=55}}\\n```\"]",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "products"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.request_paste_multiplier",
    "content": "Attribute: request_paste_multiplier \nRead_type: uint\n\nDescription: The multiplier used when this recipe is copied from an assembling machine to a requester chest. For each item in the recipe the item count * this value is set in the requester chest.\n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "request_paste_multiplier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.show_amount_in_title",
    "content": "Attribute: show_amount_in_title \nRead_type: boolean\n\nDescription: If the amount is shown in the recipe tooltip title when the recipe produces more than 1 product.\n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "show_amount_in_title"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.surface_conditions",
    "content": "Attribute: surface_conditions [Optional]\nRead_type: {'complex_type': 'array', 'value': 'SurfaceCondition'}\n\nDescription: The surface conditions required to craft this recipe.\n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "surface_conditions"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.trash",
    "content": "Attribute: trash [Optional]\nRead_type: {'complex_type': 'array', 'value': 'LuaItemPrototype'}\n\nDescription: The 'trash' items that this recipe might produce as a result of spoiling.\n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "trash"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.unlock_results",
    "content": "Attribute: unlock_results \nRead_type: boolean\n\nDescription: Is this recipe unlocks the result item(s) so they're shown in filter-select GUIs.\n",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "unlock_results"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecipePrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaRecipePrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaRecord",
    "content": "Class: LuaRecord\nDescription: A reference to a record in the blueprint library. Records in the \"my blueprints\" shelf are read-only, but records in the \"game blueprints\" shelf are read/write.",
    "metadata": {
      "class_name": "LuaRecord",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.build_blueprint",
    "content": "Method: LuaRecord.build_blueprint\nDescription: Build this blueprint at the given location.\n\nBuilt entities can be come invalid between the building of the blueprint and the function returning if by_player or raise_built is used and one of those events invalidates the entity.",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "build_blueprint"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.build_blueprint",
    "content": "Parameters:\n- build_mode (defines.build_mode)[Optional]: If `normal`, blueprint will not be built if any one thing can't be built. If `forced`, anything that can be built is built and obstructing nature entities will be deconstructed. If `superforced`, all obstructions will be deconstructed and the blueprint will be built.",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "build_blueprint"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.build_blueprint",
    "content": "- by_player (PlayerIdentification)[Optional]: The player to use if any. If provided [defines.events.on_built_entity](runtime:defines.events.on_built_entity) will also be fired on successful entity creation.\n- direction (defines.direction)[Optional]: The direction to use when building\n- force (ForceID): Force to use for the building\n- position (MapPosition): The position to build at",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "build_blueprint"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.build_blueprint",
    "content": "- position (MapPosition): The position to build at\n- raise_built (boolean)[Optional]: If true; [defines.events.script_raised_built](runtime:defines.events.script_raised_built) will be fired on successful entity creation. Note: this is ignored if by_player is provided.\n- skip_fog_of_war (boolean)[Optional]: If chunks covered by fog-of-war are skipped.\n- surface (SurfaceIdentification): Surface to build on",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "build_blueprint"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.build_blueprint",
    "content": "Returns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}: Array of created ghosts\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "build_blueprint"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.cancel_deconstruct_area",
    "content": "Method: LuaRecord.cancel_deconstruct_area\nDescription: Cancel deconstruct the given area with this deconstruction planner.",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "cancel_deconstruct_area"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.cancel_deconstruct_area",
    "content": "Parameters:\n- area (BoundingBox): The area to deconstruct\n- by_player (PlayerIdentification)[Optional]: The player to use if any.\n- force (ForceID): Force to use for canceling deconstruction\n- skip_fog_of_war (boolean)[Optional]: If chunks covered by fog-of-war are skipped. Defaults to `false`.\n- super_forced (boolean)[Optional]: If the cancel deconstruction is super-forced. Defaults to `false`.\n- surface (SurfaceIdentification): Surface to cancel deconstruct on",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "cancel_deconstruct_area"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.cancel_deconstruct_area",
    "content": "Format:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "cancel_deconstruct_area"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.clear_blueprint",
    "content": "Method: LuaRecord.clear_blueprint\nDescription: Clears this blueprint.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "clear_blueprint"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.clear_deconstruction_data",
    "content": "Method: LuaRecord.clear_deconstruction_data\nDescription: Clears all settings/filters on this deconstruction planner, resetting it to default values.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "clear_deconstruction_data"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.clear_upgrade_data",
    "content": "Method: LuaRecord.clear_upgrade_data\nDescription: Clears all settings/filters on this upgrade planner, resetting it to default values.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "clear_upgrade_data"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.create_blueprint",
    "content": "Method: LuaRecord.create_blueprint\nDescription: Sets up this blueprint using the found blueprintable entities/tiles on the surface.",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "create_blueprint"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.create_blueprint",
    "content": "Parameters:\n- always_include_tiles (boolean)[Optional]: When true, blueprintable tiles are always included in the blueprint. When false they're only included if no entities exist in the setup area. Defaults to false.\n- area (BoundingBox): The bounding box\n- force (ForceID): Force to use for the creation\n- include_entities (boolean)[Optional]: When true, entities are included in the blueprint. Defaults to true.",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "create_blueprint"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.create_blueprint",
    "content": "- include_fuel (boolean)[Optional]: When true, train fuel is included in the blueprint, Defaults to true.\n- include_modules (boolean)[Optional]: When true, modules are included in the blueprint. Defaults to true.\n- include_station_names (boolean)[Optional]: When true, station names are included in the blueprint. Defaults to false.\n- include_trains (boolean)[Optional]: When true, trains are included in the blueprint. Defaults to false.\n- surface (SurfaceIdentification): Surface to create from",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "create_blueprint"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.create_blueprint",
    "content": "Returns:\n- {'complex_type': 'dictionary', 'key': 'uint', 'value': 'LuaEntity'}: The blueprint entity index to source entity mapping.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "create_blueprint"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.deconstruct_area",
    "content": "Method: LuaRecord.deconstruct_area\nDescription: Deconstruct the given area with this deconstruction planner.",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "deconstruct_area"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.deconstruct_area",
    "content": "Parameters:\n- area (BoundingBox): The area to deconstruct\n- by_player (PlayerIdentification)[Optional]: The player to use if any.\n- force (ForceID): Force to use for the deconstruction\n- skip_fog_of_war (boolean)[Optional]: If chunks covered by fog-of-war are skipped. Defaults to `false`.\n- super_forced (boolean)[Optional]: If the deconstruction is super-forced. Defaults to `false`.\n- surface (SurfaceIdentification): Surface to deconstruct on\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "deconstruct_area"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.get_active_index",
    "content": "Method: LuaRecord.get_active_index\nDescription: The active index of this BlueprintBookRecord. For records in \"my blueprints\", the result will be the same regardless of the player, but records in \"game blueprints\" may have different active indices per player.\n\nParameters:\n- player (PlayerIdentification): \n\nReturns:\n- uint: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "get_active_index"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.get_blueprint_entities",
    "content": "Method: LuaRecord.get_blueprint_entities\nDescription: The entities in this blueprint.\n\nReturns:\n- {'complex_type': 'array', 'value': 'BlueprintEntity'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "get_blueprint_entities"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.get_blueprint_entity_count",
    "content": "Method: LuaRecord.get_blueprint_entity_count\nDescription: Gets the number of entities in this blueprint blueprint.\n\nReturns:\n- uint: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "get_blueprint_entity_count"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.get_blueprint_entity_tag",
    "content": "Method: LuaRecord.get_blueprint_entity_tag\nDescription: Gets the given tag on the given blueprint entity index in this blueprint blueprint.\n\nParameters:\n- index (uint): The entity index.\n- tag (string): The tag to get.\n\nReturns:\n- AnyBasic: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "get_blueprint_entity_tag"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.get_blueprint_entity_tags",
    "content": "Method: LuaRecord.get_blueprint_entity_tags\nDescription: Gets the tags for the given blueprint entity index in this blueprint.\n\nParameters:\n- index (uint): \n\nReturns:\n- Tags: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "get_blueprint_entity_tags"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.get_blueprint_tiles",
    "content": "Method: LuaRecord.get_blueprint_tiles\nDescription: A list of the tiles in this blueprint.\n\nReturns:\n- {'complex_type': 'array', 'value': 'Tile'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "get_blueprint_tiles"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.get_entity_filter",
    "content": "Method: LuaRecord.get_entity_filter\nDescription: Gets the entity filter at the given index for this deconstruction planner.\n\nParameters:\n- index (uint): \n\nReturns:\n- ItemFilter: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "get_entity_filter"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.get_mapper",
    "content": "Method: LuaRecord.get_mapper\nDescription: Gets the filter at the given index for this upgrade item.\n\nIn contrast to [LuaRecord::set_mapper](runtime:LuaRecord::set_mapper), indices past the upgrade item's current size are considered to be out of bounds.\n\nParameters:\n- index (uint): The index of the mapper to read.\n- type (string): `\"from\"` or `\"to\"`.\n\nReturns:\n- {'complex_type': 'union', 'options': ['UpgradeMapperSource', 'UpgradeMapperDestination'], 'full_format': False}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "get_mapper"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.get_tile_filter",
    "content": "Method: LuaRecord.get_tile_filter\nDescription: Gets the tile filter at the given index for this deconstruction planner.\n\nParameters:\n- index (uint): \n\nReturns:\n- string: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "get_tile_filter"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.is_blueprint_setup",
    "content": "Method: LuaRecord.is_blueprint_setup\nDescription: Is this blueprint setup? I.e. is it a non-empty blueprint?\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "is_blueprint_setup"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.set_blueprint_entities",
    "content": "Method: LuaRecord.set_blueprint_entities\nDescription: Set new entities to be a part of this blueprint.\n\nParameters:\n- entities ({'complex_type': 'array', 'value': 'BlueprintEntity'}): The new blueprint entities.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "set_blueprint_entities"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.set_blueprint_entity_tag",
    "content": "Method: LuaRecord.set_blueprint_entity_tag\nDescription: Sets the given tag on the given blueprint entity index in this blueprint blueprint.\n\nParameters:\n- index (uint): The entity index.\n- tag (string): The tag to set.\n- value (AnyBasic): The tag value to set or `nil` to clear the tag.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "set_blueprint_entity_tag"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.set_blueprint_entity_tags",
    "content": "Method: LuaRecord.set_blueprint_entity_tags\nDescription: Sets the tags on the given blueprint entity index in this blueprint.\n\nParameters:\n- index (uint): The entity index\n- tags (Tags): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "set_blueprint_entity_tags"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.set_blueprint_tiles",
    "content": "Method: LuaRecord.set_blueprint_tiles\nDescription: Set specific tiles in this blueprint.\n\nParameters:\n- tiles ({'complex_type': 'array', 'value': 'Tile'}): Tiles to be a part of the blueprint.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "set_blueprint_tiles"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.set_entity_filter",
    "content": "Method: LuaRecord.set_entity_filter\nDescription: Sets the entity filter at the given index for this deconstruction planner.\n\nParameters:\n- filter ({'complex_type': 'union', 'options': ['ItemFilter', 'nil'], 'full_format': False}): Writing `nil` removes the filter.\n- index (uint): \n\nReturns:\n- boolean: Whether the new filter was successfully set (ie. was valid).\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "set_entity_filter"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.set_mapper",
    "content": "Method: LuaRecord.set_mapper\nDescription: Sets the module filter at the given index for this upgrade item.\n\nIn contrast to [LuaRecord::get_mapper](runtime:LuaRecord::get_mapper), indices past the upgrade item's current size are valid and expand the list of mappings accordingly, if within reasonable bounds.",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "set_mapper"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.set_mapper",
    "content": "Parameters:\n- index (uint): The index of the mapper to set.\n- mapper ({'complex_type': 'union', 'options': ['UpgradeMapperSource', 'UpgradeMapperDestination'], 'full_format': False}): The mapper to set or `nil`\n- type (string): `\"from\"` or `\"to\"`.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "set_mapper"
    }
  },
  {
    "type": "method",
    "name": "LuaRecord.set_tile_filter",
    "content": "Method: LuaRecord.set_tile_filter\nDescription: Sets the tile filter at the given index for this deconstruction planner.\n\nParameters:\n- filter ({'complex_type': 'union', 'options': ['string', 'LuaTilePrototype', 'LuaTile'], 'full_format': False}): Setting to nil erases the filter.\n- index (uint): \n\nReturns:\n- boolean: Whether the new filter was successfully set (ie. was valid).\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRecord",
      "method_name": "set_tile_filter"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecord.blueprint_absolute_snapping",
    "content": "Attribute: blueprint_absolute_snapping \nRead_type: boolean\nWrite_type: boolean\nDescription: If absolute snapping is enabled on this blueprint.\n",
    "metadata": {
      "class_name": "LuaRecord",
      "attribute_name": "blueprint_absolute_snapping"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecord.blueprint_position_relative_to_grid",
    "content": "Attribute: blueprint_position_relative_to_grid [Optional]\nRead_type: TilePosition\nWrite_type: TilePosition\nDescription: The offset from the absolute grid. `nil` if absolute snapping is not enabled.\n",
    "metadata": {
      "class_name": "LuaRecord",
      "attribute_name": "blueprint_position_relative_to_grid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecord.blueprint_snap_to_grid",
    "content": "Attribute: blueprint_snap_to_grid [Optional]\nRead_type: TilePosition\nWrite_type: TilePosition\nDescription: The snapping grid size in this blueprint. `nil` if snapping is not enabled.\n",
    "metadata": {
      "class_name": "LuaRecord",
      "attribute_name": "blueprint_snap_to_grid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecord.contents",
    "content": "Attribute: contents \nRead_type: {'complex_type': 'array', 'value': 'LuaRecord'}\n\nDescription: The contents of this BlueprintBookRecord.\n",
    "metadata": {
      "class_name": "LuaRecord",
      "attribute_name": "contents"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecord.cost_to_build",
    "content": "Attribute: cost_to_build \nRead_type: {'complex_type': 'array', 'value': 'ItemWithQualityCounts'}\n\nDescription: List of raw materials required to build this blueprint.\n",
    "metadata": {
      "class_name": "LuaRecord",
      "attribute_name": "cost_to_build"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecord.default_icons",
    "content": "Attribute: default_icons \nRead_type: {'complex_type': 'array', 'value': 'BlueprintSignalIcon'}\n\nDescription: The default icons for a blueprint blueprint.\n",
    "metadata": {
      "class_name": "LuaRecord",
      "attribute_name": "default_icons"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecord.entity_filter_count",
    "content": "Attribute: entity_filter_count \nRead_type: uint\n\nDescription: The number of entity filters this deconstruction planner supports.\n",
    "metadata": {
      "class_name": "LuaRecord",
      "attribute_name": "entity_filter_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecord.entity_filter_mode",
    "content": "Attribute: entity_filter_mode \nRead_type: defines.deconstruction_item.entity_filter_mode\nWrite_type: defines.deconstruction_item.entity_filter_mode\nDescription: The blacklist/whitelist entity filter mode for this deconstruction planner.\n",
    "metadata": {
      "class_name": "LuaRecord",
      "attribute_name": "entity_filter_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecord.entity_filters",
    "content": "Attribute: entity_filters \nRead_type: {'complex_type': 'array', 'value': 'ItemFilter'}\nWrite_type: {\"complex_type\": \"array\", \"value\": \"ItemFilter\"}\nDescription: The entity filters for this deconstruction planner. The attribute is a sparse array with the keys representing the index of the filter. All prototypes in this array must not have the `\"not-deconstructable\"` flag set and are either a `cliff` or marked as `minable`.",
    "metadata": {
      "class_name": "LuaRecord",
      "attribute_name": "entity_filters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecord.is_blueprint_preview",
    "content": "Attribute: is_blueprint_preview \nRead_type: boolean\n\nDescription: Is this blueprint record a preview? A preview record must be synced by the player before entity and tile data can be read.\n",
    "metadata": {
      "class_name": "LuaRecord",
      "attribute_name": "is_blueprint_preview"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecord.mapper_count",
    "content": "Attribute: mapper_count \nRead_type: uint\n\nDescription: The current count of mappers in the upgrade item.\n",
    "metadata": {
      "class_name": "LuaRecord",
      "attribute_name": "mapper_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecord.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaRecord",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecord.tile_filter_count",
    "content": "Attribute: tile_filter_count \nRead_type: uint\n\nDescription: The number of tile filters this deconstruction planner supports.\n",
    "metadata": {
      "class_name": "LuaRecord",
      "attribute_name": "tile_filter_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecord.tile_filter_mode",
    "content": "Attribute: tile_filter_mode \nRead_type: defines.deconstruction_item.tile_filter_mode\nWrite_type: defines.deconstruction_item.tile_filter_mode\nDescription: The blacklist/whitelist tile filter mode for this deconstruction planner.\n",
    "metadata": {
      "class_name": "LuaRecord",
      "attribute_name": "tile_filter_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecord.tile_filters",
    "content": "Attribute: tile_filters \nRead_type: {'complex_type': 'array', 'value': 'TileID'}\nWrite_type: {\"complex_type\": \"array\", \"value\": \"TileID\"}\nDescription: The tile filters for this deconstruction planner. The attribute is a sparse array with the keys representing the index of the filter. Reading filters always returns an array of strings which are the tile prototype names.",
    "metadata": {
      "class_name": "LuaRecord",
      "attribute_name": "tile_filters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecord.tile_selection_mode",
    "content": "Attribute: tile_selection_mode \nRead_type: defines.deconstruction_item.tile_selection_mode\nWrite_type: defines.deconstruction_item.tile_selection_mode\nDescription: The tile selection mode for this deconstruction planner.\n",
    "metadata": {
      "class_name": "LuaRecord",
      "attribute_name": "tile_selection_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecord.trees_and_rocks_only",
    "content": "Attribute: trees_and_rocks_only \nRead_type: boolean\nWrite_type: boolean\nDescription: If this deconstruction planner, is set to allow trees and rocks only.\n",
    "metadata": {
      "class_name": "LuaRecord",
      "attribute_name": "trees_and_rocks_only"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecord.type",
    "content": "Attribute: type \nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'blueprint'}, {'complex_type': 'literal', 'value': 'blueprint-book'}, {'complex_type': 'literal', 'value': 'deconstruction-planner'}, {'complex_type': 'literal', 'value': 'upgrade-planner'}], 'full_format': False}\n\nDescription: The type of this blueprint record.",
    "metadata": {
      "class_name": "LuaRecord",
      "attribute_name": "type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecord.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaRecord",
      "attribute_name": "valid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRecord.valid_for_write",
    "content": "Attribute: valid_for_write \nRead_type: boolean\n\nDescription: Is this record valid for writing? A record is invalid for write if it is a BlueprintRecord preview or if it is in the \"My blueprints\" shelf.\n",
    "metadata": {
      "class_name": "LuaRecord",
      "attribute_name": "valid_for_write"
    }
  },
  {
    "type": "class",
    "name": "LuaRemote",
    "content": "Class: LuaRemote\nDescription: Registry of interfaces between scripts. An interface is simply a dictionary mapping names to functions. A script or mod can then register an interface with [LuaRemote](runtime:LuaRemote), after that any script can call the registered functions, provided it knows the interface name and the desired function name. An instance of LuaRemote is available through the global object named `remote`.",
    "metadata": {
      "class_name": "LuaRemote",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaRemote.add_interface",
    "content": "Method: LuaRemote.add_interface\nDescription: Add a remote interface.\n\nParameters:\n- functions ({'complex_type': 'dictionary', 'key': 'string', 'value': {'complex_type': 'function', 'parameters': []}}): List of functions that are members of the new interface.\n- name (string): Name of the interface. If the name matches any existing interface, an error is thrown.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRemote",
      "method_name": "add_interface"
    }
  },
  {
    "type": "method",
    "name": "LuaRemote.call",
    "content": "Method: LuaRemote.call\nDescription: Call a function of an interface.\n\nProviding an unknown interface or function name will result in a script error.\n\nParameters:\n- function (string): Function name that belongs to the `interface`.\n- interface (string): Interface to look up `function` in.\n\nReturns:\n- Any: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRemote",
      "method_name": "call"
    }
  },
  {
    "type": "method",
    "name": "LuaRemote.remove_interface",
    "content": "Method: LuaRemote.remove_interface\nDescription: Removes an interface with the given name.\n\nParameters:\n- name (string): Name of the interface.\n\nReturns:\n- boolean: Whether the interface was removed. `false` if the interface didn't exist.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRemote",
      "method_name": "remove_interface"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRemote.interfaces",
    "content": "Attribute: interfaces \nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': {'complex_type': 'dictionary', 'key': 'string', 'value': {'complex_type': 'literal', 'value': True}}}",
    "metadata": {
      "class_name": "LuaRemote",
      "attribute_name": "interfaces"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRemote.interfaces",
    "content": "Description: List of all registered interfaces. For each interface name, `remote.interfaces[name]` is a dictionary mapping the interface's registered functions to `true`.\nExamples: [\"```\\n-- Assuming the \\\"human interactor\\\" interface is registered as above\\ngame.player.print(tostring(remote.interfaces[\\\"human interactor\\\"][\\\"hello\\\"]))        -- prints true\\ngame.player.print(tostring(remote.interfaces[\\\"human interactor\\\"][\\\"nonexistent\\\"]))  -- prints nil\\n```\"]",
    "metadata": {
      "class_name": "LuaRemote",
      "attribute_name": "interfaces"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRemote.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaRemote",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "class",
    "name": "LuaRenderObject",
    "content": "Class: LuaRenderObject\nDescription: Reference to a single LuaRendering object.",
    "metadata": {
      "class_name": "LuaRenderObject",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaRenderObject.bring_to_front",
    "content": "Method: LuaRenderObject.bring_to_front\nDescription: Reorder this object so that it is drawn in front of the already existing objects.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRenderObject",
      "method_name": "bring_to_front"
    }
  },
  {
    "type": "method",
    "name": "LuaRenderObject.destroy",
    "content": "Method: LuaRenderObject.destroy\nDescription: Destroys this object. Does not error when the object is invalid.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRenderObject",
      "method_name": "destroy"
    }
  },
  {
    "type": "method",
    "name": "LuaRenderObject.move_to_back",
    "content": "Method: LuaRenderObject.move_to_back\nDescription: Reorder this object so that it is drawn in the back of the already existing objects.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRenderObject",
      "method_name": "move_to_back"
    }
  },
  {
    "type": "method",
    "name": "LuaRenderObject.set_corners",
    "content": "Method: LuaRenderObject.set_corners\nDescription: Set the corners of the rectangle with this id.\n\nParameters:\n- left_top (ScriptRenderTarget): \n- right_bottom (ScriptRenderTarget): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRenderObject",
      "method_name": "set_corners"
    }
  },
  {
    "type": "method",
    "name": "LuaRenderObject.set_dashes",
    "content": "Method: LuaRenderObject.set_dashes\nDescription: Set the length of the dashes and the length of the gaps in this line.\n\nParameters:\n- dash_length (double): \n- gap_length (double): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRenderObject",
      "method_name": "set_dashes"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.alignment",
    "content": "Attribute: alignment \nRead_type: TextAlign\nWrite_type: TextAlign\nDescription: Alignment of this text.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "alignment"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.angle",
    "content": "Attribute: angle \nRead_type: float\nWrite_type: float\nDescription: Angle of this arc. Angle in radian.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "angle"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.animation",
    "content": "Attribute: animation \nRead_type: string\nWrite_type: string\nDescription: Animation prototype name of this animation.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "animation"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.animation_offset",
    "content": "Attribute: animation_offset \nRead_type: double\nWrite_type: double\nDescription: Animation offset of this animation. Animation offset in frames.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "animation_offset"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.animation_speed",
    "content": "Attribute: animation_speed \nRead_type: double\nWrite_type: double\nDescription: Animation speed of this animation. Animation speed in frames per tick.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "animation_speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.color",
    "content": "Attribute: color \nRead_type: Color\nWrite_type: Color\nDescription: Color or tint of the object.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.dash_length",
    "content": "Attribute: dash_length \nRead_type: double\nWrite_type: double\nDescription: Dash length of this line.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "dash_length"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.draw_on_ground",
    "content": "Attribute: draw_on_ground \nRead_type: boolean\nWrite_type: boolean\nDescription: If this object is being drawn on the ground, under most entities and sprites.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "draw_on_ground"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.filled",
    "content": "Attribute: filled \nRead_type: boolean\nWrite_type: boolean\nDescription: If this circle or rectangle is filled.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "filled"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.font",
    "content": "Attribute: font \nRead_type: string\nWrite_type: string\nDescription: Font of this text.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "font"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.forces",
    "content": "Attribute: forces [Optional]\nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'array', 'value': 'LuaForce'}, 'ForceSet'], 'full_format': False}\nWrite_type: {\"complex_type\": \"union\", \"options\": [{\"complex_type\": \"array\", \"value\": \"LuaForce\"}, \"ForceSet\"], \"full_format\": false}\nDescription: Forces for which this object is rendered or `nil` if visible to all forces. Writing nil or empty array will make object to be visible to all forces.",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "forces"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.from",
    "content": "Attribute: from \nRead_type: ScriptRenderTarget\nWrite_type: ScriptRenderTarget\nDescription: Where this line is drawn from.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "from"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.gap_length",
    "content": "Attribute: gap_length \nRead_type: double\nWrite_type: double\nDescription: Length of the gaps in this line.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "gap_length"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.id",
    "content": "Attribute: id \nRead_type: uint64\n\nDescription: Unique identifier of this render object.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "id"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.intensity",
    "content": "Attribute: intensity \nRead_type: float\nWrite_type: float\nDescription: Intensity of this light.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "intensity"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.left_top",
    "content": "Attribute: left_top \nRead_type: ScriptRenderTarget\nWrite_type: ScriptRenderTarget\nDescription: Where top left corner of this rectangle is drawn.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "left_top"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.max_radius",
    "content": "Attribute: max_radius \nRead_type: double\nWrite_type: double\nDescription: Radius of the outer edge of this arc.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "max_radius"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.min_radius",
    "content": "Attribute: min_radius \nRead_type: double\nWrite_type: double\nDescription: Radius of the inner edge of this arc.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "min_radius"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.minimum_darkness",
    "content": "Attribute: minimum_darkness \nRead_type: float\nWrite_type: float\nDescription: Minimum darkness at which this light is rendered.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "minimum_darkness"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.only_in_alt_mode",
    "content": "Attribute: only_in_alt_mode \nRead_type: boolean\nWrite_type: boolean\nDescription: If this object is only rendered in alt-mode.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "only_in_alt_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.orientation",
    "content": "Attribute: orientation \nRead_type: RealOrientation\nWrite_type: RealOrientation\nDescription: Orientation of this object.\n\nPolygon vertices that are set to an entity will ignore this.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "orientation"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.orientation_target",
    "content": "Attribute: orientation_target [Optional]\nRead_type: ScriptRenderTarget\nWrite_type: ScriptRenderTarget\nDescription: Target to which this object rotates so that it faces the target. Note that `orientation` is still applied to the object. Writing `nil` will clear the orientation_target. `nil` if no target.\n\nPolygon vertices that are set to an entity will ignore this.",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "orientation_target"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.oriented",
    "content": "Attribute: oriented \nRead_type: boolean\nWrite_type: boolean\nDescription: If this light is rendered with the same orientation as the target entity. Note that `orientation` is still applied to the sprite.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "oriented"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.oriented_offset",
    "content": "Attribute: oriented_offset \nRead_type: Vector\nWrite_type: Vector\nDescription: Offsets the center of the sprite or animation if `orientation_target` is given. This offset will rotate together with the sprite or animation.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "oriented_offset"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.players",
    "content": "Attribute: players [Optional]\nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'array', 'value': 'LuaPlayer'}, {'complex_type': 'array', 'value': 'PlayerIdentification'}], 'full_format': False}\nWrite_type: {\"complex_type\": \"union\", \"options\": [{\"complex_type\": \"array\", \"value\": \"LuaPlayer\"}, {\"complex_type\": \"array\", \"value\": \"PlayerIdentification\"}], \"full_format\": false}\nDescription: Players for which this object is visible or `nil` if visible to all players.",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "players"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.radius",
    "content": "Attribute: radius \nRead_type: double\nWrite_type: double\nDescription: Radius of this circle.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "radius"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.render_layer",
    "content": "Attribute: render_layer \nRead_type: RenderLayer\nWrite_type: RenderLayer\nDescription: Render layer of this sprite or animation.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "render_layer"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.right_bottom",
    "content": "Attribute: right_bottom \nRead_type: ScriptRenderTarget\nWrite_type: ScriptRenderTarget\nDescription: Where bottom right corner of this rectangle is drawn.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "right_bottom"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.scale",
    "content": "Attribute: scale \nRead_type: double\nWrite_type: double\nDescription: Scale of the text or light.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "scale"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.scale_with_zoom",
    "content": "Attribute: scale_with_zoom \nRead_type: boolean\nWrite_type: boolean\nDescription: If this text scales with player zoom.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "scale_with_zoom"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.sprite",
    "content": "Attribute: sprite \nRead_type: SpritePath\nWrite_type: SpritePath\nDescription: Sprite of the sprite or light.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "sprite"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.start_angle",
    "content": "Attribute: start_angle \nRead_type: float\nWrite_type: float\nDescription: Where this arc starts. Angle in radian.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "start_angle"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.surface",
    "content": "Attribute: surface \nRead_type: LuaSurface\n\nDescription: Surface this object is rendered on.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "surface"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.target",
    "content": "Attribute: target \nRead_type: ScriptRenderTarget\nWrite_type: ScriptRenderTarget\nDescription: Where this object is drawn.\n\nPolygon vertices that are set to an entity will ignore this.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "target"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.text",
    "content": "Attribute: text \nRead_type: LocalisedString\nWrite_type: LocalisedString\nDescription: Text that is displayed by this text object.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "text"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.time_to_live",
    "content": "Attribute: time_to_live \nRead_type: uint\nWrite_type: uint\nDescription: Time to live of this object. This will be 0 if the object does not expire.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "time_to_live"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.to",
    "content": "Attribute: to \nRead_type: ScriptRenderTarget\nWrite_type: ScriptRenderTarget\nDescription: Where this line is drawn to.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "to"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.type",
    "content": "Attribute: type",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.type",
    "content": "Read_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'text'}, {'complex_type': 'literal', 'value': 'line'}, {'complex_type': 'literal', 'value': 'circle'}, {'complex_type': 'literal', 'value': 'rectangle'}, {'complex_type': 'literal', 'value': 'arc'}, {'complex_type': 'literal', 'value': 'polygon'}, {'complex_type': 'literal', 'value': 'sprite'}, {'complex_type': 'literal', 'value': 'light'}, {'complex_type': 'literal', 'value': 'animation'}], 'full_format': False}",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.type",
    "content": "Description: Type of this object.",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.use_rich_text",
    "content": "Attribute: use_rich_text \nRead_type: boolean\nWrite_type: boolean\nDescription: If this text parses rich text tags.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "use_rich_text"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.use_target_orientation",
    "content": "Attribute: use_target_orientation \nRead_type: boolean\nWrite_type: boolean\nDescription: If this object uses the target orientation.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "use_target_orientation"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "valid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.vertical_alignment",
    "content": "Attribute: vertical_alignment \nRead_type: VerticalTextAlign\nWrite_type: VerticalTextAlign\nDescription: Vertical alignment of this text.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "vertical_alignment"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.vertices",
    "content": "Attribute: vertices \nRead_type: {'complex_type': 'array', 'value': 'ScriptRenderTarget'}\nWrite_type: {\"complex_type\": \"array\", \"value\": \"ScriptRenderTarget\"}\nDescription: Vertices of this polygon.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "vertices"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.visible",
    "content": "Attribute: visible \nRead_type: boolean\nWrite_type: boolean\nDescription: If this object is rendered to anyone at all.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "visible"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.width",
    "content": "Attribute: width \nRead_type: float\nWrite_type: float\nDescription: Width of the object. Value is in pixels (32 per tile).\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "width"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.x_scale",
    "content": "Attribute: x_scale \nRead_type: double\nWrite_type: double\nDescription: Horizontal scale of this sprite or animation.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "x_scale"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRenderObject.y_scale",
    "content": "Attribute: y_scale \nRead_type: double\nWrite_type: double\nDescription: Vertical scale of this sprite or animation.\n",
    "metadata": {
      "class_name": "LuaRenderObject",
      "attribute_name": "y_scale"
    }
  },
  {
    "type": "class",
    "name": "LuaRendering",
    "content": "Class: LuaRendering\nDescription: Allows rendering of geometric shapes, text and sprites in the game world through the global object named `rendering`. Each render object is identified by an id that is universally unique for the lifetime of a whole game.\n\nIf an entity target of an object is destroyed or changes surface, then the object is also destroyed.",
    "metadata": {
      "class_name": "LuaRendering",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.clear",
    "content": "Method: LuaRendering.clear\nDescription: Destroys all render objects.\n\nParameters:\n- mod_name (string)[Optional]: If provided, only the render objects created by this mod are destroyed. An empty string (`\"\"`) refers to all objects not belonging to a mod, such as those created using console commands.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "clear"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_animation",
    "content": "Method: LuaRendering.draw_animation\nDescription: Create an animation.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_animation"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_animation",
    "content": "Parameters:\n- animation (string): Name of an [AnimationPrototype](prototype:AnimationPrototype).\n- animation_offset (double)[Optional]: Offset of the animation in frames. Default is 0.\n- animation_speed (double)[Optional]: How many frames the animation goes forward per tick. Default is 1.\n- forces (ForceSet)[Optional]: The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_animation"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_animation",
    "content": "- only_in_alt_mode (boolean)[Optional]: If this should only be rendered in alt mode. Defaults to false.\n- orientation (RealOrientation)[Optional]: The orientation of the animation. Default is 0.\n- orientation_target (ScriptRenderTarget)[Optional]: If given, the animation rotates so that it faces this target. Note that `orientation` is still applied to the animation.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_animation"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_animation",
    "content": "- oriented_offset (Vector)[Optional]: Offsets the center of the animation if `orientation_target` is given. This offset will rotate together with the animation.\n- players ({'complex_type': 'array', 'value': 'PlayerIdentification'})[Optional]: The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.\n- render_layer (RenderLayer)[Optional]: Render layer of the animation. Defaults to `\"arrow\"`.\n- surface (SurfaceIdentification):",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_animation"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_animation",
    "content": "- surface (SurfaceIdentification): \n- target (ScriptRenderTarget): Center of the animation.\n- time_to_live (uint)[Optional]: In ticks. Defaults to living forever.\n- tint (Color)[Optional]: \n- use_target_orientation (boolean)[Optional]: Only used if `orientation_target` is a LuaEntity.\n- visible (boolean)[Optional]: If this is rendered to anyone at all. Defaults to true.\n- x_scale (double)[Optional]: Horizontal scale of the animation. Default is 1.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_animation"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_animation",
    "content": "- y_scale (double)[Optional]: Vertical scale of the animation. Default is 1.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_animation"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_animation",
    "content": "Returns:\n- LuaRenderObject: \n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_animation"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_arc",
    "content": "Method: LuaRendering.draw_arc\nDescription: Create an arc.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_arc"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_arc",
    "content": "Parameters:\n- angle (float): The angle of the arc, in radian.\n- color (Color): \n- draw_on_ground (boolean)[Optional]: If this should be drawn below sprites and entities. Defaults to false.\n- forces (ForceSet)[Optional]: The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.\n- max_radius (double): The radius of the outer edge of the arc, in tiles.\n- min_radius (double): The radius of the inner edge of the arc, in tiles.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_arc"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_arc",
    "content": "- only_in_alt_mode (boolean)[Optional]: If this should only be rendered in alt mode. Defaults to false.\n- players ({'complex_type': 'array', 'value': 'PlayerIdentification'})[Optional]: The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.\n- start_angle (float): Where the arc starts, in radian.\n- surface (SurfaceIdentification): \n- target (ScriptRenderTarget): \n- time_to_live (uint)[Optional]: In ticks. Defaults to living forever.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_arc"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_arc",
    "content": "- visible (boolean)[Optional]: If this is rendered to anyone at all. Defaults to true.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_arc"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_arc",
    "content": "Returns:\n- LuaRenderObject: \n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_arc"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_circle",
    "content": "Method: LuaRendering.draw_circle\nDescription: Create a circle.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_circle"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_circle",
    "content": "Parameters:\n- color (Color): \n- draw_on_ground (boolean)[Optional]: If this should be drawn below sprites and entities. Defaults to false.\n- filled (boolean)[Optional]: If the circle should be filled. Defaults to false.\n- forces (ForceSet)[Optional]: The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.\n- only_in_alt_mode (boolean)[Optional]: If this should only be rendered in alt mode. Defaults to false.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_circle"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_circle",
    "content": "- players ({'complex_type': 'array', 'value': 'PlayerIdentification'})[Optional]: The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.\n- radius (double): In tiles.\n- surface (SurfaceIdentification): \n- target (ScriptRenderTarget): \n- time_to_live (uint)[Optional]: In ticks. Defaults to living forever.\n- visible (boolean)[Optional]: If this is rendered to anyone at all. Defaults to true.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_circle"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_circle",
    "content": "- width (float)[Optional]: Width of the outline, used only if filled = false. Value is in pixels (32 per tile). Defaults to 1.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_circle"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_circle",
    "content": "Returns:\n- LuaRenderObject: \n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_circle"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_light",
    "content": "Method: LuaRendering.draw_light\nDescription: Create a light.\n\nThe base game uses the utility sprites `light_medium` and `light_small` for lights.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_light"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_light",
    "content": "Parameters:\n- color (Color)[Optional]: Defaults to white (no tint).\n- forces (ForceSet)[Optional]: The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.\n- intensity (float)[Optional]: Default is 1.\n- minimum_darkness (float)[Optional]: The minimum darkness at which this light is rendered. Default is 0.\n- only_in_alt_mode (boolean)[Optional]: If this should only be rendered in alt mode. Defaults to false.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_light"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_light",
    "content": "- orientation (RealOrientation)[Optional]: The orientation of the light. Default is 0.\n- oriented (boolean)[Optional]: If this light has the same orientation as the entity target, default is false. Note that `orientation` is still applied to the sprite.\n- players ({'complex_type': 'array', 'value': 'PlayerIdentification'})[Optional]: The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.\n- scale (float)[Optional]: Default is 1.\n- sprite (SpritePath):",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_light"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_light",
    "content": "- sprite (SpritePath): \n- surface (SurfaceIdentification): \n- target (ScriptRenderTarget): Center of the light.\n- time_to_live (uint)[Optional]: In ticks. Defaults to living forever.\n- visible (boolean)[Optional]: If this is rendered to anyone at all. Defaults to true.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_light"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_light",
    "content": "Returns:\n- LuaRenderObject: \n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_light"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_line",
    "content": "Method: LuaRendering.draw_line\nDescription: Create a line.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_line"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_line",
    "content": "Parameters:\n- color (Color): \n- dash_length (double)[Optional]: Length of the dashes that this line has. Used only if gap_length > 0. Default is 0.\n- dash_offset (double)[Optional]: Starting offset to apply to dashes. Cannot be greater than dash_length + gap_length. Default is 0.\n- draw_on_ground (boolean)[Optional]: If this should be drawn below sprites and entities. Defaults to false.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_line"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_line",
    "content": "- forces (ForceSet)[Optional]: The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.\n- from (ScriptRenderTarget): \n- gap_length (double)[Optional]: Length of the gaps that this line has, in tiles. Default is 0.\n- only_in_alt_mode (boolean)[Optional]: If this should only be rendered in alt mode. Defaults to false.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_line"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_line",
    "content": "- players ({'complex_type': 'array', 'value': 'PlayerIdentification'})[Optional]: The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.\n- surface (SurfaceIdentification): \n- time_to_live (uint)[Optional]: In ticks. Defaults to living forever.\n- to (ScriptRenderTarget): \n- visible (boolean)[Optional]: If this is rendered to anyone at all. Defaults to true.\n- width (float): In pixels (32 per tile).",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_line"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_line",
    "content": "Returns:\n- LuaRenderObject: \n\nExamples:\n```\n-- Draw a white and 2 pixel wide line from {0, 0} to {2, 2}.\nrendering.draw_line{surface = game.player.surface, from = {0, 0}, to = {2, 2}, color = {1, 1, 1}, width = 2}\n```\n```\n-- Draw a red and 3 pixel wide line from {0, 0} to {0, 5}. The line has 1 tile long dashes and gaps.\nrendering.draw_line{surface = game.player.surface, from = {0, 0}, to = {0, 5}, color = {r = 1}, width = 3, gap_length = 1, dash_length = 1}\n```",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_line"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_line",
    "content": "Format:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_line"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_polygon",
    "content": "Method: LuaRendering.draw_polygon\nDescription: Create a triangle mesh defined by a triangle strip.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_polygon"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_polygon",
    "content": "Parameters:\n- color (Color): \n- draw_on_ground (boolean)[Optional]: If this should be drawn below sprites and entities. Defaults to false.\n- forces (ForceSet)[Optional]: The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.\n- only_in_alt_mode (boolean)[Optional]: If this should only be rendered in alt mode. Defaults to false.\n- orientation (RealOrientation)[Optional]: The orientation applied to all vertices. Default is 0.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_polygon"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_polygon",
    "content": "- orientation_target (ScriptRenderTarget)[Optional]: If given, the vertices (that are not set to an entity) rotate so that it faces this target. Note that `orientation` is still applied.\n- players ({'complex_type': 'array', 'value': 'PlayerIdentification'})[Optional]: The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.\n- surface (SurfaceIdentification):",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_polygon"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_polygon",
    "content": "- surface (SurfaceIdentification): \n- target (ScriptRenderTarget)[Optional]: Acts like an offset applied to all vertices that are not set to an entity.\n- time_to_live (uint)[Optional]: In ticks. Defaults to living forever.\n- use_target_orientation (boolean)[Optional]: Only used if `orientation_target` is a LuaEntity.\n- vertices ({'complex_type': 'array', 'value': 'ScriptRenderTarget'}): \n- visible (boolean)[Optional]: If this is rendered to anyone at all. Defaults to true.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_polygon"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_polygon",
    "content": "Returns:\n- LuaRenderObject: \n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_polygon"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_rectangle",
    "content": "Method: LuaRendering.draw_rectangle\nDescription: Create a rectangle.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_rectangle"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_rectangle",
    "content": "Parameters:\n- color (Color): \n- draw_on_ground (boolean)[Optional]: If this should be drawn below sprites and entities. Defaults to false.\n- filled (boolean)[Optional]: If the rectangle should be filled. Defaults to false.\n- forces (ForceSet)[Optional]: The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.\n- left_top (ScriptRenderTarget): \n- only_in_alt_mode (boolean)[Optional]: If this should only be rendered in alt mode. Defaults to false.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_rectangle"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_rectangle",
    "content": "- players ({'complex_type': 'array', 'value': 'PlayerIdentification'})[Optional]: The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.\n- right_bottom (ScriptRenderTarget): \n- surface (SurfaceIdentification): \n- time_to_live (uint)[Optional]: In ticks. Defaults to living forever.\n- visible (boolean)[Optional]: If this is rendered to anyone at all. Defaults to true.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_rectangle"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_rectangle",
    "content": "- width (float)[Optional]: Width of the outline, used only if filled = false. Value is in pixels (32 per tile). Defaults to 1.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_rectangle"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_rectangle",
    "content": "Returns:\n- LuaRenderObject: \n\nExamples:\n```\n-- Draw a white and 1 pixel wide square outline with the corners {0, 0} and {2, 2}.\nrendering.draw_rectangle{surface = game.player.surface, left_top = {0, 0}, right_bottom = {2, 2}, color = {1, 1, 1}}\n```\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_rectangle"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_sprite",
    "content": "Method: LuaRendering.draw_sprite\nDescription: Create a sprite.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_sprite"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_sprite",
    "content": "Parameters:\n- forces (ForceSet)[Optional]: The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.\n- only_in_alt_mode (boolean)[Optional]: If this should only be rendered in alt mode. Defaults to false.\n- orientation (RealOrientation)[Optional]: The orientation of the sprite. Default is 0.\n- orientation_target (ScriptRenderTarget)[Optional]: If given, the sprite rotates so that it faces this target. Note that `orientation` is still applied to the sprite.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_sprite"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_sprite",
    "content": "- oriented_offset (Vector)[Optional]: Offsets the center of the sprite if `orientation_target` is given. This offset will rotate together with the sprite.\n- players ({'complex_type': 'array', 'value': 'PlayerIdentification'})[Optional]: The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.\n- render_layer (RenderLayer)[Optional]: Render layer of the sprite. Defaults to `\"arrow\"`.\n- sprite (SpritePath): \n- surface (SurfaceIdentification):",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_sprite"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_sprite",
    "content": "- sprite (SpritePath): \n- surface (SurfaceIdentification): \n- target (ScriptRenderTarget): Center of the sprite.\n- time_to_live (uint)[Optional]: In ticks. Defaults to living forever.\n- tint (Color)[Optional]: \n- use_target_orientation (boolean)[Optional]: Only used if `orientation_target` is a LuaEntity.\n- visible (boolean)[Optional]: If this is rendered to anyone at all. Defaults to true.\n- x_scale (double)[Optional]: Horizontal scale of the sprite. Default is 1.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_sprite"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_sprite",
    "content": "- y_scale (double)[Optional]: Vertical scale of the sprite. Default is 1.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_sprite"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_sprite",
    "content": "Returns:\n- LuaRenderObject:",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_sprite"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_sprite",
    "content": "Examples:\n```\n-- This will draw an iron plate icon at the character's feet. The sprite will move together with the character.\nrendering.draw_sprite{sprite = \"item.iron-plate\", target = game.player.character, surface = game.player.surface}\n```\n```\n-- This will draw an iron plate icon at the character's head. The sprite will move together with the character.\nrendering.draw_sprite{sprite = \"item.iron-plate\", target = {entity = game.player.character, offset = {0, -2}}, surface = game.player.surface}\n```",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_sprite"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_sprite",
    "content": "Format:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_sprite"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_text",
    "content": "Method: LuaRendering.draw_text\nDescription: Create a text.\n\nNot all fonts support scaling.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_text"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_text",
    "content": "Parameters:\n- alignment (TextAlign)[Optional]: Defaults to \"left\".\n- color (Color): \n- draw_on_ground (boolean)[Optional]: If this should be drawn below sprites and entities. Rich text does not support this option. Defaults to false.\n- font (string)[Optional]: Name of font to use. Defaults to the same font as flying-text.\n- forces (ForceSet)[Optional]: The forces that this object is rendered to. Passing `nil` or an empty table will render it to all forces.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_text"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_text",
    "content": "- only_in_alt_mode (boolean)[Optional]: If this should only be rendered in alt mode. Defaults to false.\n- orientation (RealOrientation)[Optional]: The orientation of the text. Default is 0.\n- players ({'complex_type': 'array', 'value': 'PlayerIdentification'})[Optional]: The players that this object is rendered to. Passing `nil` or an empty table will render it to all players.\n- scale (double)[Optional]:",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_text"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_text",
    "content": "- scale (double)[Optional]: \n- scale_with_zoom (boolean)[Optional]: Defaults to false. If true, the text scales with player zoom, resulting in it always being the same size on screen, and the size compared to the game world changes.\n- surface (SurfaceIdentification): \n- target (ScriptRenderTarget): \n- text (LocalisedString): The text to display.\n- time_to_live (uint)[Optional]: In ticks. Defaults to living forever.\n- use_rich_text (boolean)[Optional]: If rich text rendering is enabled. Defaults to false.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_text"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_text",
    "content": "- vertical_alignment (VerticalTextAlign)[Optional]: Defaults to \"top\".\n- visible (boolean)[Optional]: If this is rendered to anyone at all. Defaults to true.",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_text"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.draw_text",
    "content": "Returns:\n- LuaRenderObject: \n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "draw_text"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.get_all_objects",
    "content": "Method: LuaRendering.get_all_objects\nDescription: Gets an array of all valid objects.\n\nParameters:\n- mod_name (string)[Optional]: If provided, get only the render objects created by this mod. An empty string (`\"\"`) refers to all objects not belonging to a mod, such as those created using console commands.\n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaRenderObject'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "get_all_objects"
    }
  },
  {
    "type": "method",
    "name": "LuaRendering.get_object_by_id",
    "content": "Method: LuaRendering.get_object_by_id\nDescription: Gives LuaRenderObject for given object ID. May return nil if object does not exist or is invalid.\n\nParameters:\n- object_id (uint64): \n\nReturns:\n- LuaRenderObject: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaRendering",
      "method_name": "get_object_by_id"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRendering.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaRendering",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "class",
    "name": "LuaResourceCategoryPrototype",
    "content": "Class: LuaResourceCategoryPrototype\nDescription: Prototype of a resource category.",
    "metadata": {
      "class_name": "LuaResourceCategoryPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaResourceCategoryPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaResourceCategoryPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaResourceCategoryPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaResourceCategoryPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaRoboportControlBehavior",
    "content": "Class: LuaRoboportControlBehavior\nDescription: Control behavior for roboports.",
    "metadata": {
      "class_name": "LuaRoboportControlBehavior",
      "parent_class": "LuaControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRoboportControlBehavior.available_construction_output_signal",
    "content": "Attribute: available_construction_output_signal [Optional]\nRead_type: SignalID\nWrite_type: SignalID\nDescription: \n",
    "metadata": {
      "class_name": "LuaRoboportControlBehavior",
      "attribute_name": "available_construction_output_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRoboportControlBehavior.available_logistic_output_signal",
    "content": "Attribute: available_logistic_output_signal [Optional]\nRead_type: SignalID\nWrite_type: SignalID\nDescription: \n",
    "metadata": {
      "class_name": "LuaRoboportControlBehavior",
      "attribute_name": "available_logistic_output_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRoboportControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaRoboportControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRoboportControlBehavior.read_items_mode",
    "content": "Attribute: read_items_mode \nRead_type: defines.control_behavior.roboport.read_items_mode\nWrite_type: defines.control_behavior.roboport.read_items_mode\nDescription: Selects contents that are to be read from the roboport\n",
    "metadata": {
      "class_name": "LuaRoboportControlBehavior",
      "attribute_name": "read_items_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRoboportControlBehavior.read_logistics",
    "content": "Attribute: read_logistics \nRead_type: boolean\nWrite_type: boolean\nDescription: Legacy field, please use LuaRoboportControlBehavior::read_items_mode instead. `true` if the roboport should report the logistics network content to the circuit network.\n",
    "metadata": {
      "class_name": "LuaRoboportControlBehavior",
      "attribute_name": "read_logistics"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRoboportControlBehavior.read_robot_stats",
    "content": "Attribute: read_robot_stats \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if the roboport should report the robot statistics to the circuit network.\n",
    "metadata": {
      "class_name": "LuaRoboportControlBehavior",
      "attribute_name": "read_robot_stats"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRoboportControlBehavior.roboport_count_output_signal",
    "content": "Attribute: roboport_count_output_signal [Optional]\nRead_type: SignalID\nWrite_type: SignalID\nDescription: \n",
    "metadata": {
      "class_name": "LuaRoboportControlBehavior",
      "attribute_name": "roboport_count_output_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRoboportControlBehavior.total_construction_output_signal",
    "content": "Attribute: total_construction_output_signal [Optional]\nRead_type: SignalID\nWrite_type: SignalID\nDescription: \n",
    "metadata": {
      "class_name": "LuaRoboportControlBehavior",
      "attribute_name": "total_construction_output_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRoboportControlBehavior.total_logistic_output_signal",
    "content": "Attribute: total_logistic_output_signal [Optional]\nRead_type: SignalID\nWrite_type: SignalID\nDescription: \n",
    "metadata": {
      "class_name": "LuaRoboportControlBehavior",
      "attribute_name": "total_logistic_output_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRoboportControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaRoboportControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaRocketSiloControlBehavior",
    "content": "Class: LuaRocketSiloControlBehavior\nDescription: Control behavior for rocket silos.",
    "metadata": {
      "class_name": "LuaRocketSiloControlBehavior",
      "parent_class": "LuaControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRocketSiloControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaRocketSiloControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRocketSiloControlBehavior.read_mode",
    "content": "Attribute: read_mode \nRead_type: defines.control_behavior.rocket_silo.read_mode\nWrite_type: defines.control_behavior.rocket_silo.read_mode\nDescription: The items read mode for the rocket silo.\n",
    "metadata": {
      "class_name": "LuaRocketSiloControlBehavior",
      "attribute_name": "read_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaRocketSiloControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaRocketSiloControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaSelectorCombinatorControlBehavior",
    "content": "Class: LuaSelectorCombinatorControlBehavior\nDescription: Control behavior for selector combinators.",
    "metadata": {
      "class_name": "LuaSelectorCombinatorControlBehavior",
      "parent_class": "LuaCombinatorControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSelectorCombinatorControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaSelectorCombinatorControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSelectorCombinatorControlBehavior.parameters",
    "content": "Attribute: parameters \nRead_type: SelectorCombinatorParameters\nWrite_type: SelectorCombinatorParameters\nDescription: The selector combinator parameters. `parameters` may be `nil` in order to clear the parameters.\n",
    "metadata": {
      "class_name": "LuaSelectorCombinatorControlBehavior",
      "attribute_name": "parameters"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSelectorCombinatorControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaSelectorCombinatorControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaSettings",
    "content": "Class: LuaSettings\nDescription: Object containing mod settings of three distinct types: `startup`, `global`, and `player`. An instance of LuaSettings is available through the global object named `settings`.",
    "metadata": {
      "class_name": "LuaSettings",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaSettings.get_player_settings",
    "content": "Method: LuaSettings.get_player_settings\nDescription: Gets the current per-player settings for the given player, indexed by prototype name. Returns the same structure as [LuaPlayer::mod_settings](runtime:LuaPlayer::mod_settings). This table becomes invalid if its associated player does.",
    "metadata": {
      "class_name": "LuaSettings",
      "method_name": "get_player_settings"
    }
  },
  {
    "type": "method",
    "name": "LuaSettings.get_player_settings",
    "content": "Even though this attribute is a getter, individual settings can be changed by overwriting their [ModSetting](runtime:ModSetting) table. Mods can only change their own settings. Using the in-game console, all player settings can be changed.\n\nParameters:\n- player (PlayerIdentification): \n\nReturns:\n- {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'ModSetting'}:",
    "metadata": {
      "class_name": "LuaSettings",
      "method_name": "get_player_settings"
    }
  },
  {
    "type": "method",
    "name": "LuaSettings.get_player_settings",
    "content": "Examples:\n```\n-- Change the value of the \"active_lifestyle\" setting\nsettings.get_player_settings(player_index)[\"active_lifestyle\"] = {value = true}\n```\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSettings",
      "method_name": "get_player_settings"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSettings.global",
    "content": "Attribute: global \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'ModSetting'}\n\nDescription: The current global mod settings, indexed by prototype name.\n\nEven though this attribute is marked as read-only, individual settings can be changed by overwriting their [ModSetting](runtime:ModSetting) table. Mods can only change their own settings. Using the in-game console, all player settings can be changed.",
    "metadata": {
      "class_name": "LuaSettings",
      "attribute_name": "global"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSettings.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaSettings",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSettings.player_default",
    "content": "Attribute: player_default \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'ModSetting'}\n\nDescription: The **default** player mod settings for this map, indexed by prototype name. Changing these settings only affects the default settings for future players joining the game.\n\nIndividual settings can be changed by overwriting their [ModSetting](runtime:ModSetting) table. Mods can only change their own settings. Using the in-game console, all player settings can be changed.",
    "metadata": {
      "class_name": "LuaSettings",
      "attribute_name": "player_default"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSettings.startup",
    "content": "Attribute: startup \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'string', 'value': 'ModSetting'}\n\nDescription: The startup mod settings, indexed by prototype name.\n",
    "metadata": {
      "class_name": "LuaSettings",
      "attribute_name": "startup"
    }
  },
  {
    "type": "class",
    "name": "LuaShortcutPrototype",
    "content": "Class: LuaShortcutPrototype\nDescription: Prototype of a shortcut.",
    "metadata": {
      "class_name": "LuaShortcutPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaShortcutPrototype.action",
    "content": "Attribute: action \nRead_type: string\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaShortcutPrototype",
      "attribute_name": "action"
    }
  },
  {
    "type": "attribute",
    "name": "LuaShortcutPrototype.associated_control_input",
    "content": "Attribute: associated_control_input [Optional]\nRead_type: string\n\nDescription: The control input that is associated with this shortcut, if any.\n",
    "metadata": {
      "class_name": "LuaShortcutPrototype",
      "attribute_name": "associated_control_input"
    }
  },
  {
    "type": "attribute",
    "name": "LuaShortcutPrototype.item_to_spawn",
    "content": "Attribute: item_to_spawn [Optional]\nRead_type: LuaItemPrototype\n\nDescription: The item to create when this shortcut is used, if any.\n",
    "metadata": {
      "class_name": "LuaShortcutPrototype",
      "attribute_name": "item_to_spawn"
    }
  },
  {
    "type": "attribute",
    "name": "LuaShortcutPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaShortcutPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaShortcutPrototype.technology_to_unlock",
    "content": "Attribute: technology_to_unlock [Optional]\nRead_type: LuaTechnologyPrototype\n\nDescription: The technology that needs to be researched once (in any save) for this shortcut to be unlocked (in all saves).\n",
    "metadata": {
      "class_name": "LuaShortcutPrototype",
      "attribute_name": "technology_to_unlock"
    }
  },
  {
    "type": "attribute",
    "name": "LuaShortcutPrototype.toggleable",
    "content": "Attribute: toggleable \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaShortcutPrototype",
      "attribute_name": "toggleable"
    }
  },
  {
    "type": "attribute",
    "name": "LuaShortcutPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaShortcutPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaSimulation",
    "content": "Class: LuaSimulation\nDescription: Functions for use during simulations. This object cannot be saved, and cannot be used outside of a simulation.\n\nThe simulation object instance can be obtained from [LuaGameScript::simulation](runtime:LuaGameScript::simulation).",
    "metadata": {
      "class_name": "LuaSimulation",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaSimulation.activate_rail_planner",
    "content": "Method: LuaSimulation.activate_rail_planner\nDescription: Activate the rail planner at the given position.\n\nParameters:\n- build_mode (defines.build_mode)[Optional]: Defaults to [normal](runtime:defines.build_mode.normal).\n- ghost_mode (boolean)[Optional]: Defaults to `false`.\n- position (MapPosition)[Optional]: \n\nFormat:\n- {'takes_table': True, 'table_optional': True}",
    "metadata": {
      "class_name": "LuaSimulation",
      "method_name": "activate_rail_planner"
    }
  },
  {
    "type": "method",
    "name": "LuaSimulation.control_down",
    "content": "Method: LuaSimulation.control_down\nDescription: Send a control press event at the current cursor position.\n\nParameters:\n- control (string): The name of the control input to press.\n- notify (boolean): Whether to show flying text of the activated control.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSimulation",
      "method_name": "control_down"
    }
  },
  {
    "type": "method",
    "name": "LuaSimulation.control_press",
    "content": "Method: LuaSimulation.control_press\nDescription: Send a control down and up event at the current cursor position. This is equivalent to calling [LuaSimulation::control_down](runtime:LuaSimulation::control_down), then [LuaSimulation::control_up](runtime:LuaSimulation::control_up).\n\nParameters:\n- control (string): The name of the control input to press and release.\n- notify (boolean): Whether to show flying text of the activated control.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSimulation",
      "method_name": "control_press"
    }
  },
  {
    "type": "method",
    "name": "LuaSimulation.control_up",
    "content": "Method: LuaSimulation.control_up\nDescription: Send a control release event at the current cursor position.\n\nParameters:\n- control (string): The name of the control input to release.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSimulation",
      "method_name": "control_up"
    }
  },
  {
    "type": "method",
    "name": "LuaSimulation.create_test_player",
    "content": "Method: LuaSimulation.create_test_player\nDescription: \n\nParameters:\n- name (string): The name of the new player.\n\nReturns:\n- LuaPlayer: The created player.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSimulation",
      "method_name": "create_test_player"
    }
  },
  {
    "type": "method",
    "name": "LuaSimulation.deactivate_rail_planner",
    "content": "Method: LuaSimulation.deactivate_rail_planner\nDescription: Deactivate the rail planner.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSimulation",
      "method_name": "deactivate_rail_planner"
    }
  },
  {
    "type": "method",
    "name": "LuaSimulation.get_slot_position",
    "content": "Method: LuaSimulation.get_slot_position\nDescription: \n\nParameters:\n- inventory ({'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'character'}, {'complex_type': 'literal', 'value': 'entity'}], 'full_format': False})[Optional]: Defaults to `\"character\"`.\n- inventory_index (InventoryIndex): \n- slot_index (ItemStackIndex): \n\nReturns:\n- MapPosition: Position of the GUI slot on the screen, if successfully found.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSimulation",
      "method_name": "get_slot_position"
    }
  },
  {
    "type": "method",
    "name": "LuaSimulation.get_widget_position",
    "content": "Method: LuaSimulation.get_widget_position\nDescription: \n\nParameters:\n- data (string)[Optional]: \n- data2 (string)[Optional]: \n- type (SimulationWidgetType): \n\nReturns:\n- MapPosition: Center of the GUI widget on the screen, if successfully found.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSimulation",
      "method_name": "get_widget_position"
    }
  },
  {
    "type": "method",
    "name": "LuaSimulation.mouse_click",
    "content": "Method: LuaSimulation.mouse_click\nDescription: Send a left mouse button click event at its current position. This is equivalent to calling [LuaSimulation::mouse_down](runtime:LuaSimulation::mouse_down), then [LuaSimulation::mouse_up](runtime:LuaSimulation::mouse_up).\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSimulation",
      "method_name": "mouse_click"
    }
  },
  {
    "type": "method",
    "name": "LuaSimulation.mouse_down",
    "content": "Method: LuaSimulation.mouse_down\nDescription: Send a left mouse button-down event at its current position.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSimulation",
      "method_name": "mouse_down"
    }
  },
  {
    "type": "method",
    "name": "LuaSimulation.mouse_up",
    "content": "Method: LuaSimulation.mouse_up\nDescription: Send a left mouse button-up event at its current position.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSimulation",
      "method_name": "mouse_up"
    }
  },
  {
    "type": "method",
    "name": "LuaSimulation.move_cursor",
    "content": "Method: LuaSimulation.move_cursor\nDescription: Move the cursor towards the given position at the given speed.\n\nParameters:\n- position (MapPosition): \n- speed (double)[Optional]: Defaults to `0.2`.\n\nReturns:\n- boolean: Whether the cursor will reach the target position with this move.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSimulation",
      "method_name": "move_cursor"
    }
  },
  {
    "type": "method",
    "name": "LuaSimulation.scroll_clipboard_backwards",
    "content": "Method: LuaSimulation.scroll_clipboard_backwards\nDescription: Scroll the clipboard backwards by one entry.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSimulation",
      "method_name": "scroll_clipboard_backwards"
    }
  },
  {
    "type": "method",
    "name": "LuaSimulation.scroll_clipboard_forwards",
    "content": "Method: LuaSimulation.scroll_clipboard_forwards\nDescription: Scroll the clipboard forwards by one entry.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSimulation",
      "method_name": "scroll_clipboard_forwards"
    }
  },
  {
    "type": "method",
    "name": "LuaSimulation.write",
    "content": "Method: LuaSimulation.write\nDescription: Write text as if it was typed by a player. Overwrites existing text by selecting it first.\n\nParameters:\n- text (string)[Optional]: The text to write. Does nothing if no text is provided.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSimulation",
      "method_name": "write"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSimulation.active_quickbars",
    "content": "Attribute: active_quickbars \nRead_type: None\nWrite_type: uint8\nDescription: \n",
    "metadata": {
      "class_name": "LuaSimulation",
      "attribute_name": "active_quickbars"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSimulation.camera_alt_info",
    "content": "Attribute: camera_alt_info \nRead_type: None\nWrite_type: boolean\nDescription: \n",
    "metadata": {
      "class_name": "LuaSimulation",
      "attribute_name": "camera_alt_info"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSimulation.camera_player",
    "content": "Attribute: camera_player \nRead_type: None\nWrite_type: PlayerIdentification\nDescription: \n",
    "metadata": {
      "class_name": "LuaSimulation",
      "attribute_name": "camera_player"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSimulation.camera_player_cursor_direction",
    "content": "Attribute: camera_player_cursor_direction \nRead_type: None\nWrite_type: defines.direction\nDescription: \n",
    "metadata": {
      "class_name": "LuaSimulation",
      "attribute_name": "camera_player_cursor_direction"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSimulation.camera_player_cursor_position",
    "content": "Attribute: camera_player_cursor_position [Optional]\nRead_type: MapPosition\nWrite_type: MapPosition\nDescription: \n",
    "metadata": {
      "class_name": "LuaSimulation",
      "attribute_name": "camera_player_cursor_position"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSimulation.camera_position",
    "content": "Attribute: camera_position [Optional]\nRead_type: MapPosition\nWrite_type: MapPosition\nDescription: \n",
    "metadata": {
      "class_name": "LuaSimulation",
      "attribute_name": "camera_position"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSimulation.camera_surface_index",
    "content": "Attribute: camera_surface_index [Optional]\nRead_type: uint\nWrite_type: uint\nDescription: \n",
    "metadata": {
      "class_name": "LuaSimulation",
      "attribute_name": "camera_surface_index"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSimulation.camera_zoom",
    "content": "Attribute: camera_zoom \nRead_type: None\nWrite_type: double\nDescription: \n",
    "metadata": {
      "class_name": "LuaSimulation",
      "attribute_name": "camera_zoom"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSimulation.gui_tooltip_interval",
    "content": "Attribute: gui_tooltip_interval \nRead_type: None\nWrite_type: double\nDescription: \n",
    "metadata": {
      "class_name": "LuaSimulation",
      "attribute_name": "gui_tooltip_interval"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSimulation.hide_cursor",
    "content": "Attribute: hide_cursor \nRead_type: None\nWrite_type: boolean\nDescription: \n",
    "metadata": {
      "class_name": "LuaSimulation",
      "attribute_name": "hide_cursor"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSimulation.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaSimulation",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSimulation.smart_belt_building",
    "content": "Attribute: smart_belt_building [Optional]\nRead_type: None\nWrite_type: boolean\nDescription: \n",
    "metadata": {
      "class_name": "LuaSimulation",
      "attribute_name": "smart_belt_building"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSimulation.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaSimulation",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaSpaceConnectionPrototype",
    "content": "Class: LuaSpaceConnectionPrototype\nDescription: Prototype of a space connection.",
    "metadata": {
      "class_name": "LuaSpaceConnectionPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpaceConnectionPrototype.asteroid_spawn_definitions",
    "content": "Attribute: asteroid_spawn_definitions [Optional]\nRead_type: {'complex_type': 'array', 'value': 'SpaceConnectionAsteroidSpawnDefinition'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaSpaceConnectionPrototype",
      "attribute_name": "asteroid_spawn_definitions"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpaceConnectionPrototype.from",
    "content": "Attribute: from \nRead_type: LuaSpaceLocationPrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaSpaceConnectionPrototype",
      "attribute_name": "from"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpaceConnectionPrototype.length",
    "content": "Attribute: length \nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaSpaceConnectionPrototype",
      "attribute_name": "length"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpaceConnectionPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaSpaceConnectionPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpaceConnectionPrototype.to",
    "content": "Attribute: to \nRead_type: LuaSpaceLocationPrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaSpaceConnectionPrototype",
      "attribute_name": "to"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpaceConnectionPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaSpaceConnectionPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaSpaceLocationPrototype",
    "content": "Class: LuaSpaceLocationPrototype\nDescription: Prototype of a space location, such as a planet.",
    "metadata": {
      "class_name": "LuaSpaceLocationPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpaceLocationPrototype.asteroid_spawn_definitions",
    "content": "Attribute: asteroid_spawn_definitions [Optional]\nRead_type: {'complex_type': 'array', 'value': 'SpaceLocationAsteroidSpawnDefinition'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaSpaceLocationPrototype",
      "attribute_name": "asteroid_spawn_definitions"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpaceLocationPrototype.asteroid_spawn_influence",
    "content": "Attribute: asteroid_spawn_influence \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaSpaceLocationPrototype",
      "attribute_name": "asteroid_spawn_influence"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpaceLocationPrototype.entities_require_heating",
    "content": "Attribute: entities_require_heating [Optional]\nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaSpaceLocationPrototype",
      "attribute_name": "entities_require_heating"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpaceLocationPrototype.map_gen_settings",
    "content": "Attribute: map_gen_settings [Optional]\nRead_type: MapGenSettings\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaSpaceLocationPrototype",
      "attribute_name": "map_gen_settings"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpaceLocationPrototype.map_seed_offset",
    "content": "Attribute: map_seed_offset [Optional]\nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaSpaceLocationPrototype",
      "attribute_name": "map_seed_offset"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpaceLocationPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaSpaceLocationPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpaceLocationPrototype.player_effects",
    "content": "Attribute: player_effects [Optional]\nRead_type: {'complex_type': 'array', 'value': 'TriggerItem'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaSpaceLocationPrototype",
      "attribute_name": "player_effects"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpaceLocationPrototype.pollutant_type",
    "content": "Attribute: pollutant_type [Optional]\nRead_type: LuaAirbornePollutantPrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaSpaceLocationPrototype",
      "attribute_name": "pollutant_type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpaceLocationPrototype.position",
    "content": "Attribute: position \nRead_type: MapPosition\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaSpaceLocationPrototype",
      "attribute_name": "position"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpaceLocationPrototype.solar_power_in_space",
    "content": "Attribute: solar_power_in_space \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaSpaceLocationPrototype",
      "attribute_name": "solar_power_in_space"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpaceLocationPrototype.surface_properties",
    "content": "Attribute: surface_properties [Optional]\nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'double'}\n\nDescription: A mapping of the surface property name to the value.\n",
    "metadata": {
      "class_name": "LuaSpaceLocationPrototype",
      "attribute_name": "surface_properties"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpaceLocationPrototype.ticks_between_player_effects",
    "content": "Attribute: ticks_between_player_effects [Optional]\nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaSpaceLocationPrototype",
      "attribute_name": "ticks_between_player_effects"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpaceLocationPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaSpaceLocationPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaSpacePlatform",
    "content": "Class: LuaSpacePlatform\nDescription: A space platform.",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaSpacePlatform.apply_starter_pack",
    "content": "Method: LuaSpacePlatform.apply_starter_pack\nDescription: Applies the starter pack for this platform if it hasn't already been applied.\n\nReturns:\n- LuaEntity: The platform hub.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "method_name": "apply_starter_pack"
    }
  },
  {
    "type": "method",
    "name": "LuaSpacePlatform.cancel_deletion",
    "content": "Method: LuaSpacePlatform.cancel_deletion\nDescription: Cancels deletion of this space platform if it was scheduled for deletion.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "method_name": "cancel_deletion"
    }
  },
  {
    "type": "method",
    "name": "LuaSpacePlatform.create_asteroid_chunks",
    "content": "Method: LuaSpacePlatform.create_asteroid_chunks\nDescription: Creates the given asteroid chunks on this platform.\n\nParameters:\n- asteroid_chunks ({'complex_type': 'array', 'value': 'AsteroidChunk'}): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "method_name": "create_asteroid_chunks"
    }
  },
  {
    "type": "method",
    "name": "LuaSpacePlatform.damage_tile",
    "content": "Method: LuaSpacePlatform.damage_tile\nDescription: Damages the given tile if it exists, the chunk is generated, and it is a platform foundation tile.\n\nParameters:\n- cause (LuaEntity)[Optional]: \n- damage (float): \n- position (TilePosition): \n\nFormat:\n- {'takes_table': True, 'table_optional': True}",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "method_name": "damage_tile"
    }
  },
  {
    "type": "method",
    "name": "LuaSpacePlatform.destroy",
    "content": "Method: LuaSpacePlatform.destroy\nDescription: Schedules this space platform for deletion.\n\nParameters:\n- ticks (uint)[Optional]: The number of ticks from now when this platform will be deleted.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "method_name": "destroy"
    }
  },
  {
    "type": "method",
    "name": "LuaSpacePlatform.destroy_asteroid_chunks",
    "content": "Method: LuaSpacePlatform.destroy_asteroid_chunks\nDescription: Destroys all asteroid chunks from the given area. If no area and no position are given, then the entire surface is searched.",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "method_name": "destroy_asteroid_chunks"
    }
  },
  {
    "type": "method",
    "name": "LuaSpacePlatform.destroy_asteroid_chunks",
    "content": "Parameters:\n- area (BoundingBox)[Optional]: \n- invert (boolean)[Optional]: If the filters should be inverted.\n- limit (uint)[Optional]: \n- name ({'complex_type': 'union', 'options': ['AsteroidChunkID', {'complex_type': 'array', 'value': 'AsteroidChunkID'}], 'full_format': False})[Optional]: \n- position (MapPosition)[Optional]: \n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "method_name": "destroy_asteroid_chunks"
    }
  },
  {
    "type": "method",
    "name": "LuaSpacePlatform.find_asteroid_chunks_filtered",
    "content": "Method: LuaSpacePlatform.find_asteroid_chunks_filtered\nDescription: Find asteroid chunks of a given name in a given area.\n\nIf no filters are given, returns all asteroid chunks in the search area. If multiple filters are specified, returns only asteroid chunks matching every given filter. If no area and no position are given, the entire surface is searched.",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "method_name": "find_asteroid_chunks_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaSpacePlatform.find_asteroid_chunks_filtered",
    "content": "Parameters:\n- area (BoundingBox)[Optional]: \n- invert (boolean)[Optional]: If the filters should be inverted.\n- limit (uint)[Optional]: \n- name ({'complex_type': 'union', 'options': ['AsteroidChunkID', {'complex_type': 'array', 'value': 'AsteroidChunkID'}], 'full_format': False})[Optional]: \n- position (MapPosition)[Optional]: \n\nReturns:\n- {'complex_type': 'array', 'value': 'AsteroidChunk'}:",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "method_name": "find_asteroid_chunks_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaSpacePlatform.find_asteroid_chunks_filtered",
    "content": "Examples:\n```\ngame.surfaces[1].find_asteroid_chunks_filtered{area = {{-10, -10}, {10, 10}}, name = \"carbonic-asteroid\"} -- gets all asteroids with the given name in the rectangle\ngame.surfaces[1].find_asteroid_chunks_filtered{area = {{-10, -10}, {10, 10}}, limit = 5}  -- gets the first 5 asteroid chunks in the rectangle\n```\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "method_name": "find_asteroid_chunks_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaSpacePlatform.repair_tile",
    "content": "Method: LuaSpacePlatform.repair_tile\nDescription: Repairs the given tile if it's damaged.\n\nParameters:\n- amount (float)[Optional]: \n- position (TilePosition): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "method_name": "repair_tile"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatform.damaged_tiles",
    "content": "Attribute: damaged_tiles \nRead_type: {'complex_type': 'array', 'value': {'complex_type': 'table', 'parameters': [{'name': 'damage', 'order': 1, 'description': '', 'type': 'float', 'optional': False}, {'name': 'position', 'order': 0, 'description': '', 'type': 'TilePosition', 'optional': False}]}}\n\nDescription: The damaged tiles on this platform.",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "attribute_name": "damaged_tiles"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatform.force",
    "content": "Attribute: force \nRead_type: LuaForce\n\nDescription: The force of this space platform.\n",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "attribute_name": "force"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatform.hub",
    "content": "Attribute: hub [Optional]\nRead_type: LuaEntity\n\nDescription: The hub on this platform. `nil` if the platform has not had the starter pack applied or hub was destroyed but the platform not yet deleted.\n\nIf the hub is destroyed the platform will be deleted at the end of the tick but is otherwise valid to use until that point.",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "attribute_name": "hub"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatform.index",
    "content": "Attribute: index \nRead_type: uint\n\nDescription: The unique index of this space platform.\n",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "attribute_name": "index"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatform.last_visited_space_location",
    "content": "Attribute: last_visited_space_location [Optional]\nRead_type: LuaSpaceLocationPrototype\n\nDescription: The space location this space platform previously went through or stopped at.\n",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "attribute_name": "last_visited_space_location"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatform.name",
    "content": "Attribute: name \nRead_type: string\nWrite_type: string\nDescription: The name of this space platform.\n",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "attribute_name": "name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatform.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatform.paused",
    "content": "Attribute: paused \nRead_type: boolean\nWrite_type: boolean\nDescription: When `true`, the platform has paused thrust and does not advance its schedule.\n",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "attribute_name": "paused"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatform.schedule",
    "content": "Attribute: schedule [Optional]\nRead_type: PlatformSchedule\nWrite_type: PlatformSchedule\nDescription: This platform's current schedule, if any. Set to `nil` to clear.\n\nThe schedule can't be changed by modifying the returned table. Instead, changes must be made by assigning a new table to this attribute.",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "attribute_name": "schedule"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatform.scheduled_for_deletion",
    "content": "Attribute: scheduled_for_deletion \nRead_type: uint\n\nDescription: If this platform is scheduled for deletion.\n\nReturns how many ticks are left before the platform will be deleted. 0 if not scheduled for deletion.\n",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "attribute_name": "scheduled_for_deletion"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatform.space_location",
    "content": "Attribute: space_location [Optional]\nRead_type: LuaSpaceLocationPrototype\n\nDescription: The space location this space platform is stopped at or `nil`.\n",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "attribute_name": "space_location"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatform.speed",
    "content": "Attribute: speed \nRead_type: double\nWrite_type: double\nDescription: \n",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "attribute_name": "speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatform.starter_pack",
    "content": "Attribute: starter_pack [Optional]\nRead_type: ItemIDAndQualityIDPair\n\nDescription: The starter pack used to create this space platform.\n",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "attribute_name": "starter_pack"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatform.state",
    "content": "Attribute: state \nRead_type: defines.space_platform_state\n\nDescription: The current state of this space platform.\n",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "attribute_name": "state"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatform.surface",
    "content": "Attribute: surface \nRead_type: LuaSurface\n\nDescription: The surface that belongs to this platform (if it has been created yet).\n",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "attribute_name": "surface"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatform.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "attribute_name": "valid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatform.weight",
    "content": "Attribute: weight \nRead_type: uint\n\nDescription: The total weight of the platform.\n",
    "metadata": {
      "class_name": "LuaSpacePlatform",
      "attribute_name": "weight"
    }
  },
  {
    "type": "class",
    "name": "LuaSpacePlatformHubControlBehavior",
    "content": "Class: LuaSpacePlatformHubControlBehavior\nDescription: Control behavior for space platform hubs",
    "metadata": {
      "class_name": "LuaSpacePlatformHubControlBehavior",
      "parent_class": "LuaControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatformHubControlBehavior.damage_taken_signal",
    "content": "Attribute: damage_taken_signal [Optional]\nRead_type: SignalID\nWrite_type: SignalID\nDescription: Signal to be transmitted with platform's damage taken value.\n",
    "metadata": {
      "class_name": "LuaSpacePlatformHubControlBehavior",
      "attribute_name": "damage_taken_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatformHubControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaSpacePlatformHubControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatformHubControlBehavior.read_contents",
    "content": "Attribute: read_contents \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if this hub is sending its content to a circuit network\n",
    "metadata": {
      "class_name": "LuaSpacePlatformHubControlBehavior",
      "attribute_name": "read_contents"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatformHubControlBehavior.read_damage_taken",
    "content": "Attribute: read_damage_taken \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether damage taken by the space platform is sent to circuit network.\n",
    "metadata": {
      "class_name": "LuaSpacePlatformHubControlBehavior",
      "attribute_name": "read_damage_taken"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatformHubControlBehavior.read_moving_from",
    "content": "Attribute: read_moving_from \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether current connection \"from\" end is sent to circuit network.\n",
    "metadata": {
      "class_name": "LuaSpacePlatformHubControlBehavior",
      "attribute_name": "read_moving_from"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatformHubControlBehavior.read_moving_to",
    "content": "Attribute: read_moving_to \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether current connection \"to\" end is sent to circuit network.\n",
    "metadata": {
      "class_name": "LuaSpacePlatformHubControlBehavior",
      "attribute_name": "read_moving_to"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatformHubControlBehavior.read_speed",
    "content": "Attribute: read_speed \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether current speed of space platform is sent to circuit network.\n",
    "metadata": {
      "class_name": "LuaSpacePlatformHubControlBehavior",
      "attribute_name": "read_speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatformHubControlBehavior.send_to_platform",
    "content": "Attribute: send_to_platform \nRead_type: boolean\nWrite_type: boolean\nDescription: Whether the signals are used for circuit conditions in the platform's schedule\n",
    "metadata": {
      "class_name": "LuaSpacePlatformHubControlBehavior",
      "attribute_name": "send_to_platform"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatformHubControlBehavior.speed_signal",
    "content": "Attribute: speed_signal [Optional]\nRead_type: SignalID\nWrite_type: SignalID\nDescription: Signal to be transmitted with platform's current speed.\n",
    "metadata": {
      "class_name": "LuaSpacePlatformHubControlBehavior",
      "attribute_name": "speed_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSpacePlatformHubControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaSpacePlatformHubControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaStorageTankControlBehavior",
    "content": "Class: LuaStorageTankControlBehavior\nDescription: Control behavior for storage tanks.",
    "metadata": {
      "class_name": "LuaStorageTankControlBehavior",
      "parent_class": "LuaControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStorageTankControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaStorageTankControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStorageTankControlBehavior.read_contents",
    "content": "Attribute: read_contents \nRead_type: boolean\nWrite_type: boolean\nDescription: If the storage tank content is sent to circuit network\n",
    "metadata": {
      "class_name": "LuaStorageTankControlBehavior",
      "attribute_name": "read_contents"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStorageTankControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaStorageTankControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaStyle",
    "content": "Class: LuaStyle\nDescription: Style of a GUI element. All of the attributes listed here may be `nil` if not available for a particular GUI element.",
    "metadata": {
      "class_name": "LuaStyle",
      "parent_class": null
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.badge_font",
    "content": "Attribute: badge_font \nRead_type: string\nWrite_type: string\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "badge_font"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.badge_horizontal_spacing",
    "content": "Attribute: badge_horizontal_spacing \nRead_type: int\nWrite_type: int\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "badge_horizontal_spacing"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.bar_width",
    "content": "Attribute: bar_width \nRead_type: uint\nWrite_type: uint\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "bar_width"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.bottom_cell_padding",
    "content": "Attribute: bottom_cell_padding \nRead_type: int\nWrite_type: int\nDescription: Space between the table cell contents bottom and border.\n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "bottom_cell_padding"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.bottom_margin",
    "content": "Attribute: bottom_margin \nRead_type: int\nWrite_type: int\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "bottom_margin"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.bottom_padding",
    "content": "Attribute: bottom_padding \nRead_type: int\nWrite_type: int\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "bottom_padding"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.cell_padding",
    "content": "Attribute: cell_padding \nRead_type: None\nWrite_type: int\nDescription: Space between the table cell contents and border. Sets top/right/bottom/left cell paddings to this value.\n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "cell_padding"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.clicked_font_color",
    "content": "Attribute: clicked_font_color \nRead_type: Color\nWrite_type: Color\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "clicked_font_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.clicked_vertical_offset",
    "content": "Attribute: clicked_vertical_offset \nRead_type: int\nWrite_type: int\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "clicked_vertical_offset"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.color",
    "content": "Attribute: color \nRead_type: Color\nWrite_type: Color\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.column_alignments",
    "content": "Attribute: column_alignments \nRead_type: {'complex_type': 'LuaCustomTable', 'key': 'uint', 'value': 'Alignment'}\n\nDescription: Array containing the alignment for every column of this table element. Even though this property is marked as read-only, the alignment can be changed by indexing the LuaCustomTable, like so:\nExamples: [\"```\\ntable_element.style.column_alignments[1] = \\\"center\\\"\\n```\"]",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "column_alignments"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.default_badge_font_color",
    "content": "Attribute: default_badge_font_color \nRead_type: Color\nWrite_type: Color\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "default_badge_font_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.disabled_badge_font_color",
    "content": "Attribute: disabled_badge_font_color \nRead_type: Color\nWrite_type: Color\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "disabled_badge_font_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.disabled_font_color",
    "content": "Attribute: disabled_font_color \nRead_type: Color\nWrite_type: Color\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "disabled_font_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.draw_grayscale_picture",
    "content": "Attribute: draw_grayscale_picture \nRead_type: boolean\nWrite_type: boolean\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "draw_grayscale_picture"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.extra_bottom_margin_when_activated",
    "content": "Attribute: extra_bottom_margin_when_activated \nRead_type: int\nWrite_type: int\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "extra_bottom_margin_when_activated"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.extra_bottom_padding_when_activated",
    "content": "Attribute: extra_bottom_padding_when_activated \nRead_type: int\nWrite_type: int\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "extra_bottom_padding_when_activated"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.extra_left_margin_when_activated",
    "content": "Attribute: extra_left_margin_when_activated \nRead_type: int\nWrite_type: int\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "extra_left_margin_when_activated"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.extra_left_padding_when_activated",
    "content": "Attribute: extra_left_padding_when_activated \nRead_type: int\nWrite_type: int\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "extra_left_padding_when_activated"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.extra_margin_when_activated",
    "content": "Attribute: extra_margin_when_activated \nRead_type: None\nWrite_type: {\"complex_type\": \"union\", \"options\": [\"int\", {\"complex_type\": \"array\", \"value\": \"int\"}], \"full_format\": false}\nDescription: Sets `extra_top/right/bottom/left_margin_when_activated` to this value.\n\nAn array with two values sets top/bottom margin to the first value and left/right margin to the second value. An array with four values sets top, right, bottom, left margin respectively.",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "extra_margin_when_activated"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.extra_padding_when_activated",
    "content": "Attribute: extra_padding_when_activated \nRead_type: None\nWrite_type: {\"complex_type\": \"union\", \"options\": [\"int\", {\"complex_type\": \"array\", \"value\": \"int\"}], \"full_format\": false}\nDescription: Sets `extra_top/right/bottom/left_padding_when_activated` to this value.\n\nAn array with two values sets top/bottom padding to the first value and left/right padding to the second value. An array with four values sets top, right, bottom, left padding respectively.",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "extra_padding_when_activated"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.extra_right_margin_when_activated",
    "content": "Attribute: extra_right_margin_when_activated \nRead_type: int\nWrite_type: int\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "extra_right_margin_when_activated"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.extra_right_padding_when_activated",
    "content": "Attribute: extra_right_padding_when_activated \nRead_type: int\nWrite_type: int\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "extra_right_padding_when_activated"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.extra_top_margin_when_activated",
    "content": "Attribute: extra_top_margin_when_activated \nRead_type: int\nWrite_type: int\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "extra_top_margin_when_activated"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.extra_top_padding_when_activated",
    "content": "Attribute: extra_top_padding_when_activated \nRead_type: int\nWrite_type: int\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "extra_top_padding_when_activated"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.font",
    "content": "Attribute: font \nRead_type: string\nWrite_type: string\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "font"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.font_color",
    "content": "Attribute: font_color \nRead_type: Color\nWrite_type: Color\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "font_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.gui",
    "content": "Attribute: gui \nRead_type: LuaGui\n\nDescription: Gui of the [LuaGuiElement](runtime:LuaGuiElement) of this style.\n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "gui"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.height",
    "content": "Attribute: height \nRead_type: None\nWrite_type: int\nDescription: Sets both minimal and maximal height to the given value.\n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "height"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.horizontal_align",
    "content": "Attribute: horizontal_align [Optional]\nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'left'}, {'complex_type': 'literal', 'value': 'center'}, {'complex_type': 'literal', 'value': 'right'}], 'full_format': False}\nWrite_type: {\"complex_type\": \"union\", \"options\": [{\"complex_type\": \"literal\", \"value\": \"left\"}, {\"complex_type\": \"literal\", \"value\": \"center\"}, {\"complex_type\": \"literal\", \"value\": \"right\"}], \"full_format\": false}",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "horizontal_align"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.horizontal_align",
    "content": "Description: Horizontal align of the inner content of the widget, if any.",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "horizontal_align"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.horizontal_spacing",
    "content": "Attribute: horizontal_spacing \nRead_type: int\nWrite_type: int\nDescription: Horizontal space between individual cells.\n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "horizontal_spacing"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.horizontally_squashable",
    "content": "Attribute: horizontally_squashable [Optional]\nRead_type: boolean\nWrite_type: boolean\nDescription: Whether the GUI element can be squashed (by maximal width of some parent element) horizontally. `nil` if this element does not support squashing.\n\nThis is mainly meant to be used for scroll-pane. The default value is false.",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "horizontally_squashable"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.horizontally_stretchable",
    "content": "Attribute: horizontally_stretchable [Optional]\nRead_type: boolean\nWrite_type: boolean\nDescription: Whether the GUI element stretches its size horizontally to other elements. `nil` if this element does not support stretching.\n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "horizontally_stretchable"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.hovered_font_color",
    "content": "Attribute: hovered_font_color \nRead_type: Color\nWrite_type: Color\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "hovered_font_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.left_cell_padding",
    "content": "Attribute: left_cell_padding \nRead_type: int\nWrite_type: int\nDescription: Space between the table cell contents left and border.\n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "left_cell_padding"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.left_margin",
    "content": "Attribute: left_margin \nRead_type: int\nWrite_type: int\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "left_margin"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.left_padding",
    "content": "Attribute: left_padding \nRead_type: int\nWrite_type: int\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "left_padding"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.margin",
    "content": "Attribute: margin \nRead_type: None\nWrite_type: {\"complex_type\": \"union\", \"options\": [\"int\", {\"complex_type\": \"array\", \"value\": \"int\"}], \"full_format\": false}\nDescription: Sets top/right/bottom/left margins to this value.\n\nAn array with two values sets top/bottom margin to the first value and left/right margin to the second value. An array with four values sets top, right, bottom, left margin respectively.",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "margin"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.maximal_height",
    "content": "Attribute: maximal_height \nRead_type: int\nWrite_type: int\nDescription: Maximal height ensures, that the widget will never be bigger than than that size. It can't be stretched to be bigger.\n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "maximal_height"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.maximal_width",
    "content": "Attribute: maximal_width \nRead_type: int\nWrite_type: int\nDescription: Maximal width ensures, that the widget will never be bigger than than that size. It can't be stretched to be bigger.\n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "maximal_width"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.minimal_height",
    "content": "Attribute: minimal_height \nRead_type: int\nWrite_type: int\nDescription: Minimal height ensures, that the widget will never be smaller than than that size. It can't be squashed to be smaller.\n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "minimal_height"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.minimal_width",
    "content": "Attribute: minimal_width \nRead_type: int\nWrite_type: int\nDescription: Minimal width ensures, that the widget will never be smaller than than that size. It can't be squashed to be smaller.\n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "minimal_width"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.name",
    "content": "Attribute: name \nRead_type: string\n\nDescription: Name of this style.\n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.natural_height",
    "content": "Attribute: natural_height \nRead_type: int\nWrite_type: int\nDescription: Natural height specifies the height of the element tries to have, but it can still be squashed/stretched to have a smaller or bigger size.\n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "natural_height"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.natural_width",
    "content": "Attribute: natural_width \nRead_type: int\nWrite_type: int\nDescription: Natural width specifies the width of the element tries to have, but it can still be squashed/stretched to have a smaller or bigger size.\n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "natural_width"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.padding",
    "content": "Attribute: padding \nRead_type: None\nWrite_type: {\"complex_type\": \"union\", \"options\": [\"int\", {\"complex_type\": \"array\", \"value\": \"int\"}], \"full_format\": false}\nDescription: Sets top/right/bottom/left paddings to this value.\n\nAn array with two values sets top/bottom padding to the first value and left/right padding to the second value. An array with four values sets top, right, bottom, left padding respectively.",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "padding"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.pie_progress_color",
    "content": "Attribute: pie_progress_color \nRead_type: Color\nWrite_type: Color\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "pie_progress_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.rich_text_setting",
    "content": "Attribute: rich_text_setting \nRead_type: defines.rich_text_setting\nWrite_type: defines.rich_text_setting\nDescription: How this GUI element handles rich text.\n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "rich_text_setting"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.right_cell_padding",
    "content": "Attribute: right_cell_padding \nRead_type: int\nWrite_type: int\nDescription: Space between the table cell contents right and border.\n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "right_cell_padding"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.right_margin",
    "content": "Attribute: right_margin \nRead_type: int\nWrite_type: int\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "right_margin"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.right_padding",
    "content": "Attribute: right_padding \nRead_type: int\nWrite_type: int\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "right_padding"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.selected_badge_font_color",
    "content": "Attribute: selected_badge_font_color \nRead_type: Color\nWrite_type: Color\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "selected_badge_font_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.selected_clicked_font_color",
    "content": "Attribute: selected_clicked_font_color \nRead_type: Color\nWrite_type: Color\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "selected_clicked_font_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.selected_font_color",
    "content": "Attribute: selected_font_color \nRead_type: Color\nWrite_type: Color\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "selected_font_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.selected_hovered_font_color",
    "content": "Attribute: selected_hovered_font_color \nRead_type: Color\nWrite_type: Color\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "selected_hovered_font_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.single_line",
    "content": "Attribute: single_line \nRead_type: boolean\nWrite_type: boolean\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "single_line"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.size",
    "content": "Attribute: size \nRead_type: None\nWrite_type: {\"complex_type\": \"union\", \"options\": [\"int\", {\"complex_type\": \"array\", \"value\": \"int\"}], \"full_format\": false}\nDescription: Sets both width and height to the given value. Also accepts an array with two values, setting width to the first and height to the second one.",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "size"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.stretch_image_to_widget_size",
    "content": "Attribute: stretch_image_to_widget_size \nRead_type: boolean\nWrite_type: boolean\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "stretch_image_to_widget_size"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.strikethrough_color",
    "content": "Attribute: strikethrough_color \nRead_type: Color\nWrite_type: Color\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "strikethrough_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.top_cell_padding",
    "content": "Attribute: top_cell_padding \nRead_type: int\nWrite_type: int\nDescription: Space between the table cell contents top and border.\n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "top_cell_padding"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.top_margin",
    "content": "Attribute: top_margin \nRead_type: int\nWrite_type: int\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "top_margin"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.top_padding",
    "content": "Attribute: top_padding \nRead_type: int\nWrite_type: int\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "top_padding"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.use_header_filler",
    "content": "Attribute: use_header_filler \nRead_type: boolean\nWrite_type: boolean\nDescription: \n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "use_header_filler"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "valid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.vertical_align",
    "content": "Attribute: vertical_align [Optional]\nRead_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'top'}, {'complex_type': 'literal', 'value': 'center'}, {'complex_type': 'literal', 'value': 'bottom'}], 'full_format': False}\nWrite_type: {\"complex_type\": \"union\", \"options\": [{\"complex_type\": \"literal\", \"value\": \"top\"}, {\"complex_type\": \"literal\", \"value\": \"center\"}, {\"complex_type\": \"literal\", \"value\": \"bottom\"}], \"full_format\": false}",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "vertical_align"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.vertical_align",
    "content": "Description: Vertical align of the inner content of the widget, if any.",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "vertical_align"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.vertical_spacing",
    "content": "Attribute: vertical_spacing \nRead_type: int\nWrite_type: int\nDescription: Vertical space between individual cells.\n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "vertical_spacing"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.vertically_squashable",
    "content": "Attribute: vertically_squashable [Optional]\nRead_type: boolean\nWrite_type: boolean\nDescription: Whether the GUI element can be squashed (by maximal height of some parent element) vertically. `nil` if this element does not support squashing.\n\nThis is mainly meant to be used for scroll-pane. The default (parent) value for scroll pane is true, false otherwise.",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "vertically_squashable"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.vertically_stretchable",
    "content": "Attribute: vertically_stretchable [Optional]\nRead_type: boolean\nWrite_type: boolean\nDescription: Whether the GUI element stretches its size vertically to other elements. `nil` if this element does not support stretching.\n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "vertically_stretchable"
    }
  },
  {
    "type": "attribute",
    "name": "LuaStyle.width",
    "content": "Attribute: width \nRead_type: None\nWrite_type: int\nDescription: Sets both minimal and maximal width to the given value.\n",
    "metadata": {
      "class_name": "LuaStyle",
      "attribute_name": "width"
    }
  },
  {
    "type": "class",
    "name": "LuaSurface",
    "content": "Class: LuaSurface\nDescription: A \"domain\" of the world. Surfaces can only be created and deleted through the API. Surfaces are uniquely identified by their name. Every game contains at least the surface \"nauvis\".",
    "metadata": {
      "class_name": "LuaSurface",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.add_script_area",
    "content": "Method: LuaSurface.add_script_area\nDescription: Adds the given script area.\n\nParameters:\n- area (ScriptArea): \n\nReturns:\n- uint: The id of the created area.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "add_script_area"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.add_script_position",
    "content": "Method: LuaSurface.add_script_position\nDescription: Adds the given script position.\n\nParameters:\n- position (ScriptPosition): \n\nReturns:\n- uint: The id of the created position.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "add_script_position"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.build_checkerboard",
    "content": "Method: LuaSurface.build_checkerboard\nDescription: Sets the given area to the checkerboard lab tiles.\n\nParameters:\n- area (BoundingBox): The tile area.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "build_checkerboard"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.build_enemy_base",
    "content": "Method: LuaSurface.build_enemy_base\nDescription: Send a group to build a new base.\n\nThe specified force must be AI-controlled; i.e. `force.ai_controllable` must be `true`.\n\nParameters:\n- force (ForceID)[Optional]: Force the new base will belong to. Defaults to enemy.\n- position (MapPosition): Location of the new base.\n- unit_count (uint): Number of biters to send for the base-building task.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "build_enemy_base"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.calculate_tile_properties",
    "content": "Method: LuaSurface.calculate_tile_properties\nDescription: Calculate values for a list of tile properties at a list of positions. Requests for unrecognized properties will be ignored, so this can also be used to test whether those properties exist.\n\nParameters:\n- positions ({'complex_type': 'array', 'value': 'MapPosition'}): Positions for which to calculate property values.\n- property_names ({'complex_type': 'array', 'value': 'string'}): Names of properties (`\"elevation\"`, etc) to calculate.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "calculate_tile_properties"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.calculate_tile_properties",
    "content": "Returns:\n- {'complex_type': 'dictionary', 'key': 'string', 'value': {'complex_type': 'array', 'value': 'double'}}: Table of property value lists, keyed by property name.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "calculate_tile_properties"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.can_fast_replace",
    "content": "Method: LuaSurface.can_fast_replace\nDescription: If there exists an entity at the given location that can be fast-replaced with the given entity parameters.\n\nParameters:\n- direction (defines.direction)[Optional]: Direction the entity would be placed. Defaults to `north`.\n- force (ForceID)[Optional]: The force that would place the entity. Defaults to the `\"neutral\"` force.\n- name (string): Name of the entity to check.\n- position (MapPosition): Where the entity would be placed.\n\nReturns:\n- boolean:",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "can_fast_replace"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.can_fast_replace",
    "content": "Returns:\n- boolean: \n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "can_fast_replace"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.can_place_entity",
    "content": "Method: LuaSurface.can_place_entity\nDescription: Check for collisions with terrain or other entities.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "can_place_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.can_place_entity",
    "content": "Parameters:\n- build_check_type (defines.build_check_type)[Optional]: Which type of check should be carried out. Defaults to `ghost_revive`.\n- direction (defines.direction)[Optional]: Direction of the placed entity. Defaults to `north`.\n- force (ForceID)[Optional]: The force that would place the entity. Defaults to the `\"neutral\"` force.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "can_place_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.can_place_entity",
    "content": "- forced (boolean)[Optional]: If `true`, entities that can be marked for deconstruction are ignored. Only used if `build_check_type` is either `manual_ghost`, `script_ghost` or `blueprint_ghost`. Defaults to `false`.\n- inner_name (string)[Optional]: The prototype name of the entity contained in the ghost. Only used if `name` is `entity-ghost`.\n- name (string): Name of the entity prototype to check.\n- position (MapPosition): Where the entity would be placed.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "can_place_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.can_place_entity",
    "content": "Returns:\n- boolean: \n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "can_place_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.cancel_deconstruct_area",
    "content": "Method: LuaSurface.cancel_deconstruct_area\nDescription: Cancel a deconstruction order.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "cancel_deconstruct_area"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.cancel_deconstruct_area",
    "content": "Parameters:\n- area (BoundingBox): The area to cancel deconstruction orders in.\n- force (ForceID): The force whose deconstruction orders to cancel.\n- item (LuaItemStack)[Optional]: The deconstruction item to use if any.\n- item_index (uint)[Optional]: The index of the undo item to add this action to. An index of `0` creates a new undo item for it. Defaults to putting it into the appropriate undo item automatically if not specified.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "cancel_deconstruct_area"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.cancel_deconstruct_area",
    "content": "- player (PlayerIdentification)[Optional]: The player to set the last_user to, if any.  Also the player whose undo queue this action should be added to.\n- skip_fog_of_war (boolean)[Optional]: If chunks covered by fog-of-war are skipped. Defaults to `false`.\n- super_forced (boolean)[Optional]: If the cancel deconstruction is super-forced. Defaults to `false`.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "cancel_deconstruct_area"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.cancel_deconstruct_area",
    "content": "Raises:\n- on_cancelled_deconstruction: Raised for every entity whose deconstruction has been successfully cancelled.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "cancel_deconstruct_area"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.cancel_upgrade_area",
    "content": "Method: LuaSurface.cancel_upgrade_area\nDescription: Cancel a upgrade order.\n\nParameters:\n- area (BoundingBox): The area to cancel upgrade orders in.\n- force (ForceID): The force whose upgrade orders to cancel.\n- item (LuaItemStack): The upgrade item to use.\n- player (PlayerIdentification)[Optional]: The player to set the last_user to if any.\n- skip_fog_of_war (boolean)[Optional]: If chunks covered by fog-of-war are skipped.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "cancel_upgrade_area"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.cancel_upgrade_area",
    "content": "Raises:\n- on_cancelled_upgrade: Raised for every entity whose upgrade has been successfully cancelled.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "cancel_upgrade_area"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.clear",
    "content": "Method: LuaSurface.clear\nDescription: Clears this surface deleting all entities and chunks on it.\n\nParameters:\n- ignore_characters (boolean)[Optional]: Whether characters on this surface that are connected to or associated with players should be ignored (not destroyed). Defaults to `false`.\n\nRaises:\n- on_pre_surface_cleared: \n- on_surface_cleared: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "clear"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.clear_hidden_tiles",
    "content": "Method: LuaSurface.clear_hidden_tiles\nDescription: Completely removes hidden and double hidden tiles data on this surface.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "clear_hidden_tiles"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.clear_pollution",
    "content": "Method: LuaSurface.clear_pollution\nDescription: Clears all pollution on this surface.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "clear_pollution"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.clone_area",
    "content": "Method: LuaSurface.clone_area\nDescription: Clones the given area.\n\nEntities are cloned in an order such that they can always be created, eg rails before trains.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "clone_area"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.clone_area",
    "content": "Parameters:\n- clear_destination_decoratives (boolean)[Optional]: If the destination decoratives should be cleared\n- clear_destination_entities (boolean)[Optional]: If the destination entities should be cleared\n- clone_decoratives (boolean)[Optional]: If decoratives should be cloned\n- clone_entities (boolean)[Optional]: If entities should be cloned\n- clone_tiles (boolean)[Optional]: If tiles should be cloned",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "clone_area"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.clone_area",
    "content": "- clone_tiles (boolean)[Optional]: If tiles should be cloned\n- create_build_effect_smoke (boolean)[Optional]: If true, the building effect smoke will be shown around the new entities. Defaults to `false`.\n- destination_area (BoundingBox): \n- destination_force (ForceID)[Optional]: \n- destination_surface (SurfaceIdentification)[Optional]: \n- expand_map (boolean)[Optional]: If the destination surface should be expanded when destination_area is outside current bounds. Defaults to `false`.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "clone_area"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.clone_area",
    "content": "- source_area (BoundingBox):",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "clone_area"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.clone_area",
    "content": "Raises:\n- on_area_cloned: Raised after the individual `on_entity_cloned` events.\n- on_entity_cloned: Raised for every entity that was cloned.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "clone_area"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.clone_brush",
    "content": "Method: LuaSurface.clone_brush\nDescription: Clones the given area.\n\n[defines.events.on_entity_cloned](runtime:defines.events.on_entity_cloned) is raised for each entity, and then [defines.events.on_area_cloned](runtime:defines.events.on_area_cloned) is raised.\n\nEntities are cloned in an order such that they can always be created, eg rails before trains.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "clone_brush"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.clone_brush",
    "content": "Parameters:\n- clear_destination_decoratives (boolean)[Optional]: If the destination decoratives should be cleared\n- clear_destination_entities (boolean)[Optional]: If the destination entities should be cleared\n- clone_decoratives (boolean)[Optional]: If decoratives should be cloned\n- clone_entities (boolean)[Optional]: If entities should be cloned\n- clone_tiles (boolean)[Optional]: If tiles should be cloned",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "clone_brush"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.clone_brush",
    "content": "- clone_tiles (boolean)[Optional]: If tiles should be cloned\n- create_build_effect_smoke (boolean)[Optional]: If true, the building effect smoke will be shown around the new entities.\n- destination_force ({'complex_type': 'union', 'options': ['LuaForce', 'string'], 'full_format': False})[Optional]: \n- destination_offset (TilePosition): \n- destination_surface (SurfaceIdentification)[Optional]:",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "clone_brush"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.clone_brush",
    "content": "- destination_surface (SurfaceIdentification)[Optional]: \n- expand_map (boolean)[Optional]: If the destination surface should be expanded when destination_area is outside current bounds. Defaults to `false`.\n- manual_collision_mode (boolean)[Optional]: If manual-style collision checks should be done.\n- source_offset (TilePosition): \n- source_positions ({'complex_type': 'array', 'value': 'TilePosition'}):",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "clone_brush"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.clone_brush",
    "content": "Format:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "clone_brush"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.clone_entities",
    "content": "Method: LuaSurface.clone_entities\nDescription: Clones the given entities.\n\nEntities are cloned in an order such that they can always be created, eg rails before trains.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "clone_entities"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.clone_entities",
    "content": "Parameters:\n- create_build_effect_smoke (boolean)[Optional]: If true, the building effect smoke will be shown around the new entities.\n- destination_force (ForceID)[Optional]: \n- destination_offset (Vector): \n- destination_surface (SurfaceIdentification)[Optional]: \n- entities ({'complex_type': 'array', 'value': 'LuaEntity'}): \n- snap_to_grid (boolean)[Optional]: \n\nRaises:\n- on_entity_cloned: Raised for every entity that was cloned.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "clone_entities"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.count_entities_filtered",
    "content": "Method: LuaSurface.count_entities_filtered\nDescription: Count entities of given type or name in a given area. Works just like [LuaSurface::find_entities_filtered](runtime:LuaSurface::find_entities_filtered), except this only returns the count. As it doesn't construct all the wrapper objects, this is more efficient if one is only interested in the number of entities.\n\n- If no `area` or `position` are given, the entire surface is searched.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "count_entities_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.count_entities_filtered",
    "content": "- If `position` is given, this returns the entities colliding with that position (i.e the given position is within the entity's collision box).\n\n- If `position` and `radius` are given, this returns entities in the radius of the position.\n\n- If `area` is specified, this returns entities colliding with that area.\n\nParameters:\n- filter (EntitySearchFilters): \n\nReturns:\n- uint: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "count_entities_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.count_tiles_filtered",
    "content": "Method: LuaSurface.count_tiles_filtered\nDescription: Count tiles of a given name in a given area. Works just like [LuaSurface::find_tiles_filtered](runtime:LuaSurface::find_tiles_filtered), except this only returns the count. As it doesn't construct all the wrapper objects, this is more efficient if one is only interested in the number of tiles.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "count_tiles_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.count_tiles_filtered",
    "content": "If no `area` or `position` and `radius` is given, the entire surface is searched. If `position` and `radius` are given, only tiles within the radius of the position are included.\n\nParameters:\n- filter (TileSearchFilters): \n\nReturns:\n- uint: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "count_tiles_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_decoratives",
    "content": "Method: LuaSurface.create_decoratives\nDescription: Adds the given decoratives to the surface.\n\nThis will merge decoratives of the same type that already exist effectively increasing the \"amount\" field.\n\nParameters:\n- check_collision (boolean)[Optional]: If collision should be checked against entities/tiles.\n- decoratives ({'complex_type': 'array', 'value': 'Decorative'}): \n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_decoratives"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "Method: LuaSurface.create_entity\nDescription: Create an entity on this surface.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "Parameters:\n- cause ({'complex_type': 'union', 'options': ['LuaEntity', 'ForceID'], 'full_format': False})[Optional]: Cause entity / force. The entity or force that triggered the chain of events that led to this entity being created. Used for beams, projectiles, stickers, etc. so that the damage receiver can know which entity or force to retaliate against.\n- character (LuaEntity)[Optional]: If fast_replace is true simulate fast replace using this character.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "- create_build_effect_smoke (boolean)[Optional]: If false, the building effect smoke will not be shown around the new entity. Defaults to `true`.\n- direction (defines.direction)[Optional]: Desired orientation of the entity after creation.\n- fast_replace (boolean)[Optional]: If true, building will attempt to simulate fast-replace building. Defaults to `false`.\n- force (ForceID)[Optional]: Force of the entity, default is enemy.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "- item (LuaItemStack)[Optional]: If provided, the entity will attempt to pull stored values from this item (for example; creating a spidertron from a previously named and mined spidertron)\n- item_index (uint)[Optional]: The index of the undo item to add this action to. An index of `0` creates a new undo item for it. Defaults to putting it into the appropriate undo item automatically if not specified.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "- move_stuck_players (boolean)[Optional]: If true, any characters that are in the way of the entity are teleported out of the way.\n- name (EntityID): The entity prototype name to create.\n- player (PlayerIdentification)[Optional]: If given set the last_user to this player. If fast_replace is true simulate fast replace using this player. Also the player whose undo queue this action should be added to.\n- position (MapPosition): Where to create the entity.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "- position (MapPosition): Where to create the entity.\n- preserve_ghosts_and_corpses (boolean)[Optional]: If true, colliding ghosts and corpses will not be removed by the creation of some entity types. Defaults to `false`.\n- quality (QualityID)[Optional]: Quality of the entity to be created. Defaults to `normal`.\n- raise_built (boolean)[Optional]: If true; [defines.events.script_raised_built](runtime:defines.events.script_raised_built) will be fired on successful entity creation. Defaults to `false`.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "- snap_to_grid (boolean)[Optional]: If false the exact position given is used to instead of snapping to the normal entity grid. This only applies if the entity normally snaps to the grid.\n- source ({'complex_type': 'union', 'options': ['LuaEntity', 'MapPosition'], 'full_format': False})[Optional]: Source entity. Used for beams, projectiles, and highlight-boxes.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "- spawn_decorations (boolean)[Optional]: If true, entity types that have [spawn_decoration](runtime:LuaEntityPrototype::spawn_decorations) property will apply triggers defined in the property. Defaults to `false`.\n- spill (boolean)[Optional]: If false while fast_replace is true and player is nil any items from fast-replacing will be deleted instead of dropped on the ground. Defaults to `true`.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "- target ({'complex_type': 'union', 'options': ['LuaEntity', 'MapPosition'], 'full_format': False})[Optional]: Entity with health for the new entity to target.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "Returns:\n- LuaEntity: The created entity or `nil` if the creation failed.\n\nRaises:\n- script_raised_built: Raised if the `raise_built` flag was set and the entity was successfully created.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "Examples:\n```\nlocal asm = game.surfaces[1].create_entity{name = \"assembling-machine-1\", position = {15, 3}, force = game.forces.player, recipe = \"iron-stick\"}\n```\n```\n-- Creates a filter inserter with circuit conditions and a filter\ngame.surfaces[1].create_entity{\n  name = \"filter-inserter\", position = {20, 15}, force = game.player.force,\n  conditions =\n  {\n    red = {name = \"wood\", count = 3, operator = \">\"},\n    green = {name = \"iron-ore\", count = 1, operator = \"<\"},",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "green = {name = \"iron-ore\", count = 1, operator = \"<\"},\n    logistics = {name = \"wood\", count = 3, operator = \"=\"}\n  },\n  filters = {{index = 1, name = \"iron-ore\"}}\n}\n```\n```\n-- Creates a requester chest already set to request 128 iron plates.\ngame.surfaces[1].create_entity{\n  name = \"requester-chest\", position = {game.player.position.x+3, game.player.position.y},\n  force = game.player.force, request_filters = {{index = 1, name = \"iron-plate\", count = 128}}\n}\n```\n```",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "}\n```\n```\ngame.surfaces[1].create_entity{name = \"big-biter\", position = {15, 3}, force = game.forces.player} -- Friendly biter\ngame.surfaces[1].create_entity{name = \"medium-biter\", position = {15, 3}, force = game.forces.enemy} -- Enemy biter\n```\n```\n-- Creates a basic inserter at the player's location facing north\ngame.surfaces[1].create_entity{name = \"inserter\", position = game.player.position, direction = defines.direction.north}\n```",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "Format:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "Variant Parameter Groups:\n- artillery-flare: \n- frame_speed (float): \n- height (float): \n- movement (Vector): \n- vertical_speed (float): \n- artillery-projectile: \n- speed (double)[Optional]: Defaults to 1.\n- assembling-machine: \n- recipe (string)[Optional]: \n- beam: \n- duration (uint)[Optional]: If set, beam will be destroyed after this value of ticks.\n- max_length (uint)[Optional]: If set, beam will be destroyed when distance between source and target is greater than this value.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "- source_offset (Vector)[Optional]: Source position will be offset by this value when rendering the beam.\n- source_position (MapPosition)[Optional]: Absolute source position that can be used instead of source entity (entity has precedence if both entity and position are defined).\n- target_position (MapPosition)[Optional]: Absolute target position that can be used instead of target entity (entity has precedence if both entity and position are defined).\n- character-corpse:",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "- character-corpse: \n- inventory_size (uint)[Optional]: \n- player_index (uint)[Optional]: \n- cliff: \n- cliff_orientation (CliffOrientation)[Optional]: If not specified, `direction` will be used instead.\n- container: \n- bar (uint)[Optional]: Inventory index where the red limiting bar should be set.\n- electric-pole: \n- auto_connect (boolean)[Optional]: True by default. If set to false, created electric pole will not auto connect to neighbour electric poles.\n- entity-ghost:",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "- entity-ghost: \n- inner_name (string): The prototype name of the entity contained in the ghost.\n- tags (Tags)[Optional]: The [LuaEntity::tags](runtime:LuaEntity::tags) associated with this entity ghost.\n- fire: \n- initial_ground_flame_count (uint8)[Optional]: With how many small flames should the fire on ground be created. Defaults to the initial flame count of the prototype.\n- highlight-box:",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "- highlight-box: \n- blink_interval (uint)[Optional]: The blink interval for this highlight box. Makes it be shown every `blink_interval` ticks. Defaults to `0` (constantly shown).",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "- bounding_box (BoundingBox)[Optional]: The bounding box defining the highlight box using absolute map coordinates. If specified, the general `position` parameter still needs to be present, but will be ignored. If not specified, the game falls back to the `source` parameter first, then the `target` parameter second. One of these three parameters need to be specified.\n- box_type (CursorBoxRenderType)[Optional]: Specifies the graphical appearance (color) of the highlight box. Defaults to `\"electricity\"`.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "- render_player_index (uint)[Optional]: The player to render the highlight box for. If not provided, it will be rendered for all players.\n- time_to_live (uint)[Optional]: The amount of time in ticks that the highlight box will exist for. Defaults to existing forever.\n- inserter: \n- conditions (InserterCircuitConditions): \n- filters ({'complex_type': 'array', 'value': 'InventoryFilter'}): \n- item-entity: \n- stack (SimpleItemStack): The stack of items to create.\n- item-request-proxy:",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "- item-request-proxy: \n- modules ({'complex_type': 'array', 'value': 'BlueprintInsertPlan'}): The stacks of items to be delivered to target entity from logistic network.\n- removal_plan ({'complex_type': 'array', 'value': 'BlueprintInsertPlan'})[Optional]: Specification of items to be removed from the target entity by the logistic network.\n- target (LuaEntity): The target items are to be delivered to.\n- lamp: \n- always_on (boolean)[Optional]: Defaults to false.\n- color (Color)[Optional]: Defaults to white.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "- color (Color)[Optional]: Defaults to white.\n- loader: \n- filters ({'complex_type': 'array', 'value': 'InventoryFilter'})[Optional]: \n- type ({'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'output'}, {'complex_type': 'literal', 'value': 'input'}], 'full_format': False})[Optional]: Defaults to `\"input\"`.\n- loader-1x1: \n- filters ({'complex_type': 'array', 'value': 'InventoryFilter'})[Optional]:",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "- type ({'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'output'}, {'complex_type': 'literal', 'value': 'input'}], 'full_format': False})[Optional]: Defaults to `\"input\"`.\n- locomotive: \n- snap_to_train_stop (boolean)[Optional]: Whether the locomotive should snap to an adjacent train stop. Defaults to true.\n- logistic-container: \n- request_filters ({'complex_type': 'array', 'value': 'InventoryFilter'})[Optional]: \n- particle: \n- frame_speed (float): \n- height (float):",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "- particle: \n- frame_speed (float): \n- height (float): \n- movement (Vector): \n- vertical_speed (float): \n- plant: \n- tick_grown (uint)[Optional]: The tick the plant will be fully grown. If not specified, the plants normal growth time is used.\n- programmable-speaker: \n- alert_parameters (ProgrammableSpeakerAlertParameters)[Optional]: \n- parameters (ProgrammableSpeakerParameters)[Optional]: \n- projectile: \n- max_range (double)[Optional]: Defaults to 1000.\n- speed (double)[Optional]: Defaults to 0.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "- speed (double)[Optional]: Defaults to 0.\n- rail-chain-signal: \n- rail_layer (defines.rail_layer)[Optional]: Defaults to [defines.rail_layer.ground](runtime:defines.rail_layer.ground).\n- rail-signal: \n- rail_layer (defines.rail_layer)[Optional]: Defaults to [defines.rail_layer.ground](runtime:defines.rail_layer.ground).\n- resource: \n- amount (uint): \n- enable_cliff_removal (boolean)[Optional]: If colliding cliffs are removed. Default is true.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "- enable_tree_removal (boolean)[Optional]: If colliding trees are removed normally for this resource entity based off the prototype tree removal values. Default is true.\n- snap_to_tile_center (boolean)[Optional]: If true, the resource entity will be placed to center of a tile as map generator would place it, otherwise standard non-resource grid alignment rules will apply. Default is true.\n- rolling-stock: \n- color (Color)[Optional]: The color of this rolling stock, if it supports colors.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "- orientation (RealOrientation)[Optional]: The orientation of this rolling stock.\n- simple-entity-with-force: \n- render_player_index (uint)[Optional]: \n- simple-entity-with-owner: \n- render_player_index (uint)[Optional]: \n- speech-bubble: \n- lifetime (uint)[Optional]: \n- text (LocalisedString): \n- stream: \n- source_position (MapPosition)[Optional]: Absolute source position that can be used instead of source entity (entity has precedence if both entity and position are defined).",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_entity",
    "content": "- target_position (MapPosition)[Optional]: Absolute target position that can be used instead of target entity (entity has precedence if both entity and position are defined).\n- tile-ghost: \n- inner_name (string): The prototype name of the tile contained in the ghost.\n- underground-belt: \n- type ({'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'output'}, {'complex_type': 'literal', 'value': 'input'}], 'full_format': False})[Optional]: Defaults to `\"input\"`.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_global_electric_network",
    "content": "Method: LuaSurface.create_global_electric_network\nDescription: Creates a global electric network for this surface, if one doesn't exist already.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_global_electric_network"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_particle",
    "content": "Method: LuaSurface.create_particle\nDescription: Creates a particle at the given location\n\nParameters:\n- frame_speed (float): \n- height (float): \n- movement (Vector): \n- name (ParticleID): The particle name.\n- position (MapPosition): Where to create the particle.\n- vertical_speed (float): \n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_particle"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_trivial_smoke",
    "content": "Method: LuaSurface.create_trivial_smoke\nDescription: \n\nParameters:\n- name (TrivialSmokeID): The smoke prototype name to create.\n- position (MapPosition): Where to create the smoke.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_trivial_smoke"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.create_unit_group",
    "content": "Method: LuaSurface.create_unit_group\nDescription: Create a new unit group at a given position.\n\nParameters:\n- force (ForceID)[Optional]: Force of the new unit group. Defaults to `\"enemy\"`.\n- position (MapPosition): Initial position of the new unit group.\n\nReturns:\n- LuaCommandable: \n\nRaises:\n- on_unit_group_created: \n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "create_unit_group"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.deconstruct_area",
    "content": "Method: LuaSurface.deconstruct_area\nDescription: Place a deconstruction request.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "deconstruct_area"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.deconstruct_area",
    "content": "Parameters:\n- area (BoundingBox): The area to mark for deconstruction.\n- force (ForceID): The force whose bots should perform the deconstruction.\n- item (LuaItemStack)[Optional]: The deconstruction item to use if any.\n- player (PlayerIdentification)[Optional]: The player to set the last_user to if any.\n- skip_fog_of_war (boolean)[Optional]: If chunks covered by fog-of-war are skipped. Defaults to `false`.\n- super_forced (boolean)[Optional]: If the deconstruction is super-forced. Defaults to `false`.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "deconstruct_area"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.deconstruct_area",
    "content": "Raises:\n- on_marked_for_deconstruction: Raised for every entity that has been successfully marked for deconstruction.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "deconstruct_area"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.decorative_prototype_collides",
    "content": "Method: LuaSurface.decorative_prototype_collides\nDescription: Whether the given decorative prototype collides at the given position and direction.\n\nParameters:\n- position (MapPosition): The position to check.\n- prototype (DecorativeID): The decorative prototype to check.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "decorative_prototype_collides"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.delete_chunk",
    "content": "Method: LuaSurface.delete_chunk\nDescription: \n\nParameters:\n- position (ChunkPosition): The chunk position to delete\n\nRaises:\n- on_chunk_deleted: \n- on_pre_chunk_deleted: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "delete_chunk"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.destroy_decoratives",
    "content": "Method: LuaSurface.destroy_decoratives\nDescription: Removes all decoratives from the given area. If no area and no position are given, then the entire surface is searched.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "destroy_decoratives"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.destroy_decoratives",
    "content": "Parameters:\n- area (BoundingBox)[Optional]: \n- collision_mask ({'complex_type': 'union', 'options': ['CollisionLayerID', {'complex_type': 'array', 'value': 'CollisionLayerID'}, {'complex_type': 'dictionary', 'key': 'CollisionLayerID', 'value': {'complex_type': 'literal', 'value': True}}], 'full_format': False})[Optional]: \n- exclude_soft (boolean)[Optional]: Soft decoratives can be drawn over rails.\n- from_layer (string)[Optional]: \n- invert (boolean)[Optional]: If the filters should be inverted.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "destroy_decoratives"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.destroy_decoratives",
    "content": "- limit (uint)[Optional]: \n- name ({'complex_type': 'union', 'options': ['DecorativeID', {'complex_type': 'array', 'value': 'DecorativeID'}], 'full_format': False})[Optional]: \n- position (TilePosition)[Optional]: \n- to_layer (string)[Optional]:",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "destroy_decoratives"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.destroy_decoratives",
    "content": "Format:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "destroy_decoratives"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.destroy_global_electric_network",
    "content": "Method: LuaSurface.destroy_global_electric_network\nDescription: Destroys the global electric network for this surface, if it exists.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "destroy_global_electric_network"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.edit_script_area",
    "content": "Method: LuaSurface.edit_script_area\nDescription: Sets the given script area to the new values.\n\nParameters:\n- area (ScriptArea): \n- id (uint): The area to edit.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "edit_script_area"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.edit_script_position",
    "content": "Method: LuaSurface.edit_script_position\nDescription: Sets the given script position to the new values.\n\nParameters:\n- id (uint): The position to edit.\n- position (ScriptPosition): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "edit_script_position"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.entity_prototype_collides",
    "content": "Method: LuaSurface.entity_prototype_collides\nDescription: Whether the given entity prototype collides at the given position and direction.\n\nParameters:\n- direction (defines.direction)[Optional]: \n- position (MapPosition): The position to check.\n- prototype (EntityID): The entity prototype to check.\n- use_map_generation_bounding_box (boolean): If the map generation bounding box should be used instead of the collision bounding box.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "entity_prototype_collides"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.execute_lightning",
    "content": "Method: LuaSurface.execute_lightning\nDescription: Creates lightning. If other entities which can be lightning targets are nearby, the final position will be adjusted.\n\nParameters:\n- name (EntityID): \n- position (MapPosition): \n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "execute_lightning"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_closest_logistic_network_by_position",
    "content": "Method: LuaSurface.find_closest_logistic_network_by_position\nDescription: Find the logistic network with a cell closest to a given position.\n\nParameters:\n- force (ForceID): Force the logistic network should belong to.\n- position (MapPosition): \n\nReturns:\n- LuaLogisticNetwork: The found network or `nil` if no such network was found.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_closest_logistic_network_by_position"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_decoratives_filtered",
    "content": "Method: LuaSurface.find_decoratives_filtered\nDescription: Find decoratives of a given name in a given area.\n\nIf no filters are given, returns all decoratives in the search area. If multiple filters are specified, returns only decoratives matching every given filter. If no area and no position are given, the entire surface is searched.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_decoratives_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_decoratives_filtered",
    "content": "Parameters:\n- area (BoundingBox)[Optional]: \n- collision_mask ({'complex_type': 'union', 'options': ['CollisionLayerID', {'complex_type': 'array', 'value': 'CollisionLayerID'}, {'complex_type': 'dictionary', 'key': 'CollisionLayerID', 'value': {'complex_type': 'literal', 'value': True}}], 'full_format': False})[Optional]: \n- exclude_soft (boolean)[Optional]: Soft decoratives can be drawn over rails.\n- from_layer (string)[Optional]: \n- invert (boolean)[Optional]: If the filters should be inverted.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_decoratives_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_decoratives_filtered",
    "content": "- limit (uint)[Optional]: \n- name ({'complex_type': 'union', 'options': ['DecorativeID', {'complex_type': 'array', 'value': 'DecorativeID'}], 'full_format': False})[Optional]: \n- position (TilePosition)[Optional]: \n- to_layer (string)[Optional]:",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_decoratives_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_decoratives_filtered",
    "content": "Returns:\n- {'complex_type': 'array', 'value': 'DecorativeResult'}: \n\nExamples:\n```\ngame.surfaces[1].find_decoratives_filtered{area = {{-10, -10}, {10, 10}}, name = \"sand-decal\"} -- gets all sand-decals in the rectangle\ngame.surfaces[1].find_decoratives_filtered{area = {{-10, -10}, {10, 10}}, limit = 5}  -- gets the first 5 decoratives in the rectangle\n```\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_decoratives_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_enemy_units",
    "content": "Method: LuaSurface.find_enemy_units\nDescription: Find enemy units (entities with type \"unit\") of a given force within an area.\n\nThis is more efficient than [LuaSurface::find_entities](runtime:LuaSurface::find_entities).\n\nParameters:\n- center (MapPosition): Center of the search area\n- force (ForceID)[Optional]: Force to find enemies of. If not given, uses the player force.\n- radius (double): Radius of the circular search area\n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}:",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_enemy_units"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_enemy_units",
    "content": "Returns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}: \n\nExamples:\n```\n-- Find all units who would be interested to attack the player, within 100-tile area.\nlocal enemies = game.player.surface.find_enemy_units(game.player.position, 100)\n```\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_enemy_units"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_entities",
    "content": "Method: LuaSurface.find_entities\nDescription: Find entities in a given area.\n\nIf no area is given all entities on the surface are returned.\n\nParameters:\n- area (BoundingBox)[Optional]: \n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}: \n\nExamples:\n```\n-- Will evaluate to a list of all entities within given area.\ngame.surfaces[\"nauvis\"].find_entities({{-10, -10}, {10, 10}})\n```\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_entities"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_entities_filtered",
    "content": "Method: LuaSurface.find_entities_filtered\nDescription: Find all entities of the given type or name in the given area.\n\nIf no filters (`name`, `type`, `force`, etc.) are given, this returns all entities in the search area. If multiple filters are specified, only entities matching all given filters are returned.\n\n- If no `area` or `position` are given, the entire surface is searched.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_entities_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_entities_filtered",
    "content": "- If `position` is given, this returns the entities colliding with that position (i.e the given position is within the entity's collision box).\n\n- If `position` and `radius` are given, this returns the entities within the radius of the position. Looks for the center of entities.\n\n- If `area` is specified, this returns the entities colliding with that area.\n\nParameters:\n- filter (EntitySearchFilters): \n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}:",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_entities_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_entities_filtered",
    "content": "Examples:\n```\ngame.surfaces[1].find_entities_filtered{area = {{-10, -10}, {10, 10}}, type = \"resource\"} -- gets all resources in the rectangle\ngame.surfaces[1].find_entities_filtered{area = {{-10, -10}, {10, 10}}, name = \"iron-ore\"} -- gets all iron ores in the rectangle\ngame.surfaces[1].find_entities_filtered{area = {{-10, -10}, {10, 10}}, name = {\"iron-ore\", \"copper-ore\"}} -- gets all iron ore and copper ore in the rectangle",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_entities_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_entities_filtered",
    "content": "game.surfaces[1].find_entities_filtered{area = {{-10, -10}, {10, 10}}, force = \"player\"}  -- gets player owned entities in the rectangle\ngame.surfaces[1].find_entities_filtered{area = {{-10, -10}, {10, 10}}, limit = 5}  -- gets the first 5 entities in the rectangle\ngame.surfaces[1].find_entities_filtered{position = {0, 0}, radius = 10}  -- gets all entities within 10 tiles of the position [0,0].\n```",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_entities_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_entities_filtered",
    "content": "Format:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_entities_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_entity",
    "content": "Method: LuaSurface.find_entity\nDescription: Find an entity of the given name at the given position. This checks both the exact position and the bounding box of the entity.\n\nParameters:\n- entity (EntityWithQualityID): Name of the entity to look for.\n- position (MapPosition): Coordinates to look at.\n\nReturns:\n- LuaEntity: `nil` if no such entity is found.\n\nExamples:\n```\ngame.player.selected.surface.find_entity('filter-inserter', {0,0})\n```\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_logistic_network_by_position",
    "content": "Method: LuaSurface.find_logistic_network_by_position\nDescription: Find the logistic network that covers a given position.\n\nParameters:\n- force (ForceID): Force the logistic network should belong to.\n- position (MapPosition): \n\nReturns:\n- LuaLogisticNetwork: The found network or `nil` if no such network was found.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_logistic_network_by_position"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_logistic_networks_by_construction_area",
    "content": "Method: LuaSurface.find_logistic_networks_by_construction_area\nDescription: Finds all of the logistics networks whose construction area intersects with the given position.\n\nParameters:\n- force (ForceID): Force the logistic networks should belong to.\n- position (MapPosition): \n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaLogisticNetwork'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_logistic_networks_by_construction_area"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_nearest_enemy",
    "content": "Method: LuaSurface.find_nearest_enemy\nDescription: Find the enemy military target ([military entity](https://wiki.factorio.com/Military_units_and_structures)) closest to the given position.\n\nParameters:\n- force (ForceID)[Optional]: The force the result will be an enemy of. Uses the player force if not specified.\n- max_distance (double): Radius of the circular search area.\n- position (MapPosition): Center of the search area.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_nearest_enemy"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_nearest_enemy",
    "content": "Returns:\n- LuaEntity: The nearest enemy military target or `nil` if no enemy could be found within the given area.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_nearest_enemy"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_nearest_enemy_entity_with_owner",
    "content": "Method: LuaSurface.find_nearest_enemy_entity_with_owner\nDescription: Find the enemy entity-with-owner closest to the given position.\n\nParameters:\n- force (ForceID)[Optional]: The force the result will be an enemy of. Uses the player force if not specified.\n- max_distance (double): Radius of the circular search area.\n- position (MapPosition): Center of the search area.\n\nReturns:\n- LuaEntity: The nearest enemy entity-with-owner or `nil` if no enemy could be found within the given area.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_nearest_enemy_entity_with_owner"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_nearest_enemy_entity_with_owner",
    "content": "Format:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_nearest_enemy_entity_with_owner"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_non_colliding_position",
    "content": "Method: LuaSurface.find_non_colliding_position\nDescription: Find a non-colliding position within a given radius.\n\nSpecial care needs to be taken when using a radius of `0`. The game will not stop searching until it finds a suitable position, so it is important to make sure such a position exists. One particular case where it would not be able to find a solution is running it before any chunks have been generated.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_non_colliding_position"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_non_colliding_position",
    "content": "Parameters:\n- center (MapPosition): Center of the search area.\n- force_to_tile_center (boolean)[Optional]: Will only check tile centers. This can be useful when your intent is to place a building at the resulting position, as they must generally be placed at tile centers. Defaults to `false`.\n- name (EntityID): Prototype name of the entity to find a position for. (The bounding box for the collision checking is taken from this prototype.)",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_non_colliding_position"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_non_colliding_position",
    "content": "- precision (double): The step length from the given position as it searches, in tiles. Minimum value is `0.01`.\n- radius (double): Max distance from `center` to search in. A radius of `0` means an infinitely-large search area.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_non_colliding_position"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_non_colliding_position",
    "content": "Returns:\n- MapPosition: The non-colliding position. May be `nil` if no suitable position was found.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_non_colliding_position"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_non_colliding_position_in_box",
    "content": "Method: LuaSurface.find_non_colliding_position_in_box\nDescription: Find a non-colliding position within a given rectangle.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_non_colliding_position_in_box"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_non_colliding_position_in_box",
    "content": "Parameters:\n- force_to_tile_center (boolean)[Optional]: Will only check tile centers. This can be useful when your intent is to place a building at the resulting position, as they must generally be placed at tile centers. Defaults to `false`.\n- name (EntityID): Prototype name of the entity to find a position for. (The bounding box for the collision checking is taken from this prototype.)\n- precision (double): The step length from the given position as it searches, in tiles. Minimum value is 0.01.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_non_colliding_position_in_box"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_non_colliding_position_in_box",
    "content": "- search_space (BoundingBox): The rectangle to search inside.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_non_colliding_position_in_box"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_non_colliding_position_in_box",
    "content": "Returns:\n- MapPosition: The non-colliding position. May be `nil` if no suitable position was found.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_non_colliding_position_in_box"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_tiles_filtered",
    "content": "Method: LuaSurface.find_tiles_filtered\nDescription: Find all tiles of the given name in the given area.\n\nIf no filters are given, this returns all tiles in the search area.\n\nIf no `area` or `position` and `radius` is given, the entire surface is searched. If `position` and `radius` are given, only tiles within the radius of the position are included.\n\nParameters:\n- filter (TileSearchFilters): \n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaTile'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_tiles_filtered"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_units",
    "content": "Method: LuaSurface.find_units\nDescription: Find units (entities with type \"unit\") of a given force and force condition within a given area.\n\nThis is more efficient than [LuaSurface::find_entities](runtime:LuaSurface::find_entities).\n\nParameters:\n- area (BoundingBox): Box to find units within.\n- condition (ForceCondition): Only forces which meet the condition will be included in the search.\n- force (ForceID): Force performing the search.\n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}:",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_units"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.find_units",
    "content": "Returns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}: \n\nExamples:\n```\n-- Find friendly units to \"player\" force\nlocal friendly_units = game.player.surface.find_units({area = {{-10, -10},{10, 10}}, force = \"player\", condition = \"friend\")\n```\n```\n-- Find units of \"player\" force\nlocal units = game.player.surface.find_units({area = {{-10, -10},{10, 10}}, force = \"player\", condition = \"same\"})\n```\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "find_units"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.force_generate_chunk_requests",
    "content": "Method: LuaSurface.force_generate_chunk_requests\nDescription: Blocks and generates all chunks that have been requested using all available threads.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "force_generate_chunk_requests"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.get_chunks",
    "content": "Method: LuaSurface.get_chunks\nDescription: Get an iterator going over every chunk on this surface.\n\nReturns:\n- LuaChunkIterator: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "get_chunks"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.get_closest",
    "content": "Method: LuaSurface.get_closest\nDescription: Gets the closest entity in the list to this position.\n\nParameters:\n- entities ({'complex_type': 'array', 'value': 'LuaEntity'}): The Entities to check.\n- position (MapPosition): \n\nReturns:\n- LuaEntity: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "get_closest"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.get_connected_tiles",
    "content": "Method: LuaSurface.get_connected_tiles\nDescription: Gets all tiles of the given types that are connected horizontally or vertically to the given tile position including the given tile position.\n\nThis won't find tiles in non-generated chunks.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "get_connected_tiles"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.get_connected_tiles",
    "content": "This won't find tiles in non-generated chunks.\n\nParameters:\n- area (BoundingBox)[Optional]: The area to find connected tiles in. If provided the start position must be in this area.\n- include_diagonal (boolean)[Optional]: Include tiles that are connected diagonally.\n- position (TilePosition): The tile position to start at.\n- tiles ({'complex_type': 'array', 'value': 'TileID'}): The tiles to search for.\n\nReturns:\n- {'complex_type': 'array', 'value': 'TilePosition'}: The resulting set of tiles.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "get_connected_tiles"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.get_connected_tiles",
    "content": "Format:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "get_connected_tiles"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.get_double_hidden_tile",
    "content": "Method: LuaSurface.get_double_hidden_tile\nDescription: The double hidden tile name or `nil` if there isn't one for the given position.\n\nParameters:\n- position (TilePosition): The tile position.\n\nReturns:\n- string: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "get_double_hidden_tile"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.get_entities_with_force",
    "content": "Method: LuaSurface.get_entities_with_force\nDescription: Returns all the military targets (entities with force) on this chunk for the given force.\n\nParameters:\n- force (ForceID): Entities of this force will be returned.\n- position (ChunkPosition): The chunk's position.\n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "get_entities_with_force"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.get_hidden_tile",
    "content": "Method: LuaSurface.get_hidden_tile\nDescription: The hidden tile name.\n\nParameters:\n- position (TilePosition): The tile position.\n\nReturns:\n- string: `nil` if there isn't one for the given position.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "get_hidden_tile"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.get_map_exchange_string",
    "content": "Method: LuaSurface.get_map_exchange_string\nDescription: Gets the map exchange string for the current map generation settings of this surface.\n\nReturns:\n- string: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "get_map_exchange_string"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.get_pollution",
    "content": "Method: LuaSurface.get_pollution\nDescription: Get the pollution for a given position.\n\nPollution is stored per chunk, so this will return the same value for all positions in one chunk.\n\nParameters:\n- position (MapPosition): The position to poll the chunk's pollution\n\nReturns:\n- double: \n\nExamples:\n```\ngame.surfaces[1].get_pollution({1,2})\n```\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "get_pollution"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.get_property",
    "content": "Method: LuaSurface.get_property\nDescription: Gets the value of surface property on this surface.\n\nParameters:\n- property (SurfacePropertyID): Property to read.\n\nReturns:\n- double: Value of the property.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "get_property"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.get_random_chunk",
    "content": "Method: LuaSurface.get_random_chunk\nDescription: Gets a random generated chunk position or 0,0 if no chunks have been generated on this surface.\n\nReturns:\n- ChunkPosition: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "get_random_chunk"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.get_resource_counts",
    "content": "Method: LuaSurface.get_resource_counts\nDescription: Gets the resource amount of all resources on this surface\n\nReturns:\n- {'complex_type': 'dictionary', 'key': 'string', 'value': 'uint'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "get_resource_counts"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.get_script_area",
    "content": "Method: LuaSurface.get_script_area\nDescription: Gets the first script area by name or id.\n\nParameters:\n- key ({'complex_type': 'union', 'options': ['string', 'uint'], 'full_format': False})[Optional]: The name or id of the area to get.\n\nReturns:\n- ScriptArea: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "get_script_area"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.get_script_areas",
    "content": "Method: LuaSurface.get_script_areas\nDescription: Gets the script areas that match the given name or if no name is given all areas are returned.\n\nParameters:\n- name (string)[Optional]: \n\nReturns:\n- {'complex_type': 'array', 'value': 'ScriptArea'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "get_script_areas"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.get_script_position",
    "content": "Method: LuaSurface.get_script_position\nDescription: Gets the first script position by name or id.\n\nParameters:\n- key ({'complex_type': 'union', 'options': ['string', 'uint'], 'full_format': False})[Optional]: The name or id of the position to get.\n\nReturns:\n- ScriptPosition: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "get_script_position"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.get_script_positions",
    "content": "Method: LuaSurface.get_script_positions\nDescription: Gets the script positions that match the given name or if no name is given all positions are returned.\n\nParameters:\n- name (string)[Optional]: \n\nReturns:\n- {'complex_type': 'array', 'value': 'ScriptPosition'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "get_script_positions"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.get_starting_area_radius",
    "content": "Method: LuaSurface.get_starting_area_radius\nDescription: Gets the starting area radius of this surface.\n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "get_starting_area_radius"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.get_tile",
    "content": "Method: LuaSurface.get_tile\nDescription: Get the tile at a given position. An alternative call signature for this method is passing it a single [TilePosition](runtime:TilePosition).\n\nNon-integer values will result in them being rounded down.\n\nParameters:\n- x (int): \n- y (int): \n\nReturns:\n- LuaTile: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "get_tile"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.get_total_pollution",
    "content": "Method: LuaSurface.get_total_pollution\nDescription: Gets the total amount of pollution on the surface by iterating over all the chunks containing pollution.\n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "get_total_pollution"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.is_chunk_generated",
    "content": "Method: LuaSurface.is_chunk_generated\nDescription: Is a given chunk generated?\n\nParameters:\n- position (ChunkPosition): The chunk's position.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "is_chunk_generated"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.play_sound",
    "content": "Method: LuaSurface.play_sound\nDescription: Play a sound for every player on this surface.\n\nThe sound is not played if its location is not [charted](runtime:LuaForce::chart) for that player.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "play_sound"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.play_sound",
    "content": "Parameters:\n- override_sound_type (SoundType)[Optional]: The volume mixer to play the sound through. Defaults to the default mixer for the given sound type.\n- path (SoundPath): The sound to play.\n- position (MapPosition)[Optional]: Where the sound should be played. If not given, it's played at the current position of each player.\n- volume_modifier (double)[Optional]: The volume of the sound to play. Must be between 0 and 1 inclusive.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "play_sound"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.pollute",
    "content": "Method: LuaSurface.pollute\nDescription: Spawn pollution at the given position.\n\nParameters:\n- amount (double): How much pollution to add.\n- prototype (EntityID)[Optional]: The entity prototype to attribute the pollution change to in statistics. If not defined, the pollution change will not show up in statistics.\n- source (MapPosition): Where to spawn the pollution.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "pollute"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.print",
    "content": "Method: LuaSurface.print\nDescription: Print text to the chat console of all players on this surface.\n\nBy default, messages that are identical to a message sent in the last 60 ticks are not printed again.\n\nParameters:\n- message (LocalisedString): \n- print_settings (PrintSettings)[Optional]: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "print"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.regenerate_decorative",
    "content": "Method: LuaSurface.regenerate_decorative\nDescription: Regenerate autoplacement of some decoratives on this surface. This can be used to autoplace newly-added decoratives.\n\nAll specified decorative prototypes must be autoplacable. If nothing is given all decoratives are generated on all chunks.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "regenerate_decorative"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.regenerate_decorative",
    "content": "Parameters:\n- chunks ({'complex_type': 'array', 'value': 'ChunkPosition'})[Optional]: The chunk positions to regenerate the decoratives on. If not given all chunks are regenerated. Note chunks with status < entities are ignored.\n- decoratives ({'complex_type': 'union', 'options': ['string', {'complex_type': 'array', 'value': 'string'}], 'full_format': False})[Optional]: Prototype names of decorative or decoratives to autoplace. When `nil` all decoratives with an autoplace are used.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "regenerate_decorative"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.regenerate_decorative",
    "content": "Format:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "regenerate_decorative"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.regenerate_entity",
    "content": "Method: LuaSurface.regenerate_entity\nDescription: Regenerate autoplacement of some entities on this surface. This can be used to autoplace newly-added entities.\n\nAll specified entity prototypes must be autoplacable. If nothing is given all entities are generated on all chunks.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "regenerate_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.regenerate_entity",
    "content": "Parameters:\n- chunks ({'complex_type': 'array', 'value': 'ChunkPosition'})[Optional]: The chunk positions to regenerate the entities on. If not given all chunks are regenerated. Note chunks with status < entities are ignored.\n- entities ({'complex_type': 'union', 'options': ['string', {'complex_type': 'array', 'value': 'string'}], 'full_format': False})[Optional]: Prototype names of entity or entities to autoplace. When `nil` all entities with an autoplace are used.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "regenerate_entity"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.remove_script_area",
    "content": "Method: LuaSurface.remove_script_area\nDescription: Removes the given script area.\n\nParameters:\n- id (uint): \n\nReturns:\n- boolean: If the area was actually removed. False when it didn't exist.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "remove_script_area"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.remove_script_position",
    "content": "Method: LuaSurface.remove_script_position\nDescription: Removes the given script position.\n\nParameters:\n- id (uint): \n\nReturns:\n- boolean: If the position was actually removed. False when it didn't exist.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "remove_script_position"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.request_path",
    "content": "Method: LuaSurface.request_path\nDescription: Generates a path with the specified constraints (as an array of [PathfinderWaypoints](runtime:PathfinderWaypoint)) using the unit pathfinding algorithm. This path can be used to emulate pathing behavior by script for non-unit entities, such as vehicles. If you want to command actual units (such as biters or spitters) to move, use [LuaEntity::set_command](runtime:LuaEntity::set_command) instead.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "request_path"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.request_path",
    "content": "The resulting path is ultimately returned asynchronously via [on_script_path_request_finished](runtime:on_script_path_request_finished).",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "request_path"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.request_path",
    "content": "Parameters:\n- bounding_box (BoundingBox): The dimensions of the object that's supposed to travel the path.\n- can_open_gates (boolean)[Optional]: Whether the path request can open gates. Defaults to `false`.\n- collision_mask (CollisionMask): The collision mask the `bounding_box` collides with.\n- entity_to_ignore (LuaEntity)[Optional]: Makes the pathfinder ignore collisions with this entity if it is given.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "request_path"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.request_path",
    "content": "- force (ForceID): The force for which to generate the path, determining which gates can be opened for example.\n- goal (MapPosition): The position to find a path to.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "request_path"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.request_path",
    "content": "- goal (MapPosition): The position to find a path to.\n- max_attack_distance (double)[Optional]: Defines the maximum allowed distance between the last traversable path waypoint and an obstacle entity to be destroyed. Only used when finding a discontiguous path, i.e. when `max_gap_size` > 0. This field filters out paths that are blocked by obstacles that are outside the entity's attack range. Allowed values are `0` or greater. Defaults to `max_gap_size`.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "request_path"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.request_path",
    "content": "- max_gap_size (int)[Optional]: Defines the maximum allowed distance between path waypoints. 0 means that paths must be contiguous (as they are for biters). Values greater than 0 will produce paths with \"gaps\" that are suitable for spiders. Allowed values are from `0` to `31`. Defaults to `0`.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "request_path"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.request_path",
    "content": "- path_resolution_modifier (int)[Optional]: Defines how coarse the pathfinder's grid is, where smaller values mean a coarser grid. Defaults to `0`, which equals a resolution of `1x1` tiles, centered on tile centers. Values range from `-8` to `8` inclusive, where each integer increment doubles/halves the resolution. So, a resolution of `-8` equals a grid of `256x256` tiles, and a resolution of `8` equals `1/256` of a tile.\n- pathfind_flags (PathfinderFlags)[Optional]: Flags that affect pathfinder behavior.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "request_path"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.request_path",
    "content": "- radius (double)[Optional]: How close the pathfinder needs to get to its `goal` (in tiles). Defaults to `1`.\n- start (MapPosition): The position from which to start pathfinding.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "request_path"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.request_path",
    "content": "Returns:\n- uint: A unique handle to identify this call when [on_script_path_request_finished](runtime:on_script_path_request_finished) fires.\n\nRaises:\n- on_script_path_request_finished: \n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "request_path"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.request_to_generate_chunks",
    "content": "Method: LuaSurface.request_to_generate_chunks\nDescription: Request that the game's map generator generate chunks at the given position for the given radius on this surface. If the radius is `0`, then only the chunk at the given position is generated.\n\nParameters:\n- position (MapPosition): Where to generate the new chunks.\n- radius (uint)[Optional]: The chunk radius from `position` to generate new chunks in. Defaults to `0`.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "request_to_generate_chunks"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.set_chunk_generated_status",
    "content": "Method: LuaSurface.set_chunk_generated_status\nDescription: Set generated status of a chunk. Useful when copying chunks.\n\nParameters:\n- position (ChunkPosition): The chunk's position.\n- status (defines.chunk_generated_status): The chunk's new status.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "set_chunk_generated_status"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.set_double_hidden_tile",
    "content": "Method: LuaSurface.set_double_hidden_tile\nDescription: Set double hidden tile for the specified position. During normal gameplay, only [non-mineable](runtime:LuaTilePrototype::mineable_properties) tiles can become double hidden.\n\nDoes nothing if hidden tile at specified position does not exist.\n\nParameters:\n- position (TilePosition): The tile position.\n- tile (TileID)[Optional]: The new double hidden tile or `nil` to clear the double hidden tile.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "set_double_hidden_tile"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.set_hidden_tile",
    "content": "Method: LuaSurface.set_hidden_tile\nDescription: Set the hidden tile for the specified position. While during normal gameplay only [non-mineable](runtime:LuaTilePrototype::mineable_properties) or [foundation](runtime:LuaTilePrototype::is_foundation) tiles can become hidden, this method allows any kind of tile to be set as the hidden one.\n\nParameters:\n- position (TilePosition): The tile position.\n- tile (TileID)[Optional]: The new hidden tile or `nil` to clear the hidden tile.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "set_hidden_tile"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.set_hidden_tile",
    "content": "Format:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "set_hidden_tile"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.set_multi_command",
    "content": "Method: LuaSurface.set_multi_command\nDescription: Give a command to multiple units. This will automatically select suitable units for the task.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "set_multi_command"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.set_multi_command",
    "content": "Parameters:\n- command (Command): \n- force (ForceID)[Optional]: Force of the units this command is to be given to. If not specified, uses the enemy force.\n- unit_count (uint): Number of units to give the command to.\n- unit_search_distance (uint)[Optional]: Radius to search for units. The search area is centered on the destination of the command. If not specified uses default value of 150.\n\nReturns:\n- uint: Number of units actually sent. May be less than `count` if not enough units were available.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "set_multi_command"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.set_multi_command",
    "content": "Format:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "set_multi_command"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.set_property",
    "content": "Method: LuaSurface.set_property\nDescription: Sets the value of surface property on this surface.\n\nParameters:\n- property (SurfacePropertyID): Property to change.\n- value (double): The wanted value of the property.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "set_property"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.set_tiles",
    "content": "Method: LuaSurface.set_tiles\nDescription: Set tiles at specified locations. Can automatically correct the edges around modified tiles.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "set_tiles"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.set_tiles",
    "content": "Placing a [mineable](runtime:LuaTilePrototype::mineable_properties) tile on top of a non-mineable or [foundation](runtime:LuaTilePrototype::is_foundation) one will turn the latter into the [LuaTile::hidden_tile](runtime:LuaTile::hidden_tile) for that tile. Placing a mineable non-foundation tile on a mineable non-foundation one or a mineable foundation tile on a mineable foundation one will not modify the hidden tile. This restriction can however be circumvented by using",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "set_tiles"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.set_tiles",
    "content": "tile. This restriction can however be circumvented by using [LuaSurface::set_hidden_tile](runtime:LuaSurface::set_hidden_tile). Placing a non-foundation tile on top of a foundation one when there already exists a hidden tile will push hidden tile to [double hidden](runtime:LuaTile::double_hidden_tile), and foundation tile will turn into hidden. Placing a mineable foundation tile over a mineable non-foundation tile with hidden mineable foundation tile, the hidden tile will be replaced by previously double",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "set_tiles"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.set_tiles",
    "content": "tile, the hidden tile will be replaced by previously double hidden tile and double hidden tile will be erased. Placing a non-mineable tile will erase hidden and double hidden tiles.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "set_tiles"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.set_tiles",
    "content": "It is recommended to call this method once for all the tiles you want to change rather than calling it individually for every tile. As the tile correction is used after every step, calling it one by one could cause the tile correction logic to redo some of the changes. Also, many small API calls are generally more performance intensive than one big one.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "set_tiles"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.set_tiles",
    "content": "Parameters:\n- correct_tiles (boolean)[Optional]: If `false`, the correction logic is not applied to the changed tiles. Defaults to `true`.\n- player (PlayerIdentification)[Optional]: The player whose undo queue to add these actions to.\n- raise_event (boolean)[Optional]: Defaults to `false`.\n- remove_colliding_decoratives (boolean)[Optional]: Defaults to `true`.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "set_tiles"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.set_tiles",
    "content": "- remove_colliding_entities ({'complex_type': 'union', 'options': ['boolean', {'complex_type': 'literal', 'value': 'abort_on_collision'}], 'full_format': False})[Optional]: Defaults to `true`.\n- tiles ({'complex_type': 'array', 'value': 'Tile'}): \n- undo_index (uint)[Optional]: The index of the undo item to add this action to. An index of `0` creates a new undo item for it. Defaults to putting it into the appropriate undo item automatically if not specified.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "set_tiles"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.set_tiles",
    "content": "Raises:\n- script_raised_set_tiles: Raised if the `raise_event` flag was set.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "set_tiles"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.spill_item_stack",
    "content": "Method: LuaSurface.spill_item_stack\nDescription: Spill items on the ground centered at a given location.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "spill_item_stack"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.spill_item_stack",
    "content": "Parameters:\n- allow_belts (boolean)[Optional]: Whether items can be spilled onto belts. Defaults to `true`.\n- enable_looted (boolean)[Optional]: When true, each created item will be flagged with the [LuaEntity::to_be_looted](runtime:LuaEntity::to_be_looted) flag. Defaults to `false`.\n- force (ForceID)[Optional]: When provided (and not `nil`) the items will be marked for deconstruction by this force.\n- max_radius (double)[Optional]: Max radius from the specified `position` to spill items.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "spill_item_stack"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.spill_item_stack",
    "content": "- position (MapPosition): Center of the spillage\n- stack (ItemStackIdentification): Stack of items to spill\n- use_start_position_on_failure (boolean)[Optional]: Allow spilling items at `position` if no non-colliding position is found. Note: Setting to false might cause some items not to be spilled. Defaults to `true`.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "spill_item_stack"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.spill_item_stack",
    "content": "Returns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}: The created item-on-ground entities.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "spill_item_stack"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.upgrade_area",
    "content": "Method: LuaSurface.upgrade_area\nDescription: Place an upgrade request.\n\nParameters:\n- area (BoundingBox): The area to mark for upgrade.\n- force (ForceID): The force whose bots should perform the upgrade.\n- item (LuaItemStack): The upgrade item to use.\n- player (PlayerIdentification)[Optional]: The player to set the last_user to if any.\n- skip_fog_of_war (boolean)[Optional]: If chunks covered by fog-of-war are skipped.",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "upgrade_area"
    }
  },
  {
    "type": "method",
    "name": "LuaSurface.upgrade_area",
    "content": "Raises:\n- on_marked_for_upgrade: Raised for every entity that has been successfully marked for upgrade.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaSurface",
      "method_name": "upgrade_area"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.always_day",
    "content": "Attribute: always_day \nRead_type: boolean\nWrite_type: boolean\nDescription: When set to true, the sun will always shine.\n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "always_day"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.brightness_visual_weights",
    "content": "Attribute: brightness_visual_weights \nRead_type: ColorModifier\nWrite_type: ColorModifier\nDescription: Defines how surface daytime brightness influences each color channel of the current color lookup table (LUT).\n\nThe LUT is multiplied by `((1 - weight) + brightness * weight)` and result is clamped to range `[0, 1]`.",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "brightness_visual_weights"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.brightness_visual_weights",
    "content": "Default is `{0, 0, 0}`, which means no influence.\nExamples: [\"```\\n-- Makes night on the surface pitch black, LuaSurface::min_brightness is set to default value 0.15.\\ngame.surfaces[1].brightness_visual_weights = { 1 / 0.85, 1 / 0.85, 1 / 0.85 }\\n```\"]",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "brightness_visual_weights"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.darkness",
    "content": "Attribute: darkness \nRead_type: float\n\nDescription: Amount of darkness at the current time, as a number in range `[0, 1]`.\n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "darkness"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.dawn",
    "content": "Attribute: dawn \nRead_type: double\nWrite_type: double\nDescription: The daytime when dawn starts.\n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "dawn"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.daytime",
    "content": "Attribute: daytime \nRead_type: double\nWrite_type: double\nDescription: Current time of day, as a number in range `[0, 1)`.\n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "daytime"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.deletable",
    "content": "Attribute: deletable \nRead_type: boolean\n\nDescription: If this surface can be deleted.\n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "deletable"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.dusk",
    "content": "Attribute: dusk \nRead_type: double\nWrite_type: double\nDescription: The daytime when dusk starts.\n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "dusk"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.evening",
    "content": "Attribute: evening \nRead_type: double\nWrite_type: double\nDescription: The daytime when evening starts.\n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "evening"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.freeze_daytime",
    "content": "Attribute: freeze_daytime \nRead_type: boolean\nWrite_type: boolean\nDescription: True if daytime is currently frozen.\n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "freeze_daytime"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.generate_with_lab_tiles",
    "content": "Attribute: generate_with_lab_tiles \nRead_type: boolean\nWrite_type: boolean\nDescription: When set to true, new chunks will be generated with lab tiles, instead of using the surface's map generation settings.\n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "generate_with_lab_tiles"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.global_effect",
    "content": "Attribute: global_effect [Optional]\nRead_type: ModuleEffects\nWrite_type: ModuleEffects\nDescription: Surface-wide effects applied to entities with effect receivers. May be `nil` if surface is not using surface-wide effect source.\n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "global_effect"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.has_global_electric_network",
    "content": "Attribute: has_global_electric_network \nRead_type: boolean\n\nDescription: Whether this surface currently has a global electric network.\n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "has_global_electric_network"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.ignore_surface_conditions",
    "content": "Attribute: ignore_surface_conditions \nRead_type: boolean\nWrite_type: boolean\nDescription: If surface condition checks should not be performed on this surface.\n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "ignore_surface_conditions"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.index",
    "content": "Attribute: index \nRead_type: uint\n\nDescription: This surface's index in [LuaGameScript::surfaces](runtime:LuaGameScript::surfaces) (unique ID). It is assigned when a surface is created, and remains so until it is [deleted](runtime:on_surface_deleted). Indexes of deleted surfaces can be reused.",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "index"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.localised_name",
    "content": "Attribute: localised_name [Optional]\nRead_type: LocalisedString\nWrite_type: LocalisedString\nDescription: Localised name of this surface. When set, will replace the internal surface name in places where a player sees surface name.\n\nValue may be ignored if a surface has a SpacePlatform or Planet object attached to it, which take the precedence.",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "localised_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.map_gen_settings",
    "content": "Attribute: map_gen_settings \nRead_type: MapGenSettings\nWrite_type: MapGenSettings\nDescription: The generation settings for this surface. These can be modified after surface generation, but note that this will not retroactively update the surface. To manually regenerate it, [LuaSurface::regenerate_entity](runtime:LuaSurface::regenerate_entity), [LuaSurface::regenerate_decorative](runtime:LuaSurface::regenerate_decorative), and [LuaSurface::delete_chunk](runtime:LuaSurface::delete_chunk) can be used.",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "map_gen_settings"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.min_brightness",
    "content": "Attribute: min_brightness \nRead_type: double\nWrite_type: double\nDescription: The minimal brightness during the night. Defaults to `0.15`. This has an effect on both rendering and game mechanics such as biter spawns and solar power.\n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "min_brightness"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.morning",
    "content": "Attribute: morning \nRead_type: double\nWrite_type: double\nDescription: The daytime when morning starts.\n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "morning"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.name",
    "content": "Attribute: name \nRead_type: string\nWrite_type: string\nDescription: The name of this surface. Names are unique among surfaces.\n\nThe default surface can't be renamed.\n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.no_enemies_mode",
    "content": "Attribute: no_enemies_mode \nRead_type: boolean\nWrite_type: boolean\nDescription: Is no-enemies mode enabled on this surface?\n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "no_enemies_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.peaceful_mode",
    "content": "Attribute: peaceful_mode \nRead_type: boolean\nWrite_type: boolean\nDescription: Is peaceful mode enabled on this surface?\n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "peaceful_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.planet",
    "content": "Attribute: planet [Optional]\nRead_type: LuaPlanet\n\nDescription: The planet associated with this surface, if there is one.\n\nUse [LuaPlanet::associate_surface](runtime:LuaPlanet::associate_surface) to create a new association with a planet.\n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "planet"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.platform",
    "content": "Attribute: platform [Optional]\nRead_type: LuaSpacePlatform\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "platform"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.pollutant_type",
    "content": "Attribute: pollutant_type [Optional]\nRead_type: LuaAirbornePollutantPrototype\n\nDescription: The type of pollutant enabled on the surface, or `nil` if no pollutant is enabled.\n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "pollutant_type"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.show_clouds",
    "content": "Attribute: show_clouds \nRead_type: boolean\nWrite_type: boolean\nDescription: If clouds are shown on this surface. If false, clouds are never shown. If true the player must also have clouds enabled in graphics settings for them to be shown.\n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "show_clouds"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.solar_power_multiplier",
    "content": "Attribute: solar_power_multiplier \nRead_type: double\nWrite_type: double\nDescription: The multiplier of solar power on this surface. Cannot be less than 0.\n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "solar_power_multiplier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.ticks_per_day",
    "content": "Attribute: ticks_per_day \nRead_type: uint\nWrite_type: uint\nDescription: The number of ticks per day for this surface.\n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "ticks_per_day"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "valid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.wind_orientation",
    "content": "Attribute: wind_orientation \nRead_type: RealOrientation\nWrite_type: RealOrientation\nDescription: Current wind direction.\n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "wind_orientation"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.wind_orientation_change",
    "content": "Attribute: wind_orientation_change \nRead_type: double\nWrite_type: double\nDescription: Change in wind orientation per tick.\n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "wind_orientation_change"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurface.wind_speed",
    "content": "Attribute: wind_speed \nRead_type: double\nWrite_type: double\nDescription: Current wind speed in tiles per tick.\n",
    "metadata": {
      "class_name": "LuaSurface",
      "attribute_name": "wind_speed"
    }
  },
  {
    "type": "class",
    "name": "LuaSurfacePropertyPrototype",
    "content": "Class: LuaSurfacePropertyPrototype\nDescription: Prototype of a surface property.",
    "metadata": {
      "class_name": "LuaSurfacePropertyPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurfacePropertyPrototype.default_value",
    "content": "Attribute: default_value \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaSurfacePropertyPrototype",
      "attribute_name": "default_value"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurfacePropertyPrototype.is_time",
    "content": "Attribute: is_time \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaSurfacePropertyPrototype",
      "attribute_name": "is_time"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurfacePropertyPrototype.localised_unit_key",
    "content": "Attribute: localised_unit_key \nRead_type: string\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaSurfacePropertyPrototype",
      "attribute_name": "localised_unit_key"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurfacePropertyPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaSurfacePropertyPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurfacePropertyPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaSurfacePropertyPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaSurfacePrototype",
    "content": "Class: LuaSurfacePrototype\nDescription: Prototype of a surface.",
    "metadata": {
      "class_name": "LuaSurfacePrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurfacePrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaSurfacePrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurfacePrototype.surface_properties",
    "content": "Attribute: surface_properties \nRead_type: {'complex_type': 'dictionary', 'key': 'SurfacePropertyID', 'value': 'double'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaSurfacePrototype",
      "attribute_name": "surface_properties"
    }
  },
  {
    "type": "attribute",
    "name": "LuaSurfacePrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaSurfacePrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaTechnology",
    "content": "Class: LuaTechnology\nDescription: One research item.",
    "metadata": {
      "class_name": "LuaTechnology",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaTechnology.reload",
    "content": "Method: LuaTechnology.reload\nDescription: Reload this technology from its prototype.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTechnology",
      "method_name": "reload"
    }
  },
  {
    "type": "method",
    "name": "LuaTechnology.research_recursive",
    "content": "Method: LuaTechnology.research_recursive\nDescription: Research this technology and all of its prerequisites recursively.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTechnology",
      "method_name": "research_recursive"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnology.enabled",
    "content": "Attribute: enabled \nRead_type: boolean\nWrite_type: boolean\nDescription: Can this technology be researched?\n",
    "metadata": {
      "class_name": "LuaTechnology",
      "attribute_name": "enabled"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnology.force",
    "content": "Attribute: force \nRead_type: LuaForce\n\nDescription: The force this technology belongs to.\n",
    "metadata": {
      "class_name": "LuaTechnology",
      "attribute_name": "force"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnology.level",
    "content": "Attribute: level \nRead_type: uint\nWrite_type: uint\nDescription: The current level of this technology. For level-based technology writing to this is the same as researching the technology to the previous level. Writing the level will set [LuaTechnology::enabled](runtime:LuaTechnology::enabled) to `true`.",
    "metadata": {
      "class_name": "LuaTechnology",
      "attribute_name": "level"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnology.localised_description",
    "content": "Attribute: localised_description \nRead_type: LocalisedString\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTechnology",
      "attribute_name": "localised_description"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnology.localised_name",
    "content": "Attribute: localised_name \nRead_type: LocalisedString\n\nDescription: Localised name of this technology.\n",
    "metadata": {
      "class_name": "LuaTechnology",
      "attribute_name": "localised_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnology.name",
    "content": "Attribute: name \nRead_type: string\n\nDescription: Name of this technology.\n",
    "metadata": {
      "class_name": "LuaTechnology",
      "attribute_name": "name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnology.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaTechnology",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnology.order",
    "content": "Attribute: order \nRead_type: string\n\nDescription: The string used to alphabetically sort these prototypes. It is a simple string that has no additional semantic meaning.\n",
    "metadata": {
      "class_name": "LuaTechnology",
      "attribute_name": "order"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnology.prerequisites",
    "content": "Attribute: prerequisites \nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'LuaTechnology'}\n\nDescription: Prerequisites of this technology. The result maps technology name to the [LuaTechnology](runtime:LuaTechnology) object.\n",
    "metadata": {
      "class_name": "LuaTechnology",
      "attribute_name": "prerequisites"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnology.prototype",
    "content": "Attribute: prototype \nRead_type: LuaTechnologyPrototype\n\nDescription: The prototype of this technology.\n",
    "metadata": {
      "class_name": "LuaTechnology",
      "attribute_name": "prototype"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnology.research_unit_count",
    "content": "Attribute: research_unit_count \nRead_type: uint\n\nDescription: The number of research units required for this technology.\n\nThis is multiplied by the current research cost multiplier, unless [LuaTechnologyPrototype::ignore_tech_cost_multiplier](runtime:LuaTechnologyPrototype::ignore_tech_cost_multiplier) is `true`.",
    "metadata": {
      "class_name": "LuaTechnology",
      "attribute_name": "research_unit_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnology.research_unit_count_formula",
    "content": "Attribute: research_unit_count_formula [Optional]\nRead_type: MathExpression\n\nDescription: The count formula, if this research has any. See [TechnologyUnit::count_formula](prototype:TechnologyUnit::count_formula) for details.\n",
    "metadata": {
      "class_name": "LuaTechnology",
      "attribute_name": "research_unit_count_formula"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnology.research_unit_energy",
    "content": "Attribute: research_unit_energy \nRead_type: double\n\nDescription: Amount of energy required to finish a unit of research.\n",
    "metadata": {
      "class_name": "LuaTechnology",
      "attribute_name": "research_unit_energy"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnology.research_unit_ingredients",
    "content": "Attribute: research_unit_ingredients \nRead_type: {'complex_type': 'array', 'value': 'Ingredient'}\n\nDescription: The types of ingredients that labs will require to research this technology.\n",
    "metadata": {
      "class_name": "LuaTechnology",
      "attribute_name": "research_unit_ingredients"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnology.researched",
    "content": "Attribute: researched \nRead_type: boolean\nWrite_type: boolean\nDescription: Has this technology been researched? Switching from `false` to `true` will trigger the technology advancement perks; switching from `true` to `false` will reverse them.\n",
    "metadata": {
      "class_name": "LuaTechnology",
      "attribute_name": "researched"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnology.saved_progress",
    "content": "Attribute: saved_progress \nRead_type: double\nWrite_type: double\nDescription: Saved technology progress fraction as a value in range `[0, 1)`. 0 means there is no saved progress.\n",
    "metadata": {
      "class_name": "LuaTechnology",
      "attribute_name": "saved_progress"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnology.successors",
    "content": "Attribute: successors \nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'LuaTechnology'}\n\nDescription: Successors of this technology, i.e. technologies which have this technology as a prerequisite.\n",
    "metadata": {
      "class_name": "LuaTechnology",
      "attribute_name": "successors"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnology.upgrade",
    "content": "Attribute: upgrade \nRead_type: boolean\n\nDescription: Is this an upgrade-type research?\n",
    "metadata": {
      "class_name": "LuaTechnology",
      "attribute_name": "upgrade"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnology.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaTechnology",
      "attribute_name": "valid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnology.visible_when_disabled",
    "content": "Attribute: visible_when_disabled \nRead_type: boolean\nWrite_type: boolean\nDescription: If this technology will be visible in the research GUI even though it is disabled.\n",
    "metadata": {
      "class_name": "LuaTechnology",
      "attribute_name": "visible_when_disabled"
    }
  },
  {
    "type": "class",
    "name": "LuaTechnologyPrototype",
    "content": "Class: LuaTechnologyPrototype\nDescription: A Technology prototype.",
    "metadata": {
      "class_name": "LuaTechnologyPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnologyPrototype.allows_productivity",
    "content": "Attribute: allows_productivity \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTechnologyPrototype",
      "attribute_name": "allows_productivity"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnologyPrototype.effects",
    "content": "Attribute: effects \nRead_type: {'complex_type': 'array', 'value': 'TechnologyModifier'}\n\nDescription: Effects applied when this technology is researched.\n",
    "metadata": {
      "class_name": "LuaTechnologyPrototype",
      "attribute_name": "effects"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnologyPrototype.enabled",
    "content": "Attribute: enabled \nRead_type: boolean\n\nDescription: If this technology prototype is enabled by default (enabled at the beginning of a game).\n",
    "metadata": {
      "class_name": "LuaTechnologyPrototype",
      "attribute_name": "enabled"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnologyPrototype.essential",
    "content": "Attribute: essential \nRead_type: boolean\n\nDescription: If this technology prototype is essential, meaning it is shown in the condensed technology graph.\n",
    "metadata": {
      "class_name": "LuaTechnologyPrototype",
      "attribute_name": "essential"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnologyPrototype.ignore_tech_cost_multiplier",
    "content": "Attribute: ignore_tech_cost_multiplier \nRead_type: boolean\n\nDescription: If this technology ignores the technology cost multiplier setting.\n\n[LuaTechnologyPrototype::research_unit_count](runtime:LuaTechnologyPrototype::research_unit_count) will already take this setting into account.",
    "metadata": {
      "class_name": "LuaTechnologyPrototype",
      "attribute_name": "ignore_tech_cost_multiplier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnologyPrototype.level",
    "content": "Attribute: level \nRead_type: uint\n\nDescription: The level of this research.\n",
    "metadata": {
      "class_name": "LuaTechnologyPrototype",
      "attribute_name": "level"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnologyPrototype.max_level",
    "content": "Attribute: max_level \nRead_type: uint\n\nDescription: The max level of this research.\n",
    "metadata": {
      "class_name": "LuaTechnologyPrototype",
      "attribute_name": "max_level"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnologyPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaTechnologyPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnologyPrototype.prerequisites",
    "content": "Attribute: prerequisites \nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'LuaTechnologyPrototype'}\n\nDescription: Prerequisites of this technology. The result maps technology name to the [LuaTechnologyPrototype](runtime:LuaTechnologyPrototype) object.",
    "metadata": {
      "class_name": "LuaTechnologyPrototype",
      "attribute_name": "prerequisites"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnologyPrototype.research_trigger",
    "content": "Attribute: research_trigger [Optional]\nRead_type: ResearchTrigger\n\nDescription: The trigger that will research this technology if any.\n",
    "metadata": {
      "class_name": "LuaTechnologyPrototype",
      "attribute_name": "research_trigger"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnologyPrototype.research_unit_count",
    "content": "Attribute: research_unit_count \nRead_type: uint\n\nDescription: The number of research units required for this technology.\n\nThis is multiplied by the current research cost multiplier, unless [LuaTechnologyPrototype::ignore_tech_cost_multiplier](runtime:LuaTechnologyPrototype::ignore_tech_cost_multiplier) is `true`.",
    "metadata": {
      "class_name": "LuaTechnologyPrototype",
      "attribute_name": "research_unit_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnologyPrototype.research_unit_count_formula",
    "content": "Attribute: research_unit_count_formula [Optional]\nRead_type: MathExpression\n\nDescription: The count formula, if this research has any. See [TechnologyUnit::count_formula](prototype:TechnologyUnit::count_formula) for details.\n",
    "metadata": {
      "class_name": "LuaTechnologyPrototype",
      "attribute_name": "research_unit_count_formula"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnologyPrototype.research_unit_energy",
    "content": "Attribute: research_unit_energy \nRead_type: double\n\nDescription: Amount of energy required to finish a unit of research.\n",
    "metadata": {
      "class_name": "LuaTechnologyPrototype",
      "attribute_name": "research_unit_energy"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnologyPrototype.research_unit_ingredients",
    "content": "Attribute: research_unit_ingredients \nRead_type: {'complex_type': 'array', 'value': 'ResearchIngredient'}\n\nDescription: The types of ingredients that labs will require to research this technology.\n",
    "metadata": {
      "class_name": "LuaTechnologyPrototype",
      "attribute_name": "research_unit_ingredients"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnologyPrototype.successors",
    "content": "Attribute: successors \nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'LuaTechnologyPrototype'}\n\nDescription: Successors of this technology, i.e. technologies which have this technology as a prerequisite.\n",
    "metadata": {
      "class_name": "LuaTechnologyPrototype",
      "attribute_name": "successors"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnologyPrototype.upgrade",
    "content": "Attribute: upgrade \nRead_type: boolean\n\nDescription: If the is technology prototype is an upgrade to some other technology.\n",
    "metadata": {
      "class_name": "LuaTechnologyPrototype",
      "attribute_name": "upgrade"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnologyPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaTechnologyPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTechnologyPrototype.visible_when_disabled",
    "content": "Attribute: visible_when_disabled \nRead_type: boolean\n\nDescription: If this technology will be visible in the research GUI even though it is disabled.\n",
    "metadata": {
      "class_name": "LuaTechnologyPrototype",
      "attribute_name": "visible_when_disabled"
    }
  },
  {
    "type": "class",
    "name": "LuaTile",
    "content": "Class: LuaTile\nDescription: A single \"square\" on the map.",
    "metadata": {
      "class_name": "LuaTile",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaTile.cancel_deconstruction",
    "content": "Method: LuaTile.cancel_deconstruction\nDescription: Cancels deconstruction if it is scheduled, does nothing otherwise.\n\nParameters:\n- force (ForceID): The force who did the deconstruction order.\n- player (PlayerIdentification)[Optional]: The player to set the last_user to if any.\n\nRaises:\n- on_cancelled_deconstruction: Raised if the tile's deconstruction was successfully cancelled.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTile",
      "method_name": "cancel_deconstruction"
    }
  },
  {
    "type": "method",
    "name": "LuaTile.collides_with",
    "content": "Method: LuaTile.collides_with\nDescription: What type of things can collide with this tile?\n\nParameters:\n- layer (CollisionLayerID): \n\nReturns:\n- boolean: \n\nExamples:\n```\n-- Check if the character would collide with a tile\ngame.player.print(tostring(game.player.surface.get_tile(1, 1).collides_with(\"player\")))\n```\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTile",
      "method_name": "collides_with"
    }
  },
  {
    "type": "method",
    "name": "LuaTile.get_tile_ghosts",
    "content": "Method: LuaTile.get_tile_ghosts\nDescription: Gets all tile ghosts on this tile.\n\nParameters:\n- force (ForceID)[Optional]: Get tile ghosts of this force.\n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}: The tile ghosts.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTile",
      "method_name": "get_tile_ghosts"
    }
  },
  {
    "type": "method",
    "name": "LuaTile.has_tile_ghost",
    "content": "Method: LuaTile.has_tile_ghost\nDescription: Does this tile have any tile ghosts on it.\n\nParameters:\n- force (ForceID)[Optional]: Check for tile ghosts of this force.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTile",
      "method_name": "has_tile_ghost"
    }
  },
  {
    "type": "method",
    "name": "LuaTile.order_deconstruction",
    "content": "Method: LuaTile.order_deconstruction\nDescription: Orders deconstruction of this tile by the given force.\n\nParameters:\n- force (ForceID): The force whose robots are supposed to do the deconstruction.\n- player (PlayerIdentification)[Optional]: The player to set the last_user to if any.\n\nReturns:\n- LuaEntity: The deconstructible tile proxy created, if any.\n\nRaises:\n- on_marked_for_deconstruction: Raised if the tile was successfully marked for deconstruction.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTile",
      "method_name": "order_deconstruction"
    }
  },
  {
    "type": "method",
    "name": "LuaTile.to_be_deconstructed",
    "content": "Method: LuaTile.to_be_deconstructed\nDescription: Is this tile marked for deconstruction?\n\nParameters:\n- force (ForceID)[Optional]: The force whose robots are supposed to do the deconstruction. If not given, checks if to be deconstructed by any force.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTile",
      "method_name": "to_be_deconstructed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTile.double_hidden_tile",
    "content": "Attribute: double_hidden_tile [Optional]\nRead_type: string\n\nDescription: The name of the [LuaTilePrototype](runtime:LuaTilePrototype) double hidden under this tile or `nil` if there is no double hidden tile.\n\nDuring normal gameplay, only [non-mineable](runtime:LuaTilePrototype::mineable_properties) tiles can become double hidden. This can however be circumvented with [LuaSurface::set_double_hidden_tile](runtime:LuaSurface::set_double_hidden_tile).",
    "metadata": {
      "class_name": "LuaTile",
      "attribute_name": "double_hidden_tile"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTile.hidden_tile",
    "content": "Attribute: hidden_tile [Optional]\nRead_type: string\n\nDescription: The name of the [LuaTilePrototype](runtime:LuaTilePrototype) hidden under this tile, if any.\n\nDuring normal gameplay, only [non-mineable](runtime:LuaTilePrototype::mineable_properties) or [foundation](runtime:LuaTilePrototype::is_foundation) tiles can become hidden. This can however be circumvented with [LuaSurface::set_hidden_tile](runtime:LuaSurface::set_hidden_tile).",
    "metadata": {
      "class_name": "LuaTile",
      "attribute_name": "hidden_tile"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTile.name",
    "content": "Attribute: name \nRead_type: string\n\nDescription: Prototype name of this tile. E.g. `\"sand-3\"` or `\"grass-2\"`.\n",
    "metadata": {
      "class_name": "LuaTile",
      "attribute_name": "name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTile.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaTile",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTile.position",
    "content": "Attribute: position \nRead_type: TilePosition\n\nDescription: The position this tile references.\n",
    "metadata": {
      "class_name": "LuaTile",
      "attribute_name": "position"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTile.prototype",
    "content": "Attribute: prototype \nRead_type: LuaTilePrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTile",
      "attribute_name": "prototype"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTile.surface",
    "content": "Attribute: surface \nRead_type: LuaSurface\n\nDescription: The surface this tile is on.\n",
    "metadata": {
      "class_name": "LuaTile",
      "attribute_name": "surface"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTile.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaTile",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaTilePrototype",
    "content": "Class: LuaTilePrototype\nDescription: Prototype of a tile.",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.absorptions_per_second",
    "content": "Attribute: absorptions_per_second \nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'double'}\n\nDescription: A table of pollution emissions per second this tile will absorb, indexed by the name of each absorbed pollution type.\n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "absorptions_per_second"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.allowed_neighbors",
    "content": "Attribute: allowed_neighbors \nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'LuaTilePrototype'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "allowed_neighbors"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.allows_being_covered",
    "content": "Attribute: allows_being_covered \nRead_type: boolean\n\nDescription: True if this tile can be [hidden](runtime:LuaTile::hidden_tile) or replaced by another tile through player actions.\n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "allows_being_covered"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.ambient_sounds_group",
    "content": "Attribute: ambient_sounds_group [Optional]\nRead_type: LuaTilePrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "ambient_sounds_group"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.automatic_neighbors",
    "content": "Attribute: automatic_neighbors \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "automatic_neighbors"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.autoplace_specification",
    "content": "Attribute: autoplace_specification [Optional]\nRead_type: AutoplaceSpecification\n\nDescription: Autoplace specification for this prototype, if any.\n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "autoplace_specification"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.bound_decoratives",
    "content": "Attribute: bound_decoratives [Optional]\nRead_type: {'complex_type': 'array', 'value': 'LuaDecorativePrototype'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "bound_decoratives"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.can_be_part_of_blueprint",
    "content": "Attribute: can_be_part_of_blueprint \nRead_type: boolean\n\nDescription: False if this tile is not allowed in blueprints regardless of the ability to build it.\n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "can_be_part_of_blueprint"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.check_collision_with_entities",
    "content": "Attribute: check_collision_with_entities \nRead_type: boolean\n\nDescription: True if building this tile should check for colliding entities above and prevent building if such are found. Also during mining tiles above this tile checks for entities colliding with this tile and prevents mining if such are found.",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "check_collision_with_entities"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.collision_mask",
    "content": "Attribute: collision_mask \nRead_type: CollisionMask\n\nDescription: The collision mask this tile uses\n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "collision_mask"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.decorative_removal_probability",
    "content": "Attribute: decorative_removal_probability \nRead_type: float\n\nDescription: The probability that decorative entities will be removed from on top of this tile when this tile is generated.\n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "decorative_removal_probability"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.default_cover_tile",
    "content": "Attribute: default_cover_tile [Optional]\nRead_type: LuaTilePrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "default_cover_tile"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.default_destroyed_dropped_item_trigger",
    "content": "Attribute: default_destroyed_dropped_item_trigger [Optional]\nRead_type: {'complex_type': 'array', 'value': 'TriggerItem'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "default_destroyed_dropped_item_trigger"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.destroys_dropped_items",
    "content": "Attribute: destroys_dropped_items [Optional]\nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "destroys_dropped_items"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.fluid",
    "content": "Attribute: fluid [Optional]\nRead_type: LuaFluidPrototype\n\nDescription: The fluid offshore pump produces on this tile, if any.\n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "fluid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.frozen_variant",
    "content": "Attribute: frozen_variant [Optional]\nRead_type: LuaTilePrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "frozen_variant"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.is_foundation",
    "content": "Attribute: is_foundation \nRead_type: boolean\n\nDescription: True if this tile can be used as a foundation for other tiles, false otherwise. Foundation tiles can be [hidden](runtime:LuaTile::hidden_tile).\n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "is_foundation"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.items_to_place_this",
    "content": "Attribute: items_to_place_this [Optional]\nRead_type: {'complex_type': 'array', 'value': 'ItemStackDefinition'}\n\nDescription: Items that when placed will produce this tile, if any. Construction bots will choose the first item in the list to build this tile.",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "items_to_place_this"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.layer",
    "content": "Attribute: layer \nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "layer"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.map_color",
    "content": "Attribute: map_color \nRead_type: Color\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "map_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.max_health",
    "content": "Attribute: max_health [Optional]\nRead_type: float\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "max_health"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.mineable_properties",
    "content": "Attribute: mineable_properties",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "mineable_properties"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.mineable_properties",
    "content": "Read_type: {'complex_type': 'table', 'parameters': [{'name': 'minable', 'order': 0, 'description': 'Is this tile mineable at all?', 'type': 'boolean', 'optional': False}, {'name': 'mining_particle', 'order': 2, 'description': 'Prototype name of the particle produced when mining this tile. Will only be present if this tile produces any particle during mining.', 'type': 'string', 'optional': True}, {'name': 'mining_time', 'order': 1, 'description': 'Energy required to mine a tile.', 'type': 'double',",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "mineable_properties"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.mineable_properties",
    "content": "'Energy required to mine a tile.', 'type': 'double', 'optional': False}, {'name': 'products', 'order': 3, 'description': 'Products obtained by mining this tile.', 'type': {'complex_type': 'array', 'value': 'Product'}, 'optional': False}]}",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "mineable_properties"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.mineable_properties",
    "content": "Description:",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "mineable_properties"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.needs_correction",
    "content": "Attribute: needs_correction \nRead_type: boolean\n\nDescription: If this tile needs correction logic applied when it's generated in the world.\n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "needs_correction"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.next_direction",
    "content": "Attribute: next_direction [Optional]\nRead_type: LuaTilePrototype\n\nDescription: The next direction of this tile, if any. Used when a tile has multiple directions (such as hazard concrete)\n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "next_direction"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.placeable_by",
    "content": "Attribute: placeable_by [Optional]\nRead_type: {'complex_type': 'array', 'value': 'SimpleItemStack'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "placeable_by"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.scorch_mark_color",
    "content": "Attribute: scorch_mark_color [Optional]\nRead_type: Color\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "scorch_mark_color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.thawed_variant",
    "content": "Attribute: thawed_variant [Optional]\nRead_type: LuaTilePrototype\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "thawed_variant"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.trigger_effect",
    "content": "Attribute: trigger_effect [Optional]\nRead_type: {'complex_type': 'array', 'value': 'TriggerEffectItem'}\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "trigger_effect"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.vehicle_friction_modifier",
    "content": "Attribute: vehicle_friction_modifier \nRead_type: float\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "vehicle_friction_modifier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.walking_speed_modifier",
    "content": "Attribute: walking_speed_modifier \nRead_type: float\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "walking_speed_modifier"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTilePrototype.weight",
    "content": "Attribute: weight [Optional]\nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTilePrototype",
      "attribute_name": "weight"
    }
  },
  {
    "type": "class",
    "name": "LuaTrain",
    "content": "Class: LuaTrain\nDescription: A train. Trains are a sequence of connected rolling stocks -- locomotives and wagons.",
    "metadata": {
      "class_name": "LuaTrain",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaTrain.clear_fluids_inside",
    "content": "Method: LuaTrain.clear_fluids_inside\nDescription: Clears all fluids in this train.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTrain",
      "method_name": "clear_fluids_inside"
    }
  },
  {
    "type": "method",
    "name": "LuaTrain.clear_items_inside",
    "content": "Method: LuaTrain.clear_items_inside\nDescription: Clear all items in this train.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTrain",
      "method_name": "clear_items_inside"
    }
  },
  {
    "type": "method",
    "name": "LuaTrain.get_contents",
    "content": "Method: LuaTrain.get_contents\nDescription: Get a mapping of the train's inventory.\n\nReturns:\n- {'complex_type': 'array', 'value': 'ItemWithQualityCounts'}: List of all items in the train.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTrain",
      "method_name": "get_contents"
    }
  },
  {
    "type": "method",
    "name": "LuaTrain.get_fluid_contents",
    "content": "Method: LuaTrain.get_fluid_contents\nDescription: Gets a mapping of the train's fluid inventory.\n\nReturns:\n- {'complex_type': 'dictionary', 'key': 'string', 'value': 'double'}: The counts, indexed by fluid names.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTrain",
      "method_name": "get_fluid_contents"
    }
  },
  {
    "type": "method",
    "name": "LuaTrain.get_fluid_count",
    "content": "Method: LuaTrain.get_fluid_count\nDescription: Get the amount of a particular fluid stored in the train.\n\nParameters:\n- fluid (string)[Optional]: Fluid name to count. If not given, counts all fluids.\n\nReturns:\n- double: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTrain",
      "method_name": "get_fluid_count"
    }
  },
  {
    "type": "method",
    "name": "LuaTrain.get_item_count",
    "content": "Method: LuaTrain.get_item_count\nDescription: Get the amount of a particular item stored in the train.\n\nParameters:\n- item (ItemFilter)[Optional]: If not given, counts all items.\n\nReturns:\n- uint: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTrain",
      "method_name": "get_item_count"
    }
  },
  {
    "type": "method",
    "name": "LuaTrain.get_rail_end",
    "content": "Method: LuaTrain.get_rail_end\nDescription: Gets a LuaRailEnd object pointing away from the train at specified end of the train\n\nParameters:\n- direction (defines.rail_direction): \n\nReturns:\n- LuaRailEnd: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTrain",
      "method_name": "get_rail_end"
    }
  },
  {
    "type": "method",
    "name": "LuaTrain.get_rails",
    "content": "Method: LuaTrain.get_rails\nDescription: Gets all rails under the train.\n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTrain",
      "method_name": "get_rails"
    }
  },
  {
    "type": "method",
    "name": "LuaTrain.go_to_station",
    "content": "Method: LuaTrain.go_to_station\nDescription: Go to the station specified by the index in the train's schedule.\n\nParameters:\n- index (uint): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTrain",
      "method_name": "go_to_station"
    }
  },
  {
    "type": "method",
    "name": "LuaTrain.insert",
    "content": "Method: LuaTrain.insert\nDescription: Insert a stack into the train.\n\nParameters:\n- stack (ItemStackIdentification): \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTrain",
      "method_name": "insert"
    }
  },
  {
    "type": "method",
    "name": "LuaTrain.insert_fluid",
    "content": "Method: LuaTrain.insert_fluid\nDescription: Inserts the given fluid into the first available location in this train.\n\nParameters:\n- fluid (Fluid): \n\nReturns:\n- double: The amount inserted.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTrain",
      "method_name": "insert_fluid"
    }
  },
  {
    "type": "method",
    "name": "LuaTrain.recalculate_path",
    "content": "Method: LuaTrain.recalculate_path\nDescription: Checks if the path is invalid and tries to re-path if it isn't.\n\nParameters:\n- force (boolean)[Optional]: Forces the train to re-path regardless of the current path being valid or not.\n\nReturns:\n- boolean: If the train has a path after the repath attempt.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTrain",
      "method_name": "recalculate_path"
    }
  },
  {
    "type": "method",
    "name": "LuaTrain.remove_fluid",
    "content": "Method: LuaTrain.remove_fluid\nDescription: Remove some fluid from the train.\n\nParameters:\n- fluid (Fluid): \n\nReturns:\n- double: The amount of fluid actually removed.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTrain",
      "method_name": "remove_fluid"
    }
  },
  {
    "type": "method",
    "name": "LuaTrain.remove_item",
    "content": "Method: LuaTrain.remove_item\nDescription: Remove some items from the train.\n\nParameters:\n- stack (ItemStackIdentification): The amount and type of items to remove\n\nReturns:\n- uint: Number of items actually removed.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTrain",
      "method_name": "remove_item"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.back_end",
    "content": "Attribute: back_end \nRead_type: LuaRailEnd\n\nDescription: Back end of the train: Rail and direction on that rail where the train will go when moving backward\n",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "back_end"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.back_stock",
    "content": "Attribute: back_stock [Optional]\nRead_type: LuaEntity\n\nDescription: The back stock of this train, if any. The back of the train is at the opposite end of the [front](runtime:LuaTrain::front_stock).\n",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "back_stock"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.cargo_wagons",
    "content": "Attribute: cargo_wagons \nRead_type: {'complex_type': 'array', 'value': 'LuaEntity'}\n\nDescription: The cargo carriages the train contains.\n",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "cargo_wagons"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.carriages",
    "content": "Attribute: carriages \nRead_type: {'complex_type': 'array', 'value': 'LuaEntity'}\n\nDescription: The rolling stocks this train is composed of, with the numbering starting at the [front](runtime:LuaTrain::front_stock) of the train.\n",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "carriages"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.fluid_wagons",
    "content": "Attribute: fluid_wagons \nRead_type: {'complex_type': 'array', 'value': 'LuaEntity'}\n\nDescription: The fluid carriages the train contains.\n",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "fluid_wagons"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.front_end",
    "content": "Attribute: front_end \nRead_type: LuaRailEnd\n\nDescription: Front end of the train: Rail and direction on that rail where the train will go when moving forward\n",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "front_end"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.front_stock",
    "content": "Attribute: front_stock [Optional]\nRead_type: LuaEntity\n\nDescription: The front stock of this train, if any. The front of the train is in the direction that a majority of locomotives are pointing in. If it's a tie, the North and West directions take precedence.",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "front_stock"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.group",
    "content": "Attribute: group \nRead_type: string\nWrite_type: string\nDescription: The group this train belongs to.\n\nSetting the group will apply the schedule of the group to this train.\n",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "group"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.has_path",
    "content": "Attribute: has_path \nRead_type: boolean\n\nDescription: If this train has a path.\n",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "has_path"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.id",
    "content": "Attribute: id \nRead_type: uint\n\nDescription: The unique train ID.\n",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "id"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.kill_count",
    "content": "Attribute: kill_count \nRead_type: uint\n\nDescription: The total number of kills by this train.\n",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "kill_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.killed_players",
    "content": "Attribute: killed_players \nRead_type: {'complex_type': 'dictionary', 'key': 'uint', 'value': 'uint'}\n\nDescription: The players killed by this train.\n\nThe keys are the player indices, the values are how often this train killed that player.\n",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "killed_players"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.locomotives",
    "content": "Attribute: locomotives \nRead_type: {'complex_type': 'table', 'parameters': [{'name': 'back_movers', 'order': 1, 'description': 'Array of locomotives.', 'type': {'complex_type': 'array', 'value': 'LuaEntity'}, 'optional': False}, {'name': 'front_movers', 'order': 0, 'description': 'Array of locomotives.', 'type': {'complex_type': 'array', 'value': 'LuaEntity'}, 'optional': False}]}",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "locomotives"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.locomotives",
    "content": "Description: Locomotives of the train.\nExamples: [\"```\\n-- called on a LuaTrain with 3 locomotives, it returns 3 LuaEntities:\\ntrain.locomotives -- => {front_movers = {loco1, loco2}, back_movers = {loco3}}\\n```\"]",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "locomotives"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.manual_mode",
    "content": "Attribute: manual_mode \nRead_type: boolean\nWrite_type: boolean\nDescription: When `true`, the train is explicitly controlled by the player or script. When `false`, the train moves autonomously according to its schedule.\n",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "manual_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.max_backward_speed",
    "content": "Attribute: max_backward_speed \nRead_type: double\n\nDescription: Current max speed when moving backwards, depends on locomotive prototype and fuel.\n",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "max_backward_speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.max_forward_speed",
    "content": "Attribute: max_forward_speed \nRead_type: double\n\nDescription: Current max speed when moving forward, depends on locomotive prototype and fuel.\n",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "max_forward_speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.passengers",
    "content": "Attribute: passengers \nRead_type: {'complex_type': 'array', 'value': 'LuaPlayer'}\n\nDescription: The player passengers on the train\n\nThis does *not* index using player index. See [LuaPlayer::index](runtime:LuaPlayer::index) on each player instance for the player index.",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "passengers"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.path",
    "content": "Attribute: path [Optional]\nRead_type: LuaRailPath\n\nDescription: The path this train is using, if any.\n",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "path"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.path_end_rail",
    "content": "Attribute: path_end_rail [Optional]\nRead_type: LuaEntity\n\nDescription: The destination rail this train is currently pathing to, if any.\n",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "path_end_rail"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.path_end_stop",
    "content": "Attribute: path_end_stop [Optional]\nRead_type: LuaEntity\n\nDescription: The destination train stop this train is currently pathing to, if any.\n",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "path_end_stop"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.riding_state",
    "content": "Attribute: riding_state \nRead_type: RidingState\n\nDescription: The riding state of this train.\n",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "riding_state"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.schedule",
    "content": "Attribute: schedule [Optional]\nRead_type: TrainSchedule\nWrite_type: TrainSchedule\nDescription: This train's current schedule, if any. Set to `nil` to clear.\n\nThe schedule can't be changed by modifying the returned table. Instead, changes must be made by assigning a new table to this attribute.",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "schedule"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.signal",
    "content": "Attribute: signal [Optional]\nRead_type: LuaEntity\n\nDescription: The signal this train is arriving or waiting at, if any.\n",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.speed",
    "content": "Attribute: speed \nRead_type: double\nWrite_type: double\nDescription: Current speed.\n\nChanging the speed of the train is potentially an unsafe operation because train uses the speed for its internal calculations of break distances, etc.\n",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "speed"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.state",
    "content": "Attribute: state \nRead_type: defines.train_state\n\nDescription: This train's current state.\n",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "state"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.station",
    "content": "Attribute: station [Optional]\nRead_type: LuaEntity\n\nDescription: The train stop this train is stopped at, if any.\n",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "station"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "valid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrain.weight",
    "content": "Attribute: weight \nRead_type: double\n\nDescription: The weight of this train.\n",
    "metadata": {
      "class_name": "LuaTrain",
      "attribute_name": "weight"
    }
  },
  {
    "type": "class",
    "name": "LuaTrainManager",
    "content": "Class: LuaTrainManager\nDescription: The train manager manages all the train in the game. LuaTrainManager allows to perform some direct queries to the train manager.\n\nThere is always exactly one train manager instance in a game, it can be obtained from [LuaGameScript::train_manager](runtime:LuaGameScript::train_manager). This object is always valid and is equal to any other instance of LuaTrainManager from this game.",
    "metadata": {
      "class_name": "LuaTrainManager",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaTrainManager.get_train_by_id",
    "content": "Method: LuaTrainManager.get_train_by_id\nDescription: Searches for a train with given ID.\n\nParameters:\n- train_id (uint): Train ID to search\n\nReturns:\n- LuaTrain: Train if found\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTrainManager",
      "method_name": "get_train_by_id"
    }
  },
  {
    "type": "method",
    "name": "LuaTrainManager.get_train_stops",
    "content": "Method: LuaTrainManager.get_train_stops\nDescription: Gets all train stops that pass given filter\n\nParameters:\n- filter (TrainStopFilter): Filters the train stop must pass in order to be returned here\n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaEntity'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTrainManager",
      "method_name": "get_train_stops"
    }
  },
  {
    "type": "method",
    "name": "LuaTrainManager.get_trains",
    "content": "Method: LuaTrainManager.get_trains\nDescription: Gets all trains that pass given filter\n\nParameters:\n- filter (TrainFilter): Filters the train must pass in order to be returned here\n\nReturns:\n- {'complex_type': 'array', 'value': 'LuaTrain'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTrainManager",
      "method_name": "get_trains"
    }
  },
  {
    "type": "method",
    "name": "LuaTrainManager.request_train_path",
    "content": "Method: LuaTrainManager.request_train_path\nDescription: Direct access to train pathfinder. Allows to search rail paths or querying which stops are accessible",
    "metadata": {
      "class_name": "LuaTrainManager",
      "method_name": "request_train_path"
    }
  },
  {
    "type": "method",
    "name": "LuaTrainManager.request_train_path",
    "content": "Parameters:\n- goals ({'complex_type': 'array', 'value': 'TrainPathFinderGoal'}): \n- in_chain_signal_section (boolean)[Optional]: Defaults to `false`. If set to true, pathfinder will not return a path that cannot have its start immediately reserved. A path that cannot have its start immediately reserved could cause a train to stop inside of an intersection.",
    "metadata": {
      "class_name": "LuaTrainManager",
      "method_name": "request_train_path"
    }
  },
  {
    "type": "method",
    "name": "LuaTrainManager.request_train_path",
    "content": "- return_path (boolean)[Optional]: Only relevant if request type is `\"path\"`. Returning a full path is expensive due to multiple LuaEntity created. In order for path to be returned, true must be provided here. Defaults to false in which case a path will not be provided.",
    "metadata": {
      "class_name": "LuaTrainManager",
      "method_name": "request_train_path"
    }
  },
  {
    "type": "method",
    "name": "LuaTrainManager.request_train_path",
    "content": "- search_direction ({'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'respect-movement-direction'}, {'complex_type': 'literal', 'value': 'any-direction-with-locomotives'}], 'full_format': False})[Optional]: Only relevant if `starts` was not provided in which case 2 starts (front and back) are deduced from the train. Selects which train ends should be considered as starts. Defaults to `\"any-direction-with-locomotives\"`.",
    "metadata": {
      "class_name": "LuaTrainManager",
      "method_name": "request_train_path"
    }
  },
  {
    "type": "method",
    "name": "LuaTrainManager.request_train_path",
    "content": "- shortest_path (boolean)[Optional]: Defaults to `false`. If set to true, only length of rails is added to penalties causing search to look for shortest path (not smallest penalty)\n- starts ({'complex_type': 'array', 'value': 'RailEndStart'})[Optional]: Manually provided starting positions.\n- steps_limit (uint)[Optional]: Maximum amount of steps pathfinder is allowed to perform.",
    "metadata": {
      "class_name": "LuaTrainManager",
      "method_name": "request_train_path"
    }
  },
  {
    "type": "method",
    "name": "LuaTrainManager.request_train_path",
    "content": "- train (LuaTrain)[Optional]: Mandatory if `starts` is not provided, optional otherwise. Selects a context for the pathfinder to decide which train to exclude from penalties and which signals are considered possible to reacquire. If `starts` is not provided, then it is also used to collect front and back ends for the search\n- type (TrainPathRequestType)[Optional]: Request type. Determines the return type of the method. Defaults to `\"path\"`.",
    "metadata": {
      "class_name": "LuaTrainManager",
      "method_name": "request_train_path"
    }
  },
  {
    "type": "method",
    "name": "LuaTrainManager.request_train_path",
    "content": "Returns:\n- {'complex_type': 'union', 'options': ['TrainPathFinderOneGoalResult', 'TrainPathAllGoalsResult'], 'full_format': False}: The type of the returned value depends on `type`.\n\nFormat:\n- {'takes_table': True, 'table_optional': False}",
    "metadata": {
      "class_name": "LuaTrainManager",
      "method_name": "request_train_path"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrainManager.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaTrainManager",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrainManager.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaTrainManager",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaTrainStopControlBehavior",
    "content": "Class: LuaTrainStopControlBehavior\nDescription: Control behavior for train stops.",
    "metadata": {
      "class_name": "LuaTrainStopControlBehavior",
      "parent_class": "LuaGenericOnOffControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrainStopControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaTrainStopControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrainStopControlBehavior.priority_signal",
    "content": "Attribute: priority_signal [Optional]\nRead_type: SignalID\nWrite_type: SignalID\nDescription: The signal to be used by set-priority change priority of the train stop\n",
    "metadata": {
      "class_name": "LuaTrainStopControlBehavior",
      "attribute_name": "priority_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrainStopControlBehavior.read_from_train",
    "content": "Attribute: read_from_train \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if the train stop should send the train contents to the circuit network.\n",
    "metadata": {
      "class_name": "LuaTrainStopControlBehavior",
      "attribute_name": "read_from_train"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrainStopControlBehavior.read_stopped_train",
    "content": "Attribute: read_stopped_train \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if the train stop should send the stopped train id to the circuit network.\n",
    "metadata": {
      "class_name": "LuaTrainStopControlBehavior",
      "attribute_name": "read_stopped_train"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrainStopControlBehavior.read_trains_count",
    "content": "Attribute: read_trains_count \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if the train stop should send amount of incoming trains to the circuit network.\n",
    "metadata": {
      "class_name": "LuaTrainStopControlBehavior",
      "attribute_name": "read_trains_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrainStopControlBehavior.send_to_train",
    "content": "Attribute: send_to_train \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if the train stop should send the circuit network contents to the train to use.\n",
    "metadata": {
      "class_name": "LuaTrainStopControlBehavior",
      "attribute_name": "send_to_train"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrainStopControlBehavior.set_priority",
    "content": "Attribute: set_priority \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if the priority_signal is used to set a priority of the train stop.\n",
    "metadata": {
      "class_name": "LuaTrainStopControlBehavior",
      "attribute_name": "set_priority"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrainStopControlBehavior.set_trains_limit",
    "content": "Attribute: set_trains_limit \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if the trains_limit_signal is used to set a limit of trains incoming for train stop.\n",
    "metadata": {
      "class_name": "LuaTrainStopControlBehavior",
      "attribute_name": "set_trains_limit"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrainStopControlBehavior.stopped_train_signal",
    "content": "Attribute: stopped_train_signal [Optional]\nRead_type: SignalID\nWrite_type: SignalID\nDescription: The signal that will be sent when using the send-train-id option.\n",
    "metadata": {
      "class_name": "LuaTrainStopControlBehavior",
      "attribute_name": "stopped_train_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrainStopControlBehavior.trains_count_signal",
    "content": "Attribute: trains_count_signal [Optional]\nRead_type: SignalID\nWrite_type: SignalID\nDescription: The signal that will be sent when using the read-trains-count option.\n",
    "metadata": {
      "class_name": "LuaTrainStopControlBehavior",
      "attribute_name": "trains_count_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrainStopControlBehavior.trains_limit_signal",
    "content": "Attribute: trains_limit_signal [Optional]\nRead_type: SignalID\nWrite_type: SignalID\nDescription: The signal to be used by set-trains-limit to limit amount of incoming trains\n",
    "metadata": {
      "class_name": "LuaTrainStopControlBehavior",
      "attribute_name": "trains_limit_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrainStopControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaTrainStopControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaTransportBeltControlBehavior",
    "content": "Class: LuaTransportBeltControlBehavior\nDescription: Control behavior for transport belts.",
    "metadata": {
      "class_name": "LuaTransportBeltControlBehavior",
      "parent_class": "LuaGenericOnOffControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTransportBeltControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaTransportBeltControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTransportBeltControlBehavior.read_contents",
    "content": "Attribute: read_contents \nRead_type: boolean\nWrite_type: boolean\nDescription: If the belt will read the contents and send them to the circuit network.\n",
    "metadata": {
      "class_name": "LuaTransportBeltControlBehavior",
      "attribute_name": "read_contents"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTransportBeltControlBehavior.read_contents_mode",
    "content": "Attribute: read_contents_mode \nRead_type: defines.control_behavior.transport_belt.content_read_mode\nWrite_type: defines.control_behavior.transport_belt.content_read_mode\nDescription: The read mode for the belt.\n",
    "metadata": {
      "class_name": "LuaTransportBeltControlBehavior",
      "attribute_name": "read_contents_mode"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTransportBeltControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaTransportBeltControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaTransportLine",
    "content": "Class: LuaTransportLine\nDescription: One line on a transport belt.",
    "metadata": {
      "class_name": "LuaTransportLine",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaTransportLine.can_insert_at",
    "content": "Method: LuaTransportLine.can_insert_at\nDescription: Can an item be inserted at a given position?\n\nParameters:\n- position (float): Where to insert an item.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTransportLine",
      "method_name": "can_insert_at"
    }
  },
  {
    "type": "method",
    "name": "LuaTransportLine.can_insert_at_back",
    "content": "Method: LuaTransportLine.can_insert_at_back\nDescription: Can an item be inserted at the back of this line?\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTransportLine",
      "method_name": "can_insert_at_back"
    }
  },
  {
    "type": "method",
    "name": "LuaTransportLine.clear",
    "content": "Method: LuaTransportLine.clear\nDescription: Remove all items from this transport line.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTransportLine",
      "method_name": "clear"
    }
  },
  {
    "type": "method",
    "name": "LuaTransportLine.get_contents",
    "content": "Method: LuaTransportLine.get_contents\nDescription: Get counts of all items on this line, similar to how [LuaInventory::get_contents](runtime:LuaInventory::get_contents) does.\n\nReturns:\n- {'complex_type': 'array', 'value': 'ItemWithQualityCounts'}: List of all items on this line.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTransportLine",
      "method_name": "get_contents"
    }
  },
  {
    "type": "method",
    "name": "LuaTransportLine.get_detailed_contents",
    "content": "Method: LuaTransportLine.get_detailed_contents\nDescription: Get detailed information of items on this line, such as their position.\n\nReturns:\n- {'complex_type': 'array', 'value': 'DetailedItemOnLine'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTransportLine",
      "method_name": "get_detailed_contents"
    }
  },
  {
    "type": "method",
    "name": "LuaTransportLine.get_item_count",
    "content": "Method: LuaTransportLine.get_item_count\nDescription: Count some or all items on this line, similar to how [LuaInventory::get_item_count](runtime:LuaInventory::get_item_count) does.\n\nParameters:\n- item (ItemFilter)[Optional]: If not specified, count all items.\n\nReturns:\n- uint: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTransportLine",
      "method_name": "get_item_count"
    }
  },
  {
    "type": "method",
    "name": "LuaTransportLine.get_line_item_position",
    "content": "Method: LuaTransportLine.get_line_item_position\nDescription: Get a map position related to a position on a transport line.\n\nParameters:\n- position (float): Linear position along the transport line. Clamped to the transport line range.\n\nReturns:\n- MapPosition: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTransportLine",
      "method_name": "get_line_item_position"
    }
  },
  {
    "type": "method",
    "name": "LuaTransportLine.insert_at",
    "content": "Method: LuaTransportLine.insert_at\nDescription: Insert items at a given position.\n\nParameters:\n- belt_stack_size (uint8)[Optional]: Maximum size of stack created on belt\n- items (ItemStackIdentification): Items to insert.\n- position (float): Where on the line to insert the items.\n\nReturns:\n- boolean: Were the items inserted successfully?\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTransportLine",
      "method_name": "insert_at"
    }
  },
  {
    "type": "method",
    "name": "LuaTransportLine.insert_at_back",
    "content": "Method: LuaTransportLine.insert_at_back\nDescription: Insert items at the back of this line.\n\nParameters:\n- belt_stack_size (uint8)[Optional]: Maximum size of stack created on belt\n- items (ItemStackIdentification): \n\nReturns:\n- boolean: Were the items inserted successfully?\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTransportLine",
      "method_name": "insert_at_back"
    }
  },
  {
    "type": "method",
    "name": "LuaTransportLine.line_equals",
    "content": "Method: LuaTransportLine.line_equals\nDescription: Returns whether the associated internal transport line of this line is the same as the others associated internal transport line.\n\nThis can return true even when the [LuaTransportLine::owner](runtime:LuaTransportLine::owner)s are different (so `this == other` is false), because the internal transport lines can span multiple tiles.\n\nParameters:\n- other (LuaTransportLine): \n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTransportLine",
      "method_name": "line_equals"
    }
  },
  {
    "type": "method",
    "name": "LuaTransportLine.remove_item",
    "content": "Method: LuaTransportLine.remove_item\nDescription: Remove some items from this line.\n\nParameters:\n- items (ItemStackIdentification): Items to remove.\n\nReturns:\n- uint: Number of items actually removed.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaTransportLine",
      "method_name": "remove_item"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTransportLine.input_lines",
    "content": "Attribute: input_lines \nRead_type: {'complex_type': 'array', 'value': 'LuaTransportLine'}\n\nDescription: The transport lines that this transport line is fed by or an empty table if none.\n",
    "metadata": {
      "class_name": "LuaTransportLine",
      "attribute_name": "input_lines"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTransportLine.line_length",
    "content": "Attribute: line_length \nRead_type: float\n\nDescription: Length of the transport line. Items can be inserted at line position from 0 up to returned value\n",
    "metadata": {
      "class_name": "LuaTransportLine",
      "attribute_name": "line_length"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTransportLine.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaTransportLine",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTransportLine.output_lines",
    "content": "Attribute: output_lines \nRead_type: {'complex_type': 'array', 'value': 'LuaTransportLine'}\n\nDescription: The transport lines that this transport line outputs items to or an empty table if none.\n",
    "metadata": {
      "class_name": "LuaTransportLine",
      "attribute_name": "output_lines"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTransportLine.owner",
    "content": "Attribute: owner \nRead_type: LuaEntity\n\nDescription: The entity this transport line belongs to.\n",
    "metadata": {
      "class_name": "LuaTransportLine",
      "attribute_name": "owner"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTransportLine.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaTransportLine",
      "attribute_name": "valid"
    }
  },
  {
    "type": "operator",
    "name": "LuaTransportLine.index",
    "content": "Operator: index \nRead_type: LuaItemStack\n\nDescription: The indexing operator.\n",
    "metadata": {
      "class_name": "LuaTransportLine",
      "operator_name": "index"
    }
  },
  {
    "type": "operator",
    "name": "LuaTransportLine.length",
    "content": "Operator: length \nRead_type: uint\n\nDescription: Get the number of items on this transport line.\n",
    "metadata": {
      "class_name": "LuaTransportLine",
      "operator_name": "length"
    }
  },
  {
    "type": "class",
    "name": "LuaTrivialSmokePrototype",
    "content": "Class: LuaTrivialSmokePrototype\nDescription: Prototype of a trivial smoke.",
    "metadata": {
      "class_name": "LuaTrivialSmokePrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrivialSmokePrototype.affected_by_wind",
    "content": "Attribute: affected_by_wind \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTrivialSmokePrototype",
      "attribute_name": "affected_by_wind"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrivialSmokePrototype.color",
    "content": "Attribute: color \nRead_type: Color\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTrivialSmokePrototype",
      "attribute_name": "color"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrivialSmokePrototype.cyclic",
    "content": "Attribute: cyclic \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTrivialSmokePrototype",
      "attribute_name": "cyclic"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrivialSmokePrototype.duration",
    "content": "Attribute: duration \nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTrivialSmokePrototype",
      "attribute_name": "duration"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrivialSmokePrototype.end_scale",
    "content": "Attribute: end_scale \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTrivialSmokePrototype",
      "attribute_name": "end_scale"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrivialSmokePrototype.fade_away_duration",
    "content": "Attribute: fade_away_duration \nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTrivialSmokePrototype",
      "attribute_name": "fade_away_duration"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrivialSmokePrototype.fade_in_duration",
    "content": "Attribute: fade_in_duration \nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTrivialSmokePrototype",
      "attribute_name": "fade_in_duration"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrivialSmokePrototype.glow_animation",
    "content": "Attribute: glow_animation \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTrivialSmokePrototype",
      "attribute_name": "glow_animation"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrivialSmokePrototype.glow_fade_away_duration",
    "content": "Attribute: glow_fade_away_duration \nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTrivialSmokePrototype",
      "attribute_name": "glow_fade_away_duration"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrivialSmokePrototype.movement_slow_down_factor",
    "content": "Attribute: movement_slow_down_factor \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTrivialSmokePrototype",
      "attribute_name": "movement_slow_down_factor"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrivialSmokePrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaTrivialSmokePrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrivialSmokePrototype.render_layer",
    "content": "Attribute: render_layer \nRead_type: RenderLayer\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTrivialSmokePrototype",
      "attribute_name": "render_layer"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrivialSmokePrototype.show_when_smoke_off",
    "content": "Attribute: show_when_smoke_off \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTrivialSmokePrototype",
      "attribute_name": "show_when_smoke_off"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrivialSmokePrototype.spread_duration",
    "content": "Attribute: spread_duration \nRead_type: uint\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTrivialSmokePrototype",
      "attribute_name": "spread_duration"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrivialSmokePrototype.start_scale",
    "content": "Attribute: start_scale \nRead_type: double\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaTrivialSmokePrototype",
      "attribute_name": "start_scale"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTrivialSmokePrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaTrivialSmokePrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaTurretControlBehavior",
    "content": "Class: LuaTurretControlBehavior\nDescription: Control behavior for turrets.",
    "metadata": {
      "class_name": "LuaTurretControlBehavior",
      "parent_class": "LuaGenericOnOffControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTurretControlBehavior.ignore_unlisted_targets_condition",
    "content": "Attribute: ignore_unlisted_targets_condition \nRead_type: CircuitConditionDefinition\nWrite_type: CircuitConditionDefinition\nDescription: The condition under which the turret will ignore targets not on its priority list.\n",
    "metadata": {
      "class_name": "LuaTurretControlBehavior",
      "attribute_name": "ignore_unlisted_targets_condition"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTurretControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaTurretControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTurretControlBehavior.read_ammo",
    "content": "Attribute: read_ammo \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if the turret will send the ammunition or fluid it contains to the circuit network.\n",
    "metadata": {
      "class_name": "LuaTurretControlBehavior",
      "attribute_name": "read_ammo"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTurretControlBehavior.set_ignore_unlisted_targets",
    "content": "Attribute: set_ignore_unlisted_targets \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if the turret will ignore targets not on its priority list if a circuit condition is met.\n",
    "metadata": {
      "class_name": "LuaTurretControlBehavior",
      "attribute_name": "set_ignore_unlisted_targets"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTurretControlBehavior.set_priority_list",
    "content": "Attribute: set_priority_list \nRead_type: boolean\nWrite_type: boolean\nDescription: `true` if the turret's target priority list will be determined from the signals on the circuit network.\n",
    "metadata": {
      "class_name": "LuaTurretControlBehavior",
      "attribute_name": "set_priority_list"
    }
  },
  {
    "type": "attribute",
    "name": "LuaTurretControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaTurretControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaUndoRedoStack",
    "content": "Class: LuaUndoRedoStack\nDescription: The undo queue for a player. The term `item_index` refers to the index of an undo item in the queue, while `action_index` refers to the index of one of the individual actions that make up an undo item.",
    "metadata": {
      "class_name": "LuaUndoRedoStack",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaUndoRedoStack.get_redo_item",
    "content": "Method: LuaUndoRedoStack.get_redo_item\nDescription: Gets an undo item from the redo stack.\n\nParameters:\n- index (uint): The index of the item to get, ordered from most recent to oldest.\n\nReturns:\n- {'complex_type': 'array', 'value': 'UndoRedoAction'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaUndoRedoStack",
      "method_name": "get_redo_item"
    }
  },
  {
    "type": "method",
    "name": "LuaUndoRedoStack.get_redo_item_count",
    "content": "Method: LuaUndoRedoStack.get_redo_item_count\nDescription: The number of undo items in the redo stack.\n\nReturns:\n- uint: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaUndoRedoStack",
      "method_name": "get_redo_item_count"
    }
  },
  {
    "type": "method",
    "name": "LuaUndoRedoStack.get_redo_tag",
    "content": "Method: LuaUndoRedoStack.get_redo_tag\nDescription: Gets the tag with the given name from a specific redo item action, or `nil` if it doesn't exist.\n\nParameters:\n- action_index (uint): The index of the redo action.\n- item_index (uint): The index of the redo item, ordered from most recent to oldest.\n- tag_name (string): The name of the tag to get.\n\nReturns:\n- AnyBasic: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaUndoRedoStack",
      "method_name": "get_redo_tag"
    }
  },
  {
    "type": "method",
    "name": "LuaUndoRedoStack.get_redo_tags",
    "content": "Method: LuaUndoRedoStack.get_redo_tags\nDescription: Gets all tags for the given redo action.\n\nParameters:\n- action_index (uint): The index of the redo action.\n- item_index (uint): The index of the redo item, ordered from most recent to oldest.\n\nReturns:\n- Tags: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaUndoRedoStack",
      "method_name": "get_redo_tags"
    }
  },
  {
    "type": "method",
    "name": "LuaUndoRedoStack.get_undo_item",
    "content": "Method: LuaUndoRedoStack.get_undo_item\nDescription: Gets an undo item from the undo stack.\n\nParameters:\n- index (uint): The index of the undo item to get, ordered from most recent to oldest.\n\nReturns:\n- {'complex_type': 'array', 'value': 'UndoRedoAction'}: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaUndoRedoStack",
      "method_name": "get_undo_item"
    }
  },
  {
    "type": "method",
    "name": "LuaUndoRedoStack.get_undo_item_count",
    "content": "Method: LuaUndoRedoStack.get_undo_item_count\nDescription: The number undo items in the undo stack.\n\nReturns:\n- uint: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaUndoRedoStack",
      "method_name": "get_undo_item_count"
    }
  },
  {
    "type": "method",
    "name": "LuaUndoRedoStack.get_undo_tag",
    "content": "Method: LuaUndoRedoStack.get_undo_tag\nDescription: Gets the tag with the given name from a specific undo item action, or `nil` if it doesn't exist.\n\nParameters:\n- action_index (uint): The index of the undo action.\n- item_index (uint): The index of the undo item, ordered from most recent to oldest.\n- tag_name (string): The name of the tag to get.\n\nReturns:\n- AnyBasic: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaUndoRedoStack",
      "method_name": "get_undo_tag"
    }
  },
  {
    "type": "method",
    "name": "LuaUndoRedoStack.get_undo_tags",
    "content": "Method: LuaUndoRedoStack.get_undo_tags\nDescription: Gets all tags for the given undo action.\n\nParameters:\n- action_index (uint): The index of the undo action.\n- item_index (uint): The index of the undo item, ordered from most recent to oldest.\n\nReturns:\n- Tags: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaUndoRedoStack",
      "method_name": "get_undo_tags"
    }
  },
  {
    "type": "method",
    "name": "LuaUndoRedoStack.remove_redo_action",
    "content": "Method: LuaUndoRedoStack.remove_redo_action\nDescription: Removes an undo action from the specified undo item on the redo stack.\n\nParameters:\n- action_index (uint): The index of the undo action to remove.\n- item_index (uint): The index of the undo item to change, ordered from most recent to oldest.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaUndoRedoStack",
      "method_name": "remove_redo_action"
    }
  },
  {
    "type": "method",
    "name": "LuaUndoRedoStack.remove_redo_item",
    "content": "Method: LuaUndoRedoStack.remove_redo_item\nDescription: Removes an undo item from the redo stack.\n\nParameters:\n- index (uint): The index of the undo item to remove, ordered from most recent to oldest.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaUndoRedoStack",
      "method_name": "remove_redo_item"
    }
  },
  {
    "type": "method",
    "name": "LuaUndoRedoStack.remove_redo_tag",
    "content": "Method: LuaUndoRedoStack.remove_redo_tag\nDescription: Removes a tag with the given name from the specified redo item.\n\nParameters:\n- action_index (uint): The index of the redo action.\n- item_index (uint): The index of the redo item, ordered from most recent to oldest.\n- tag (string): The name of the tag to remove.\n\nReturns:\n- boolean: Whether the tag existed and was successfully removed.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaUndoRedoStack",
      "method_name": "remove_redo_tag"
    }
  },
  {
    "type": "method",
    "name": "LuaUndoRedoStack.remove_undo_action",
    "content": "Method: LuaUndoRedoStack.remove_undo_action\nDescription: Removes an undo action from the specified undo item on the undo stack.\n\nParameters:\n- action_index (uint): The index of the undo action to remove.\n- item_index (uint): The index of the undo item to change, ordered from most recent to oldest.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaUndoRedoStack",
      "method_name": "remove_undo_action"
    }
  },
  {
    "type": "method",
    "name": "LuaUndoRedoStack.remove_undo_item",
    "content": "Method: LuaUndoRedoStack.remove_undo_item\nDescription: Removes an undo item from the undo stack.\n\nParameters:\n- index (uint): The index of the undo item to remove, ordered from most recent to oldest.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaUndoRedoStack",
      "method_name": "remove_undo_item"
    }
  },
  {
    "type": "method",
    "name": "LuaUndoRedoStack.remove_undo_tag",
    "content": "Method: LuaUndoRedoStack.remove_undo_tag\nDescription: Removes a tag with the given name from the specified undo item.\n\nParameters:\n- action_index (uint): The index of the undo action.\n- item_index (uint): The index of the undo item, ordered from most recent to oldest.\n- tag (string): The name of the tag to remove.\n\nReturns:\n- boolean: Whether the tag existed and was successfully removed.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaUndoRedoStack",
      "method_name": "remove_undo_tag"
    }
  },
  {
    "type": "method",
    "name": "LuaUndoRedoStack.set_redo_tag",
    "content": "Method: LuaUndoRedoStack.set_redo_tag\nDescription: Sets a new tag with the given name and value on the specified redo item action.\n\nParameters:\n- action_index (uint): The index of the redo action.\n- item_index (uint): The index of the redo item, ordered from most recent to oldest.\n- tag (AnyBasic): The contents of the new tag.\n- tag_name (string): The name of the tag to set.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaUndoRedoStack",
      "method_name": "set_redo_tag"
    }
  },
  {
    "type": "method",
    "name": "LuaUndoRedoStack.set_undo_tag",
    "content": "Method: LuaUndoRedoStack.set_undo_tag\nDescription: Sets a new tag with the given name and value on the specified undo item action.\n\nParameters:\n- action_index (uint): The index of the undo action.\n- item_index (uint): The index of the undo item, ordered from most recent to oldest.\n- tag (AnyBasic): The contents of the new tag.\n- tag_name (string): The name of the tag to set.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaUndoRedoStack",
      "method_name": "set_undo_tag"
    }
  },
  {
    "type": "attribute",
    "name": "LuaUndoRedoStack.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaUndoRedoStack",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaUndoRedoStack.player_index",
    "content": "Attribute: player_index \nRead_type: uint\n\nDescription: The index of the player to whom this stack belongs to.\n",
    "metadata": {
      "class_name": "LuaUndoRedoStack",
      "attribute_name": "player_index"
    }
  },
  {
    "type": "attribute",
    "name": "LuaUndoRedoStack.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaUndoRedoStack",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaVirtualSignalPrototype",
    "content": "Class: LuaVirtualSignalPrototype\nDescription: Prototype of a virtual signal.",
    "metadata": {
      "class_name": "LuaVirtualSignalPrototype",
      "parent_class": "LuaPrototypeBase"
    }
  },
  {
    "type": "attribute",
    "name": "LuaVirtualSignalPrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaVirtualSignalPrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaVirtualSignalPrototype.special",
    "content": "Attribute: special \nRead_type: boolean\n\nDescription: Whether this is a special signal. The `everything`, `anything`, `each`, and `unknown` signals are considered special.\n",
    "metadata": {
      "class_name": "LuaVirtualSignalPrototype",
      "attribute_name": "special"
    }
  },
  {
    "type": "attribute",
    "name": "LuaVirtualSignalPrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaVirtualSignalPrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaVoidEnergySourcePrototype",
    "content": "Class: LuaVoidEnergySourcePrototype\nDescription: Prototype of a void energy source.",
    "metadata": {
      "class_name": "LuaVoidEnergySourcePrototype",
      "parent_class": null
    }
  },
  {
    "type": "attribute",
    "name": "LuaVoidEnergySourcePrototype.emissions_per_joule",
    "content": "Attribute: emissions_per_joule \nRead_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'double'}\n\nDescription: The table of emissions of this energy source in `pollution/Joule`, indexed by pollutant type. Multiplying it by energy consumption in `Watt` gives `pollution/second`.",
    "metadata": {
      "class_name": "LuaVoidEnergySourcePrototype",
      "attribute_name": "emissions_per_joule"
    }
  },
  {
    "type": "attribute",
    "name": "LuaVoidEnergySourcePrototype.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaVoidEnergySourcePrototype",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaVoidEnergySourcePrototype.render_no_network_icon",
    "content": "Attribute: render_no_network_icon \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaVoidEnergySourcePrototype",
      "attribute_name": "render_no_network_icon"
    }
  },
  {
    "type": "attribute",
    "name": "LuaVoidEnergySourcePrototype.render_no_power_icon",
    "content": "Attribute: render_no_power_icon \nRead_type: boolean\n\nDescription: \n",
    "metadata": {
      "class_name": "LuaVoidEnergySourcePrototype",
      "attribute_name": "render_no_power_icon"
    }
  },
  {
    "type": "attribute",
    "name": "LuaVoidEnergySourcePrototype.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaVoidEnergySourcePrototype",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaWallControlBehavior",
    "content": "Class: LuaWallControlBehavior\nDescription: Control behavior for walls.",
    "metadata": {
      "class_name": "LuaWallControlBehavior",
      "parent_class": "LuaControlBehavior"
    }
  },
  {
    "type": "attribute",
    "name": "LuaWallControlBehavior.circuit_condition",
    "content": "Attribute: circuit_condition \nRead_type: CircuitConditionDefinition\nWrite_type: CircuitConditionDefinition\nDescription: The circuit condition.\n",
    "metadata": {
      "class_name": "LuaWallControlBehavior",
      "attribute_name": "circuit_condition"
    }
  },
  {
    "type": "attribute",
    "name": "LuaWallControlBehavior.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaWallControlBehavior",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaWallControlBehavior.open_gate",
    "content": "Attribute: open_gate \nRead_type: boolean\nWrite_type: boolean\nDescription: \n",
    "metadata": {
      "class_name": "LuaWallControlBehavior",
      "attribute_name": "open_gate"
    }
  },
  {
    "type": "attribute",
    "name": "LuaWallControlBehavior.output_signal",
    "content": "Attribute: output_signal [Optional]\nRead_type: SignalID\nWrite_type: SignalID\nDescription: \n",
    "metadata": {
      "class_name": "LuaWallControlBehavior",
      "attribute_name": "output_signal"
    }
  },
  {
    "type": "attribute",
    "name": "LuaWallControlBehavior.read_sensor",
    "content": "Attribute: read_sensor \nRead_type: boolean\nWrite_type: boolean\nDescription: \n",
    "metadata": {
      "class_name": "LuaWallControlBehavior",
      "attribute_name": "read_sensor"
    }
  },
  {
    "type": "attribute",
    "name": "LuaWallControlBehavior.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaWallControlBehavior",
      "attribute_name": "valid"
    }
  },
  {
    "type": "class",
    "name": "LuaWireConnector",
    "content": "Class: LuaWireConnector\nDescription: A wire connector of a given entity. Allows to find wires, add or remove wires and do some basic operations specific to those connectors.",
    "metadata": {
      "class_name": "LuaWireConnector",
      "parent_class": null
    }
  },
  {
    "type": "method",
    "name": "LuaWireConnector.can_wire_reach",
    "content": "Method: LuaWireConnector.can_wire_reach\nDescription: Checks if a wire can reach from this connector to the other connector.\n\nParameters:\n- other_connector ({'complex_type': 'union', 'options': ['LuaWireConnector', 'LuaEntity'], 'full_format': False}): Target to which a wire reach is to be checked.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaWireConnector",
      "method_name": "can_wire_reach"
    }
  },
  {
    "type": "method",
    "name": "LuaWireConnector.connect_to",
    "content": "Method: LuaWireConnector.connect_to\nDescription: Connects this connector to other wire connector.\n\nParameters:\n- origin (defines.wire_origin)[Optional]: Origin of the wire. Defaults to `defines.wire_origin.player`.\n- reach_check (boolean)[Optional]: True by default. For wires out of reach or on different surfaces, `false` must be provided.\n- target (LuaWireConnector): Other connector to which a wire should be added.\n\nReturns:\n- boolean: Whether a connection was made.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaWireConnector",
      "method_name": "connect_to"
    }
  },
  {
    "type": "method",
    "name": "LuaWireConnector.disconnect_all",
    "content": "Method: LuaWireConnector.disconnect_all\nDescription: Removes all wires going out of this wire connector.\n\nParameters:\n- origin (defines.wire_origin)[Optional]: Origin of the wires to remove. Defaults to `defines.wire_origin.player`.\n\nReturns:\n- boolean: True if any wire was removed.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaWireConnector",
      "method_name": "disconnect_all"
    }
  },
  {
    "type": "method",
    "name": "LuaWireConnector.disconnect_from",
    "content": "Method: LuaWireConnector.disconnect_from\nDescription: Disconnects this connector from other wire connector.\n\nParameters:\n- origin (defines.wire_origin)[Optional]: Origin of the wire. Defaults to `defines.wire_origin.player`.\n- target (LuaWireConnector): Other connector to which wire to be removed should be removed.\n\nReturns:\n- boolean: Whether a connection was removed.\n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaWireConnector",
      "method_name": "disconnect_from"
    }
  },
  {
    "type": "method",
    "name": "LuaWireConnector.have_common_neighbour",
    "content": "Method: LuaWireConnector.have_common_neighbour\nDescription: Checks if this and other wire connector have a common neighbour.\n\nParameters:\n- ignore_ghost_neighbours (boolean)[Optional]: \n- other_connector (LuaWireConnector): Other connector to check for common neighbour.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaWireConnector",
      "method_name": "have_common_neighbour"
    }
  },
  {
    "type": "method",
    "name": "LuaWireConnector.is_connected_to",
    "content": "Method: LuaWireConnector.is_connected_to\nDescription: Checks if this connector has any wire going to the other connector.\n\nParameters:\n- origin (defines.wire_origin)[Optional]: Origin of the wire. Defaults to `defines.wire_origin.player`.\n- target (LuaWireConnector): Other connector to check for a connection to.\n\nReturns:\n- boolean: \n\nFormat:\n- {'takes_table': False}",
    "metadata": {
      "class_name": "LuaWireConnector",
      "method_name": "is_connected_to"
    }
  },
  {
    "type": "attribute",
    "name": "LuaWireConnector.connection_count",
    "content": "Attribute: connection_count \nRead_type: uint\n\nDescription: Amount of wires going out of this connector. It includes all wires (ghost wires and real wires).\n",
    "metadata": {
      "class_name": "LuaWireConnector",
      "attribute_name": "connection_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaWireConnector.connections",
    "content": "Attribute: connections \nRead_type: {'complex_type': 'array', 'value': 'WireConnection'}\n\nDescription: All wire connectors this connector is connected to.\n",
    "metadata": {
      "class_name": "LuaWireConnector",
      "attribute_name": "connections"
    }
  },
  {
    "type": "attribute",
    "name": "LuaWireConnector.is_ghost",
    "content": "Attribute: is_ghost \nRead_type: boolean\n\nDescription: If this connector is owned by an entity inside of a ghost. If any of 2 ends of a wire attaches to a ghost connector, then a wire is considered to be a ghost.\n",
    "metadata": {
      "class_name": "LuaWireConnector",
      "attribute_name": "is_ghost"
    }
  },
  {
    "type": "attribute",
    "name": "LuaWireConnector.network_id",
    "content": "Attribute: network_id \nRead_type: uint\n\nDescription: Index of a CircuitNetwork or ElectricSubNetwork which is going through this wire connector. Returns 0 if there is no network associated with this wire connector right now. CircuitNetwork indexes are independent of indexes of ElectricSubNetwork so they may collide with each other.",
    "metadata": {
      "class_name": "LuaWireConnector",
      "attribute_name": "network_id"
    }
  },
  {
    "type": "attribute",
    "name": "LuaWireConnector.object_name",
    "content": "Attribute: object_name \nRead_type: string\n\nDescription: The class name of this object. Available even when `valid` is false. For LuaStruct objects it may also be suffixed with a dotted path to a member of the struct.\n",
    "metadata": {
      "class_name": "LuaWireConnector",
      "attribute_name": "object_name"
    }
  },
  {
    "type": "attribute",
    "name": "LuaWireConnector.owner",
    "content": "Attribute: owner \nRead_type: LuaEntity\n\nDescription: The entity this wire connector belongs to. May return entity ghost instead if this wire connector belongs to inner entity.\n",
    "metadata": {
      "class_name": "LuaWireConnector",
      "attribute_name": "owner"
    }
  },
  {
    "type": "attribute",
    "name": "LuaWireConnector.real_connection_count",
    "content": "Attribute: real_connection_count \nRead_type: uint\n\nDescription: Amount of real wires going out of this connector. It only includes wires for which both wire connectors are real.\n",
    "metadata": {
      "class_name": "LuaWireConnector",
      "attribute_name": "real_connection_count"
    }
  },
  {
    "type": "attribute",
    "name": "LuaWireConnector.real_connections",
    "content": "Attribute: real_connections \nRead_type: {'complex_type': 'array', 'value': 'WireConnection'}\n\nDescription: All wire connectors this connector is connected to with real wires.\n",
    "metadata": {
      "class_name": "LuaWireConnector",
      "attribute_name": "real_connections"
    }
  },
  {
    "type": "attribute",
    "name": "LuaWireConnector.valid",
    "content": "Attribute: valid \nRead_type: boolean\n\nDescription: Is this object valid? This Lua object holds a reference to an object within the game engine. It is possible that the game-engine object is removed whilst a mod still holds the corresponding Lua object. If that happens, the object becomes invalid, i.e. this attribute will be `false`. Mods are advised to check for object validity if any change to the game state might have occurred between the creation of the Lua object and its access.",
    "metadata": {
      "class_name": "LuaWireConnector",
      "attribute_name": "valid"
    }
  },
  {
    "type": "attribute",
    "name": "LuaWireConnector.wire_connector_id",
    "content": "Attribute: wire_connector_id \nRead_type: defines.wire_connector_id\n\nDescription: Identifier of this connector in the entity this connector belongs to.\n",
    "metadata": {
      "class_name": "LuaWireConnector",
      "attribute_name": "wire_connector_id"
    }
  },
  {
    "type": "attribute",
    "name": "LuaWireConnector.wire_type",
    "content": "Attribute: wire_type \nRead_type: defines.wire_type\n\nDescription: The type of wires that can be connected to this connector.\n",
    "metadata": {
      "class_name": "LuaWireConnector",
      "attribute_name": "wire_type"
    }
  },
  {
    "type": "event",
    "name": "CustomInputEvent",
    "content": "Event: CustomInputEvent\nDescription: Called when a [CustomInputPrototype](prototype:CustomInputPrototype) is activated.\nExamples: [\"```\\n-- This will be raised when a custom input with the name \\\"my-potato-control\\\" and action \\\"lua\\\" is pressed\\nscript.on_event(\\\"my-potato-control\\\", function(event)\\n  game.print(\\\"Keyboard shortcut pressed on tick: \\\" ..tostring(event.tick))\\nend)\\n```\"]",
    "metadata": {
      "event_name": "CustomInputEvent"
    }
  },
  {
    "type": "data",
    "name": "cursor_display_location",
    "content": "Data: cursor_display_location \nType: GuiLocation\nDescription: The mouse cursor display location when the custom input was activated.\n",
    "metadata": {
      "event_name": "CustomInputEvent",
      "data_name": "cursor_display_location",
      "data_type": "GuiLocation"
    }
  },
  {
    "type": "data",
    "name": "cursor_position",
    "content": "Data: cursor_position \nType: MapPosition\nDescription: The mouse cursor position when the custom input was activated.\n",
    "metadata": {
      "event_name": "CustomInputEvent",
      "data_name": "cursor_position",
      "data_type": "MapPosition"
    }
  },
  {
    "type": "data",
    "name": "input_name",
    "content": "Data: input_name \nType: string\nDescription: The prototype name of the custom input that was activated.\n",
    "metadata": {
      "event_name": "CustomInputEvent",
      "data_name": "input_name",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "CustomInputEvent",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player that activated the custom input.\n",
    "metadata": {
      "event_name": "CustomInputEvent",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "selected_prototype",
    "content": "Data: selected_prototype [Optional]\nType: SelectedPrototypeData\nDescription: Information about the prototype that is selected when the custom input is used. Needs to be enabled on the custom input's prototype. `nil` if none is selected.\n",
    "metadata": {
      "event_name": "CustomInputEvent",
      "data_name": "selected_prototype",
      "data_type": "SelectedPrototypeData"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "CustomInputEvent",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_achievement_gained",
    "content": "Event: on_achievement_gained\nDescription: Called when an achievement is gained.\n",
    "metadata": {
      "event_name": "on_achievement_gained"
    }
  },
  {
    "type": "data",
    "name": "achievement",
    "content": "Data: achievement \nType: LuaAchievementPrototype\nDescription: \n",
    "metadata": {
      "event_name": "on_achievement_gained",
      "data_name": "achievement",
      "data_type": "LuaAchievementPrototype"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_achievement_gained",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player who gained the achievement.\n",
    "metadata": {
      "event_name": "on_achievement_gained",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_achievement_gained",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_ai_command_completed",
    "content": "Event: on_ai_command_completed\nDescription: Called when a unit/group completes a command.\n",
    "metadata": {
      "event_name": "on_ai_command_completed"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_ai_command_completed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "result",
    "content": "Data: result \nType: defines.behavior_result\nDescription: \n",
    "metadata": {
      "event_name": "on_ai_command_completed",
      "data_name": "result",
      "data_type": "defines.behavior_result"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_ai_command_completed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "unit_number",
    "content": "Data: unit_number \nType: uint\nDescription: unit_number/group_number of the unit/group which just completed a command.\n",
    "metadata": {
      "event_name": "on_ai_command_completed",
      "data_name": "unit_number",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "was_distracted",
    "content": "Data: was_distracted \nType: boolean\nDescription: Was this command generated by a distraction.\n",
    "metadata": {
      "event_name": "on_ai_command_completed",
      "data_name": "was_distracted",
      "data_type": "boolean"
    }
  },
  {
    "type": "event",
    "name": "on_area_cloned",
    "content": "Event: on_area_cloned\nDescription: Called when an area of the map is cloned.\n",
    "metadata": {
      "event_name": "on_area_cloned"
    }
  },
  {
    "type": "data",
    "name": "clear_destination_decoratives",
    "content": "Data: clear_destination_decoratives \nType: boolean\nDescription: \n",
    "metadata": {
      "event_name": "on_area_cloned",
      "data_name": "clear_destination_decoratives",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "clear_destination_entities",
    "content": "Data: clear_destination_entities \nType: boolean\nDescription: \n",
    "metadata": {
      "event_name": "on_area_cloned",
      "data_name": "clear_destination_entities",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "clone_decoratives",
    "content": "Data: clone_decoratives \nType: boolean\nDescription: \n",
    "metadata": {
      "event_name": "on_area_cloned",
      "data_name": "clone_decoratives",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "clone_entities",
    "content": "Data: clone_entities \nType: boolean\nDescription: \n",
    "metadata": {
      "event_name": "on_area_cloned",
      "data_name": "clone_entities",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "clone_tiles",
    "content": "Data: clone_tiles \nType: boolean\nDescription: \n",
    "metadata": {
      "event_name": "on_area_cloned",
      "data_name": "clone_tiles",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "destination_area",
    "content": "Data: destination_area \nType: BoundingBox\nDescription: \n",
    "metadata": {
      "event_name": "on_area_cloned",
      "data_name": "destination_area",
      "data_type": "BoundingBox"
    }
  },
  {
    "type": "data",
    "name": "destination_force",
    "content": "Data: destination_force [Optional]\nType: LuaForce\nDescription: \n",
    "metadata": {
      "event_name": "on_area_cloned",
      "data_name": "destination_force",
      "data_type": "LuaForce"
    }
  },
  {
    "type": "data",
    "name": "destination_surface",
    "content": "Data: destination_surface \nType: LuaSurface\nDescription: \n",
    "metadata": {
      "event_name": "on_area_cloned",
      "data_name": "destination_surface",
      "data_type": "LuaSurface"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_area_cloned",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "source_area",
    "content": "Data: source_area \nType: BoundingBox\nDescription: \n",
    "metadata": {
      "event_name": "on_area_cloned",
      "data_name": "source_area",
      "data_type": "BoundingBox"
    }
  },
  {
    "type": "data",
    "name": "source_surface",
    "content": "Data: source_surface \nType: LuaSurface\nDescription: \n",
    "metadata": {
      "event_name": "on_area_cloned",
      "data_name": "source_surface",
      "data_type": "LuaSurface"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_area_cloned",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_biter_base_built",
    "content": "Event: on_biter_base_built\nDescription: Called when a biter migration builds a base.\n\nThis will be called multiple times for each migration, once for every biter that is sacrificed to build part of the new base.\n",
    "metadata": {
      "event_name": "on_biter_base_built"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: The entity that was built.\n",
    "metadata": {
      "event_name": "on_biter_base_built",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_biter_base_built",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_biter_base_built",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_brush_cloned",
    "content": "Event: on_brush_cloned\nDescription: Called when a set of positions on the map is cloned.\n",
    "metadata": {
      "event_name": "on_brush_cloned"
    }
  },
  {
    "type": "data",
    "name": "clear_destination_decoratives",
    "content": "Data: clear_destination_decoratives \nType: boolean\nDescription: \n",
    "metadata": {
      "event_name": "on_brush_cloned",
      "data_name": "clear_destination_decoratives",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "clear_destination_entities",
    "content": "Data: clear_destination_entities \nType: boolean\nDescription: \n",
    "metadata": {
      "event_name": "on_brush_cloned",
      "data_name": "clear_destination_entities",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "clone_decoratives",
    "content": "Data: clone_decoratives \nType: boolean\nDescription: \n",
    "metadata": {
      "event_name": "on_brush_cloned",
      "data_name": "clone_decoratives",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "clone_entities",
    "content": "Data: clone_entities \nType: boolean\nDescription: \n",
    "metadata": {
      "event_name": "on_brush_cloned",
      "data_name": "clone_entities",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "clone_tiles",
    "content": "Data: clone_tiles \nType: boolean\nDescription: \n",
    "metadata": {
      "event_name": "on_brush_cloned",
      "data_name": "clone_tiles",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "destination_force",
    "content": "Data: destination_force [Optional]\nType: LuaForce\nDescription: \n",
    "metadata": {
      "event_name": "on_brush_cloned",
      "data_name": "destination_force",
      "data_type": "LuaForce"
    }
  },
  {
    "type": "data",
    "name": "destination_offset",
    "content": "Data: destination_offset \nType: TilePosition\nDescription: \n",
    "metadata": {
      "event_name": "on_brush_cloned",
      "data_name": "destination_offset",
      "data_type": "TilePosition"
    }
  },
  {
    "type": "data",
    "name": "destination_surface",
    "content": "Data: destination_surface \nType: LuaSurface\nDescription: \n",
    "metadata": {
      "event_name": "on_brush_cloned",
      "data_name": "destination_surface",
      "data_type": "LuaSurface"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_brush_cloned",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "source_offset",
    "content": "Data: source_offset \nType: TilePosition\nDescription: \n",
    "metadata": {
      "event_name": "on_brush_cloned",
      "data_name": "source_offset",
      "data_type": "TilePosition"
    }
  },
  {
    "type": "data",
    "name": "source_positions",
    "content": "Data: source_positions \nType: {'complex_type': 'array', 'value': 'TilePosition'}\nDescription: \n",
    "metadata": {
      "event_name": "on_brush_cloned",
      "data_name": "source_positions",
      "data_type": {
        "complex_type": "array",
        "value": "TilePosition"
      }
    }
  },
  {
    "type": "data",
    "name": "source_surface",
    "content": "Data: source_surface \nType: LuaSurface\nDescription: \n",
    "metadata": {
      "event_name": "on_brush_cloned",
      "data_name": "source_surface",
      "data_type": "LuaSurface"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_brush_cloned",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_build_base_arrived",
    "content": "Event: on_build_base_arrived\nDescription: Called when a [defines.command.build_base](runtime:defines.command.build_base) command reaches its destination, and before building starts.\n",
    "metadata": {
      "event_name": "on_build_base_arrived"
    }
  },
  {
    "type": "data",
    "name": "group",
    "content": "Data: group [Optional]\nType: LuaCommandable\nDescription: The unit group the command was assigned to.\n",
    "metadata": {
      "event_name": "on_build_base_arrived",
      "data_name": "group",
      "data_type": "LuaCommandable"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_build_base_arrived",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_build_base_arrived",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "unit",
    "content": "Data: unit [Optional]\nType: LuaEntity\nDescription: The unit the command was assigned to.\n",
    "metadata": {
      "event_name": "on_build_base_arrived",
      "data_name": "unit",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "event",
    "name": "on_built_entity",
    "content": "Event: on_built_entity\nDescription: Called when player builds something.\n",
    "metadata": {
      "event_name": "on_built_entity"
    }
  },
  {
    "type": "data",
    "name": "consumed_items",
    "content": "Data: consumed_items \nType: LuaInventory\nDescription: \n",
    "metadata": {
      "event_name": "on_built_entity",
      "data_name": "consumed_items",
      "data_type": "LuaInventory"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_built_entity",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_built_entity",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_built_entity",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tags",
    "content": "Data: tags [Optional]\nType: Tags\nDescription: The tags associated with this entity if any.\n",
    "metadata": {
      "event_name": "on_built_entity",
      "data_name": "tags",
      "data_type": "Tags"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_built_entity",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_cancelled_deconstruction",
    "content": "Event: on_cancelled_deconstruction\nDescription: Called when the deconstruction of an entity is canceled.\n",
    "metadata": {
      "event_name": "on_cancelled_deconstruction"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_cancelled_deconstruction",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_cancelled_deconstruction",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index [Optional]\nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_cancelled_deconstruction",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_cancelled_deconstruction",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_cancelled_upgrade",
    "content": "Event: on_cancelled_upgrade\nDescription: Called when the upgrade of an entity is canceled.\n",
    "metadata": {
      "event_name": "on_cancelled_upgrade"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_cancelled_upgrade",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_cancelled_upgrade",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index [Optional]\nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_cancelled_upgrade",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "quality",
    "content": "Data: quality \nType: LuaQualityPrototype\nDescription: \n",
    "metadata": {
      "event_name": "on_cancelled_upgrade",
      "data_name": "quality",
      "data_type": "LuaQualityPrototype"
    }
  },
  {
    "type": "data",
    "name": "target",
    "content": "Data: target \nType: LuaEntityPrototype\nDescription: \n",
    "metadata": {
      "event_name": "on_cancelled_upgrade",
      "data_name": "target",
      "data_type": "LuaEntityPrototype"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_cancelled_upgrade",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_cargo_pod_finished_ascending",
    "content": "Event: on_cargo_pod_finished_ascending\nDescription: Called when a cargo pod departs a surface.\n",
    "metadata": {
      "event_name": "on_cargo_pod_finished_ascending"
    }
  },
  {
    "type": "data",
    "name": "cargo_pod",
    "content": "Data: cargo_pod \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_cargo_pod_finished_ascending",
      "data_name": "cargo_pod",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "launched_by_rocket",
    "content": "Data: launched_by_rocket \nType: boolean\nDescription: True for pods spawned on a rocket. This event triggers for platform and modded pods as well, but only when true will the pod count towards rocket launch statistics and trigger 'rocket-launched' achievement with objective_condition.",
    "metadata": {
      "event_name": "on_cargo_pod_finished_ascending",
      "data_name": "launched_by_rocket",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_cargo_pod_finished_ascending",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index [Optional]\nType: uint\nDescription: The player that is riding the rocket, if any.\n",
    "metadata": {
      "event_name": "on_cargo_pod_finished_ascending",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_cargo_pod_finished_ascending",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_character_corpse_expired",
    "content": "Event: on_character_corpse_expired\nDescription: Called when a character corpse expires due to timeout or all of the items being removed from it.\n\nthis is not called if the corpse is mined. See [defines.events.on_pre_player_mined_item](runtime:defines.events.on_pre_player_mined_item) to detect that.",
    "metadata": {
      "event_name": "on_character_corpse_expired"
    }
  },
  {
    "type": "data",
    "name": "corpse",
    "content": "Data: corpse \nType: LuaEntity\nDescription: The corpse.\n",
    "metadata": {
      "event_name": "on_character_corpse_expired",
      "data_name": "corpse",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_character_corpse_expired",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_character_corpse_expired",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_chart_tag_added",
    "content": "Event: on_chart_tag_added\nDescription: Called when a chart tag is created.\n",
    "metadata": {
      "event_name": "on_chart_tag_added"
    }
  },
  {
    "type": "data",
    "name": "force",
    "content": "Data: force \nType: LuaForce\nDescription: \n",
    "metadata": {
      "event_name": "on_chart_tag_added",
      "data_name": "force",
      "data_type": "LuaForce"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_chart_tag_added",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index [Optional]\nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_chart_tag_added",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tag",
    "content": "Data: tag \nType: LuaCustomChartTag\nDescription: \n",
    "metadata": {
      "event_name": "on_chart_tag_added",
      "data_name": "tag",
      "data_type": "LuaCustomChartTag"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_chart_tag_added",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_chart_tag_modified",
    "content": "Event: on_chart_tag_modified\nDescription: Called when a chart tag is modified by a player.\n",
    "metadata": {
      "event_name": "on_chart_tag_modified"
    }
  },
  {
    "type": "data",
    "name": "force",
    "content": "Data: force \nType: LuaForce\nDescription: \n",
    "metadata": {
      "event_name": "on_chart_tag_modified",
      "data_name": "force",
      "data_type": "LuaForce"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_chart_tag_modified",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "old_icon",
    "content": "Data: old_icon \nType: SignalID\nDescription: \n",
    "metadata": {
      "event_name": "on_chart_tag_modified",
      "data_name": "old_icon",
      "data_type": "SignalID"
    }
  },
  {
    "type": "data",
    "name": "old_player_index",
    "content": "Data: old_player_index [Optional]\nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_chart_tag_modified",
      "data_name": "old_player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "old_position",
    "content": "Data: old_position \nType: MapPosition\nDescription: \n",
    "metadata": {
      "event_name": "on_chart_tag_modified",
      "data_name": "old_position",
      "data_type": "MapPosition"
    }
  },
  {
    "type": "data",
    "name": "old_surface",
    "content": "Data: old_surface \nType: LuaSurface\nDescription: \n",
    "metadata": {
      "event_name": "on_chart_tag_modified",
      "data_name": "old_surface",
      "data_type": "LuaSurface"
    }
  },
  {
    "type": "data",
    "name": "old_text",
    "content": "Data: old_text \nType: string\nDescription: \n",
    "metadata": {
      "event_name": "on_chart_tag_modified",
      "data_name": "old_text",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index [Optional]\nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_chart_tag_modified",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tag",
    "content": "Data: tag \nType: LuaCustomChartTag\nDescription: \n",
    "metadata": {
      "event_name": "on_chart_tag_modified",
      "data_name": "tag",
      "data_type": "LuaCustomChartTag"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_chart_tag_modified",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_chart_tag_removed",
    "content": "Event: on_chart_tag_removed\nDescription: Called just before a chart tag is deleted.\n",
    "metadata": {
      "event_name": "on_chart_tag_removed"
    }
  },
  {
    "type": "data",
    "name": "force",
    "content": "Data: force \nType: LuaForce\nDescription: \n",
    "metadata": {
      "event_name": "on_chart_tag_removed",
      "data_name": "force",
      "data_type": "LuaForce"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_chart_tag_removed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index [Optional]\nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_chart_tag_removed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tag",
    "content": "Data: tag \nType: LuaCustomChartTag\nDescription: \n",
    "metadata": {
      "event_name": "on_chart_tag_removed",
      "data_name": "tag",
      "data_type": "LuaCustomChartTag"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_chart_tag_removed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_chunk_charted",
    "content": "Event: on_chunk_charted\nDescription: Called when a chunk is charted or re-charted.\n",
    "metadata": {
      "event_name": "on_chunk_charted"
    }
  },
  {
    "type": "data",
    "name": "area",
    "content": "Data: area \nType: BoundingBox\nDescription: Area of the chunk.\n",
    "metadata": {
      "event_name": "on_chunk_charted",
      "data_name": "area",
      "data_type": "BoundingBox"
    }
  },
  {
    "type": "data",
    "name": "force",
    "content": "Data: force \nType: LuaForce\nDescription: \n",
    "metadata": {
      "event_name": "on_chunk_charted",
      "data_name": "force",
      "data_type": "LuaForce"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_chunk_charted",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "position",
    "content": "Data: position \nType: ChunkPosition\nDescription: \n",
    "metadata": {
      "event_name": "on_chunk_charted",
      "data_name": "position",
      "data_type": "ChunkPosition"
    }
  },
  {
    "type": "data",
    "name": "surface_index",
    "content": "Data: surface_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_chunk_charted",
      "data_name": "surface_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_chunk_charted",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_chunk_deleted",
    "content": "Event: on_chunk_deleted\nDescription: Called when one or more chunks are deleted using [LuaSurface::delete_chunk](runtime:LuaSurface::delete_chunk).\n",
    "metadata": {
      "event_name": "on_chunk_deleted"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_chunk_deleted",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "positions",
    "content": "Data: positions \nType: {'complex_type': 'array', 'value': 'ChunkPosition'}\nDescription: The chunks deleted.\n",
    "metadata": {
      "event_name": "on_chunk_deleted",
      "data_name": "positions",
      "data_type": {
        "complex_type": "array",
        "value": "ChunkPosition"
      }
    }
  },
  {
    "type": "data",
    "name": "surface_index",
    "content": "Data: surface_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_chunk_deleted",
      "data_name": "surface_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_chunk_deleted",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_chunk_generated",
    "content": "Event: on_chunk_generated\nDescription: Called when a chunk is generated.\n",
    "metadata": {
      "event_name": "on_chunk_generated"
    }
  },
  {
    "type": "data",
    "name": "area",
    "content": "Data: area \nType: BoundingBox\nDescription: Area of the chunk.\n",
    "metadata": {
      "event_name": "on_chunk_generated",
      "data_name": "area",
      "data_type": "BoundingBox"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_chunk_generated",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "position",
    "content": "Data: position \nType: ChunkPosition\nDescription: Position of the chunk.\n",
    "metadata": {
      "event_name": "on_chunk_generated",
      "data_name": "position",
      "data_type": "ChunkPosition"
    }
  },
  {
    "type": "data",
    "name": "surface",
    "content": "Data: surface \nType: LuaSurface\nDescription: The surface the chunk is on.\n",
    "metadata": {
      "event_name": "on_chunk_generated",
      "data_name": "surface",
      "data_type": "LuaSurface"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_chunk_generated",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_combat_robot_expired",
    "content": "Event: on_combat_robot_expired\nDescription: Called when a combat robot expires through a lack of energy, or timeout.\n",
    "metadata": {
      "event_name": "on_combat_robot_expired"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_combat_robot_expired",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "owner",
    "content": "Data: owner [Optional]\nType: LuaEntity\nDescription: The entity that owns the robot if any.\n",
    "metadata": {
      "event_name": "on_combat_robot_expired",
      "data_name": "owner",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "robot",
    "content": "Data: robot \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_combat_robot_expired",
      "data_name": "robot",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_combat_robot_expired",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_console_chat",
    "content": "Event: on_console_chat\nDescription: Called when a message is sent to the in-game console, either by a player or through the server interface.\n\nThis event only fires for plain messages, not for any commands (including `/shout` or `/whisper`).\n",
    "metadata": {
      "event_name": "on_console_chat"
    }
  },
  {
    "type": "data",
    "name": "message",
    "content": "Data: message \nType: string\nDescription: The chat message that was sent.\n",
    "metadata": {
      "event_name": "on_console_chat",
      "data_name": "message",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_console_chat",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index [Optional]\nType: uint\nDescription: The player doing the chatting, if any.\n",
    "metadata": {
      "event_name": "on_console_chat",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_console_chat",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_console_command",
    "content": "Event: on_console_command\nDescription: Called when someone enters a command-like message regardless of it being a valid command.\n",
    "metadata": {
      "event_name": "on_console_command"
    }
  },
  {
    "type": "data",
    "name": "command",
    "content": "Data: command \nType: string\nDescription: The command as typed without the preceding forward slash ('/').\n",
    "metadata": {
      "event_name": "on_console_command",
      "data_name": "command",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_console_command",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "parameters",
    "content": "Data: parameters \nType: string\nDescription: The parameters provided if any.\n",
    "metadata": {
      "event_name": "on_console_command",
      "data_name": "parameters",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index [Optional]\nType: uint\nDescription: The player if any.\n",
    "metadata": {
      "event_name": "on_console_command",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_console_command",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_cutscene_cancelled",
    "content": "Event: on_cutscene_cancelled\nDescription: Called when a cutscene is cancelled by the player or by script.\n",
    "metadata": {
      "event_name": "on_cutscene_cancelled"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_cutscene_cancelled",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player the cutscene was shown to.\n",
    "metadata": {
      "event_name": "on_cutscene_cancelled",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_cutscene_cancelled",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_cutscene_finished",
    "content": "Event: on_cutscene_finished\nDescription: Called when a cutscene finishes naturally (was not cancelled).\n",
    "metadata": {
      "event_name": "on_cutscene_finished"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_cutscene_finished",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player the cutscene was shown to.\n",
    "metadata": {
      "event_name": "on_cutscene_finished",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_cutscene_finished",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_cutscene_started",
    "content": "Event: on_cutscene_started\nDescription: Called when a cutscene starts.\n",
    "metadata": {
      "event_name": "on_cutscene_started"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_cutscene_started",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player the cutscene is being shown to.\n",
    "metadata": {
      "event_name": "on_cutscene_started",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_cutscene_started",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_cutscene_waypoint_reached",
    "content": "Event: on_cutscene_waypoint_reached\nDescription: Called when a cutscene is playing, each time it reaches a waypoint in that cutscene.\n\nThis refers to an index in the table previously passed to set_controller which started the cutscene.\n",
    "metadata": {
      "event_name": "on_cutscene_waypoint_reached"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_cutscene_waypoint_reached",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player index of the player viewing the cutscene.\n",
    "metadata": {
      "event_name": "on_cutscene_waypoint_reached",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_cutscene_waypoint_reached",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "waypoint_index",
    "content": "Data: waypoint_index \nType: uint\nDescription: The index of the waypoint we just completed.\n",
    "metadata": {
      "event_name": "on_cutscene_waypoint_reached",
      "data_name": "waypoint_index",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_entity_cloned",
    "content": "Event: on_entity_cloned\nDescription: Called when an entity is cloned. The filter applies to the source entity.\n",
    "metadata": {
      "event_name": "on_entity_cloned"
    }
  },
  {
    "type": "data",
    "name": "destination",
    "content": "Data: destination \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_entity_cloned",
      "data_name": "destination",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_entity_cloned",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "source",
    "content": "Data: source \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_entity_cloned",
      "data_name": "source",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_entity_cloned",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_entity_color_changed",
    "content": "Event: on_entity_color_changed\nDescription: Called after an entity has been recolored either by the player or through script.\n\nAutomatic recoloring due to [LuaPlayer::color](runtime:LuaPlayer::color) will not raise events, as that is a separate mechanism.\n",
    "metadata": {
      "event_name": "on_entity_color_changed"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: The entity that was recolored.\n",
    "metadata": {
      "event_name": "on_entity_color_changed",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_entity_color_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_entity_color_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_entity_damaged",
    "content": "Event: on_entity_damaged\nDescription: Called when an entity is damaged. This is not called when an entities health is set directly by another mod.\n",
    "metadata": {
      "event_name": "on_entity_damaged"
    }
  },
  {
    "type": "data",
    "name": "cause",
    "content": "Data: cause [Optional]\nType: LuaEntity\nDescription: The entity that originally triggered the events that led to this damage, if available (e.g. the character, turret, etc. that pulled the trigger).\n",
    "metadata": {
      "event_name": "on_entity_damaged",
      "data_name": "cause",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "damage_type",
    "content": "Data: damage_type \nType: LuaDamagePrototype\nDescription: \n",
    "metadata": {
      "event_name": "on_entity_damaged",
      "data_name": "damage_type",
      "data_type": "LuaDamagePrototype"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_entity_damaged",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "final_damage_amount",
    "content": "Data: final_damage_amount \nType: float\nDescription: The damage amount after resistances.\n",
    "metadata": {
      "event_name": "on_entity_damaged",
      "data_name": "final_damage_amount",
      "data_type": "float"
    }
  },
  {
    "type": "data",
    "name": "final_health",
    "content": "Data: final_health \nType: float\nDescription: The health of the entity after the damage was applied.\n",
    "metadata": {
      "event_name": "on_entity_damaged",
      "data_name": "final_health",
      "data_type": "float"
    }
  },
  {
    "type": "data",
    "name": "force",
    "content": "Data: force [Optional]\nType: LuaForce\nDescription: The force that did the attacking if any.\n",
    "metadata": {
      "event_name": "on_entity_damaged",
      "data_name": "force",
      "data_type": "LuaForce"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_entity_damaged",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "original_damage_amount",
    "content": "Data: original_damage_amount \nType: float\nDescription: The damage amount before resistances.\n",
    "metadata": {
      "event_name": "on_entity_damaged",
      "data_name": "original_damage_amount",
      "data_type": "float"
    }
  },
  {
    "type": "data",
    "name": "source",
    "content": "Data: source [Optional]\nType: LuaEntity\nDescription: The entity that is directly dealing the damage, if available (e.g. the projectile, flame, sticker, grenade, laser beam, etc.).\n",
    "metadata": {
      "event_name": "on_entity_damaged",
      "data_name": "source",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_entity_damaged",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_entity_died",
    "content": "Event: on_entity_died\nDescription: Called when an entity dies.\n",
    "metadata": {
      "event_name": "on_entity_died"
    }
  },
  {
    "type": "data",
    "name": "cause",
    "content": "Data: cause [Optional]\nType: LuaEntity\nDescription: The entity that did the killing if available.\n",
    "metadata": {
      "event_name": "on_entity_died",
      "data_name": "cause",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "damage_type",
    "content": "Data: damage_type [Optional]\nType: LuaDamagePrototype\nDescription: The damage type if any.\n",
    "metadata": {
      "event_name": "on_entity_died",
      "data_name": "damage_type",
      "data_type": "LuaDamagePrototype"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: The entity that died.\n",
    "metadata": {
      "event_name": "on_entity_died",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "force",
    "content": "Data: force [Optional]\nType: LuaForce\nDescription: The force that did the killing if any.\n",
    "metadata": {
      "event_name": "on_entity_died",
      "data_name": "force",
      "data_type": "LuaForce"
    }
  },
  {
    "type": "data",
    "name": "loot",
    "content": "Data: loot \nType: LuaInventory\nDescription: The loot generated by this entity if any.\n",
    "metadata": {
      "event_name": "on_entity_died",
      "data_name": "loot",
      "data_type": "LuaInventory"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_entity_died",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_entity_died",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_entity_logistic_slot_changed",
    "content": "Event: on_entity_logistic_slot_changed\nDescription: Called when one of an entity's logistic slots changes.\n",
    "metadata": {
      "event_name": "on_entity_logistic_slot_changed"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: The entity for whom a logistic slot was changed.\n",
    "metadata": {
      "event_name": "on_entity_logistic_slot_changed",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_entity_logistic_slot_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index [Optional]\nType: uint\nDescription: The player who changed the slot, or `nil` if changed by script.\n",
    "metadata": {
      "event_name": "on_entity_logistic_slot_changed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "section",
    "content": "Data: section \nType: LuaLogisticSection\nDescription: The section changed.\n",
    "metadata": {
      "event_name": "on_entity_logistic_slot_changed",
      "data_name": "section",
      "data_type": "LuaLogisticSection"
    }
  },
  {
    "type": "data",
    "name": "slot_index",
    "content": "Data: slot_index \nType: uint\nDescription: The slot index that was changed.\n",
    "metadata": {
      "event_name": "on_entity_logistic_slot_changed",
      "data_name": "slot_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_entity_logistic_slot_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_entity_renamed",
    "content": "Event: on_entity_renamed\nDescription: Called after an entity has been renamed either by the player or through script.\n",
    "metadata": {
      "event_name": "on_entity_renamed"
    }
  },
  {
    "type": "data",
    "name": "by_script",
    "content": "Data: by_script \nType: boolean\nDescription: \n",
    "metadata": {
      "event_name": "on_entity_renamed",
      "data_name": "by_script",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_entity_renamed",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_entity_renamed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "old_name",
    "content": "Data: old_name \nType: string\nDescription: \n",
    "metadata": {
      "event_name": "on_entity_renamed",
      "data_name": "old_name",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index [Optional]\nType: uint\nDescription: If by_script is true this will not be included.\n",
    "metadata": {
      "event_name": "on_entity_renamed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_entity_renamed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_entity_settings_pasted",
    "content": "Event: on_entity_settings_pasted\nDescription: Called after entity copy-paste is done.\n",
    "metadata": {
      "event_name": "on_entity_settings_pasted"
    }
  },
  {
    "type": "data",
    "name": "destination",
    "content": "Data: destination \nType: LuaEntity\nDescription: The destination entity settings were copied to.\n",
    "metadata": {
      "event_name": "on_entity_settings_pasted",
      "data_name": "destination",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_entity_settings_pasted",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_entity_settings_pasted",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "source",
    "content": "Data: source \nType: LuaEntity\nDescription: The source entity settings were copied from.\n",
    "metadata": {
      "event_name": "on_entity_settings_pasted",
      "data_name": "source",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_entity_settings_pasted",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_entity_spawned",
    "content": "Event: on_entity_spawned\nDescription: Called when an entity is spawned by a EnemySpawner\n",
    "metadata": {
      "event_name": "on_entity_spawned"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_entity_spawned",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_entity_spawned",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "spawner",
    "content": "Data: spawner \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_entity_spawned",
      "data_name": "spawner",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_entity_spawned",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_equipment_inserted",
    "content": "Event: on_equipment_inserted\nDescription: Called after equipment is inserted into an equipment grid.\n",
    "metadata": {
      "event_name": "on_equipment_inserted"
    }
  },
  {
    "type": "data",
    "name": "equipment",
    "content": "Data: equipment \nType: LuaEquipment\nDescription: The equipment inserted.\n",
    "metadata": {
      "event_name": "on_equipment_inserted",
      "data_name": "equipment",
      "data_type": "LuaEquipment"
    }
  },
  {
    "type": "data",
    "name": "grid",
    "content": "Data: grid \nType: LuaEquipmentGrid\nDescription: The equipment grid inserted into.\n",
    "metadata": {
      "event_name": "on_equipment_inserted",
      "data_name": "grid",
      "data_type": "LuaEquipmentGrid"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_equipment_inserted",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_equipment_inserted",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_equipment_removed",
    "content": "Event: on_equipment_removed\nDescription: Called after equipment is removed from an equipment grid.\n",
    "metadata": {
      "event_name": "on_equipment_removed"
    }
  },
  {
    "type": "data",
    "name": "count",
    "content": "Data: count \nType: uint\nDescription: The count of equipment removed.\n",
    "metadata": {
      "event_name": "on_equipment_removed",
      "data_name": "count",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "equipment",
    "content": "Data: equipment \nType: string\nDescription: The equipment removed.\n",
    "metadata": {
      "event_name": "on_equipment_removed",
      "data_name": "equipment",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "grid",
    "content": "Data: grid \nType: LuaEquipmentGrid\nDescription: The equipment grid removed from.\n",
    "metadata": {
      "event_name": "on_equipment_removed",
      "data_name": "grid",
      "data_type": "LuaEquipmentGrid"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_equipment_removed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "quality",
    "content": "Data: quality \nType: string\nDescription: The equipment quality.\n",
    "metadata": {
      "event_name": "on_equipment_removed",
      "data_name": "quality",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_equipment_removed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_force_cease_fire_changed",
    "content": "Event: on_force_cease_fire_changed\nDescription: Called when the a forces cease fire values change.\n",
    "metadata": {
      "event_name": "on_force_cease_fire_changed"
    }
  },
  {
    "type": "data",
    "name": "added",
    "content": "Data: added \nType: boolean\nDescription: If the other force was added or removed.\n",
    "metadata": {
      "event_name": "on_force_cease_fire_changed",
      "data_name": "added",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "force",
    "content": "Data: force \nType: LuaForce\nDescription: The force who's cease fire changed.\n",
    "metadata": {
      "event_name": "on_force_cease_fire_changed",
      "data_name": "force",
      "data_type": "LuaForce"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_force_cease_fire_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "other_force",
    "content": "Data: other_force \nType: LuaForce\nDescription: Which force was added or removed.\n",
    "metadata": {
      "event_name": "on_force_cease_fire_changed",
      "data_name": "other_force",
      "data_type": "LuaForce"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_force_cease_fire_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_force_created",
    "content": "Event: on_force_created\nDescription: Called when a new force is created using `game.create_force()`\n\nThis is not called when the default forces (`'player'`, `'enemy'`, `'neutral'`) are created as they will always exist.\n",
    "metadata": {
      "event_name": "on_force_created"
    }
  },
  {
    "type": "data",
    "name": "force",
    "content": "Data: force \nType: LuaForce\nDescription: The newly created force.\n",
    "metadata": {
      "event_name": "on_force_created",
      "data_name": "force",
      "data_type": "LuaForce"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_force_created",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_force_created",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_force_friends_changed",
    "content": "Event: on_force_friends_changed\nDescription: Called when the a forces friends change.\n",
    "metadata": {
      "event_name": "on_force_friends_changed"
    }
  },
  {
    "type": "data",
    "name": "added",
    "content": "Data: added \nType: boolean\nDescription: If the other force was added or removed.\n",
    "metadata": {
      "event_name": "on_force_friends_changed",
      "data_name": "added",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "force",
    "content": "Data: force \nType: LuaForce\nDescription: The force who's friends changed.\n",
    "metadata": {
      "event_name": "on_force_friends_changed",
      "data_name": "force",
      "data_type": "LuaForce"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_force_friends_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "other_force",
    "content": "Data: other_force \nType: LuaForce\nDescription: Which force was added or removed.\n",
    "metadata": {
      "event_name": "on_force_friends_changed",
      "data_name": "other_force",
      "data_type": "LuaForce"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_force_friends_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_force_reset",
    "content": "Event: on_force_reset\nDescription: Called when [LuaForce::reset](runtime:LuaForce::reset) is finished.\n",
    "metadata": {
      "event_name": "on_force_reset"
    }
  },
  {
    "type": "data",
    "name": "force",
    "content": "Data: force \nType: LuaForce\nDescription: \n",
    "metadata": {
      "event_name": "on_force_reset",
      "data_name": "force",
      "data_type": "LuaForce"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_force_reset",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_force_reset",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_forces_merged",
    "content": "Event: on_forces_merged\nDescription: Called after two forces have been merged using `game.merge_forces()`.\n\nThe source force is invalidated before this event is called and the name can be re-used in this event if desired.\n",
    "metadata": {
      "event_name": "on_forces_merged"
    }
  },
  {
    "type": "data",
    "name": "destination",
    "content": "Data: destination \nType: LuaForce\nDescription: The force entities where reassigned to.\n",
    "metadata": {
      "event_name": "on_forces_merged",
      "data_name": "destination",
      "data_type": "LuaForce"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_forces_merged",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "source_index",
    "content": "Data: source_index \nType: uint\nDescription: The index of the destroyed force.\n",
    "metadata": {
      "event_name": "on_forces_merged",
      "data_name": "source_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "source_name",
    "content": "Data: source_name \nType: string\nDescription: The force destroyed.\n",
    "metadata": {
      "event_name": "on_forces_merged",
      "data_name": "source_name",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_forces_merged",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_forces_merging",
    "content": "Event: on_forces_merging\nDescription: Called when two forces are about to be merged using `game.merge_forces()`.\n",
    "metadata": {
      "event_name": "on_forces_merging"
    }
  },
  {
    "type": "data",
    "name": "destination",
    "content": "Data: destination \nType: LuaForce\nDescription: The force to reassign entities to.\n",
    "metadata": {
      "event_name": "on_forces_merging",
      "data_name": "destination",
      "data_type": "LuaForce"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_forces_merging",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "source",
    "content": "Data: source \nType: LuaForce\nDescription: The force to be destroyed\n",
    "metadata": {
      "event_name": "on_forces_merging",
      "data_name": "source",
      "data_type": "LuaForce"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_forces_merging",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_game_created_from_scenario",
    "content": "Event: on_game_created_from_scenario\nDescription: Called when a game is created from a scenario. This is fired for every mod, even when the scenario's save data already includes it. In those cases however, [LuaBootstrap::on_init](runtime:LuaBootstrap::on_init) is not fired.\n\nThis event is not fired when the scenario is loaded via the map editor.",
    "metadata": {
      "event_name": "on_game_created_from_scenario"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_game_created_from_scenario",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_game_created_from_scenario",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_gui_checked_state_changed",
    "content": "Event: on_gui_checked_state_changed\nDescription: Called when [LuaGuiElement](runtime:LuaGuiElement) checked state is changed (related to checkboxes and radio buttons).\n",
    "metadata": {
      "event_name": "on_gui_checked_state_changed"
    }
  },
  {
    "type": "data",
    "name": "element",
    "content": "Data: element \nType: LuaGuiElement\nDescription: The element whose checked state changed.\n",
    "metadata": {
      "event_name": "on_gui_checked_state_changed",
      "data_name": "element",
      "data_type": "LuaGuiElement"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_gui_checked_state_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player who did the change.\n",
    "metadata": {
      "event_name": "on_gui_checked_state_changed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_gui_checked_state_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_gui_click",
    "content": "Event: on_gui_click\nDescription: Called when [LuaGuiElement](runtime:LuaGuiElement) is clicked.\n",
    "metadata": {
      "event_name": "on_gui_click"
    }
  },
  {
    "type": "data",
    "name": "alt",
    "content": "Data: alt \nType: boolean\nDescription: If alt was pressed.\n",
    "metadata": {
      "event_name": "on_gui_click",
      "data_name": "alt",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "button",
    "content": "Data: button \nType: defines.mouse_button_type\nDescription: The mouse button used if any.\n",
    "metadata": {
      "event_name": "on_gui_click",
      "data_name": "button",
      "data_type": "defines.mouse_button_type"
    }
  },
  {
    "type": "data",
    "name": "control",
    "content": "Data: control \nType: boolean\nDescription: If control was pressed.\n",
    "metadata": {
      "event_name": "on_gui_click",
      "data_name": "control",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "cursor_display_location",
    "content": "Data: cursor_display_location \nType: GuiLocation\nDescription: The display location of the player's cursor.\n",
    "metadata": {
      "event_name": "on_gui_click",
      "data_name": "cursor_display_location",
      "data_type": "GuiLocation"
    }
  },
  {
    "type": "data",
    "name": "element",
    "content": "Data: element \nType: LuaGuiElement\nDescription: The clicked element.\n",
    "metadata": {
      "event_name": "on_gui_click",
      "data_name": "element",
      "data_type": "LuaGuiElement"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_gui_click",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player who did the clicking.\n",
    "metadata": {
      "event_name": "on_gui_click",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "shift",
    "content": "Data: shift \nType: boolean\nDescription: If shift was pressed.\n",
    "metadata": {
      "event_name": "on_gui_click",
      "data_name": "shift",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_gui_click",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_gui_closed",
    "content": "Event: on_gui_closed\nDescription: Called when the player closes the GUI they have open.\n\nThis can only be raised when the GUI's player controller is still valid. If a GUI is thus closed due to the player disconnecting, dying, or becoming a spectator in other ways, it won't cause this event to be raised.",
    "metadata": {
      "event_name": "on_gui_closed"
    }
  },
  {
    "type": "event",
    "name": "on_gui_closed",
    "content": "It's not advised to open any other GUI during this event because if this is run as a request to open a different GUI the game will force close the new opened GUI without notice to ensure the original requested GUI is opened.",
    "metadata": {
      "event_name": "on_gui_closed"
    }
  },
  {
    "type": "data",
    "name": "element",
    "content": "Data: element [Optional]\nType: LuaGuiElement\nDescription: The custom GUI element that was open\n",
    "metadata": {
      "event_name": "on_gui_closed",
      "data_name": "element",
      "data_type": "LuaGuiElement"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity [Optional]\nType: LuaEntity\nDescription: The entity that was open\n",
    "metadata": {
      "event_name": "on_gui_closed",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "equipment",
    "content": "Data: equipment [Optional]\nType: LuaEquipment\nDescription: The equipment that was open\n",
    "metadata": {
      "event_name": "on_gui_closed",
      "data_name": "equipment",
      "data_type": "LuaEquipment"
    }
  },
  {
    "type": "data",
    "name": "gui_type",
    "content": "Data: gui_type \nType: defines.gui_type\nDescription: The GUI type that was open.\n",
    "metadata": {
      "event_name": "on_gui_closed",
      "data_name": "gui_type",
      "data_type": "defines.gui_type"
    }
  },
  {
    "type": "data",
    "name": "inventory",
    "content": "Data: inventory [Optional]\nType: LuaInventory\nDescription: The script inventory that was open\n",
    "metadata": {
      "event_name": "on_gui_closed",
      "data_name": "inventory",
      "data_type": "LuaInventory"
    }
  },
  {
    "type": "data",
    "name": "item",
    "content": "Data: item [Optional]\nType: LuaItemStack\nDescription: The item that was open\n",
    "metadata": {
      "event_name": "on_gui_closed",
      "data_name": "item",
      "data_type": "LuaItemStack"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_gui_closed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "other_player",
    "content": "Data: other_player [Optional]\nType: LuaPlayer\nDescription: The other player that was open\n",
    "metadata": {
      "event_name": "on_gui_closed",
      "data_name": "other_player",
      "data_type": "LuaPlayer"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player.\n",
    "metadata": {
      "event_name": "on_gui_closed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "technology",
    "content": "Data: technology [Optional]\nType: LuaTechnology\nDescription: The technology that was automatically selected when opening the research GUI\n",
    "metadata": {
      "event_name": "on_gui_closed",
      "data_name": "technology",
      "data_type": "LuaTechnology"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_gui_closed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tile_position",
    "content": "Data: tile_position [Optional]\nType: TilePosition\nDescription: The tile position that was open\n",
    "metadata": {
      "event_name": "on_gui_closed",
      "data_name": "tile_position",
      "data_type": "TilePosition"
    }
  },
  {
    "type": "event",
    "name": "on_gui_confirmed",
    "content": "Event: on_gui_confirmed\nDescription: Called when a [LuaGuiElement](runtime:LuaGuiElement) is confirmed, for example by pressing Enter in a textfield.\n",
    "metadata": {
      "event_name": "on_gui_confirmed"
    }
  },
  {
    "type": "data",
    "name": "alt",
    "content": "Data: alt \nType: boolean\nDescription: If alt was pressed.\n",
    "metadata": {
      "event_name": "on_gui_confirmed",
      "data_name": "alt",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "control",
    "content": "Data: control \nType: boolean\nDescription: If control was pressed.\n",
    "metadata": {
      "event_name": "on_gui_confirmed",
      "data_name": "control",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "element",
    "content": "Data: element \nType: LuaGuiElement\nDescription: The confirmed element.\n",
    "metadata": {
      "event_name": "on_gui_confirmed",
      "data_name": "element",
      "data_type": "LuaGuiElement"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_gui_confirmed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player who did the confirming.\n",
    "metadata": {
      "event_name": "on_gui_confirmed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "shift",
    "content": "Data: shift \nType: boolean\nDescription: If shift was pressed.\n",
    "metadata": {
      "event_name": "on_gui_confirmed",
      "data_name": "shift",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_gui_confirmed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_gui_elem_changed",
    "content": "Event: on_gui_elem_changed\nDescription: Called when [LuaGuiElement](runtime:LuaGuiElement) element value is changed (related to choose element buttons).\n",
    "metadata": {
      "event_name": "on_gui_elem_changed"
    }
  },
  {
    "type": "data",
    "name": "element",
    "content": "Data: element \nType: LuaGuiElement\nDescription: The element whose element value changed.\n",
    "metadata": {
      "event_name": "on_gui_elem_changed",
      "data_name": "element",
      "data_type": "LuaGuiElement"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_gui_elem_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player who did the change.\n",
    "metadata": {
      "event_name": "on_gui_elem_changed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_gui_elem_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_gui_hover",
    "content": "Event: on_gui_hover\nDescription: Called when [LuaGuiElement](runtime:LuaGuiElement) is hovered by the mouse.\n\nOnly fired for events whose [LuaGuiElement::raise_hover_events](runtime:LuaGuiElement::raise_hover_events) is `true`.\n",
    "metadata": {
      "event_name": "on_gui_hover"
    }
  },
  {
    "type": "data",
    "name": "element",
    "content": "Data: element \nType: LuaGuiElement\nDescription: The element that is being hovered over.\n",
    "metadata": {
      "event_name": "on_gui_hover",
      "data_name": "element",
      "data_type": "LuaGuiElement"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_gui_hover",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player whose cursor is hovering.\n",
    "metadata": {
      "event_name": "on_gui_hover",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_gui_hover",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_gui_leave",
    "content": "Event: on_gui_leave\nDescription: Called when the player's cursor leaves a [LuaGuiElement](runtime:LuaGuiElement) that was previously hovered.\n\nOnly fired for events whose [LuaGuiElement::raise_hover_events](runtime:LuaGuiElement::raise_hover_events) is `true`.",
    "metadata": {
      "event_name": "on_gui_leave"
    }
  },
  {
    "type": "data",
    "name": "element",
    "content": "Data: element \nType: LuaGuiElement\nDescription: The element that was being hovered.\n",
    "metadata": {
      "event_name": "on_gui_leave",
      "data_name": "element",
      "data_type": "LuaGuiElement"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_gui_leave",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player whose cursor was hovering.\n",
    "metadata": {
      "event_name": "on_gui_leave",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_gui_leave",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_gui_location_changed",
    "content": "Event: on_gui_location_changed\nDescription: Called when [LuaGuiElement](runtime:LuaGuiElement) element location is changed (related to frames in `player.gui.screen`).\n",
    "metadata": {
      "event_name": "on_gui_location_changed"
    }
  },
  {
    "type": "data",
    "name": "element",
    "content": "Data: element \nType: LuaGuiElement\nDescription: The element whose location changed.\n",
    "metadata": {
      "event_name": "on_gui_location_changed",
      "data_name": "element",
      "data_type": "LuaGuiElement"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_gui_location_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player who did the change.\n",
    "metadata": {
      "event_name": "on_gui_location_changed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_gui_location_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_gui_opened",
    "content": "Event: on_gui_opened\nDescription: Called when the player opens a GUI.\n",
    "metadata": {
      "event_name": "on_gui_opened"
    }
  },
  {
    "type": "data",
    "name": "element",
    "content": "Data: element [Optional]\nType: LuaGuiElement\nDescription: The custom GUI element that was opened\n",
    "metadata": {
      "event_name": "on_gui_opened",
      "data_name": "element",
      "data_type": "LuaGuiElement"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity [Optional]\nType: LuaEntity\nDescription: The entity that was opened\n",
    "metadata": {
      "event_name": "on_gui_opened",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "equipment",
    "content": "Data: equipment [Optional]\nType: LuaEquipment\nDescription: The equipment that was opened\n",
    "metadata": {
      "event_name": "on_gui_opened",
      "data_name": "equipment",
      "data_type": "LuaEquipment"
    }
  },
  {
    "type": "data",
    "name": "gui_type",
    "content": "Data: gui_type \nType: defines.gui_type\nDescription: The GUI type that was opened.\n",
    "metadata": {
      "event_name": "on_gui_opened",
      "data_name": "gui_type",
      "data_type": "defines.gui_type"
    }
  },
  {
    "type": "data",
    "name": "inventory",
    "content": "Data: inventory [Optional]\nType: LuaInventory\nDescription: The script inventory that was opened\n",
    "metadata": {
      "event_name": "on_gui_opened",
      "data_name": "inventory",
      "data_type": "LuaInventory"
    }
  },
  {
    "type": "data",
    "name": "item",
    "content": "Data: item [Optional]\nType: LuaItemStack\nDescription: The item that was opened\n",
    "metadata": {
      "event_name": "on_gui_opened",
      "data_name": "item",
      "data_type": "LuaItemStack"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_gui_opened",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "other_player",
    "content": "Data: other_player [Optional]\nType: LuaPlayer\nDescription: The other player that was opened\n",
    "metadata": {
      "event_name": "on_gui_opened",
      "data_name": "other_player",
      "data_type": "LuaPlayer"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player.\n",
    "metadata": {
      "event_name": "on_gui_opened",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_gui_opened",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_gui_selected_tab_changed",
    "content": "Event: on_gui_selected_tab_changed\nDescription: Called when [LuaGuiElement](runtime:LuaGuiElement) selected tab is changed (related to tabbed-panes).\n",
    "metadata": {
      "event_name": "on_gui_selected_tab_changed"
    }
  },
  {
    "type": "data",
    "name": "element",
    "content": "Data: element \nType: LuaGuiElement\nDescription: The tabbed pane whose selected tab changed.\n",
    "metadata": {
      "event_name": "on_gui_selected_tab_changed",
      "data_name": "element",
      "data_type": "LuaGuiElement"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_gui_selected_tab_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player who did the change.\n",
    "metadata": {
      "event_name": "on_gui_selected_tab_changed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_gui_selected_tab_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_gui_selection_state_changed",
    "content": "Event: on_gui_selection_state_changed\nDescription: Called when [LuaGuiElement](runtime:LuaGuiElement) selection state is changed (related to drop-downs and listboxes).\n",
    "metadata": {
      "event_name": "on_gui_selection_state_changed"
    }
  },
  {
    "type": "data",
    "name": "element",
    "content": "Data: element \nType: LuaGuiElement\nDescription: The element whose selection state changed.\n",
    "metadata": {
      "event_name": "on_gui_selection_state_changed",
      "data_name": "element",
      "data_type": "LuaGuiElement"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_gui_selection_state_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player who did the change.\n",
    "metadata": {
      "event_name": "on_gui_selection_state_changed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_gui_selection_state_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_gui_switch_state_changed",
    "content": "Event: on_gui_switch_state_changed\nDescription: Called when [LuaGuiElement](runtime:LuaGuiElement) switch state is changed (related to switches).\n",
    "metadata": {
      "event_name": "on_gui_switch_state_changed"
    }
  },
  {
    "type": "data",
    "name": "element",
    "content": "Data: element \nType: LuaGuiElement\nDescription: The switch whose switch state changed.\n",
    "metadata": {
      "event_name": "on_gui_switch_state_changed",
      "data_name": "element",
      "data_type": "LuaGuiElement"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_gui_switch_state_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player who did the change.\n",
    "metadata": {
      "event_name": "on_gui_switch_state_changed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_gui_switch_state_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_gui_text_changed",
    "content": "Event: on_gui_text_changed\nDescription: Called when [LuaGuiElement](runtime:LuaGuiElement) text is changed by the player.\n",
    "metadata": {
      "event_name": "on_gui_text_changed"
    }
  },
  {
    "type": "data",
    "name": "element",
    "content": "Data: element \nType: LuaGuiElement\nDescription: The edited element.\n",
    "metadata": {
      "event_name": "on_gui_text_changed",
      "data_name": "element",
      "data_type": "LuaGuiElement"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_gui_text_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player who did the edit.\n",
    "metadata": {
      "event_name": "on_gui_text_changed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "text",
    "content": "Data: text \nType: string\nDescription: The new text in the element.\n",
    "metadata": {
      "event_name": "on_gui_text_changed",
      "data_name": "text",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_gui_text_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_gui_value_changed",
    "content": "Event: on_gui_value_changed\nDescription: Called when [LuaGuiElement](runtime:LuaGuiElement) slider value is changed (related to the slider element).\n",
    "metadata": {
      "event_name": "on_gui_value_changed"
    }
  },
  {
    "type": "data",
    "name": "element",
    "content": "Data: element \nType: LuaGuiElement\nDescription: The element whose value changed.\n",
    "metadata": {
      "event_name": "on_gui_value_changed",
      "data_name": "element",
      "data_type": "LuaGuiElement"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_gui_value_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player who did the change.\n",
    "metadata": {
      "event_name": "on_gui_value_changed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_gui_value_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_land_mine_armed",
    "content": "Event: on_land_mine_armed\nDescription: Called when a land mine is armed.\n",
    "metadata": {
      "event_name": "on_land_mine_armed"
    }
  },
  {
    "type": "data",
    "name": "mine",
    "content": "Data: mine \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_land_mine_armed",
      "data_name": "mine",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_land_mine_armed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_land_mine_armed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_lua_shortcut",
    "content": "Event: on_lua_shortcut\nDescription: Called when a custom [Lua shortcut](prototype:ShortcutPrototype) is pressed.\n",
    "metadata": {
      "event_name": "on_lua_shortcut"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_lua_shortcut",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_lua_shortcut",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "prototype_name",
    "content": "Data: prototype_name \nType: string\nDescription: Shortcut prototype name of the shortcut that was clicked.\n",
    "metadata": {
      "event_name": "on_lua_shortcut",
      "data_name": "prototype_name",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_lua_shortcut",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_marked_for_deconstruction",
    "content": "Event: on_marked_for_deconstruction\nDescription: Called when an entity is marked for deconstruction with the Deconstruction planner or via script.\n",
    "metadata": {
      "event_name": "on_marked_for_deconstruction"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_marked_for_deconstruction",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_marked_for_deconstruction",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index [Optional]\nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_marked_for_deconstruction",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_marked_for_deconstruction",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_marked_for_upgrade",
    "content": "Event: on_marked_for_upgrade\nDescription: Called when an entity is marked for upgrade with the Upgrade planner or via script.\n",
    "metadata": {
      "event_name": "on_marked_for_upgrade"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_marked_for_upgrade",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_marked_for_upgrade",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index [Optional]\nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_marked_for_upgrade",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "quality",
    "content": "Data: quality \nType: LuaQualityPrototype\nDescription: \n",
    "metadata": {
      "event_name": "on_marked_for_upgrade",
      "data_name": "quality",
      "data_type": "LuaQualityPrototype"
    }
  },
  {
    "type": "data",
    "name": "target",
    "content": "Data: target \nType: LuaEntityPrototype\nDescription: \n",
    "metadata": {
      "event_name": "on_marked_for_upgrade",
      "data_name": "target",
      "data_type": "LuaEntityPrototype"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_marked_for_upgrade",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_market_item_purchased",
    "content": "Event: on_market_item_purchased\nDescription: Called after a player purchases some offer from a `market` entity.\n",
    "metadata": {
      "event_name": "on_market_item_purchased"
    }
  },
  {
    "type": "data",
    "name": "count",
    "content": "Data: count \nType: uint\nDescription: The amount of offers purchased.\n",
    "metadata": {
      "event_name": "on_market_item_purchased",
      "data_name": "count",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "market",
    "content": "Data: market \nType: LuaEntity\nDescription: The market entity.\n",
    "metadata": {
      "event_name": "on_market_item_purchased",
      "data_name": "market",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_market_item_purchased",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "offer_index",
    "content": "Data: offer_index \nType: uint\nDescription: The index of the offer purchased.\n",
    "metadata": {
      "event_name": "on_market_item_purchased",
      "data_name": "offer_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player who did the purchasing.\n",
    "metadata": {
      "event_name": "on_market_item_purchased",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_market_item_purchased",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_mod_item_opened",
    "content": "Event: on_mod_item_opened\nDescription: Called when the player uses the 'Open item GUI' control on an item defined with the 'mod-openable' flag\n",
    "metadata": {
      "event_name": "on_mod_item_opened"
    }
  },
  {
    "type": "data",
    "name": "item",
    "content": "Data: item \nType: LuaItemPrototype\nDescription: The item clicked on.\n",
    "metadata": {
      "event_name": "on_mod_item_opened",
      "data_name": "item",
      "data_type": "LuaItemPrototype"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_mod_item_opened",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player.\n",
    "metadata": {
      "event_name": "on_mod_item_opened",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "quality",
    "content": "Data: quality \nType: LuaQualityPrototype\nDescription: The item quality clicked on.\n",
    "metadata": {
      "event_name": "on_mod_item_opened",
      "data_name": "quality",
      "data_type": "LuaQualityPrototype"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_mod_item_opened",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_object_destroyed",
    "content": "Event: on_object_destroyed\nDescription: Called after an object is destroyed which was registered with [LuaBootstrap::register_on_object_destroyed](runtime:LuaBootstrap::register_on_object_destroyed) previously.\n\nDepending on when a given object is destroyed, this event will be fired at the end of the current tick or at the end of the next tick. The event's timing is independent of the in-world object being destroyed.",
    "metadata": {
      "event_name": "on_object_destroyed"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_object_destroyed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "registration_number",
    "content": "Data: registration_number \nType: uint64\nDescription: The number returned by [register_on_object_destroyed](runtime:LuaBootstrap::register_on_object_destroyed) to uniquely identify this object during this event.\n",
    "metadata": {
      "event_name": "on_object_destroyed",
      "data_name": "registration_number",
      "data_type": "uint64"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_object_destroyed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "type",
    "content": "Data: type \nType: defines.target_type\nDescription: Type of the object that was destroyed. Same as third value returned by [LuaBootstrap::register_on_object_destroyed](runtime:LuaBootstrap::register_on_object_destroyed)\n",
    "metadata": {
      "event_name": "on_object_destroyed",
      "data_name": "type",
      "data_type": "defines.target_type"
    }
  },
  {
    "type": "data",
    "name": "useful_id",
    "content": "Data: useful_id \nType: uint64\nDescription: The [useful identifier](runtime:RegistrationTarget) of the object. Same as second value returned by [LuaBootstrap::register_on_object_destroyed](runtime:LuaBootstrap::register_on_object_destroyed)\n",
    "metadata": {
      "event_name": "on_object_destroyed",
      "data_name": "useful_id",
      "data_type": "uint64"
    }
  },
  {
    "type": "event",
    "name": "on_permission_group_added",
    "content": "Event: on_permission_group_added\nDescription: Called directly after a permission group is added.\n",
    "metadata": {
      "event_name": "on_permission_group_added"
    }
  },
  {
    "type": "data",
    "name": "group",
    "content": "Data: group \nType: LuaPermissionGroup\nDescription: The group added.\n",
    "metadata": {
      "event_name": "on_permission_group_added",
      "data_name": "group",
      "data_type": "LuaPermissionGroup"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_permission_group_added",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index [Optional]\nType: uint\nDescription: The player that added the group or `nil` if by a mod.\n",
    "metadata": {
      "event_name": "on_permission_group_added",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_permission_group_added",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_permission_group_deleted",
    "content": "Event: on_permission_group_deleted\nDescription: Called directly after a permission group is deleted.\n",
    "metadata": {
      "event_name": "on_permission_group_deleted"
    }
  },
  {
    "type": "data",
    "name": "group_name",
    "content": "Data: group_name \nType: string\nDescription: The group that was deleted.\n",
    "metadata": {
      "event_name": "on_permission_group_deleted",
      "data_name": "group_name",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "id",
    "content": "Data: id \nType: uint\nDescription: The group id that was deleted.\n",
    "metadata": {
      "event_name": "on_permission_group_deleted",
      "data_name": "id",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_permission_group_deleted",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index [Optional]\nType: uint\nDescription: The player doing the deletion or `nil` if by a mod.\n",
    "metadata": {
      "event_name": "on_permission_group_deleted",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_permission_group_deleted",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_permission_group_edited",
    "content": "Event: on_permission_group_edited\nDescription: Called directly after a permission group is edited in some way.\n",
    "metadata": {
      "event_name": "on_permission_group_edited"
    }
  },
  {
    "type": "data",
    "name": "action",
    "content": "Data: action \nType: defines.input_action\nDescription: The action when the `type` is `\"add-permission\"` or `\"remove-permission\"`.\n",
    "metadata": {
      "event_name": "on_permission_group_edited",
      "data_name": "action",
      "data_type": "defines.input_action"
    }
  },
  {
    "type": "data",
    "name": "group",
    "content": "Data: group \nType: LuaPermissionGroup\nDescription: The group being edited.\n",
    "metadata": {
      "event_name": "on_permission_group_edited",
      "data_name": "group",
      "data_type": "LuaPermissionGroup"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_permission_group_edited",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "new_name",
    "content": "Data: new_name \nType: string\nDescription: The new group name when the `type` is `\"rename\"`.\n",
    "metadata": {
      "event_name": "on_permission_group_edited",
      "data_name": "new_name",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "old_name",
    "content": "Data: old_name \nType: string\nDescription: The old group name when the `type` is `\"rename\"`.\n",
    "metadata": {
      "event_name": "on_permission_group_edited",
      "data_name": "old_name",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "other_player_index",
    "content": "Data: other_player_index \nType: uint\nDescription: The other player when the `type` is `\"add-player\"` or `\"remove-player\"`.\n",
    "metadata": {
      "event_name": "on_permission_group_edited",
      "data_name": "other_player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index [Optional]\nType: uint\nDescription: The player that did the editing or `nil` if by a mod.\n",
    "metadata": {
      "event_name": "on_permission_group_edited",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_permission_group_edited",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "type",
    "content": "Data: type \nType: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'add-permission'}, {'complex_type': 'literal', 'value': 'remove-permission'}, {'complex_type': 'literal', 'value': 'enable-all'}, {'complex_type': 'literal', 'value': 'disable-all'}, {'complex_type': 'literal', 'value': 'add-player'}, {'complex_type': 'literal', 'value': 'remove-player'}, {'complex_type': 'literal', 'value': 'rename'}], 'full_format': False}\nDescription: The edit type.",
    "metadata": {
      "event_name": "on_permission_group_edited",
      "data_name": "type",
      "data_type": {
        "complex_type": "union",
        "options": [
          {
            "complex_type": "literal",
            "value": "add-permission"
          },
          {
            "complex_type": "literal",
            "value": "remove-permission"
          },
          {
            "complex_type": "literal",
            "value": "enable-all"
          },
          {
            "complex_type": "literal",
            "value": "disable-all"
          },
          {
            "complex_type": "literal",
            "value": "add-player"
          },
          {
            "complex_type": "literal",
            "value": "remove-player"
          },
          {
            "complex_type": "literal",
            "value": "rename"
          }
        ],
        "full_format": false
      }
    }
  },
  {
    "type": "event",
    "name": "on_permission_string_imported",
    "content": "Event: on_permission_string_imported\nDescription: Called directly after a permission string is imported.\n",
    "metadata": {
      "event_name": "on_permission_string_imported"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_permission_string_imported",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player that imported the string.\n",
    "metadata": {
      "event_name": "on_permission_string_imported",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_permission_string_imported",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_picked_up_item",
    "content": "Event: on_picked_up_item\nDescription: Called when a player picks up an item.\n",
    "metadata": {
      "event_name": "on_picked_up_item"
    }
  },
  {
    "type": "data",
    "name": "item_stack",
    "content": "Data: item_stack \nType: SimpleItemStack\nDescription: \n",
    "metadata": {
      "event_name": "on_picked_up_item",
      "data_name": "item_stack",
      "data_type": "SimpleItemStack"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_picked_up_item",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_picked_up_item",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_picked_up_item",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_alt_reverse_selected_area",
    "content": "Event: on_player_alt_reverse_selected_area\nDescription: Called after a player alt-reverse-selects an area with a selection-tool item.\n",
    "metadata": {
      "event_name": "on_player_alt_reverse_selected_area"
    }
  },
  {
    "type": "data",
    "name": "area",
    "content": "Data: area \nType: BoundingBox\nDescription: The area selected.\n",
    "metadata": {
      "event_name": "on_player_alt_reverse_selected_area",
      "data_name": "area",
      "data_type": "BoundingBox"
    }
  },
  {
    "type": "data",
    "name": "entities",
    "content": "Data: entities \nType: {'complex_type': 'array', 'value': 'LuaEntity'}\nDescription: The entities selected.\n",
    "metadata": {
      "event_name": "on_player_alt_reverse_selected_area",
      "data_name": "entities",
      "data_type": {
        "complex_type": "array",
        "value": "LuaEntity"
      }
    }
  },
  {
    "type": "data",
    "name": "item",
    "content": "Data: item \nType: string\nDescription: The item used to select the area.\n",
    "metadata": {
      "event_name": "on_player_alt_reverse_selected_area",
      "data_name": "item",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_alt_reverse_selected_area",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player doing the selection.\n",
    "metadata": {
      "event_name": "on_player_alt_reverse_selected_area",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "surface",
    "content": "Data: surface \nType: LuaSurface\nDescription: The surface selected.\n",
    "metadata": {
      "event_name": "on_player_alt_reverse_selected_area",
      "data_name": "surface",
      "data_type": "LuaSurface"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_alt_reverse_selected_area",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tiles",
    "content": "Data: tiles \nType: {'complex_type': 'array', 'value': 'LuaTile'}\nDescription: The tiles selected.\n",
    "metadata": {
      "event_name": "on_player_alt_reverse_selected_area",
      "data_name": "tiles",
      "data_type": {
        "complex_type": "array",
        "value": "LuaTile"
      }
    }
  },
  {
    "type": "event",
    "name": "on_player_alt_selected_area",
    "content": "Event: on_player_alt_selected_area\nDescription: Called after a player alt-selects an area with a selection-tool item.\n",
    "metadata": {
      "event_name": "on_player_alt_selected_area"
    }
  },
  {
    "type": "data",
    "name": "area",
    "content": "Data: area \nType: BoundingBox\nDescription: The area selected.\n",
    "metadata": {
      "event_name": "on_player_alt_selected_area",
      "data_name": "area",
      "data_type": "BoundingBox"
    }
  },
  {
    "type": "data",
    "name": "entities",
    "content": "Data: entities \nType: {'complex_type': 'array', 'value': 'LuaEntity'}\nDescription: The entities selected.\n",
    "metadata": {
      "event_name": "on_player_alt_selected_area",
      "data_name": "entities",
      "data_type": {
        "complex_type": "array",
        "value": "LuaEntity"
      }
    }
  },
  {
    "type": "data",
    "name": "item",
    "content": "Data: item \nType: string\nDescription: The item used to select the area.\n",
    "metadata": {
      "event_name": "on_player_alt_selected_area",
      "data_name": "item",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_alt_selected_area",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player doing the selection.\n",
    "metadata": {
      "event_name": "on_player_alt_selected_area",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "quality",
    "content": "Data: quality \nType: string\nDescription: The item quality used to select the area.\n",
    "metadata": {
      "event_name": "on_player_alt_selected_area",
      "data_name": "quality",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "surface",
    "content": "Data: surface \nType: LuaSurface\nDescription: The surface selected.\n",
    "metadata": {
      "event_name": "on_player_alt_selected_area",
      "data_name": "surface",
      "data_type": "LuaSurface"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_alt_selected_area",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tiles",
    "content": "Data: tiles \nType: {'complex_type': 'array', 'value': 'LuaTile'}\nDescription: The tiles selected.\n",
    "metadata": {
      "event_name": "on_player_alt_selected_area",
      "data_name": "tiles",
      "data_type": {
        "complex_type": "array",
        "value": "LuaTile"
      }
    }
  },
  {
    "type": "event",
    "name": "on_player_ammo_inventory_changed",
    "content": "Event: on_player_ammo_inventory_changed\nDescription: Called after a players ammo inventory changed in some way.\n",
    "metadata": {
      "event_name": "on_player_ammo_inventory_changed"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_ammo_inventory_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_player_ammo_inventory_changed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_ammo_inventory_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_armor_inventory_changed",
    "content": "Event: on_player_armor_inventory_changed\nDescription: Called after a players armor inventory changed in some way.\n",
    "metadata": {
      "event_name": "on_player_armor_inventory_changed"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_armor_inventory_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_player_armor_inventory_changed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_armor_inventory_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_banned",
    "content": "Event: on_player_banned\nDescription: Called when a player is banned.\n",
    "metadata": {
      "event_name": "on_player_banned"
    }
  },
  {
    "type": "data",
    "name": "by_player",
    "content": "Data: by_player [Optional]\nType: uint\nDescription: The player that did the banning if any.\n",
    "metadata": {
      "event_name": "on_player_banned",
      "data_name": "by_player",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_banned",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index [Optional]\nType: uint\nDescription: The player banned.\n",
    "metadata": {
      "event_name": "on_player_banned",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "player_name",
    "content": "Data: player_name \nType: string\nDescription: The banned player name.\n",
    "metadata": {
      "event_name": "on_player_banned",
      "data_name": "player_name",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "reason",
    "content": "Data: reason [Optional]\nType: string\nDescription: The reason given if any.\n",
    "metadata": {
      "event_name": "on_player_banned",
      "data_name": "reason",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_banned",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_built_tile",
    "content": "Event: on_player_built_tile\nDescription: Called after a player builds tiles.\n",
    "metadata": {
      "event_name": "on_player_built_tile"
    }
  },
  {
    "type": "data",
    "name": "inventory",
    "content": "Data: inventory [Optional]\nType: LuaInventory\nDescription: The inventory containing the items used to build the tiles.\n",
    "metadata": {
      "event_name": "on_player_built_tile",
      "data_name": "inventory",
      "data_type": "LuaInventory"
    }
  },
  {
    "type": "data",
    "name": "item",
    "content": "Data: item [Optional]\nType: LuaItemPrototype\nDescription: The item type used to build the tiles\n",
    "metadata": {
      "event_name": "on_player_built_tile",
      "data_name": "item",
      "data_type": "LuaItemPrototype"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_built_tile",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_player_built_tile",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "quality",
    "content": "Data: quality [Optional]\nType: LuaQualityPrototype\nDescription: The quality of the item used to build the tiles\n",
    "metadata": {
      "event_name": "on_player_built_tile",
      "data_name": "quality",
      "data_type": "LuaQualityPrototype"
    }
  },
  {
    "type": "data",
    "name": "surface_index",
    "content": "Data: surface_index \nType: uint\nDescription: The surface the tile(s) were built on.\n",
    "metadata": {
      "event_name": "on_player_built_tile",
      "data_name": "surface_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_built_tile",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tile",
    "content": "Data: tile \nType: LuaTilePrototype\nDescription: The tile prototype that was placed.\n",
    "metadata": {
      "event_name": "on_player_built_tile",
      "data_name": "tile",
      "data_type": "LuaTilePrototype"
    }
  },
  {
    "type": "data",
    "name": "tiles",
    "content": "Data: tiles \nType: {'complex_type': 'array', 'value': 'OldTileAndPosition'}\nDescription: The position data.\n",
    "metadata": {
      "event_name": "on_player_built_tile",
      "data_name": "tiles",
      "data_type": {
        "complex_type": "array",
        "value": "OldTileAndPosition"
      }
    }
  },
  {
    "type": "event",
    "name": "on_player_cancelled_crafting",
    "content": "Event: on_player_cancelled_crafting\nDescription: Called when a player cancels crafting.\n",
    "metadata": {
      "event_name": "on_player_cancelled_crafting"
    }
  },
  {
    "type": "data",
    "name": "cancel_count",
    "content": "Data: cancel_count \nType: uint\nDescription: The number of crafts that have been cancelled.\n",
    "metadata": {
      "event_name": "on_player_cancelled_crafting",
      "data_name": "cancel_count",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "items",
    "content": "Data: items \nType: LuaInventory\nDescription: The crafting items returned to the player's inventory.\n",
    "metadata": {
      "event_name": "on_player_cancelled_crafting",
      "data_name": "items",
      "data_type": "LuaInventory"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_cancelled_crafting",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player that did the crafting.\n",
    "metadata": {
      "event_name": "on_player_cancelled_crafting",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "recipe",
    "content": "Data: recipe \nType: LuaRecipe\nDescription: The recipe that has been cancelled.\n",
    "metadata": {
      "event_name": "on_player_cancelled_crafting",
      "data_name": "recipe",
      "data_type": "LuaRecipe"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_cancelled_crafting",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_changed_force",
    "content": "Event: on_player_changed_force\nDescription: Called after a player changes forces.\n",
    "metadata": {
      "event_name": "on_player_changed_force"
    }
  },
  {
    "type": "data",
    "name": "force",
    "content": "Data: force \nType: LuaForce\nDescription: The old force.\n",
    "metadata": {
      "event_name": "on_player_changed_force",
      "data_name": "force",
      "data_type": "LuaForce"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_changed_force",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player who changed forces.\n",
    "metadata": {
      "event_name": "on_player_changed_force",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_changed_force",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_changed_position",
    "content": "Event: on_player_changed_position\nDescription: Called when the tile position a player is located at changes.\n",
    "metadata": {
      "event_name": "on_player_changed_position"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_changed_position",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player.\n",
    "metadata": {
      "event_name": "on_player_changed_position",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_changed_position",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_changed_surface",
    "content": "Event: on_player_changed_surface\nDescription: Called after a player changes surfaces.\n",
    "metadata": {
      "event_name": "on_player_changed_surface"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_changed_surface",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player who changed surfaces.\n",
    "metadata": {
      "event_name": "on_player_changed_surface",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "surface_index",
    "content": "Data: surface_index [Optional]\nType: uint\nDescription: The surface index the player was on - may be `nil` if the surface no longer exists.\n",
    "metadata": {
      "event_name": "on_player_changed_surface",
      "data_name": "surface_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_changed_surface",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_cheat_mode_disabled",
    "content": "Event: on_player_cheat_mode_disabled\nDescription: Called when cheat mode is disabled on a player.\n",
    "metadata": {
      "event_name": "on_player_cheat_mode_disabled"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_cheat_mode_disabled",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player.\n",
    "metadata": {
      "event_name": "on_player_cheat_mode_disabled",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_cheat_mode_disabled",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_cheat_mode_enabled",
    "content": "Event: on_player_cheat_mode_enabled\nDescription: Called when cheat mode is enabled on a player.\n",
    "metadata": {
      "event_name": "on_player_cheat_mode_enabled"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_cheat_mode_enabled",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player.\n",
    "metadata": {
      "event_name": "on_player_cheat_mode_enabled",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_cheat_mode_enabled",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_clicked_gps_tag",
    "content": "Event: on_player_clicked_gps_tag\nDescription: Called when a player clicks a gps tag\n",
    "metadata": {
      "event_name": "on_player_clicked_gps_tag"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_clicked_gps_tag",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: Index of the player\n",
    "metadata": {
      "event_name": "on_player_clicked_gps_tag",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "position",
    "content": "Data: position \nType: MapPosition\nDescription: Map position contained in gps tag\n",
    "metadata": {
      "event_name": "on_player_clicked_gps_tag",
      "data_name": "position",
      "data_type": "MapPosition"
    }
  },
  {
    "type": "data",
    "name": "surface",
    "content": "Data: surface \nType: string\nDescription: Surface name contained in gps tag, even when such surface does not exists\n",
    "metadata": {
      "event_name": "on_player_clicked_gps_tag",
      "data_name": "surface",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_clicked_gps_tag",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_configured_blueprint",
    "content": "Event: on_player_configured_blueprint\nDescription: Called when a player clicks the \"confirm\" button in the configure Blueprint GUI.\n",
    "metadata": {
      "event_name": "on_player_configured_blueprint"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_configured_blueprint",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player.\n",
    "metadata": {
      "event_name": "on_player_configured_blueprint",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_configured_blueprint",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_controller_changed",
    "content": "Event: on_player_controller_changed\nDescription: Called after a player changes controller types.\n",
    "metadata": {
      "event_name": "on_player_controller_changed"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_controller_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "old_type",
    "content": "Data: old_type \nType: defines.controllers\nDescription: The old controller type.\n",
    "metadata": {
      "event_name": "on_player_controller_changed",
      "data_name": "old_type",
      "data_type": "defines.controllers"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player who changed controllers.\n",
    "metadata": {
      "event_name": "on_player_controller_changed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_controller_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_crafted_item",
    "content": "Event: on_player_crafted_item\nDescription: Called when the player finishes crafting an item. This event fires just before the results are inserted into the player's inventory, not when the crafting is queued (see [on_pre_player_crafted_item](runtime:on_pre_player_crafted_item)).",
    "metadata": {
      "event_name": "on_player_crafted_item"
    }
  },
  {
    "type": "data",
    "name": "item_stack",
    "content": "Data: item_stack \nType: LuaItemStack\nDescription: The item that has been crafted.\n",
    "metadata": {
      "event_name": "on_player_crafted_item",
      "data_name": "item_stack",
      "data_type": "LuaItemStack"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_crafted_item",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player doing the crafting.\n",
    "metadata": {
      "event_name": "on_player_crafted_item",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "recipe",
    "content": "Data: recipe \nType: LuaRecipe\nDescription: The recipe used to craft this item.\n",
    "metadata": {
      "event_name": "on_player_crafted_item",
      "data_name": "recipe",
      "data_type": "LuaRecipe"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_crafted_item",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_created",
    "content": "Event: on_player_created\nDescription: Called after the player was created.\n",
    "metadata": {
      "event_name": "on_player_created"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_created",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_player_created",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_created",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_cursor_stack_changed",
    "content": "Event: on_player_cursor_stack_changed\nDescription: Called after a player's [cursor stack](runtime:LuaControl::cursor_stack) changed in some way.\n\nThis is fired in the same tick that the change happens, but not instantly.\n",
    "metadata": {
      "event_name": "on_player_cursor_stack_changed"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_cursor_stack_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_player_cursor_stack_changed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_cursor_stack_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_deconstructed_area",
    "content": "Event: on_player_deconstructed_area\nDescription: Called when a player selects an area with a deconstruction planner.\n",
    "metadata": {
      "event_name": "on_player_deconstructed_area"
    }
  },
  {
    "type": "data",
    "name": "alt",
    "content": "Data: alt \nType: boolean\nDescription: If normal selection or alt selection was used.\n",
    "metadata": {
      "event_name": "on_player_deconstructed_area",
      "data_name": "alt",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "area",
    "content": "Data: area \nType: BoundingBox\nDescription: The area selected.\n",
    "metadata": {
      "event_name": "on_player_deconstructed_area",
      "data_name": "area",
      "data_type": "BoundingBox"
    }
  },
  {
    "type": "data",
    "name": "item",
    "content": "Data: item \nType: string\nDescription: The item used to select the area.\n",
    "metadata": {
      "event_name": "on_player_deconstructed_area",
      "data_name": "item",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_deconstructed_area",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player doing the selection.\n",
    "metadata": {
      "event_name": "on_player_deconstructed_area",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "quality",
    "content": "Data: quality \nType: string\nDescription: The item quality used to select the area.\n",
    "metadata": {
      "event_name": "on_player_deconstructed_area",
      "data_name": "quality",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "stack",
    "content": "Data: stack [Optional]\nType: LuaItemStack\nDescription: The item stack used to select the area.\n",
    "metadata": {
      "event_name": "on_player_deconstructed_area",
      "data_name": "stack",
      "data_type": "LuaItemStack"
    }
  },
  {
    "type": "data",
    "name": "surface",
    "content": "Data: surface \nType: LuaSurface\nDescription: The surface selected.\n",
    "metadata": {
      "event_name": "on_player_deconstructed_area",
      "data_name": "surface",
      "data_type": "LuaSurface"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_deconstructed_area",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_demoted",
    "content": "Event: on_player_demoted\nDescription: Called when a player is demoted.\n",
    "metadata": {
      "event_name": "on_player_demoted"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_demoted",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player.\n",
    "metadata": {
      "event_name": "on_player_demoted",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_demoted",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_died",
    "content": "Event: on_player_died\nDescription: Called after a player dies.\n",
    "metadata": {
      "event_name": "on_player_died"
    }
  },
  {
    "type": "data",
    "name": "cause",
    "content": "Data: cause [Optional]\nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_player_died",
      "data_name": "cause",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_died",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_player_died",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_died",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_display_density_scale_changed",
    "content": "Event: on_player_display_density_scale_changed\nDescription: Called when the display density scale changes for a given player. The display density scale is the scale value automatically applied based on the player's display DPI. This is only relevant on platforms that support high-density displays.",
    "metadata": {
      "event_name": "on_player_display_density_scale_changed"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_display_density_scale_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "old_scale",
    "content": "Data: old_scale \nType: double\nDescription: The old display scale\n",
    "metadata": {
      "event_name": "on_player_display_density_scale_changed",
      "data_name": "old_scale",
      "data_type": "double"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player\n",
    "metadata": {
      "event_name": "on_player_display_density_scale_changed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_display_density_scale_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_display_resolution_changed",
    "content": "Event: on_player_display_resolution_changed\nDescription: Called when the display resolution changes for a given player.\n",
    "metadata": {
      "event_name": "on_player_display_resolution_changed"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_display_resolution_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "old_resolution",
    "content": "Data: old_resolution \nType: DisplayResolution\nDescription: The old display resolution\n",
    "metadata": {
      "event_name": "on_player_display_resolution_changed",
      "data_name": "old_resolution",
      "data_type": "DisplayResolution"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player\n",
    "metadata": {
      "event_name": "on_player_display_resolution_changed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_display_resolution_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_display_scale_changed",
    "content": "Event: on_player_display_scale_changed\nDescription: Called when the display scale changes for a given player.\n",
    "metadata": {
      "event_name": "on_player_display_scale_changed"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_display_scale_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "old_scale",
    "content": "Data: old_scale \nType: double\nDescription: The old display scale\n",
    "metadata": {
      "event_name": "on_player_display_scale_changed",
      "data_name": "old_scale",
      "data_type": "double"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player\n",
    "metadata": {
      "event_name": "on_player_display_scale_changed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_display_scale_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_driving_changed_state",
    "content": "Event: on_player_driving_changed_state\nDescription: Called when the player's driving state has changed, meaning a player has either entered or left a vehicle.\n\nThis event is not raised when the player is ejected from a vehicle due to it being destroyed.\n",
    "metadata": {
      "event_name": "on_player_driving_changed_state"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity [Optional]\nType: LuaEntity\nDescription: The vehicle if any.\n",
    "metadata": {
      "event_name": "on_player_driving_changed_state",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_driving_changed_state",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_player_driving_changed_state",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_driving_changed_state",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_dropped_item",
    "content": "Event: on_player_dropped_item\nDescription: Called when a player drops an item on the ground.\n",
    "metadata": {
      "event_name": "on_player_dropped_item"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: The item-on-ground entity.\n",
    "metadata": {
      "event_name": "on_player_dropped_item",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_dropped_item",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_player_dropped_item",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_dropped_item",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_fast_transferred",
    "content": "Event: on_player_fast_transferred\nDescription: Called when a player fast-transfers something to or from an entity.\n",
    "metadata": {
      "event_name": "on_player_fast_transferred"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: The entity transferred from or to.\n",
    "metadata": {
      "event_name": "on_player_fast_transferred",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "from_player",
    "content": "Data: from_player \nType: boolean\nDescription: Whether the transfer was from player to entity. If `false`, the transfer was from entity to player.\n",
    "metadata": {
      "event_name": "on_player_fast_transferred",
      "data_name": "from_player",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "is_split",
    "content": "Data: is_split \nType: boolean\nDescription: Whether the transfer was a split action (half stack).\n",
    "metadata": {
      "event_name": "on_player_fast_transferred",
      "data_name": "is_split",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_fast_transferred",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player transferred from or to.\n",
    "metadata": {
      "event_name": "on_player_fast_transferred",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_fast_transferred",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_flipped_entity",
    "content": "Event: on_player_flipped_entity\nDescription: Called when the player flips an entity. This event is only fired when the entity actually changes its orientation or mirroring, so it won't be triggered when pressing the flip keys on an entity that can't be flipped.\n\nThis event reflects a change in the [LuaEntity::mirroring](runtime:LuaEntity::mirroring) property.",
    "metadata": {
      "event_name": "on_player_flipped_entity"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: The flipped entity.\n",
    "metadata": {
      "event_name": "on_player_flipped_entity",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "horizontal",
    "content": "Data: horizontal \nType: boolean\nDescription: The enacted flip. `true` means a horizontal flip, `false` a vertical one.\n",
    "metadata": {
      "event_name": "on_player_flipped_entity",
      "data_name": "horizontal",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_flipped_entity",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_player_flipped_entity",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_flipped_entity",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_flushed_fluid",
    "content": "Event: on_player_flushed_fluid\nDescription: Called after player flushed fluid\n",
    "metadata": {
      "event_name": "on_player_flushed_fluid"
    }
  },
  {
    "type": "data",
    "name": "amount",
    "content": "Data: amount \nType: double\nDescription: Amount of fluid that was removed\n",
    "metadata": {
      "event_name": "on_player_flushed_fluid",
      "data_name": "amount",
      "data_type": "double"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: Entity from which flush was performed\n",
    "metadata": {
      "event_name": "on_player_flushed_fluid",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "fluid",
    "content": "Data: fluid \nType: string\nDescription: Name of a fluid that was flushed\n",
    "metadata": {
      "event_name": "on_player_flushed_fluid",
      "data_name": "fluid",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_flushed_fluid",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "only_this_entity",
    "content": "Data: only_this_entity \nType: boolean\nDescription: True if flush was requested only on this entity\n",
    "metadata": {
      "event_name": "on_player_flushed_fluid",
      "data_name": "only_this_entity",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: Index of the player\n",
    "metadata": {
      "event_name": "on_player_flushed_fluid",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_flushed_fluid",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_gun_inventory_changed",
    "content": "Event: on_player_gun_inventory_changed\nDescription: Called after a players gun inventory changed in some way.\n",
    "metadata": {
      "event_name": "on_player_gun_inventory_changed"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_gun_inventory_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_player_gun_inventory_changed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_gun_inventory_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_input_method_changed",
    "content": "Event: on_player_input_method_changed\nDescription: Called when a player's input method changes. See [LuaPlayer::input_method](runtime:LuaPlayer::input_method).\n",
    "metadata": {
      "event_name": "on_player_input_method_changed"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_input_method_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player whose input method changed.\n",
    "metadata": {
      "event_name": "on_player_input_method_changed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_input_method_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_joined_game",
    "content": "Event: on_player_joined_game\nDescription: Called after a player joins the game. This is not called when loading a save file in singleplayer, as the player doesn't actually leave the game, and the save is just on pause until they rejoin.\n",
    "metadata": {
      "event_name": "on_player_joined_game"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_joined_game",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_player_joined_game",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_joined_game",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_kicked",
    "content": "Event: on_player_kicked\nDescription: Called when a player is kicked.\n",
    "metadata": {
      "event_name": "on_player_kicked"
    }
  },
  {
    "type": "data",
    "name": "by_player",
    "content": "Data: by_player [Optional]\nType: uint\nDescription: The player that did the kicking if any.\n",
    "metadata": {
      "event_name": "on_player_kicked",
      "data_name": "by_player",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_kicked",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player kicked.\n",
    "metadata": {
      "event_name": "on_player_kicked",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "reason",
    "content": "Data: reason [Optional]\nType: string\nDescription: The reason given if any.\n",
    "metadata": {
      "event_name": "on_player_kicked",
      "data_name": "reason",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_kicked",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_left_game",
    "content": "Event: on_player_left_game\nDescription: Called after a player leaves the game. This is not called when closing a save file in singleplayer, as the player doesn't actually leave the game, and the save is just on pause until they rejoin.\n",
    "metadata": {
      "event_name": "on_player_left_game"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_left_game",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_player_left_game",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "reason",
    "content": "Data: reason \nType: defines.disconnect_reason\nDescription: \n",
    "metadata": {
      "event_name": "on_player_left_game",
      "data_name": "reason",
      "data_type": "defines.disconnect_reason"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_left_game",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_locale_changed",
    "content": "Event: on_player_locale_changed\nDescription: Called when a player's active locale changes. See [LuaPlayer::locale](runtime:LuaPlayer::locale).\n",
    "metadata": {
      "event_name": "on_player_locale_changed"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_locale_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "old_locale",
    "content": "Data: old_locale \nType: string\nDescription: The previously active locale.\n",
    "metadata": {
      "event_name": "on_player_locale_changed",
      "data_name": "old_locale",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player whose locale was changed.\n",
    "metadata": {
      "event_name": "on_player_locale_changed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_locale_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_main_inventory_changed",
    "content": "Event: on_player_main_inventory_changed\nDescription: Called after a players main inventory changed in some way.\n",
    "metadata": {
      "event_name": "on_player_main_inventory_changed"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_main_inventory_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_player_main_inventory_changed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_main_inventory_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_mined_entity",
    "content": "Event: on_player_mined_entity\nDescription: Called after the results of an entity being mined are collected just before the entity is destroyed.\n\nAfter this event any items in the buffer will be transferred into the player as if they came from mining the entity.\n\nThe buffer inventory is special in that it's only valid during this event and has a dynamic size expanding as more items are transferred into it.",
    "metadata": {
      "event_name": "on_player_mined_entity"
    }
  },
  {
    "type": "data",
    "name": "buffer",
    "content": "Data: buffer \nType: LuaInventory\nDescription: The temporary inventory that holds the result of mining the entity.\n",
    "metadata": {
      "event_name": "on_player_mined_entity",
      "data_name": "buffer",
      "data_type": "LuaInventory"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: The entity that has been mined.\n",
    "metadata": {
      "event_name": "on_player_mined_entity",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_mined_entity",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The index of the player doing the mining.\n",
    "metadata": {
      "event_name": "on_player_mined_entity",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_mined_entity",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_mined_item",
    "content": "Event: on_player_mined_item\nDescription: Called when the player mines something.\n",
    "metadata": {
      "event_name": "on_player_mined_item"
    }
  },
  {
    "type": "data",
    "name": "item_stack",
    "content": "Data: item_stack \nType: SimpleItemStack\nDescription: The item given to the player\n",
    "metadata": {
      "event_name": "on_player_mined_item",
      "data_name": "item_stack",
      "data_type": "SimpleItemStack"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_mined_item",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_player_mined_item",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_mined_item",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_mined_tile",
    "content": "Event: on_player_mined_tile\nDescription: Called after a player mines tiles.\n",
    "metadata": {
      "event_name": "on_player_mined_tile"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_mined_tile",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_player_mined_tile",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "surface_index",
    "content": "Data: surface_index \nType: uint\nDescription: The surface the tile(s) were mined from.\n",
    "metadata": {
      "event_name": "on_player_mined_tile",
      "data_name": "surface_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_mined_tile",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tiles",
    "content": "Data: tiles \nType: {'complex_type': 'array', 'value': 'OldTileAndPosition'}\nDescription: The position data.\n",
    "metadata": {
      "event_name": "on_player_mined_tile",
      "data_name": "tiles",
      "data_type": {
        "complex_type": "array",
        "value": "OldTileAndPosition"
      }
    }
  },
  {
    "type": "event",
    "name": "on_player_muted",
    "content": "Event: on_player_muted\nDescription: Called when a player is muted.\n",
    "metadata": {
      "event_name": "on_player_muted"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_muted",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player.\n",
    "metadata": {
      "event_name": "on_player_muted",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_muted",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_pipette",
    "content": "Event: on_player_pipette\nDescription: Called when a player invokes the \"smart pipette\" over an entity.\n",
    "metadata": {
      "event_name": "on_player_pipette"
    }
  },
  {
    "type": "data",
    "name": "item",
    "content": "Data: item \nType: LuaItemPrototype\nDescription: The item put in the cursor\n",
    "metadata": {
      "event_name": "on_player_pipette",
      "data_name": "item",
      "data_type": "LuaItemPrototype"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_pipette",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player\n",
    "metadata": {
      "event_name": "on_player_pipette",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "quality",
    "content": "Data: quality \nType: LuaQualityPrototype\nDescription: The item quality put in the cursor\n",
    "metadata": {
      "event_name": "on_player_pipette",
      "data_name": "quality",
      "data_type": "LuaQualityPrototype"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_pipette",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "used_cheat_mode",
    "content": "Data: used_cheat_mode \nType: boolean\nDescription: If cheat mode was used to give a free stack of the item.\n",
    "metadata": {
      "event_name": "on_player_pipette",
      "data_name": "used_cheat_mode",
      "data_type": "boolean"
    }
  },
  {
    "type": "event",
    "name": "on_player_placed_equipment",
    "content": "Event: on_player_placed_equipment\nDescription: Called after the player puts equipment in an equipment grid\n",
    "metadata": {
      "event_name": "on_player_placed_equipment"
    }
  },
  {
    "type": "data",
    "name": "equipment",
    "content": "Data: equipment \nType: LuaEquipment\nDescription: The equipment put in the equipment grid.\n",
    "metadata": {
      "event_name": "on_player_placed_equipment",
      "data_name": "equipment",
      "data_type": "LuaEquipment"
    }
  },
  {
    "type": "data",
    "name": "grid",
    "content": "Data: grid \nType: LuaEquipmentGrid\nDescription: The equipment grid the equipment was put in.\n",
    "metadata": {
      "event_name": "on_player_placed_equipment",
      "data_name": "grid",
      "data_type": "LuaEquipmentGrid"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_placed_equipment",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_player_placed_equipment",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_placed_equipment",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_promoted",
    "content": "Event: on_player_promoted\nDescription: Called when a player is promoted.\n",
    "metadata": {
      "event_name": "on_player_promoted"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_promoted",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player.\n",
    "metadata": {
      "event_name": "on_player_promoted",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_promoted",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_removed",
    "content": "Event: on_player_removed\nDescription: Called when a player is removed (deleted) from the game. This is markedly different from a player temporarily [leaving](runtime:on_player_left_game) the game, and instead behaves like the player never existed in the save file.",
    "metadata": {
      "event_name": "on_player_removed"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_removed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The index of the removed player.\n",
    "metadata": {
      "event_name": "on_player_removed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_removed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_removed_equipment",
    "content": "Event: on_player_removed_equipment\nDescription: Called after the player removes equipment from an equipment grid\n",
    "metadata": {
      "event_name": "on_player_removed_equipment"
    }
  },
  {
    "type": "data",
    "name": "count",
    "content": "Data: count \nType: uint\nDescription: The count of equipment removed.\n",
    "metadata": {
      "event_name": "on_player_removed_equipment",
      "data_name": "count",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "equipment",
    "content": "Data: equipment \nType: string\nDescription: The equipment removed.\n",
    "metadata": {
      "event_name": "on_player_removed_equipment",
      "data_name": "equipment",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "grid",
    "content": "Data: grid \nType: LuaEquipmentGrid\nDescription: The equipment grid removed from.\n",
    "metadata": {
      "event_name": "on_player_removed_equipment",
      "data_name": "grid",
      "data_type": "LuaEquipmentGrid"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_removed_equipment",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_player_removed_equipment",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "quality",
    "content": "Data: quality \nType: string\nDescription: The equipment quality.\n",
    "metadata": {
      "event_name": "on_player_removed_equipment",
      "data_name": "quality",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_removed_equipment",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_repaired_entity",
    "content": "Event: on_player_repaired_entity\nDescription: Called when a player repairs an entity.\n",
    "metadata": {
      "event_name": "on_player_repaired_entity"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_player_repaired_entity",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_repaired_entity",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_player_repaired_entity",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_repaired_entity",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_respawned",
    "content": "Event: on_player_respawned\nDescription: Called after a player respawns.\n",
    "metadata": {
      "event_name": "on_player_respawned"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_respawned",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_player_respawned",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "player_port",
    "content": "Data: player_port [Optional]\nType: LuaEntity\nDescription: The player port used to respawn if one was used.\n",
    "metadata": {
      "event_name": "on_player_respawned",
      "data_name": "player_port",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_respawned",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_reverse_selected_area",
    "content": "Event: on_player_reverse_selected_area\nDescription: Called after a player reverse-selects an area with a selection-tool item.\n",
    "metadata": {
      "event_name": "on_player_reverse_selected_area"
    }
  },
  {
    "type": "data",
    "name": "area",
    "content": "Data: area \nType: BoundingBox\nDescription: The area selected.\n",
    "metadata": {
      "event_name": "on_player_reverse_selected_area",
      "data_name": "area",
      "data_type": "BoundingBox"
    }
  },
  {
    "type": "data",
    "name": "entities",
    "content": "Data: entities \nType: {'complex_type': 'array', 'value': 'LuaEntity'}\nDescription: The entities selected.\n",
    "metadata": {
      "event_name": "on_player_reverse_selected_area",
      "data_name": "entities",
      "data_type": {
        "complex_type": "array",
        "value": "LuaEntity"
      }
    }
  },
  {
    "type": "data",
    "name": "item",
    "content": "Data: item \nType: string\nDescription: The item used to select the area.\n",
    "metadata": {
      "event_name": "on_player_reverse_selected_area",
      "data_name": "item",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_reverse_selected_area",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player doing the selection.\n",
    "metadata": {
      "event_name": "on_player_reverse_selected_area",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "surface",
    "content": "Data: surface \nType: LuaSurface\nDescription: The surface selected.\n",
    "metadata": {
      "event_name": "on_player_reverse_selected_area",
      "data_name": "surface",
      "data_type": "LuaSurface"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_reverse_selected_area",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tiles",
    "content": "Data: tiles \nType: {'complex_type': 'array', 'value': 'LuaTile'}\nDescription: The tiles selected.\n",
    "metadata": {
      "event_name": "on_player_reverse_selected_area",
      "data_name": "tiles",
      "data_type": {
        "complex_type": "array",
        "value": "LuaTile"
      }
    }
  },
  {
    "type": "event",
    "name": "on_player_rotated_entity",
    "content": "Event: on_player_rotated_entity\nDescription: Called when the player rotates an entity. This event is only fired when the entity actually changes its orientation -- pressing the rotate key on an entity that can't be rotated won't fire this event.\n\nEntities being flipped will not fire this event, even if the flip involves rotating. See [on_player_flipped_entity](runtime:on_player_flipped_entity).",
    "metadata": {
      "event_name": "on_player_rotated_entity"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: The rotated entity.\n",
    "metadata": {
      "event_name": "on_player_rotated_entity",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_rotated_entity",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_player_rotated_entity",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "previous_direction",
    "content": "Data: previous_direction \nType: defines.direction\nDescription: The previous direction\n",
    "metadata": {
      "event_name": "on_player_rotated_entity",
      "data_name": "previous_direction",
      "data_type": "defines.direction"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_rotated_entity",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_selected_area",
    "content": "Event: on_player_selected_area\nDescription: Called after a player selects an area with a selection-tool item.\n",
    "metadata": {
      "event_name": "on_player_selected_area"
    }
  },
  {
    "type": "data",
    "name": "area",
    "content": "Data: area \nType: BoundingBox\nDescription: The area selected.\n",
    "metadata": {
      "event_name": "on_player_selected_area",
      "data_name": "area",
      "data_type": "BoundingBox"
    }
  },
  {
    "type": "data",
    "name": "entities",
    "content": "Data: entities \nType: {'complex_type': 'array', 'value': 'LuaEntity'}\nDescription: The entities selected.\n",
    "metadata": {
      "event_name": "on_player_selected_area",
      "data_name": "entities",
      "data_type": {
        "complex_type": "array",
        "value": "LuaEntity"
      }
    }
  },
  {
    "type": "data",
    "name": "item",
    "content": "Data: item \nType: string\nDescription: The item used to select the area.\n",
    "metadata": {
      "event_name": "on_player_selected_area",
      "data_name": "item",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_selected_area",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player doing the selection.\n",
    "metadata": {
      "event_name": "on_player_selected_area",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "quality",
    "content": "Data: quality \nType: string\nDescription: The item quality used to select the area.\n",
    "metadata": {
      "event_name": "on_player_selected_area",
      "data_name": "quality",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "surface",
    "content": "Data: surface \nType: LuaSurface\nDescription: The surface selected.\n",
    "metadata": {
      "event_name": "on_player_selected_area",
      "data_name": "surface",
      "data_type": "LuaSurface"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_selected_area",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tiles",
    "content": "Data: tiles \nType: {'complex_type': 'array', 'value': 'LuaTile'}\nDescription: The tiles selected.\n",
    "metadata": {
      "event_name": "on_player_selected_area",
      "data_name": "tiles",
      "data_type": {
        "complex_type": "array",
        "value": "LuaTile"
      }
    }
  },
  {
    "type": "event",
    "name": "on_player_set_quick_bar_slot",
    "content": "Event: on_player_set_quick_bar_slot\nDescription: Called when a player sets a quickbar slot to anything (new value, or set to empty).\n",
    "metadata": {
      "event_name": "on_player_set_quick_bar_slot"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_set_quick_bar_slot",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_player_set_quick_bar_slot",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_set_quick_bar_slot",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_setup_blueprint",
    "content": "Event: on_player_setup_blueprint\nDescription: Called when a player selects an area with a blueprint.\n",
    "metadata": {
      "event_name": "on_player_setup_blueprint"
    }
  },
  {
    "type": "data",
    "name": "alt",
    "content": "Data: alt \nType: boolean\nDescription: If normal selection or alt selection was used.\n",
    "metadata": {
      "event_name": "on_player_setup_blueprint",
      "data_name": "alt",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "area",
    "content": "Data: area \nType: BoundingBox\nDescription: The area selected.\n",
    "metadata": {
      "event_name": "on_player_setup_blueprint",
      "data_name": "area",
      "data_type": "BoundingBox"
    }
  },
  {
    "type": "data",
    "name": "item",
    "content": "Data: item \nType: string\nDescription: The item used to select the area.\n",
    "metadata": {
      "event_name": "on_player_setup_blueprint",
      "data_name": "item",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "mapping",
    "content": "Data: mapping \nType: {'complex_type': 'LuaLazyLoadedValue', 'value': {'complex_type': 'dictionary', 'key': 'uint', 'value': 'LuaEntity'}}\nDescription: The blueprint entity index to source entity mapping. Note: if any mod changes the blueprint this will be incorrect.",
    "metadata": {
      "event_name": "on_player_setup_blueprint",
      "data_name": "mapping",
      "data_type": {
        "complex_type": "LuaLazyLoadedValue",
        "value": {
          "complex_type": "dictionary",
          "key": "uint",
          "value": "LuaEntity"
        }
      }
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_setup_blueprint",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player doing the selection.\n",
    "metadata": {
      "event_name": "on_player_setup_blueprint",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "quality",
    "content": "Data: quality \nType: string\nDescription: The item quality used to select the area.\n",
    "metadata": {
      "event_name": "on_player_setup_blueprint",
      "data_name": "quality",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "stack",
    "content": "Data: stack [Optional]\nType: LuaItemStack\nDescription: The item stack used to select the area.\n",
    "metadata": {
      "event_name": "on_player_setup_blueprint",
      "data_name": "stack",
      "data_type": "LuaItemStack"
    }
  },
  {
    "type": "data",
    "name": "surface",
    "content": "Data: surface \nType: LuaSurface\nDescription: The surface selected.\n",
    "metadata": {
      "event_name": "on_player_setup_blueprint",
      "data_name": "surface",
      "data_type": "LuaSurface"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_setup_blueprint",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_toggled_alt_mode",
    "content": "Event: on_player_toggled_alt_mode\nDescription: Called when a player toggles alt mode, also known as \"show entity info\".\n",
    "metadata": {
      "event_name": "on_player_toggled_alt_mode"
    }
  },
  {
    "type": "data",
    "name": "alt_mode",
    "content": "Data: alt_mode \nType: boolean\nDescription: The new alt mode value. This value is a shortcut for accessing [GameViewSettings::show_entity_info](runtime:GameViewSettings::show_entity_info) on the player.\n",
    "metadata": {
      "event_name": "on_player_toggled_alt_mode",
      "data_name": "alt_mode",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_toggled_alt_mode",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_player_toggled_alt_mode",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_toggled_alt_mode",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_toggled_map_editor",
    "content": "Event: on_player_toggled_map_editor\nDescription: Called when a player toggles the map editor on or off.\n",
    "metadata": {
      "event_name": "on_player_toggled_map_editor"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_toggled_map_editor",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_player_toggled_map_editor",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_toggled_map_editor",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_trash_inventory_changed",
    "content": "Event: on_player_trash_inventory_changed\nDescription: Called after a players trash inventory changed in some way.\n",
    "metadata": {
      "event_name": "on_player_trash_inventory_changed"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_trash_inventory_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_player_trash_inventory_changed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_trash_inventory_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_unbanned",
    "content": "Event: on_player_unbanned\nDescription: Called when a player is un-banned.\n",
    "metadata": {
      "event_name": "on_player_unbanned"
    }
  },
  {
    "type": "data",
    "name": "by_player",
    "content": "Data: by_player [Optional]\nType: uint\nDescription: The player that did the un-banning if any.\n",
    "metadata": {
      "event_name": "on_player_unbanned",
      "data_name": "by_player",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_unbanned",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index [Optional]\nType: uint\nDescription: The player un-banned.\n",
    "metadata": {
      "event_name": "on_player_unbanned",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "player_name",
    "content": "Data: player_name \nType: string\nDescription: The player name un-banned.\n",
    "metadata": {
      "event_name": "on_player_unbanned",
      "data_name": "player_name",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "reason",
    "content": "Data: reason [Optional]\nType: string\nDescription: The reason the player was banned if any.\n",
    "metadata": {
      "event_name": "on_player_unbanned",
      "data_name": "reason",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_unbanned",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_unmuted",
    "content": "Event: on_player_unmuted\nDescription: Called when a player is unmuted.\n",
    "metadata": {
      "event_name": "on_player_unmuted"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_unmuted",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player.\n",
    "metadata": {
      "event_name": "on_player_unmuted",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_unmuted",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_used_capsule",
    "content": "Event: on_player_used_capsule\nDescription: Called when a player uses a capsule that results in some game action.\n",
    "metadata": {
      "event_name": "on_player_used_capsule"
    }
  },
  {
    "type": "data",
    "name": "item",
    "content": "Data: item \nType: LuaItemPrototype\nDescription: The capsule item used.\n",
    "metadata": {
      "event_name": "on_player_used_capsule",
      "data_name": "item",
      "data_type": "LuaItemPrototype"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_used_capsule",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player.\n",
    "metadata": {
      "event_name": "on_player_used_capsule",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "position",
    "content": "Data: position \nType: MapPosition\nDescription: The position the capsule was used.\n",
    "metadata": {
      "event_name": "on_player_used_capsule",
      "data_name": "position",
      "data_type": "MapPosition"
    }
  },
  {
    "type": "data",
    "name": "quality",
    "content": "Data: quality \nType: LuaQualityPrototype\nDescription: The quality of the capsule item used.\n",
    "metadata": {
      "event_name": "on_player_used_capsule",
      "data_name": "quality",
      "data_type": "LuaQualityPrototype"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_used_capsule",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_player_used_spidertron_remote",
    "content": "Event: on_player_used_spidertron_remote\nDescription: Called when a player uses spidertron remote to send all selected units to a given position\n",
    "metadata": {
      "event_name": "on_player_used_spidertron_remote"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_player_used_spidertron_remote",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player that used the remote.\n",
    "metadata": {
      "event_name": "on_player_used_spidertron_remote",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "position",
    "content": "Data: position \nType: MapPosition\nDescription: Goal position to which spidertron was sent to.\n",
    "metadata": {
      "event_name": "on_player_used_spidertron_remote",
      "data_name": "position",
      "data_type": "MapPosition"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_player_used_spidertron_remote",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_post_entity_died",
    "content": "Event: on_post_entity_died\nDescription: Called after an entity dies.\n",
    "metadata": {
      "event_name": "on_post_entity_died"
    }
  },
  {
    "type": "data",
    "name": "corpses",
    "content": "Data: corpses \nType: {'complex_type': 'array', 'value': 'LuaEntity'}\nDescription: The corpses created by the entity dying if any.\n",
    "metadata": {
      "event_name": "on_post_entity_died",
      "data_name": "corpses",
      "data_type": {
        "complex_type": "array",
        "value": "LuaEntity"
      }
    }
  },
  {
    "type": "data",
    "name": "damage_type",
    "content": "Data: damage_type [Optional]\nType: LuaDamagePrototype\nDescription: The damage type if any.\n",
    "metadata": {
      "event_name": "on_post_entity_died",
      "data_name": "damage_type",
      "data_type": "LuaDamagePrototype"
    }
  },
  {
    "type": "data",
    "name": "force",
    "content": "Data: force [Optional]\nType: LuaForce\nDescription: The force that did the killing if any.\n",
    "metadata": {
      "event_name": "on_post_entity_died",
      "data_name": "force",
      "data_type": "LuaForce"
    }
  },
  {
    "type": "data",
    "name": "ghost",
    "content": "Data: ghost [Optional]\nType: LuaEntity\nDescription: The ghost created by the entity dying if any.\n",
    "metadata": {
      "event_name": "on_post_entity_died",
      "data_name": "ghost",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_post_entity_died",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "position",
    "content": "Data: position \nType: MapPosition\nDescription: Position where the entity died.\n",
    "metadata": {
      "event_name": "on_post_entity_died",
      "data_name": "position",
      "data_type": "MapPosition"
    }
  },
  {
    "type": "data",
    "name": "prototype",
    "content": "Data: prototype \nType: LuaEntityPrototype\nDescription: The entity prototype of the entity that died.\n",
    "metadata": {
      "event_name": "on_post_entity_died",
      "data_name": "prototype",
      "data_type": "LuaEntityPrototype"
    }
  },
  {
    "type": "data",
    "name": "quality",
    "content": "Data: quality \nType: LuaQualityPrototype\nDescription: The quality of the entity that died.\n",
    "metadata": {
      "event_name": "on_post_entity_died",
      "data_name": "quality",
      "data_type": "LuaQualityPrototype"
    }
  },
  {
    "type": "data",
    "name": "surface_index",
    "content": "Data: surface_index \nType: uint\nDescription: The surface the entity was on.\n",
    "metadata": {
      "event_name": "on_post_entity_died",
      "data_name": "surface_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_post_entity_died",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "unit_number",
    "content": "Data: unit_number [Optional]\nType: uint\nDescription: The unit number the entity had if any.\n",
    "metadata": {
      "event_name": "on_post_entity_died",
      "data_name": "unit_number",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_pre_build",
    "content": "Event: on_pre_build\nDescription: Called when players uses an item to build something. Called before [on_built_entity](runtime:on_built_entity).\n",
    "metadata": {
      "event_name": "on_pre_build"
    }
  },
  {
    "type": "data",
    "name": "build_mode",
    "content": "Data: build_mode \nType: defines.build_mode\nDescription: Build mode the item was placed with.\n",
    "metadata": {
      "event_name": "on_pre_build",
      "data_name": "build_mode",
      "data_type": "defines.build_mode"
    }
  },
  {
    "type": "data",
    "name": "created_by_moving",
    "content": "Data: created_by_moving \nType: boolean\nDescription: Whether the item was placed while moving.\n",
    "metadata": {
      "event_name": "on_pre_build",
      "data_name": "created_by_moving",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "direction",
    "content": "Data: direction \nType: defines.direction\nDescription: The direction the item was facing when placed.\n",
    "metadata": {
      "event_name": "on_pre_build",
      "data_name": "direction",
      "data_type": "defines.direction"
    }
  },
  {
    "type": "data",
    "name": "flip_horizontal",
    "content": "Data: flip_horizontal \nType: boolean\nDescription: Whether the blueprint was flipped horizontally. `nil` if not built by a blueprint.\n",
    "metadata": {
      "event_name": "on_pre_build",
      "data_name": "flip_horizontal",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "flip_vertical",
    "content": "Data: flip_vertical \nType: boolean\nDescription: Whether the blueprint was flipped vertically. `nil` if not built by a blueprint.\n",
    "metadata": {
      "event_name": "on_pre_build",
      "data_name": "flip_vertical",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "mirror",
    "content": "Data: mirror \nType: boolean\nDescription: If the item is mirrored (only crafting machines support this)\n",
    "metadata": {
      "event_name": "on_pre_build",
      "data_name": "mirror",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_pre_build",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player who did the placing.\n",
    "metadata": {
      "event_name": "on_pre_build",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "position",
    "content": "Data: position \nType: MapPosition\nDescription: Where the item was placed.\n",
    "metadata": {
      "event_name": "on_pre_build",
      "data_name": "position",
      "data_type": "MapPosition"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_pre_build",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_pre_chunk_deleted",
    "content": "Event: on_pre_chunk_deleted\nDescription: Called before one or more chunks are deleted using [LuaSurface::delete_chunk](runtime:LuaSurface::delete_chunk).\n",
    "metadata": {
      "event_name": "on_pre_chunk_deleted"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_pre_chunk_deleted",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "positions",
    "content": "Data: positions \nType: {'complex_type': 'array', 'value': 'ChunkPosition'}\nDescription: The chunks to be deleted.\n",
    "metadata": {
      "event_name": "on_pre_chunk_deleted",
      "data_name": "positions",
      "data_type": {
        "complex_type": "array",
        "value": "ChunkPosition"
      }
    }
  },
  {
    "type": "data",
    "name": "surface_index",
    "content": "Data: surface_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_pre_chunk_deleted",
      "data_name": "surface_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_pre_chunk_deleted",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_pre_entity_settings_pasted",
    "content": "Event: on_pre_entity_settings_pasted\nDescription: Called before entity copy-paste is done.\n",
    "metadata": {
      "event_name": "on_pre_entity_settings_pasted"
    }
  },
  {
    "type": "data",
    "name": "destination",
    "content": "Data: destination \nType: LuaEntity\nDescription: The destination entity settings will be copied to.\n",
    "metadata": {
      "event_name": "on_pre_entity_settings_pasted",
      "data_name": "destination",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_pre_entity_settings_pasted",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_pre_entity_settings_pasted",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "source",
    "content": "Data: source \nType: LuaEntity\nDescription: The source entity settings will be copied from.\n",
    "metadata": {
      "event_name": "on_pre_entity_settings_pasted",
      "data_name": "source",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_pre_entity_settings_pasted",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_pre_ghost_deconstructed",
    "content": "Event: on_pre_ghost_deconstructed\nDescription: Called before a ghost entity is destroyed as a result of being marked for deconstruction.\n\nAlso called for item request proxies before they are destroyed as a result of being marked for deconstruction.\n",
    "metadata": {
      "event_name": "on_pre_ghost_deconstructed"
    }
  },
  {
    "type": "data",
    "name": "ghost",
    "content": "Data: ghost \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_pre_ghost_deconstructed",
      "data_name": "ghost",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_pre_ghost_deconstructed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index [Optional]\nType: uint\nDescription: The player that did the deconstruction if any.\n",
    "metadata": {
      "event_name": "on_pre_ghost_deconstructed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_pre_ghost_deconstructed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_pre_ghost_upgraded",
    "content": "Event: on_pre_ghost_upgraded\nDescription: Called before a ghost entity is upgraded.\n",
    "metadata": {
      "event_name": "on_pre_ghost_upgraded"
    }
  },
  {
    "type": "data",
    "name": "ghost",
    "content": "Data: ghost \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_pre_ghost_upgraded",
      "data_name": "ghost",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_pre_ghost_upgraded",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index [Optional]\nType: uint\nDescription: The player that did the upgrade if any.\n",
    "metadata": {
      "event_name": "on_pre_ghost_upgraded",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "quality",
    "content": "Data: quality \nType: LuaQualityPrototype\nDescription: \n",
    "metadata": {
      "event_name": "on_pre_ghost_upgraded",
      "data_name": "quality",
      "data_type": "LuaQualityPrototype"
    }
  },
  {
    "type": "data",
    "name": "target",
    "content": "Data: target \nType: LuaEntityPrototype\nDescription: \n",
    "metadata": {
      "event_name": "on_pre_ghost_upgraded",
      "data_name": "target",
      "data_type": "LuaEntityPrototype"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_pre_ghost_upgraded",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_pre_permission_group_deleted",
    "content": "Event: on_pre_permission_group_deleted\nDescription: Called directly before a permission group is deleted.\n",
    "metadata": {
      "event_name": "on_pre_permission_group_deleted"
    }
  },
  {
    "type": "data",
    "name": "group",
    "content": "Data: group \nType: LuaPermissionGroup\nDescription: The group to be deleted.\n",
    "metadata": {
      "event_name": "on_pre_permission_group_deleted",
      "data_name": "group",
      "data_type": "LuaPermissionGroup"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_pre_permission_group_deleted",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index [Optional]\nType: uint\nDescription: The player doing the deletion or `nil` if by a mod.\n",
    "metadata": {
      "event_name": "on_pre_permission_group_deleted",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_pre_permission_group_deleted",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_pre_permission_string_imported",
    "content": "Event: on_pre_permission_string_imported\nDescription: Called directly before a permission string is imported.\n",
    "metadata": {
      "event_name": "on_pre_permission_string_imported"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_pre_permission_string_imported",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player importing the string.\n",
    "metadata": {
      "event_name": "on_pre_permission_string_imported",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_pre_permission_string_imported",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_pre_player_crafted_item",
    "content": "Event: on_pre_player_crafted_item\nDescription: Called when a player queues something to be crafted.\n",
    "metadata": {
      "event_name": "on_pre_player_crafted_item"
    }
  },
  {
    "type": "data",
    "name": "items",
    "content": "Data: items \nType: LuaInventory\nDescription: The items removed from the players inventory to do the crafting.\n",
    "metadata": {
      "event_name": "on_pre_player_crafted_item",
      "data_name": "items",
      "data_type": "LuaInventory"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_pre_player_crafted_item",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player doing the crafting.\n",
    "metadata": {
      "event_name": "on_pre_player_crafted_item",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "queued_count",
    "content": "Data: queued_count \nType: uint\nDescription: The number of times the recipe is being queued.\n",
    "metadata": {
      "event_name": "on_pre_player_crafted_item",
      "data_name": "queued_count",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "recipe",
    "content": "Data: recipe \nType: LuaRecipe\nDescription: The recipe being queued.\n",
    "metadata": {
      "event_name": "on_pre_player_crafted_item",
      "data_name": "recipe",
      "data_type": "LuaRecipe"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_pre_player_crafted_item",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_pre_player_died",
    "content": "Event: on_pre_player_died\nDescription: Called before a players dies.\n",
    "metadata": {
      "event_name": "on_pre_player_died"
    }
  },
  {
    "type": "data",
    "name": "cause",
    "content": "Data: cause [Optional]\nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_pre_player_died",
      "data_name": "cause",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_pre_player_died",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_pre_player_died",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_pre_player_died",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_pre_player_left_game",
    "content": "Event: on_pre_player_left_game\nDescription: Called before a player leaves the game.\n",
    "metadata": {
      "event_name": "on_pre_player_left_game"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_pre_player_left_game",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_pre_player_left_game",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "reason",
    "content": "Data: reason \nType: defines.disconnect_reason\nDescription: \n",
    "metadata": {
      "event_name": "on_pre_player_left_game",
      "data_name": "reason",
      "data_type": "defines.disconnect_reason"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_pre_player_left_game",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_pre_player_mined_item",
    "content": "Event: on_pre_player_mined_item\nDescription: Called when the player completes a mining action, but before the entity is potentially removed from the map. This is called even if the entity does not end up being removed.\n",
    "metadata": {
      "event_name": "on_pre_player_mined_item"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: The entity being mined\n",
    "metadata": {
      "event_name": "on_pre_player_mined_item",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_pre_player_mined_item",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_pre_player_mined_item",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_pre_player_mined_item",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_pre_player_removed",
    "content": "Event: on_pre_player_removed\nDescription: Called before a player is removed (deleted) from the game. This is markedly different from a player temporarily [leaving](runtime:on_player_left_game) the game, and instead behaves like the player never existed in the save file.",
    "metadata": {
      "event_name": "on_pre_player_removed"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_pre_player_removed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The index of the removed player.\n",
    "metadata": {
      "event_name": "on_pre_player_removed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_pre_player_removed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_pre_player_toggled_map_editor",
    "content": "Event: on_pre_player_toggled_map_editor\nDescription: Called before a player toggles the map editor on or off.\n",
    "metadata": {
      "event_name": "on_pre_player_toggled_map_editor"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_pre_player_toggled_map_editor",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_pre_player_toggled_map_editor",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_pre_player_toggled_map_editor",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_pre_robot_exploded_cliff",
    "content": "Event: on_pre_robot_exploded_cliff\nDescription: Called directly before a robot explodes cliffs.\n",
    "metadata": {
      "event_name": "on_pre_robot_exploded_cliff"
    }
  },
  {
    "type": "data",
    "name": "cliff",
    "content": "Data: cliff \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_pre_robot_exploded_cliff",
      "data_name": "cliff",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "item",
    "content": "Data: item \nType: LuaItemPrototype\nDescription: The cliff explosive used.\n",
    "metadata": {
      "event_name": "on_pre_robot_exploded_cliff",
      "data_name": "item",
      "data_type": "LuaItemPrototype"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_pre_robot_exploded_cliff",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "quality",
    "content": "Data: quality \nType: LuaQualityPrototype\nDescription: The quality of the cliff explosive used.\n",
    "metadata": {
      "event_name": "on_pre_robot_exploded_cliff",
      "data_name": "quality",
      "data_type": "LuaQualityPrototype"
    }
  },
  {
    "type": "data",
    "name": "robot",
    "content": "Data: robot \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_pre_robot_exploded_cliff",
      "data_name": "robot",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_pre_robot_exploded_cliff",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_pre_scenario_finished",
    "content": "Event: on_pre_scenario_finished\nDescription: Called just before the scenario finishes.\n",
    "metadata": {
      "event_name": "on_pre_scenario_finished"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_pre_scenario_finished",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_won",
    "content": "Data: player_won \nType: boolean\nDescription: If a player won\n",
    "metadata": {
      "event_name": "on_pre_scenario_finished",
      "data_name": "player_won",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_pre_scenario_finished",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_pre_script_inventory_resized",
    "content": "Event: on_pre_script_inventory_resized\nDescription: Called just before a script inventory is resized.\n",
    "metadata": {
      "event_name": "on_pre_script_inventory_resized"
    }
  },
  {
    "type": "data",
    "name": "inventory",
    "content": "Data: inventory \nType: LuaInventory\nDescription: \n",
    "metadata": {
      "event_name": "on_pre_script_inventory_resized",
      "data_name": "inventory",
      "data_type": "LuaInventory"
    }
  },
  {
    "type": "data",
    "name": "mod",
    "content": "Data: mod \nType: string\nDescription: The mod that did the resizing. This will be `\"core\"` if done by console command or scenario script.\n",
    "metadata": {
      "event_name": "on_pre_script_inventory_resized",
      "data_name": "mod",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_pre_script_inventory_resized",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "new_size",
    "content": "Data: new_size \nType: uint\nDescription: The new inventory size.\n",
    "metadata": {
      "event_name": "on_pre_script_inventory_resized",
      "data_name": "new_size",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "old_size",
    "content": "Data: old_size \nType: uint\nDescription: The old inventory size.\n",
    "metadata": {
      "event_name": "on_pre_script_inventory_resized",
      "data_name": "old_size",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index [Optional]\nType: uint\nDescription: If done by console command; the player who ran the command.\n",
    "metadata": {
      "event_name": "on_pre_script_inventory_resized",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_pre_script_inventory_resized",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_pre_surface_cleared",
    "content": "Event: on_pre_surface_cleared\nDescription: Called just before a surface is cleared (all entities removed and all chunks deleted).\n",
    "metadata": {
      "event_name": "on_pre_surface_cleared"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_pre_surface_cleared",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "surface_index",
    "content": "Data: surface_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_pre_surface_cleared",
      "data_name": "surface_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_pre_surface_cleared",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_pre_surface_deleted",
    "content": "Event: on_pre_surface_deleted\nDescription: Called just before a surface is deleted.\n",
    "metadata": {
      "event_name": "on_pre_surface_deleted"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_pre_surface_deleted",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "surface_index",
    "content": "Data: surface_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_pre_surface_deleted",
      "data_name": "surface_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_pre_surface_deleted",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_redo_applied",
    "content": "Event: on_redo_applied\nDescription: Called when the player triggers \"redo\".\n",
    "metadata": {
      "event_name": "on_redo_applied"
    }
  },
  {
    "type": "data",
    "name": "actions",
    "content": "Data: actions \nType: {'complex_type': 'array', 'value': 'UndoRedoAction'}\nDescription: The context of the redo action.\n",
    "metadata": {
      "event_name": "on_redo_applied",
      "data_name": "actions",
      "data_type": {
        "complex_type": "array",
        "value": "UndoRedoAction"
      }
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_redo_applied",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player who triggered the redo action.\n",
    "metadata": {
      "event_name": "on_redo_applied",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_redo_applied",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_research_cancelled",
    "content": "Event: on_research_cancelled\nDescription: Called when research is cancelled.\n",
    "metadata": {
      "event_name": "on_research_cancelled"
    }
  },
  {
    "type": "data",
    "name": "force",
    "content": "Data: force \nType: LuaForce\nDescription: The force whose research was cancelled.\n",
    "metadata": {
      "event_name": "on_research_cancelled",
      "data_name": "force",
      "data_type": "LuaForce"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_research_cancelled",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "research",
    "content": "Data: research \nType: {'complex_type': 'dictionary', 'key': 'string', 'value': 'uint'}\nDescription: A mapping of technology name to how many times it was cancelled.\n",
    "metadata": {
      "event_name": "on_research_cancelled",
      "data_name": "research",
      "data_type": {
        "complex_type": "dictionary",
        "key": "string",
        "value": "uint"
      }
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_research_cancelled",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_research_finished",
    "content": "Event: on_research_finished\nDescription: Called when a research finishes.\n",
    "metadata": {
      "event_name": "on_research_finished"
    }
  },
  {
    "type": "data",
    "name": "by_script",
    "content": "Data: by_script \nType: boolean\nDescription: If the technology was researched by script.\n",
    "metadata": {
      "event_name": "on_research_finished",
      "data_name": "by_script",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_research_finished",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "research",
    "content": "Data: research \nType: LuaTechnology\nDescription: The researched technology\n",
    "metadata": {
      "event_name": "on_research_finished",
      "data_name": "research",
      "data_type": "LuaTechnology"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_research_finished",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_research_moved",
    "content": "Event: on_research_moved\nDescription: Called when research is moved forwards or backwards in the research queue.\n",
    "metadata": {
      "event_name": "on_research_moved"
    }
  },
  {
    "type": "data",
    "name": "force",
    "content": "Data: force \nType: LuaForce\nDescription: The force whose research was re-arranged.\n",
    "metadata": {
      "event_name": "on_research_moved",
      "data_name": "force",
      "data_type": "LuaForce"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_research_moved",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_research_moved",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_research_reversed",
    "content": "Event: on_research_reversed\nDescription: Called when a research is reversed (unresearched).\n",
    "metadata": {
      "event_name": "on_research_reversed"
    }
  },
  {
    "type": "data",
    "name": "by_script",
    "content": "Data: by_script \nType: boolean\nDescription: If the technology was un-researched by script.\n",
    "metadata": {
      "event_name": "on_research_reversed",
      "data_name": "by_script",
      "data_type": "boolean"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_research_reversed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "research",
    "content": "Data: research \nType: LuaTechnology\nDescription: The technology un-researched\n",
    "metadata": {
      "event_name": "on_research_reversed",
      "data_name": "research",
      "data_type": "LuaTechnology"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_research_reversed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_research_started",
    "content": "Event: on_research_started\nDescription: Called when a technology research starts.\n",
    "metadata": {
      "event_name": "on_research_started"
    }
  },
  {
    "type": "data",
    "name": "last_research",
    "content": "Data: last_research [Optional]\nType: LuaTechnology\nDescription: \n",
    "metadata": {
      "event_name": "on_research_started",
      "data_name": "last_research",
      "data_type": "LuaTechnology"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_research_started",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "research",
    "content": "Data: research \nType: LuaTechnology\nDescription: The technology being researched\n",
    "metadata": {
      "event_name": "on_research_started",
      "data_name": "research",
      "data_type": "LuaTechnology"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_research_started",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_resource_depleted",
    "content": "Event: on_resource_depleted\nDescription: Called when a resource entity reaches 0 or its minimum yield for infinite resources.\n",
    "metadata": {
      "event_name": "on_resource_depleted"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_resource_depleted",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_resource_depleted",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_resource_depleted",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_robot_built_entity",
    "content": "Event: on_robot_built_entity\nDescription: Called when a construction robot builds an entity.\n",
    "metadata": {
      "event_name": "on_robot_built_entity"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: The entity built.\n",
    "metadata": {
      "event_name": "on_robot_built_entity",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_robot_built_entity",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "robot",
    "content": "Data: robot \nType: LuaEntity\nDescription: The robot that did the building.\n",
    "metadata": {
      "event_name": "on_robot_built_entity",
      "data_name": "robot",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "stack",
    "content": "Data: stack \nType: LuaItemStack\nDescription: The item used to do the building.\n",
    "metadata": {
      "event_name": "on_robot_built_entity",
      "data_name": "stack",
      "data_type": "LuaItemStack"
    }
  },
  {
    "type": "data",
    "name": "tags",
    "content": "Data: tags [Optional]\nType: Tags\nDescription: The tags associated with this entity if any.\n",
    "metadata": {
      "event_name": "on_robot_built_entity",
      "data_name": "tags",
      "data_type": "Tags"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_robot_built_entity",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_robot_built_tile",
    "content": "Event: on_robot_built_tile\nDescription: Called after a robot builds tiles.\n",
    "metadata": {
      "event_name": "on_robot_built_tile"
    }
  },
  {
    "type": "data",
    "name": "inventory",
    "content": "Data: inventory \nType: LuaInventory\nDescription: The inventory containing the stacks used to build the tiles.\n",
    "metadata": {
      "event_name": "on_robot_built_tile",
      "data_name": "inventory",
      "data_type": "LuaInventory"
    }
  },
  {
    "type": "data",
    "name": "item",
    "content": "Data: item \nType: LuaItemPrototype\nDescription: The item type used to build the tiles.\n",
    "metadata": {
      "event_name": "on_robot_built_tile",
      "data_name": "item",
      "data_type": "LuaItemPrototype"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_robot_built_tile",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "quality",
    "content": "Data: quality \nType: LuaQualityPrototype\nDescription: The quality the item used to build the tiles.\n",
    "metadata": {
      "event_name": "on_robot_built_tile",
      "data_name": "quality",
      "data_type": "LuaQualityPrototype"
    }
  },
  {
    "type": "data",
    "name": "robot",
    "content": "Data: robot \nType: LuaEntity\nDescription: The robot.\n",
    "metadata": {
      "event_name": "on_robot_built_tile",
      "data_name": "robot",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "surface_index",
    "content": "Data: surface_index \nType: uint\nDescription: The surface the tile(s) are build on.\n",
    "metadata": {
      "event_name": "on_robot_built_tile",
      "data_name": "surface_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_robot_built_tile",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tile",
    "content": "Data: tile \nType: LuaTilePrototype\nDescription: The tile prototype that was placed.\n",
    "metadata": {
      "event_name": "on_robot_built_tile",
      "data_name": "tile",
      "data_type": "LuaTilePrototype"
    }
  },
  {
    "type": "data",
    "name": "tiles",
    "content": "Data: tiles \nType: {'complex_type': 'array', 'value': 'OldTileAndPosition'}\nDescription: The position data.\n",
    "metadata": {
      "event_name": "on_robot_built_tile",
      "data_name": "tiles",
      "data_type": {
        "complex_type": "array",
        "value": "OldTileAndPosition"
      }
    }
  },
  {
    "type": "event",
    "name": "on_robot_exploded_cliff",
    "content": "Event: on_robot_exploded_cliff\nDescription: Called directly after a robot explodes cliffs.\n",
    "metadata": {
      "event_name": "on_robot_exploded_cliff"
    }
  },
  {
    "type": "data",
    "name": "item",
    "content": "Data: item \nType: LuaItemPrototype\nDescription: The cliff explosive used.\n",
    "metadata": {
      "event_name": "on_robot_exploded_cliff",
      "data_name": "item",
      "data_type": "LuaItemPrototype"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_robot_exploded_cliff",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "quality",
    "content": "Data: quality \nType: LuaQualityPrototype\nDescription: The quality of the cliff explosive used.\n",
    "metadata": {
      "event_name": "on_robot_exploded_cliff",
      "data_name": "quality",
      "data_type": "LuaQualityPrototype"
    }
  },
  {
    "type": "data",
    "name": "robot",
    "content": "Data: robot \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_robot_exploded_cliff",
      "data_name": "robot",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_robot_exploded_cliff",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_robot_mined",
    "content": "Event: on_robot_mined\nDescription: Called when a robot mines an entity.\n",
    "metadata": {
      "event_name": "on_robot_mined"
    }
  },
  {
    "type": "data",
    "name": "item_stack",
    "content": "Data: item_stack \nType: SimpleItemStack\nDescription: The entity the robot just picked up.\n",
    "metadata": {
      "event_name": "on_robot_mined",
      "data_name": "item_stack",
      "data_type": "SimpleItemStack"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_robot_mined",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "robot",
    "content": "Data: robot \nType: LuaEntity\nDescription: The robot that did the mining.\n",
    "metadata": {
      "event_name": "on_robot_mined",
      "data_name": "robot",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_robot_mined",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_robot_mined_entity",
    "content": "Event: on_robot_mined_entity\nDescription: Called after the results of an entity being mined are collected just before the entity is destroyed.\n\nAfter this event any items in the buffer will be transferred into the robot as if they came from mining the entity.\n\nThe buffer inventory is special in that it's only valid during this event and has a dynamic size expanding as more items are transferred into it.",
    "metadata": {
      "event_name": "on_robot_mined_entity"
    }
  },
  {
    "type": "data",
    "name": "buffer",
    "content": "Data: buffer \nType: LuaInventory\nDescription: The temporary inventory that holds the result of mining the entity.\n",
    "metadata": {
      "event_name": "on_robot_mined_entity",
      "data_name": "buffer",
      "data_type": "LuaInventory"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: The entity that has been mined.\n",
    "metadata": {
      "event_name": "on_robot_mined_entity",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_robot_mined_entity",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "robot",
    "content": "Data: robot \nType: LuaEntity\nDescription: The robot doing the mining.\n",
    "metadata": {
      "event_name": "on_robot_mined_entity",
      "data_name": "robot",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_robot_mined_entity",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_robot_mined_tile",
    "content": "Event: on_robot_mined_tile\nDescription: Called after a robot mines tiles.\n",
    "metadata": {
      "event_name": "on_robot_mined_tile"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_robot_mined_tile",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "robot",
    "content": "Data: robot \nType: LuaEntity\nDescription: The robot.\n",
    "metadata": {
      "event_name": "on_robot_mined_tile",
      "data_name": "robot",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "surface_index",
    "content": "Data: surface_index \nType: uint\nDescription: The surface the tile(s) were mined on.\n",
    "metadata": {
      "event_name": "on_robot_mined_tile",
      "data_name": "surface_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_robot_mined_tile",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tiles",
    "content": "Data: tiles \nType: {'complex_type': 'array', 'value': 'OldTileAndPosition'}\nDescription: The position data.\n",
    "metadata": {
      "event_name": "on_robot_mined_tile",
      "data_name": "tiles",
      "data_type": {
        "complex_type": "array",
        "value": "OldTileAndPosition"
      }
    }
  },
  {
    "type": "event",
    "name": "on_robot_pre_mined",
    "content": "Event: on_robot_pre_mined\nDescription: Called before a robot mines an entity.\n",
    "metadata": {
      "event_name": "on_robot_pre_mined"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: The entity which is about to be mined.\n",
    "metadata": {
      "event_name": "on_robot_pre_mined",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_robot_pre_mined",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "robot",
    "content": "Data: robot \nType: LuaEntity\nDescription: The robot that's about to do the mining.\n",
    "metadata": {
      "event_name": "on_robot_pre_mined",
      "data_name": "robot",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_robot_pre_mined",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_rocket_launch_ordered",
    "content": "Event: on_rocket_launch_ordered\nDescription: Called when a rocket silo is ordered to be launched.\n",
    "metadata": {
      "event_name": "on_rocket_launch_ordered"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_rocket_launch_ordered",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index [Optional]\nType: uint\nDescription: The player that is riding the rocket, if any.\n",
    "metadata": {
      "event_name": "on_rocket_launch_ordered",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "rocket",
    "content": "Data: rocket \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_rocket_launch_ordered",
      "data_name": "rocket",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "rocket_silo",
    "content": "Data: rocket_silo \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_rocket_launch_ordered",
      "data_name": "rocket_silo",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_rocket_launch_ordered",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_rocket_launched",
    "content": "Event: on_rocket_launched\nDescription: Called when a rocket finishes ascending. (Triggers listening for finished rocket launch past 2.0 have been moved to 'on_cargo_pod_finished_ascending' as rocket and cargo pod are two separate entities)\n",
    "metadata": {
      "event_name": "on_rocket_launched"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_rocket_launched",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "rocket",
    "content": "Data: rocket \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_rocket_launched",
      "data_name": "rocket",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "rocket_silo",
    "content": "Data: rocket_silo [Optional]\nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_rocket_launched",
      "data_name": "rocket_silo",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_rocket_launched",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_runtime_mod_setting_changed",
    "content": "Event: on_runtime_mod_setting_changed\nDescription: Called when a runtime mod setting is changed by a player.\n",
    "metadata": {
      "event_name": "on_runtime_mod_setting_changed"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_runtime_mod_setting_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index [Optional]\nType: uint\nDescription: If the `setting_type` is `\"global\"` and it was changed through the mod settings GUI, this is the index of the player that changed the global setting. If the `setting_type` is `\"runtime-per-user\"` and it changed a current setting of the player, this is the index of the player whose setting was changed. In all other cases, this is `nil`.",
    "metadata": {
      "event_name": "on_runtime_mod_setting_changed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "setting",
    "content": "Data: setting \nType: string\nDescription: The prototype name of the setting that was changed.\n",
    "metadata": {
      "event_name": "on_runtime_mod_setting_changed",
      "data_name": "setting",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "setting_type",
    "content": "Data: setting_type \nType: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'runtime-global'}, {'complex_type': 'literal', 'value': 'runtime-per-user'}], 'full_format': False}\nDescription: \n",
    "metadata": {
      "event_name": "on_runtime_mod_setting_changed",
      "data_name": "setting_type",
      "data_type": {
        "complex_type": "union",
        "options": [
          {
            "complex_type": "literal",
            "value": "runtime-global"
          },
          {
            "complex_type": "literal",
            "value": "runtime-per-user"
          }
        ],
        "full_format": false
      }
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_runtime_mod_setting_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_script_inventory_resized",
    "content": "Event: on_script_inventory_resized\nDescription: Called just after a script inventory is resized.\n",
    "metadata": {
      "event_name": "on_script_inventory_resized"
    }
  },
  {
    "type": "data",
    "name": "inventory",
    "content": "Data: inventory \nType: LuaInventory\nDescription: \n",
    "metadata": {
      "event_name": "on_script_inventory_resized",
      "data_name": "inventory",
      "data_type": "LuaInventory"
    }
  },
  {
    "type": "data",
    "name": "mod",
    "content": "Data: mod \nType: string\nDescription: The mod that did the resizing. This will be `\"core\"` if done by console command or scenario script.\n",
    "metadata": {
      "event_name": "on_script_inventory_resized",
      "data_name": "mod",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_script_inventory_resized",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "new_size",
    "content": "Data: new_size \nType: uint\nDescription: The new inventory size.\n",
    "metadata": {
      "event_name": "on_script_inventory_resized",
      "data_name": "new_size",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "old_size",
    "content": "Data: old_size \nType: uint\nDescription: The old inventory size.\n",
    "metadata": {
      "event_name": "on_script_inventory_resized",
      "data_name": "old_size",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "overflow_inventory",
    "content": "Data: overflow_inventory \nType: LuaInventory\nDescription: Any items which didn't fit into the new inventory size.\n",
    "metadata": {
      "event_name": "on_script_inventory_resized",
      "data_name": "overflow_inventory",
      "data_type": "LuaInventory"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index [Optional]\nType: uint\nDescription: If done by console command; the player who ran the command.\n",
    "metadata": {
      "event_name": "on_script_inventory_resized",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_script_inventory_resized",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_script_path_request_finished",
    "content": "Event: on_script_path_request_finished\nDescription: Called when a [LuaSurface::request_path](runtime:LuaSurface::request_path) call completes.\n",
    "metadata": {
      "event_name": "on_script_path_request_finished"
    }
  },
  {
    "type": "data",
    "name": "id",
    "content": "Data: id \nType: uint\nDescription: Handle to associate the callback with a particular call to [LuaSurface::request_path](runtime:LuaSurface::request_path).\n",
    "metadata": {
      "event_name": "on_script_path_request_finished",
      "data_name": "id",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_script_path_request_finished",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "path",
    "content": "Data: path [Optional]\nType: {'complex_type': 'array', 'value': 'PathfinderWaypoint'}\nDescription: The actual path that the pathfinder has determined. `nil` if pathfinding failed.\n",
    "metadata": {
      "event_name": "on_script_path_request_finished",
      "data_name": "path",
      "data_type": {
        "complex_type": "array",
        "value": "PathfinderWaypoint"
      }
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_script_path_request_finished",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "try_again_later",
    "content": "Data: try_again_later \nType: boolean\nDescription: Indicates that the pathfinder failed because it is too busy, and that you can retry later.\n",
    "metadata": {
      "event_name": "on_script_path_request_finished",
      "data_name": "try_again_later",
      "data_type": "boolean"
    }
  },
  {
    "type": "event",
    "name": "on_script_trigger_effect",
    "content": "Event: on_script_trigger_effect\nDescription: Called when a script trigger effect is triggered.\n",
    "metadata": {
      "event_name": "on_script_trigger_effect"
    }
  },
  {
    "type": "data",
    "name": "cause_entity",
    "content": "Data: cause_entity [Optional]\nType: LuaEntity\nDescription: The entity that originally caused the sequence of triggers\n",
    "metadata": {
      "event_name": "on_script_trigger_effect",
      "data_name": "cause_entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "effect_id",
    "content": "Data: effect_id \nType: string\nDescription: The effect_id specified in the trigger effect.\n",
    "metadata": {
      "event_name": "on_script_trigger_effect",
      "data_name": "effect_id",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_script_trigger_effect",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "source_entity",
    "content": "Data: source_entity [Optional]\nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_script_trigger_effect",
      "data_name": "source_entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "source_position",
    "content": "Data: source_position [Optional]\nType: MapPosition\nDescription: \n",
    "metadata": {
      "event_name": "on_script_trigger_effect",
      "data_name": "source_position",
      "data_type": "MapPosition"
    }
  },
  {
    "type": "data",
    "name": "surface_index",
    "content": "Data: surface_index \nType: uint\nDescription: The surface the effect happened on.\n",
    "metadata": {
      "event_name": "on_script_trigger_effect",
      "data_name": "surface_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "target_entity",
    "content": "Data: target_entity [Optional]\nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_script_trigger_effect",
      "data_name": "target_entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "target_position",
    "content": "Data: target_position [Optional]\nType: MapPosition\nDescription: \n",
    "metadata": {
      "event_name": "on_script_trigger_effect",
      "data_name": "target_position",
      "data_type": "MapPosition"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_script_trigger_effect",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_sector_scanned",
    "content": "Event: on_sector_scanned\nDescription: Called when an entity of type `radar` finishes scanning a sector.\n",
    "metadata": {
      "event_name": "on_sector_scanned"
    }
  },
  {
    "type": "data",
    "name": "area",
    "content": "Data: area \nType: BoundingBox\nDescription: Area of the scanned chunk.\n",
    "metadata": {
      "event_name": "on_sector_scanned",
      "data_name": "area",
      "data_type": "BoundingBox"
    }
  },
  {
    "type": "data",
    "name": "chunk_position",
    "content": "Data: chunk_position \nType: ChunkPosition\nDescription: The chunk scanned.\n",
    "metadata": {
      "event_name": "on_sector_scanned",
      "data_name": "chunk_position",
      "data_type": "ChunkPosition"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_sector_scanned",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "radar",
    "content": "Data: radar \nType: LuaEntity\nDescription: The radar that did the scanning.\n",
    "metadata": {
      "event_name": "on_sector_scanned",
      "data_name": "radar",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_sector_scanned",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_segment_entity_created",
    "content": "Event: on_segment_entity_created\nDescription: Called when an individual segment of a SegmentedUnit is created.\n",
    "metadata": {
      "event_name": "on_segment_entity_created"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_segment_entity_created",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_segment_entity_created",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_segment_entity_created",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_selected_entity_changed",
    "content": "Event: on_selected_entity_changed\nDescription: Called after the selected entity changes for a given player.\n",
    "metadata": {
      "event_name": "on_selected_entity_changed"
    }
  },
  {
    "type": "data",
    "name": "last_entity",
    "content": "Data: last_entity [Optional]\nType: LuaEntity\nDescription: The last selected entity if it still exists and there was one.\n",
    "metadata": {
      "event_name": "on_selected_entity_changed",
      "data_name": "last_entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_selected_entity_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player whose selected entity changed.\n",
    "metadata": {
      "event_name": "on_selected_entity_changed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_selected_entity_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_space_platform_built_entity",
    "content": "Event: on_space_platform_built_entity\nDescription: Called when a space platform builds an entity.\n",
    "metadata": {
      "event_name": "on_space_platform_built_entity"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: The entity built.\n",
    "metadata": {
      "event_name": "on_space_platform_built_entity",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_space_platform_built_entity",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "platform",
    "content": "Data: platform \nType: LuaSpacePlatform\nDescription: The platform that did the building.\n",
    "metadata": {
      "event_name": "on_space_platform_built_entity",
      "data_name": "platform",
      "data_type": "LuaSpacePlatform"
    }
  },
  {
    "type": "data",
    "name": "stack",
    "content": "Data: stack \nType: LuaItemStack\nDescription: The item used to do the building.\n",
    "metadata": {
      "event_name": "on_space_platform_built_entity",
      "data_name": "stack",
      "data_type": "LuaItemStack"
    }
  },
  {
    "type": "data",
    "name": "tags",
    "content": "Data: tags [Optional]\nType: Tags\nDescription: The tags associated with this entity if any.\n",
    "metadata": {
      "event_name": "on_space_platform_built_entity",
      "data_name": "tags",
      "data_type": "Tags"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_space_platform_built_entity",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_space_platform_built_tile",
    "content": "Event: on_space_platform_built_tile\nDescription: Called after a space platform builds tiles.\n",
    "metadata": {
      "event_name": "on_space_platform_built_tile"
    }
  },
  {
    "type": "data",
    "name": "inventory",
    "content": "Data: inventory \nType: LuaInventory\nDescription: The inventory containing the stacks used to build the tiles.\n",
    "metadata": {
      "event_name": "on_space_platform_built_tile",
      "data_name": "inventory",
      "data_type": "LuaInventory"
    }
  },
  {
    "type": "data",
    "name": "item",
    "content": "Data: item \nType: LuaItemPrototype\nDescription: The item type used to build the tiles.\n",
    "metadata": {
      "event_name": "on_space_platform_built_tile",
      "data_name": "item",
      "data_type": "LuaItemPrototype"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_space_platform_built_tile",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "platform",
    "content": "Data: platform \nType: LuaSpacePlatform\nDescription: The platform.\n",
    "metadata": {
      "event_name": "on_space_platform_built_tile",
      "data_name": "platform",
      "data_type": "LuaSpacePlatform"
    }
  },
  {
    "type": "data",
    "name": "quality",
    "content": "Data: quality \nType: LuaQualityPrototype\nDescription: The quality the item used to build the tiles.\n",
    "metadata": {
      "event_name": "on_space_platform_built_tile",
      "data_name": "quality",
      "data_type": "LuaQualityPrototype"
    }
  },
  {
    "type": "data",
    "name": "surface_index",
    "content": "Data: surface_index \nType: uint\nDescription: The surface the tile(s) are build on.\n",
    "metadata": {
      "event_name": "on_space_platform_built_tile",
      "data_name": "surface_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_space_platform_built_tile",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tile",
    "content": "Data: tile \nType: LuaTilePrototype\nDescription: The tile prototype that was placed.\n",
    "metadata": {
      "event_name": "on_space_platform_built_tile",
      "data_name": "tile",
      "data_type": "LuaTilePrototype"
    }
  },
  {
    "type": "data",
    "name": "tiles",
    "content": "Data: tiles \nType: {'complex_type': 'array', 'value': 'OldTileAndPosition'}\nDescription: The position data.\n",
    "metadata": {
      "event_name": "on_space_platform_built_tile",
      "data_name": "tiles",
      "data_type": {
        "complex_type": "array",
        "value": "OldTileAndPosition"
      }
    }
  },
  {
    "type": "event",
    "name": "on_space_platform_changed_state",
    "content": "Event: on_space_platform_changed_state\nDescription: Called when a space platform changes state\n",
    "metadata": {
      "event_name": "on_space_platform_changed_state"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_space_platform_changed_state",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "old_state",
    "content": "Data: old_state \nType: defines.space_platform_state\nDescription: \n",
    "metadata": {
      "event_name": "on_space_platform_changed_state",
      "data_name": "old_state",
      "data_type": "defines.space_platform_state"
    }
  },
  {
    "type": "data",
    "name": "platform",
    "content": "Data: platform \nType: LuaSpacePlatform\nDescription: \n",
    "metadata": {
      "event_name": "on_space_platform_changed_state",
      "data_name": "platform",
      "data_type": "LuaSpacePlatform"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_space_platform_changed_state",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_space_platform_mined_entity",
    "content": "Event: on_space_platform_mined_entity\nDescription: Called after the results of an entity being mined are collected just before the entity is destroyed.\n\nAfter this event any items in the buffer will be transferred into the platform as if they came from mining the entity.\n\nThe buffer inventory is special in that it's only valid during this event and has a dynamic size expanding as more items are transferred into it.",
    "metadata": {
      "event_name": "on_space_platform_mined_entity"
    }
  },
  {
    "type": "data",
    "name": "buffer",
    "content": "Data: buffer \nType: LuaInventory\nDescription: The temporary inventory that holds the result of mining the entity.\n",
    "metadata": {
      "event_name": "on_space_platform_mined_entity",
      "data_name": "buffer",
      "data_type": "LuaInventory"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: The entity that has been mined.\n",
    "metadata": {
      "event_name": "on_space_platform_mined_entity",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_space_platform_mined_entity",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "platform",
    "content": "Data: platform \nType: LuaSpacePlatform\nDescription: The platform doing the mining.\n",
    "metadata": {
      "event_name": "on_space_platform_mined_entity",
      "data_name": "platform",
      "data_type": "LuaSpacePlatform"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_space_platform_mined_entity",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_space_platform_mined_item",
    "content": "Event: on_space_platform_mined_item\nDescription: Called when a platform mines an entity.\n",
    "metadata": {
      "event_name": "on_space_platform_mined_item"
    }
  },
  {
    "type": "data",
    "name": "item_stack",
    "content": "Data: item_stack \nType: SimpleItemStack\nDescription: The entity the platform just picked up.\n",
    "metadata": {
      "event_name": "on_space_platform_mined_item",
      "data_name": "item_stack",
      "data_type": "SimpleItemStack"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_space_platform_mined_item",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "platform",
    "content": "Data: platform \nType: LuaSpacePlatform\nDescription: The platform that did the mining.\n",
    "metadata": {
      "event_name": "on_space_platform_mined_item",
      "data_name": "platform",
      "data_type": "LuaSpacePlatform"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_space_platform_mined_item",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_space_platform_mined_tile",
    "content": "Event: on_space_platform_mined_tile\nDescription: Called after a platform mines tiles.\n",
    "metadata": {
      "event_name": "on_space_platform_mined_tile"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_space_platform_mined_tile",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "platform",
    "content": "Data: platform \nType: LuaSpacePlatform\nDescription: The platform.\n",
    "metadata": {
      "event_name": "on_space_platform_mined_tile",
      "data_name": "platform",
      "data_type": "LuaSpacePlatform"
    }
  },
  {
    "type": "data",
    "name": "surface_index",
    "content": "Data: surface_index \nType: uint\nDescription: The surface the tile(s) were mined on.\n",
    "metadata": {
      "event_name": "on_space_platform_mined_tile",
      "data_name": "surface_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_space_platform_mined_tile",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tiles",
    "content": "Data: tiles \nType: {'complex_type': 'array', 'value': 'OldTileAndPosition'}\nDescription: The position data.\n",
    "metadata": {
      "event_name": "on_space_platform_mined_tile",
      "data_name": "tiles",
      "data_type": {
        "complex_type": "array",
        "value": "OldTileAndPosition"
      }
    }
  },
  {
    "type": "event",
    "name": "on_space_platform_pre_mined",
    "content": "Event: on_space_platform_pre_mined\nDescription: Called before a platform mines an entity.\n",
    "metadata": {
      "event_name": "on_space_platform_pre_mined"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: The entity which is about to be mined.\n",
    "metadata": {
      "event_name": "on_space_platform_pre_mined",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_space_platform_pre_mined",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "platform",
    "content": "Data: platform \nType: LuaSpacePlatform\nDescription: The platform that's about to do the mining.\n",
    "metadata": {
      "event_name": "on_space_platform_pre_mined",
      "data_name": "platform",
      "data_type": "LuaSpacePlatform"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_space_platform_pre_mined",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_spider_command_completed",
    "content": "Event: on_spider_command_completed\nDescription: Called when a spider finishes moving to its autopilot position.\n",
    "metadata": {
      "event_name": "on_spider_command_completed"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_spider_command_completed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_spider_command_completed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "vehicle",
    "content": "Data: vehicle \nType: LuaEntity\nDescription: Spider vehicle which was requested to move.\n",
    "metadata": {
      "event_name": "on_spider_command_completed",
      "data_name": "vehicle",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "event",
    "name": "on_string_translated",
    "content": "Event: on_string_translated\nDescription: Called when a translation request generated through [LuaPlayer::request_translation](runtime:LuaPlayer::request_translation) or [LuaPlayer::request_translations](runtime:LuaPlayer::request_translations) has been completed.",
    "metadata": {
      "event_name": "on_string_translated"
    }
  },
  {
    "type": "data",
    "name": "id",
    "content": "Data: id \nType: uint\nDescription: The unique id for this translation request.\n",
    "metadata": {
      "event_name": "on_string_translated",
      "data_name": "id",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "localised_string",
    "content": "Data: localised_string \nType: LocalisedString\nDescription: The localised string being translated.\n",
    "metadata": {
      "event_name": "on_string_translated",
      "data_name": "localised_string",
      "data_type": "LocalisedString"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_string_translated",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player whose locale was used for the translation.\n",
    "metadata": {
      "event_name": "on_string_translated",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "result",
    "content": "Data: result \nType: string\nDescription: The translated `localised_string`.\n",
    "metadata": {
      "event_name": "on_string_translated",
      "data_name": "result",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_string_translated",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "translated",
    "content": "Data: translated \nType: boolean\nDescription: Whether the requested localised string was valid and could be translated.\n",
    "metadata": {
      "event_name": "on_string_translated",
      "data_name": "translated",
      "data_type": "boolean"
    }
  },
  {
    "type": "event",
    "name": "on_surface_cleared",
    "content": "Event: on_surface_cleared\nDescription: Called just after a surface is cleared (all entities removed and all chunks deleted).\n",
    "metadata": {
      "event_name": "on_surface_cleared"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_surface_cleared",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "surface_index",
    "content": "Data: surface_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_surface_cleared",
      "data_name": "surface_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_surface_cleared",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_surface_created",
    "content": "Event: on_surface_created\nDescription: Called when a surface is created.\n\nThis is not called when the default surface is created as it will always exist.\n",
    "metadata": {
      "event_name": "on_surface_created"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_surface_created",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "surface_index",
    "content": "Data: surface_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_surface_created",
      "data_name": "surface_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_surface_created",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_surface_deleted",
    "content": "Event: on_surface_deleted\nDescription: Called after a surface is deleted.\n",
    "metadata": {
      "event_name": "on_surface_deleted"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_surface_deleted",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "surface_index",
    "content": "Data: surface_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_surface_deleted",
      "data_name": "surface_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_surface_deleted",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_surface_imported",
    "content": "Event: on_surface_imported\nDescription: Called after a surface is imported via the map editor.\n",
    "metadata": {
      "event_name": "on_surface_imported"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_surface_imported",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "original_name",
    "content": "Data: original_name \nType: string\nDescription: The original surface name.\n",
    "metadata": {
      "event_name": "on_surface_imported",
      "data_name": "original_name",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "surface_index",
    "content": "Data: surface_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_surface_imported",
      "data_name": "surface_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_surface_imported",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_surface_renamed",
    "content": "Event: on_surface_renamed\nDescription: Called when a surface is renamed.\n",
    "metadata": {
      "event_name": "on_surface_renamed"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_surface_renamed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "new_name",
    "content": "Data: new_name \nType: string\nDescription: \n",
    "metadata": {
      "event_name": "on_surface_renamed",
      "data_name": "new_name",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "old_name",
    "content": "Data: old_name \nType: string\nDescription: \n",
    "metadata": {
      "event_name": "on_surface_renamed",
      "data_name": "old_name",
      "data_type": "string"
    }
  },
  {
    "type": "data",
    "name": "surface_index",
    "content": "Data: surface_index \nType: uint\nDescription: \n",
    "metadata": {
      "event_name": "on_surface_renamed",
      "data_name": "surface_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_surface_renamed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_technology_effects_reset",
    "content": "Event: on_technology_effects_reset\nDescription: Called when [LuaForce::reset_technology_effects](runtime:LuaForce::reset_technology_effects) is finished.\n",
    "metadata": {
      "event_name": "on_technology_effects_reset"
    }
  },
  {
    "type": "data",
    "name": "force",
    "content": "Data: force \nType: LuaForce\nDescription: \n",
    "metadata": {
      "event_name": "on_technology_effects_reset",
      "data_name": "force",
      "data_type": "LuaForce"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_technology_effects_reset",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_technology_effects_reset",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_tick",
    "content": "Event: on_tick\nDescription: It is fired once every tick. Since this event is fired every tick, its handler shouldn't include performance heavy code.\n",
    "metadata": {
      "event_name": "on_tick"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_tick",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_tick",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_train_changed_state",
    "content": "Event: on_train_changed_state\nDescription: Called when a train changes state (started to stopped and vice versa)\n",
    "metadata": {
      "event_name": "on_train_changed_state"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_train_changed_state",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "old_state",
    "content": "Data: old_state \nType: defines.train_state\nDescription: \n",
    "metadata": {
      "event_name": "on_train_changed_state",
      "data_name": "old_state",
      "data_type": "defines.train_state"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_train_changed_state",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "train",
    "content": "Data: train \nType: LuaTrain\nDescription: \n",
    "metadata": {
      "event_name": "on_train_changed_state",
      "data_name": "train",
      "data_type": "LuaTrain"
    }
  },
  {
    "type": "event",
    "name": "on_train_created",
    "content": "Event: on_train_created\nDescription: Called when a new train is created either through disconnecting/connecting an existing one or building a new one.\n",
    "metadata": {
      "event_name": "on_train_created"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_train_created",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "old_train_id_1",
    "content": "Data: old_train_id_1 [Optional]\nType: uint\nDescription: The first old train id when splitting/merging trains.\n",
    "metadata": {
      "event_name": "on_train_created",
      "data_name": "old_train_id_1",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "old_train_id_2",
    "content": "Data: old_train_id_2 [Optional]\nType: uint\nDescription: The second old train id when splitting/merging trains.\n",
    "metadata": {
      "event_name": "on_train_created",
      "data_name": "old_train_id_2",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_train_created",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "train",
    "content": "Data: train \nType: LuaTrain\nDescription: \n",
    "metadata": {
      "event_name": "on_train_created",
      "data_name": "train",
      "data_type": "LuaTrain"
    }
  },
  {
    "type": "event",
    "name": "on_train_schedule_changed",
    "content": "Event: on_train_schedule_changed\nDescription: Called when a trains schedule is changed either by the player or through script.\n",
    "metadata": {
      "event_name": "on_train_schedule_changed"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_train_schedule_changed",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index [Optional]\nType: uint\nDescription: The player who made the change if any.\n",
    "metadata": {
      "event_name": "on_train_schedule_changed",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_train_schedule_changed",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "train",
    "content": "Data: train \nType: LuaTrain\nDescription: \n",
    "metadata": {
      "event_name": "on_train_schedule_changed",
      "data_name": "train",
      "data_type": "LuaTrain"
    }
  },
  {
    "type": "event",
    "name": "on_trigger_created_entity",
    "content": "Event: on_trigger_created_entity\nDescription: Called when an entity with a trigger prototype (such as capsules) create an entity AND that trigger prototype defined `trigger_created_entity=true`.\n",
    "metadata": {
      "event_name": "on_trigger_created_entity"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_trigger_created_entity",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_trigger_created_entity",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "source",
    "content": "Data: source [Optional]\nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_trigger_created_entity",
      "data_name": "source",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_trigger_created_entity",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_trigger_fired_artillery",
    "content": "Event: on_trigger_fired_artillery\nDescription: Called when an entity with a trigger prototype (such as capsules) fire an artillery projectile AND that trigger prototype defined `trigger_fired_artillery=true`.\n",
    "metadata": {
      "event_name": "on_trigger_fired_artillery"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_trigger_fired_artillery",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_trigger_fired_artillery",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "source",
    "content": "Data: source [Optional]\nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_trigger_fired_artillery",
      "data_name": "source",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_trigger_fired_artillery",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_undo_applied",
    "content": "Event: on_undo_applied\nDescription: Called when the player triggers \"undo\".\n",
    "metadata": {
      "event_name": "on_undo_applied"
    }
  },
  {
    "type": "data",
    "name": "actions",
    "content": "Data: actions \nType: {'complex_type': 'array', 'value': 'UndoRedoAction'}\nDescription: The context of the undo action.\n",
    "metadata": {
      "event_name": "on_undo_applied",
      "data_name": "actions",
      "data_type": {
        "complex_type": "array",
        "value": "UndoRedoAction"
      }
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_undo_applied",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "player_index",
    "content": "Data: player_index \nType: uint\nDescription: The player who triggered the undo action.\n",
    "metadata": {
      "event_name": "on_undo_applied",
      "data_name": "player_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_undo_applied",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_unit_added_to_group",
    "content": "Event: on_unit_added_to_group\nDescription: Called when a unit is added to a unit group.\n",
    "metadata": {
      "event_name": "on_unit_added_to_group"
    }
  },
  {
    "type": "data",
    "name": "group",
    "content": "Data: group \nType: LuaCommandable\nDescription: \n",
    "metadata": {
      "event_name": "on_unit_added_to_group",
      "data_name": "group",
      "data_type": "LuaCommandable"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_unit_added_to_group",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_unit_added_to_group",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "unit",
    "content": "Data: unit \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_unit_added_to_group",
      "data_name": "unit",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "event",
    "name": "on_unit_group_created",
    "content": "Event: on_unit_group_created\nDescription: Called when a new unit group is created, before any members are added to it.\n",
    "metadata": {
      "event_name": "on_unit_group_created"
    }
  },
  {
    "type": "data",
    "name": "group",
    "content": "Data: group \nType: LuaCommandable\nDescription: \n",
    "metadata": {
      "event_name": "on_unit_group_created",
      "data_name": "group",
      "data_type": "LuaCommandable"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_unit_group_created",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_unit_group_created",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_unit_group_finished_gathering",
    "content": "Event: on_unit_group_finished_gathering\nDescription: Called when a unit group finishes gathering and starts executing its command.\n",
    "metadata": {
      "event_name": "on_unit_group_finished_gathering"
    }
  },
  {
    "type": "data",
    "name": "group",
    "content": "Data: group \nType: LuaCommandable\nDescription: \n",
    "metadata": {
      "event_name": "on_unit_group_finished_gathering",
      "data_name": "group",
      "data_type": "LuaCommandable"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_unit_group_finished_gathering",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_unit_group_finished_gathering",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "on_unit_removed_from_group",
    "content": "Event: on_unit_removed_from_group\nDescription: Called when a unit is removed from a unit group.\n",
    "metadata": {
      "event_name": "on_unit_removed_from_group"
    }
  },
  {
    "type": "data",
    "name": "group",
    "content": "Data: group \nType: LuaCommandable\nDescription: \n",
    "metadata": {
      "event_name": "on_unit_removed_from_group",
      "data_name": "group",
      "data_type": "LuaCommandable"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_unit_removed_from_group",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_unit_removed_from_group",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "unit",
    "content": "Data: unit \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_unit_removed_from_group",
      "data_name": "unit",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "event",
    "name": "on_worker_robot_expired",
    "content": "Event: on_worker_robot_expired\nDescription: Called when a worker (construction or logistic) robot expires through a lack of energy.\n",
    "metadata": {
      "event_name": "on_worker_robot_expired"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "on_worker_robot_expired",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "robot",
    "content": "Data: robot \nType: LuaEntity\nDescription: \n",
    "metadata": {
      "event_name": "on_worker_robot_expired",
      "data_name": "robot",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "on_worker_robot_expired",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "script_raised_built",
    "content": "Event: script_raised_built\nDescription: A static event mods can use to tell other mods they built something by script. This event is only raised if a mod does so with [LuaBootstrap::raise_event](runtime:LuaBootstrap::raise_event) or [LuaBootstrap::raise_script_built](runtime:LuaBootstrap::raise_script_built), or when `raise_built` is passed to [LuaSurface::create_entity](runtime:LuaSurface::create_entity).",
    "metadata": {
      "event_name": "script_raised_built"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: The entity that has been built.\n",
    "metadata": {
      "event_name": "script_raised_built",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "script_raised_built",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "script_raised_built",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "script_raised_destroy",
    "content": "Event: script_raised_destroy\nDescription: A static event mods can use to tell other mods they destroyed something by script. This event is only raised if a mod does so with [LuaBootstrap::raise_event](runtime:LuaBootstrap::raise_event) or [LuaBootstrap::raise_script_destroy](runtime:LuaBootstrap::raise_script_destroy), or when `raise_destroy` is passed to [LuaEntity::destroy](runtime:LuaEntity::destroy).",
    "metadata": {
      "event_name": "script_raised_destroy"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: The entity that was destroyed.\n",
    "metadata": {
      "event_name": "script_raised_destroy",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "script_raised_destroy",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "script_raised_destroy",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "script_raised_revive",
    "content": "Event: script_raised_revive\nDescription: A static event mods can use to tell other mods they revived something by script. This event is only raised if a mod does so with [LuaBootstrap::raise_event](runtime:LuaBootstrap::raise_event) or [LuaBootstrap::raise_script_revive](runtime:LuaBootstrap::raise_script_revive), or when `raise_revive` is passed to [LuaEntity::revive](runtime:LuaEntity::revive).",
    "metadata": {
      "event_name": "script_raised_revive"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: The entity that was revived.\n",
    "metadata": {
      "event_name": "script_raised_revive",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "script_raised_revive",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "tags",
    "content": "Data: tags [Optional]\nType: Tags\nDescription: The tags associated with this entity, if any.\n",
    "metadata": {
      "event_name": "script_raised_revive",
      "data_name": "tags",
      "data_type": "Tags"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "script_raised_revive",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "event",
    "name": "script_raised_set_tiles",
    "content": "Event: script_raised_set_tiles\nDescription: A static event mods can use to tell other mods they changed tiles on a surface by script. This event is only raised if a mod does so with [LuaBootstrap::raise_event](runtime:LuaBootstrap::raise_event) or [LuaBootstrap::raise_script_set_tiles](runtime:LuaBootstrap::raise_script_set_tiles), or when `raise_event` is passed to [LuaSurface::set_tiles](runtime:LuaSurface::set_tiles).",
    "metadata": {
      "event_name": "script_raised_set_tiles"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "script_raised_set_tiles",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "surface_index",
    "content": "Data: surface_index \nType: uint\nDescription: The surface whose tiles were changed.\n",
    "metadata": {
      "event_name": "script_raised_set_tiles",
      "data_name": "surface_index",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "script_raised_set_tiles",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "data",
    "name": "tiles",
    "content": "Data: tiles \nType: {'complex_type': 'array', 'value': 'Tile'}\nDescription: The tiles that were changed.\n",
    "metadata": {
      "event_name": "script_raised_set_tiles",
      "data_name": "tiles",
      "data_type": {
        "complex_type": "array",
        "value": "Tile"
      }
    }
  },
  {
    "type": "event",
    "name": "script_raised_teleported",
    "content": "Event: script_raised_teleported\nDescription: A static event mods can use to tell other mods they teleported something by script. This event is only raised if a mod does so with [LuaBootstrap::raise_event](runtime:LuaBootstrap::raise_event) or [LuaBootstrap::raise_script_teleported](runtime:LuaBootstrap::raise_script_teleported), or when `raise_teleported` is passed to [LuaControl::teleport](runtime:LuaControl::teleport).",
    "metadata": {
      "event_name": "script_raised_teleported"
    }
  },
  {
    "type": "data",
    "name": "entity",
    "content": "Data: entity \nType: LuaEntity\nDescription: The entity that was teleported.\n",
    "metadata": {
      "event_name": "script_raised_teleported",
      "data_name": "entity",
      "data_type": "LuaEntity"
    }
  },
  {
    "type": "data",
    "name": "name",
    "content": "Data: name \nType: defines.events\nDescription: Identifier of the event\n",
    "metadata": {
      "event_name": "script_raised_teleported",
      "data_name": "name",
      "data_type": "defines.events"
    }
  },
  {
    "type": "data",
    "name": "old_position",
    "content": "Data: old_position \nType: MapPosition\nDescription: The entity's position before the teleportation.\n",
    "metadata": {
      "event_name": "script_raised_teleported",
      "data_name": "old_position",
      "data_type": "MapPosition"
    }
  },
  {
    "type": "data",
    "name": "old_surface_index",
    "content": "Data: old_surface_index \nType: uint8\nDescription: The entity's surface before the teleportation.\n",
    "metadata": {
      "event_name": "script_raised_teleported",
      "data_name": "old_surface_index",
      "data_type": "uint8"
    }
  },
  {
    "type": "data",
    "name": "tick",
    "content": "Data: tick \nType: uint\nDescription: Tick the event was generated.\n",
    "metadata": {
      "event_name": "script_raised_teleported",
      "data_name": "tick",
      "data_type": "uint"
    }
  },
  {
    "type": "concept",
    "name": "AchievementPrototypeFilter",
    "content": "Concept: AchievementPrototypeFilter\nDescription:",
    "metadata": {
      "concept_name": "AchievementPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AchievementPrototypeFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'allowed-without-fight'}, {'complex_type': 'literal', 'value': 'type'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How",
    "metadata": {
      "concept_name": "AchievementPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AchievementPrototypeFilter",
    "content": "True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The",
    "metadata": {
      "concept_name": "AchievementPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AchievementPrototypeFilter",
    "content": "'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type, or a list of acceptable types.', 'type': {'complex_type': 'union', 'options': ['string', {'complex_type': 'array', 'value': 'string'}], 'full_format': False}, 'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "AchievementPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AdvancedMapGenSettings",
    "content": "Concept: AdvancedMapGenSettings\nDescription:",
    "metadata": {
      "concept_name": "AdvancedMapGenSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AdvancedMapGenSettings",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'difficulty_settings', 'order': 3, 'description': '', 'type': 'DifficultySettings', 'optional': False}, {'name': 'enemy_evolution', 'order': 1, 'description': '', 'type': 'EnemyEvolutionMapSettings', 'optional': False}, {'name': 'enemy_expansion', 'order': 2, 'description': '', 'type': 'EnemyExpansionMapSettings', 'optional': False}, {'name': 'pollution', 'order': 0, 'description': '', 'type': 'PollutionMapSettings', 'optional': False}]}",
    "metadata": {
      "concept_name": "AdvancedMapGenSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Alert",
    "content": "Concept: Alert\nDescription:",
    "metadata": {
      "concept_name": "Alert",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Alert",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'icon', 'order': 4, 'description': 'The SignalID used for a custom alert. Only present for custom alerts.', 'type': 'SignalID', 'optional': True}, {'name': 'message', 'order': 5, 'description': 'The message for a custom alert. Only present for custom alerts.', 'type': 'LocalisedString', 'optional': True}, {'name': 'position', 'order': 3, 'description': '', 'type': 'MapPosition', 'optional': True}, {'name': 'prototype', 'order': 2,",
    "metadata": {
      "concept_name": "Alert",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Alert",
    "content": "'optional': True}, {'name': 'prototype', 'order': 2, 'description': '', 'type': 'LuaEntityPrototype', 'optional': True}, {'name': 'target', 'order': 1, 'description': '', 'type': 'LuaEntity', 'optional': True}, {'name': 'tick', 'order': 0, 'description': 'The tick this alert was created.', 'type': 'uint', 'optional': False}]}",
    "metadata": {
      "concept_name": "Alert",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Alignment",
    "content": "Concept: Alignment\nDescription: A [string](runtime:string) that specifies where a GUI element should be.",
    "metadata": {
      "concept_name": "Alignment",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "Alignment",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'top-left', 'description': ''}, {'complex_type': 'literal', 'value': 'middle-left', 'description': ''}, {'complex_type': 'literal', 'value': 'left', 'description': 'The same as `\"middle-left\"`'}, {'complex_type': 'literal', 'value': 'bottom-left', 'description': ''}, {'complex_type': 'literal', 'value': 'top-center', 'description': ''}, {'complex_type': 'literal', 'value': 'middle-center', 'description': ''},",
    "metadata": {
      "concept_name": "Alignment",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "Alignment",
    "content": "'literal', 'value': 'middle-center', 'description': ''}, {'complex_type': 'literal', 'value': 'center', 'description': 'The same as `\"middle-center\"`'}, {'complex_type': 'literal', 'value': 'bottom-center', 'description': ''}, {'complex_type': 'literal', 'value': 'top-right', 'description': ''}, {'complex_type': 'literal', 'value': 'right', 'description': 'The same as `\"middle-right\"`'}, {'complex_type': 'literal', 'value': 'bottom-right', 'description': ''}], 'full_format': True}",
    "metadata": {
      "concept_name": "Alignment",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "AmmoType",
    "content": "Concept: AmmoType\nDescription:",
    "metadata": {
      "concept_name": "AmmoType",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AmmoType",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'action', 'order': 0, 'description': '', 'type': {'complex_type': 'array', 'value': 'TriggerItem'}, 'optional': True}, {'name': 'clamp_position', 'order': 2, 'description': 'When `true`, the gun will be able to shoot even when the target is out of range. Only applies when `target_type` is `position`. The gun will fire at the maximum range in the direction of the target position. Defaults to `false`.', 'type': 'boolean', 'optional': True},",
    "metadata": {
      "concept_name": "AmmoType",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AmmoType",
    "content": "Defaults to `false`.', 'type': 'boolean', 'optional': True}, {'name': 'consumption_modifier', 'order': 6, 'description': '', 'type': 'float', 'optional': True}, {'name': 'cooldown_modifier', 'order': 5, 'description': '', 'type': 'double', 'optional': True}, {'name': 'energy_consumption', 'order': 3, 'description': 'Energy consumption of a single shot, if applicable. Defaults to `0`.', 'type': 'double', 'optional': True}, {'name': 'range_modifier', 'order': 4, 'description': '', 'type': 'double',",
    "metadata": {
      "concept_name": "AmmoType",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AmmoType",
    "content": "'order': 4, 'description': '', 'type': 'double', 'optional': True}, {'name': 'target_type', 'order': 1, 'description': '', 'type': 'TargetType', 'optional': False}]}",
    "metadata": {
      "concept_name": "AmmoType",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Any",
    "content": "Concept: Any\nDescription: Any basic type (string, number, boolean), table, or LuaObject.\nComplex_type: {'complex_type': 'union', 'options': ['string', 'boolean', 'number', 'table', 'LuaObject'], 'full_format': False}",
    "metadata": {
      "concept_name": "Any",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "AnyBasic",
    "content": "Concept: AnyBasic\nDescription: Any basic type (string, number, boolean) or table.\nComplex_type: {'complex_type': 'union', 'options': ['string', 'boolean', 'number', 'table'], 'full_format': False}",
    "metadata": {
      "concept_name": "AnyBasic",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ArithmeticCombinatorParameters",
    "content": "Concept: ArithmeticCombinatorParameters\nDescription:",
    "metadata": {
      "concept_name": "ArithmeticCombinatorParameters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ArithmeticCombinatorParameters",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'first_constant', 'order': 2, 'description': 'Constant to use as the first argument of the operation. Has no effect when `first_signal` is set. Defaults to `0`.', 'type': 'int', 'optional': True}, {'name': 'first_signal', 'order': 0, 'description': 'First signal to use in an operation. If not specified, the second argument will be the value of `first_constant`.', 'type': 'SignalID', 'optional': True}, {'name': 'operation', 'order': 4,",
    "metadata": {
      "concept_name": "ArithmeticCombinatorParameters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ArithmeticCombinatorParameters",
    "content": "'optional': True}, {'name': 'operation', 'order': 4, 'description': 'When not specified, defaults to `\"*\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': '*'}, {'complex_type': 'literal', 'value': '/'}, {'complex_type': 'literal', 'value': '+'}, {'complex_type': 'literal', 'value': '-'}, {'complex_type': 'literal', 'value': '%'}, {'complex_type': 'literal', 'value': '^'}, {'complex_type': 'literal', 'value': '<<'}, {'complex_type': 'literal', 'value': '>>'},",
    "metadata": {
      "concept_name": "ArithmeticCombinatorParameters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ArithmeticCombinatorParameters",
    "content": "'value': '<<'}, {'complex_type': 'literal', 'value': '>>'}, {'complex_type': 'literal', 'value': 'AND'}, {'complex_type': 'literal', 'value': 'OR'}, {'complex_type': 'literal', 'value': 'XOR'}], 'full_format': False}, 'optional': True}, {'name': 'output_signal', 'order': 5, 'description': 'Specifies the signal to output.', 'type': 'SignalID', 'optional': True}, {'name': 'second_constant', 'order': 3, 'description': 'Constant to use as the second argument of the operation. Has no effect when `second_signal`",
    "metadata": {
      "concept_name": "ArithmeticCombinatorParameters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ArithmeticCombinatorParameters",
    "content": "argument of the operation. Has no effect when `second_signal` is set. Defaults to `0`.', 'type': 'int', 'optional': True}, {'name': 'second_signal', 'order': 1, 'description': 'Second signal to use in an operation. If not specified, the second argument will be the value of `second_constant`.', 'type': 'SignalID', 'optional': True}]}",
    "metadata": {
      "concept_name": "ArithmeticCombinatorParameters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AsteroidChunk",
    "content": "Concept: AsteroidChunk\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'movement', 'order': 2, 'description': '', 'type': 'Vector', 'optional': False}, {'name': 'name', 'order': 0, 'description': 'The name of the asteroid chunk prototype.', 'type': 'string', 'optional': False}, {'name': 'position', 'order': 1, 'description': '', 'type': 'MapPosition', 'optional': False}]}",
    "metadata": {
      "concept_name": "AsteroidChunk",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AsteroidChunkID",
    "content": "Concept: AsteroidChunkID\nDescription: An asteroid chunk prototype may be specified in one of two ways.\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'LuaAsteroidChunkPrototype', 'description': 'The asteroid chunk prototype.'}, {'complex_type': 'type', 'value': 'string', 'description': 'The prototype name.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "AsteroidChunkID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "AsteroidChunkPrototypeFilter",
    "content": "Concept: AsteroidChunkPrototypeFilter\nDescription:",
    "metadata": {
      "concept_name": "AsteroidChunkPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AsteroidChunkPrototypeFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'minable'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`.",
    "metadata": {
      "concept_name": "AsteroidChunkPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AsteroidChunkPrototypeFilter",
    "content": "to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "AsteroidChunkPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AsteroidMapSettings",
    "content": "Concept: AsteroidMapSettings\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'max_ray_portals_expanded_per_tick', 'order': 1, 'description': '', 'type': 'uint', 'optional': False}, {'name': 'spawning_rate', 'order': 0, 'description': '', 'type': 'double', 'optional': False}]}",
    "metadata": {
      "concept_name": "AsteroidMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AttackParameterFluid",
    "content": "Concept: AttackParameterFluid\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'damage_modifier', 'order': 1, 'description': 'Multiplier applied to the damage of an attack.', 'type': 'double', 'optional': False}, {'name': 'type', 'order': 0, 'description': 'Name of the [LuaFluidPrototype](runtime:LuaFluidPrototype).', 'type': 'string', 'optional': False}]}",
    "metadata": {
      "concept_name": "AttackParameterFluid",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AttackParameters",
    "content": "Concept: AttackParameters\nDescription:",
    "metadata": {
      "concept_name": "AttackParameters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AttackParameters",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'ammo_categories', 'order': 16, 'description': 'List of the names of compatible [LuaAmmoCategoryPrototypes](runtime:LuaAmmoCategoryPrototype).', 'type': {'complex_type': 'array', 'value': 'string'}, 'optional': True}, {'name': 'ammo_consumption_modifier', 'order': 10, 'description': 'Multiplier applied to the ammo consumption of an attack.', 'type': 'float', 'optional': False}, {'name': 'ammo_type', 'order': 15, 'description': '', 'type':",
    "metadata": {
      "concept_name": "AttackParameters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AttackParameters",
    "content": "{'name': 'ammo_type', 'order': 15, 'description': '', 'type': 'AmmoType', 'optional': True}, {'name': 'cooldown', 'order': 11, 'description': 'Minimum amount of ticks between shots. If this is less than `1`, multiple shots can be performed per tick.', 'type': 'float', 'optional': False}, {'name': 'damage_modifier', 'order': 9, 'description': 'Multiplier applied to the damage of an attack.', 'type': 'float', 'optional': False}, {'name': 'fire_penalty', 'order': 4, 'description': \"When searching for the",
    "metadata": {
      "concept_name": "AttackParameters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AttackParameters",
    "content": "'order': 4, 'description': \"When searching for the nearest enemy to attack, `fire_penalty` is added to the enemy's distance if they are on fire.\", 'type': 'float', 'optional': False}, {'name': 'health_penalty', 'order': 6, 'description': 'When searching for an enemy to attack, a higher `health_penalty` will discourage targeting enemies with high health. A negative penalty will do the opposite.', 'type': 'float', 'optional': False}, {'name': 'min_attack_distance', 'order': 7, 'description': 'If less than",
    "metadata": {
      "concept_name": "AttackParameters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AttackParameters",
    "content": "'min_attack_distance', 'order': 7, 'description': 'If less than `range`, the entity will choose a random distance between `range` and `min_attack_distance` and attack from that distance. Used for spitters.', 'type': 'float', 'optional': False}, {'name': 'min_range', 'order': 2, 'description': 'Minimum range of attack. Used with flamethrower turrets to prevent self-immolation.', 'type': 'float', 'optional': False}, {'name': 'movement_slow_down_cooldown', 'order': 14, 'description': '', 'type': 'float',",
    "metadata": {
      "concept_name": "AttackParameters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AttackParameters",
    "content": "'order': 14, 'description': '', 'type': 'float', 'optional': False}, {'name': 'movement_slow_down_factor', 'order': 13, 'description': '', 'type': 'double', 'optional': False}, {'name': 'range', 'order': 1, 'description': 'Maximum range of attack.', 'type': 'float', 'optional': False}, {'name': 'range_mode', 'order': 3, 'description': 'Defines how the range is determined.', 'type': 'RangeMode', 'optional': False}, {'name': 'rotate_penalty', 'order': 5, 'description': 'When searching for an enemy to attack,",
    "metadata": {
      "concept_name": "AttackParameters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AttackParameters",
    "content": "5, 'description': 'When searching for an enemy to attack, a higher `rotate_penalty` will discourage targeting enemies that would take longer to turn to face.', 'type': 'float', 'optional': False}, {'name': 'turn_range', 'order': 8, 'description': 'The arc that the entity can attack in as a fraction of a circle. A value of `1` means the full 360 degrees.', 'type': 'float', 'optional': False}, {'name': 'type', 'order': 0, 'description': 'The type of AttackParameter.', 'type': {'complex_type': 'union',",
    "metadata": {
      "concept_name": "AttackParameters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AttackParameters",
    "content": "type of AttackParameter.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'projectile'}, {'complex_type': 'literal', 'value': 'stream'}, {'complex_type': 'literal', 'value': 'beam'}], 'full_format': False}, 'optional': False}, {'name': 'warmup', 'order': 12, 'description': 'Number of ticks it takes for the weapon to actually shoot after it has been ordered to do so.', 'type': 'uint', 'optional': False}], 'variant_parameter_groups': [{'name': 'projectile', 'order': 0,",
    "metadata": {
      "concept_name": "AttackParameters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AttackParameters",
    "content": "'variant_parameter_groups': [{'name': 'projectile', 'order': 0, 'description': '', 'parameters': [{'name': 'projectile_center', 'order': 0, 'description': '', 'type': 'Vector', 'optional': False}, {'name': 'projectile_creation_distance', 'order': 1, 'description': '', 'type': 'float', 'optional': False}, {'name': 'projectile_creation_parameters', 'order': 4, 'description': '', 'type': {'complex_type': 'array', 'value': 'CircularProjectileCreationSpecification'}, 'optional': True}, {'name':",
    "metadata": {
      "concept_name": "AttackParameters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AttackParameters",
    "content": "'optional': True}, {'name': 'projectile_orientation_offset', 'order': 2, 'description': '', 'type': 'float', 'optional': False}, {'name': 'shell_particle', 'order': 3, 'description': '', 'type': 'CircularParticleCreationSpecification', 'optional': True}]}, {'name': 'stream', 'order': 1, 'description': '', 'parameters': [{'name': 'fluid_consumption', 'order': 2, 'description': '', 'type': 'float', 'optional': False}, {'name': 'fluids', 'order': 3, 'description': '', 'type': {'complex_type': 'array',",
    "metadata": {
      "concept_name": "AttackParameters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AttackParameters",
    "content": "3, 'description': '', 'type': {'complex_type': 'array', 'value': 'AttackParameterFluid'}, 'optional': True}, {'name': 'gun_barrel_length', 'order': 0, 'description': '', 'type': 'float', 'optional': False}, {'name': 'gun_center_shift', 'order': 1, 'description': '', 'type': 'GunShift4Way', 'optional': False}, {'name': 'projectile_creation_parameters', 'order': 4, 'description': '', 'type': {'complex_type': 'array', 'value': 'CircularProjectileCreationSpecification'}, 'optional': True}]}],",
    "metadata": {
      "concept_name": "AttackParameters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AttackParameters",
    "content": "'optional': True}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `type`:'}",
    "metadata": {
      "concept_name": "AttackParameters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AutoplaceControl",
    "content": "Concept: AutoplaceControl\nDescription:",
    "metadata": {
      "concept_name": "AutoplaceControl",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AutoplaceControl",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'frequency', 'order': 0, 'description': 'For things that are placed as spots such as ores and enemy bases, frequency is generally proportional to number of spots placed per unit area. For continuous features such as forests, frequency is how compressed the probability function is over distance, i.e. the inverse of \\'scale\\'. When the [LuaAutoplaceControlPrototype](runtime:LuaAutoplaceControlPrototype) is of the category `\"terrain\"`, then scale",
    "metadata": {
      "concept_name": "AutoplaceControl",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AutoplaceControl",
    "content": "is of the category `\"terrain\"`, then scale is shown in the map generator GUI instead of frequency.', 'type': 'MapGenSize', 'optional': False}, {'name': 'richness', 'order': 2, 'description': 'Has different effects for different things, but generally affects the \\'health\\' or density of a thing that is placed without affecting where it is placed. For trees, richness affects tree health.  For ores, richness multiplies the amount of ore at any given tile in a patch. Metadata about autoplace controls (such as",
    "metadata": {
      "concept_name": "AutoplaceControl",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AutoplaceControl",
    "content": "tile in a patch. Metadata about autoplace controls (such as whether or not \\'richness\\' does anything for them) can be found in the [LuaAutoplaceControlPrototype](runtime:LuaAutoplaceControlPrototype) by looking up `prototypes.autoplace_control[(control prototype name)]`, e.g. `prototypes.autoplace_control[\"enemy-base\"].richness` is false, because enemy base autoplacement doesn\\'t use richness.', 'type': 'MapGenSize', 'optional': False}, {'name': 'size', 'order': 1, 'description': \"For things that are",
    "metadata": {
      "concept_name": "AutoplaceControl",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AutoplaceControl",
    "content": "'size', 'order': 1, 'description': \"For things that are placed as spots, size is proportional to the area of each spot. For continuous features, size affects how much of the map is covered with the thing, and is called 'coverage' in the GUI.\", 'type': 'MapGenSize', 'optional': False}]}",
    "metadata": {
      "concept_name": "AutoplaceControl",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AutoplaceSettings",
    "content": "Concept: AutoplaceSettings\nDescription:",
    "metadata": {
      "concept_name": "AutoplaceSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AutoplaceSettings",
    "content": "Description: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'settings', 'order': 1, 'description': 'Always defined when reading autoplace settings.', 'type': {'complex_type': 'dictionary', 'key': 'string', 'value': 'AutoplaceControl'}, 'optional': True}, {'name': 'treat_missing_as_default', 'order': 0, 'description': 'Whether missing autoplace names for this type should be default enabled. Always defined when reading autoplace settings.', 'type': 'boolean', 'optional': True}]}",
    "metadata": {
      "concept_name": "AutoplaceSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AutoplaceSpecification",
    "content": "Concept: AutoplaceSpecification\nDescription: Specifies how probability and richness are calculated when placing something on the map.",
    "metadata": {
      "concept_name": "AutoplaceSpecification",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AutoplaceSpecification",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'control', 'order': 0, 'description': 'Control prototype name.', 'type': 'string', 'optional': True}, {'name': 'default_enabled', 'order': 1, 'description': '', 'type': 'boolean', 'optional': False}, {'name': 'force', 'order': 2, 'description': '', 'type': 'string', 'optional': False}, {'name': 'order', 'order': 3, 'description': '', 'type': 'string', 'optional': False}, {'name': 'placement_density', 'order': 4, 'description': '', 'type':",
    "metadata": {
      "concept_name": "AutoplaceSpecification",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AutoplaceSpecification",
    "content": "'placement_density', 'order': 4, 'description': '', 'type': 'uint', 'optional': False}, {'name': 'probability_expression', 'order': 6, 'description': '', 'type': 'NoiseExpression', 'optional': False}, {'name': 'richness_expression', 'order': 7, 'description': '', 'type': 'NoiseExpression', 'optional': True}, {'name': 'tile_restriction', 'order': 5, 'description': '', 'type': {'complex_type': 'array', 'value': 'AutoplaceSpecificationRestriction'}, 'optional': True}]}",
    "metadata": {
      "concept_name": "AutoplaceSpecification",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "AutoplaceSpecificationRestriction",
    "content": "Concept: AutoplaceSpecificationRestriction\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'first', 'order': 0, 'description': 'Tile prototype name', 'type': 'string', 'optional': True}, {'name': 'second', 'order': 1, 'description': 'Second prototype name', 'type': 'string', 'optional': True}]}",
    "metadata": {
      "concept_name": "AutoplaceSpecificationRestriction",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "BeamTarget",
    "content": "Concept: BeamTarget\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'entity', 'order': 0, 'description': 'The target entity.', 'type': 'LuaEntity', 'optional': True}, {'name': 'position', 'order': 1, 'description': 'The target position.', 'type': 'MapPosition', 'optional': True}]}",
    "metadata": {
      "concept_name": "BeamTarget",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "BlueprintEntity",
    "content": "Concept: BlueprintEntity\nDescription: The representation of an entity inside of a blueprint. It has at least these fields, but can contain additional ones depending on the kind of entity.",
    "metadata": {
      "concept_name": "BlueprintEntity",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "BlueprintEntity",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'control_behavior', 'order': 6, 'description': \"The control behavior of the entity, if it has one. The format of the control behavior depends on the entity's type. Only relevant for entities that support control behaviors.\", 'type': 'BlueprintControlBehavior', 'optional': True}, {'name': 'direction', 'order': 3, 'description': 'The direction the entity is facing. Only present for entities that can face in different directions and when the",
    "metadata": {
      "concept_name": "BlueprintEntity",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "BlueprintEntity",
    "content": "for entities that can face in different directions and when the entity is not facing north.', 'type': 'defines.direction', 'optional': True}, {'name': 'entity_number', 'order': 0, 'description': \"The entity's unique identifier in the blueprint.\", 'type': 'uint', 'optional': False}, {'name': 'items', 'order': 7, 'description': 'The items that the entity will request when revived, if any.', 'type': {'complex_type': 'array', 'value': 'BlueprintInsertPlan'}, 'optional': True}, {'name': 'mirror', 'order': 4,",
    "metadata": {
      "concept_name": "BlueprintEntity",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "BlueprintEntity",
    "content": "'optional': True}, {'name': 'mirror', 'order': 4, 'description': 'Whether this entity is mirrored.', 'type': 'boolean', 'optional': True}, {'name': 'name', 'order': 1, 'description': 'The prototype name of the entity.', 'type': 'string', 'optional': False}, {'name': 'position', 'order': 2, 'description': 'The position of the entity.', 'type': 'MapPosition', 'optional': False}, {'name': 'quality', 'order': 5, 'description': \"The prototype name of the entity's quality.\", 'type': 'string', 'optional': True},",
    "metadata": {
      "concept_name": "BlueprintEntity",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "BlueprintEntity",
    "content": "of the entity's quality.\", 'type': 'string', 'optional': True}, {'name': 'schedule', 'order': 9, 'description': 'The schedule of the entity, if it has one. Only relevant for locomotives.', 'type': 'BlueprintSchedule', 'optional': True}, {'name': 'tags', 'order': 8, 'description': 'The entity tags of the entity, if there are any.', 'type': 'Tags', 'optional': True}, {'name': 'wires', 'order': 10, 'description': 'Wires connected to this entity in the blueprint.', 'type': {'complex_type': 'array', 'value':",
    "metadata": {
      "concept_name": "BlueprintEntity",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "BlueprintEntity",
    "content": "in the blueprint.', 'type': {'complex_type': 'array', 'value': 'BlueprintWire'}, 'optional': True}]}",
    "metadata": {
      "concept_name": "BlueprintEntity",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "BlueprintInsertPlan",
    "content": "Concept: BlueprintInsertPlan\nDescription: Defines an item type that a blueprint entity will request.\nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'id', 'order': 0, 'description': 'The prototype name and quality of the item to request.', 'type': 'ItemIDAndQualityIDPair', 'optional': False}, {'name': 'items', 'order': 1, 'description': 'Describes the inventories to insert these items into.', 'type': 'ItemInventoryPositions', 'optional': False}]}",
    "metadata": {
      "concept_name": "BlueprintInsertPlan",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "BlueprintLogisticFilter",
    "content": "Concept: BlueprintLogisticFilter\nDescription:",
    "metadata": {
      "concept_name": "BlueprintLogisticFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "BlueprintLogisticFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'comparator', 'order': 4, 'description': 'The comparator for quality. `nil` if any quality.', 'type': 'ComparatorString', 'optional': True}, {'name': 'count', 'order': 5, 'description': '', 'type': 'int', 'optional': False}, {'name': 'import_from', 'order': 8, 'description': '', 'type': 'string', 'optional': True}, {'name': 'index', 'order': 0, 'description': '', 'type': 'LogisticFilterIndex', 'optional': False}, {'name': 'max_count', 'order':",
    "metadata": {
      "concept_name": "BlueprintLogisticFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "BlueprintLogisticFilter",
    "content": "'optional': False}, {'name': 'max_count', 'order': 6, 'description': '', 'type': 'ItemCountType', 'optional': True}, {'name': 'minimum_delivery_count', 'order': 7, 'description': 'Defaults to 0.', 'type': 'ItemCountType', 'optional': True}, {'name': 'name', 'order': 2, 'description': 'Name of the logistic filter.', 'type': 'string', 'optional': True}, {'name': 'quality', 'order': 3, 'description': 'The prototype name of the quality. `nil` for any quality.', 'type': 'string', 'optional': True}, {'name':",
    "metadata": {
      "concept_name": "BlueprintLogisticFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "BlueprintLogisticFilter",
    "content": "any quality.', 'type': 'string', 'optional': True}, {'name': 'type', 'order': 1, 'description': 'The type of the logistic filter.', 'type': 'SignalIDType', 'optional': True}]}",
    "metadata": {
      "concept_name": "BlueprintLogisticFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "BlueprintSchedule",
    "content": "Concept: BlueprintSchedule\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'group', 'order': 1, 'description': '', 'type': 'string', 'optional': True}, {'name': 'interrupts', 'order': 2, 'description': '', 'type': {'complex_type': 'array', 'value': 'BlueprintScheduleInterrupt'}, 'optional': True}, {'name': 'records', 'order': 0, 'description': '', 'type': {'complex_type': 'array', 'value': 'BlueprintScheduleRecord'}, 'optional': True}]}",
    "metadata": {
      "concept_name": "BlueprintSchedule",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "BlueprintScheduleInterrupt",
    "content": "Concept: BlueprintScheduleInterrupt\nDescription:",
    "metadata": {
      "concept_name": "BlueprintScheduleInterrupt",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "BlueprintScheduleInterrupt",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'conditions', 'order': 1, 'description': '', 'type': {'complex_type': 'array', 'value': 'WaitCondition'}, 'optional': True}, {'name': 'inside_interrupt', 'order': 3, 'description': '', 'type': 'boolean', 'optional': False}, {'name': 'name', 'order': 0, 'description': '', 'type': 'string', 'optional': True}, {'name': 'targets', 'order': 2, 'description': '', 'type': {'complex_type': 'array', 'value': 'BlueprintScheduleRecord'}, 'optional':",
    "metadata": {
      "concept_name": "BlueprintScheduleInterrupt",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "BlueprintScheduleInterrupt",
    "content": "'array', 'value': 'BlueprintScheduleRecord'}, 'optional': True}]}",
    "metadata": {
      "concept_name": "BlueprintScheduleInterrupt",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "BlueprintScheduleRecord",
    "content": "Concept: BlueprintScheduleRecord\nDescription:",
    "metadata": {
      "concept_name": "BlueprintScheduleRecord",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "BlueprintScheduleRecord",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'allows_unloading', 'order': 4, 'description': '', 'type': 'boolean', 'optional': True}, {'name': 'created_by_interrupt', 'order': 3, 'description': '', 'type': 'boolean', 'optional': True}, {'name': 'station', 'order': 0, 'description': 'Name of the station.', 'type': 'string', 'optional': True}, {'name': 'temporary', 'order': 2, 'description': 'Only present when the station is temporary, the value is then always `true`.', 'type': 'boolean',",
    "metadata": {
      "concept_name": "BlueprintScheduleRecord",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "BlueprintScheduleRecord",
    "content": "the value is then always `true`.', 'type': 'boolean', 'optional': True}, {'name': 'wait_conditions', 'order': 1, 'description': '', 'type': {'complex_type': 'array', 'value': 'WaitCondition'}, 'optional': True}]}",
    "metadata": {
      "concept_name": "BlueprintScheduleRecord",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "BlueprintSignalIcon",
    "content": "Concept: BlueprintSignalIcon\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'index', 'order': 1, 'description': 'Index of the icon in the blueprint icons slots. An integer in the range [1, 4].', 'type': 'uint', 'optional': False}, {'name': 'signal', 'order': 0, 'description': 'The icon to use.', 'type': 'SignalID', 'optional': False}]}",
    "metadata": {
      "concept_name": "BlueprintSignalIcon",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "BlueprintWire",
    "content": "Concept: BlueprintWire\nDescription: Describes a single wire in the blueprint. The members of the tuple are, in order:\n\n- `source_entity_number`\n\n- `source_wire_connector_id`\n\n- `target_entity_number`\n\n- `target_wire_connector_id`\nComplex_type: {'complex_type': 'tuple', 'values': ['uint', 'defines.wire_connector_id', 'uint', 'defines.wire_connector_id']}",
    "metadata": {
      "concept_name": "BlueprintWire",
      "concept_type": "tuple"
    }
  },
  {
    "type": "concept",
    "name": "BlueprintWireEnd",
    "content": "Concept: BlueprintWireEnd\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'connector', 'order': 1, 'description': '', 'type': 'defines.wire_connector_id', 'optional': False}, {'name': 'entity', 'order': 0, 'description': '', 'type': 'BlueprintEntity', 'optional': False}]}",
    "metadata": {
      "concept_name": "BlueprintWireEnd",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "BoundingBox",
    "content": "Concept: BoundingBox\nDescription: Two positions, specifying the top-left and bottom-right corner of the box respectively. Like with [MapPosition](runtime:MapPosition), the names of the members may be omitted. When read from the game, the third member `orientation` is present if it is non-zero.",
    "metadata": {
      "concept_name": "BoundingBox",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "BoundingBox",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'table', 'parameters': [{'name': 'left_top', 'order': 0, 'description': '', 'type': 'MapPosition', 'optional': False}, {'name': 'orientation', 'order': 2, 'description': '', 'type': 'RealOrientation', 'optional': True}, {'name': 'right_bottom', 'order': 1, 'description': '', 'type': 'MapPosition', 'optional': False}]}, {'complex_type': 'tuple', 'values': ['MapPosition', 'MapPosition']}], 'full_format': False}",
    "metadata": {
      "concept_name": "BoundingBox",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "BurnerUsageID",
    "content": "Concept: BurnerUsageID\nDescription: The name of a [LuaBurnerUsagePrototype](runtime:LuaBurnerUsagePrototype).\nComplex_type: string",
    "metadata": {
      "concept_name": "BurnerUsageID",
      "concept_type": "string"
    }
  },
  {
    "type": "concept",
    "name": "CapsuleAction",
    "content": "Concept: CapsuleAction\nDescription:",
    "metadata": {
      "concept_name": "CapsuleAction",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CapsuleAction",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'type', 'order': 0, 'description': '', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'throw'}, {'complex_type': 'literal', 'value': 'equipment-remote'}, {'complex_type': 'literal', 'value': 'use-on-self'}, {'complex_type': 'literal', 'value': 'artillery-remote'}, {'complex_type': 'literal', 'value': 'destroy-cliffs'}], 'full_format': False}, 'optional': False}], 'variant_parameter_groups': [{'name':",
    "metadata": {
      "concept_name": "CapsuleAction",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CapsuleAction",
    "content": "'optional': False}], 'variant_parameter_groups': [{'name': 'artillery-remote', 'order': 3, 'description': '', 'parameters': [{'name': 'flare', 'order': 0, 'description': 'Name of the [flare prototype](runtime:LuaEntityPrototype).', 'type': 'string', 'optional': False}]}, {'name': 'destroy-cliffs', 'order': 4, 'description': '', 'parameters': [{'name': 'attack_parameters', 'order': 0, 'description': '', 'type': 'AttackParameters', 'optional': False}, {'name': 'radius', 'order': 1, 'description': '', 'type':",
    "metadata": {
      "concept_name": "CapsuleAction",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CapsuleAction",
    "content": "{'name': 'radius', 'order': 1, 'description': '', 'type': 'float', 'optional': False}, {'name': 'timeout', 'order': 2, 'description': '', 'type': 'uint', 'optional': False}]}, {'name': 'equipment-remote', 'order': 1, 'description': '', 'parameters': [{'name': 'equipment', 'order': 0, 'description': 'Name of the [LuaEquipmentPrototype](runtime:LuaEquipmentPrototype).', 'type': 'string', 'optional': False}]}, {'name': 'throw', 'order': 0, 'description': '', 'parameters': [{'name': 'attack_parameters',",
    "metadata": {
      "concept_name": "CapsuleAction",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CapsuleAction",
    "content": "'description': '', 'parameters': [{'name': 'attack_parameters', 'order': 0, 'description': '', 'type': 'AttackParameters', 'optional': False}, {'name': 'uses_stack', 'order': 1, 'description': 'Whether using the capsule consumes an item from the stack.', 'type': 'boolean', 'optional': False}]}, {'name': 'use-on-self', 'order': 2, 'description': '', 'parameters': [{'name': 'attack_parameters', 'order': 0, 'description': '', 'type': 'AttackParameters', 'optional': False}]}], 'variant_parameter_description':",
    "metadata": {
      "concept_name": "CapsuleAction",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CapsuleAction",
    "content": "'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `type`:'}",
    "metadata": {
      "concept_name": "CapsuleAction",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ChartTagSpec",
    "content": "Concept: ChartTagSpec\nDescription: Either `icon`, `text`, or both must be provided.\nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'icon', 'order': 1, 'description': '', 'type': 'SignalID', 'optional': True}, {'name': 'last_user', 'order': 3, 'description': '', 'type': 'PlayerIdentification', 'optional': True}, {'name': 'position', 'order': 0, 'description': '', 'type': 'MapPosition', 'optional': False}, {'name': 'text', 'order': 2, 'description': '', 'type': 'string', 'optional': True}]}",
    "metadata": {
      "concept_name": "ChartTagSpec",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ChunkPosition",
    "content": "Concept: ChunkPosition\nDescription: Coordinates of a chunk in a [LuaSurface](runtime:LuaSurface) where each integer `x`/`y` represents a different chunk. This uses the same format as [MapPosition](runtime:MapPosition), meaning it can be specified either with or without explicit keys. A [MapPosition](runtime:MapPosition) can be translated to a ChunkPosition by dividing the `x`/`y` values by 32.",
    "metadata": {
      "concept_name": "ChunkPosition",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ChunkPosition",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'table', 'parameters': [{'name': 'x', 'order': 0, 'description': '', 'type': 'int', 'optional': False}, {'name': 'y', 'order': 1, 'description': '', 'type': 'int', 'optional': False}]}, {'complex_type': 'tuple', 'values': ['int', 'int']}], 'full_format': False}",
    "metadata": {
      "concept_name": "ChunkPosition",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ChunkPositionAndArea",
    "content": "Concept: ChunkPositionAndArea\nDescription: A [ChunkPosition](runtime:ChunkPosition) with an added bounding box for the area of the chunk.\nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'area', 'order': 2, 'description': '', 'type': 'BoundingBox', 'optional': False}, {'name': 'x', 'order': 0, 'description': '', 'type': 'int', 'optional': False}, {'name': 'y', 'order': 1, 'description': '', 'type': 'int', 'optional': False}]}",
    "metadata": {
      "concept_name": "ChunkPositionAndArea",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CircuitCondition",
    "content": "Concept: CircuitCondition\nDescription:",
    "metadata": {
      "concept_name": "CircuitCondition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CircuitCondition",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'comparator', 'order': 0, 'description': 'Specifies how the inputs should be compared. If not specified, defaults to `\"<\"`.', 'type': 'ComparatorString', 'optional': True}, {'name': 'constant', 'order': 3, 'description': 'Constant to compare `first_signal` to. Has no effect when `second_signal` is set. When neither `second_signal` nor `constant` are specified, the effect is as though `constant` were specified with the value `0`.', 'type':",
    "metadata": {
      "concept_name": "CircuitCondition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CircuitCondition",
    "content": "though `constant` were specified with the value `0`.', 'type': 'int', 'optional': True}, {'name': 'first_signal', 'order': 1, 'description': 'Defaults to blank', 'type': 'SignalID', 'optional': True}, {'name': 'second_signal', 'order': 2, 'description': 'What to compare `first_signal` to. If not specified, `first_signal` will be compared to `constant`.', 'type': 'SignalID', 'optional': True}]}",
    "metadata": {
      "concept_name": "CircuitCondition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CircuitConditionDefinition",
    "content": "Concept: CircuitConditionDefinition\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'condition', 'order': 0, 'description': 'TODOC CircuitConditionDefinition now extends CircuitCondition, all fields of CircuitCondition should be pasted here directly', 'type': 'CircuitCondition', 'optional': False}, {'name': 'fulfilled', 'order': 1, 'description': 'Whether the condition is currently fulfilled', 'type': 'boolean', 'optional': True}]}",
    "metadata": {
      "concept_name": "CircuitConditionDefinition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CircuitNetworkSelection",
    "content": "Concept: CircuitNetworkSelection\nDescription: \nComplex_type: table",
    "metadata": {
      "concept_name": "CircuitNetworkSelection",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CircularParticleCreationSpecification",
    "content": "Concept: CircularParticleCreationSpecification\nDescription:",
    "metadata": {
      "concept_name": "CircularParticleCreationSpecification",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CircularParticleCreationSpecification",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'center', 'order': 11, 'description': '', 'type': 'Vector', 'optional': False}, {'name': 'creation_distance', 'order': 12, 'description': '', 'type': 'double', 'optional': False}, {'name': 'creation_distance_orientation', 'order': 13, 'description': '', 'type': 'double', 'optional': False}, {'name': 'direction', 'order': 1, 'description': '', 'type': 'float', 'optional': False}, {'name': 'direction_deviation', 'order': 2, 'description': '',",
    "metadata": {
      "concept_name": "CircularParticleCreationSpecification",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CircularParticleCreationSpecification",
    "content": "{'name': 'direction_deviation', 'order': 2, 'description': '', 'type': 'float', 'optional': False}, {'name': 'height', 'order': 7, 'description': '', 'type': 'float', 'optional': False}, {'name': 'height_deviation', 'order': 8, 'description': '', 'type': 'float', 'optional': False}, {'name': 'name', 'order': 0, 'description': 'Name of the [LuaEntityPrototype](runtime:LuaEntityPrototype).', 'type': 'string', 'optional': False}, {'name': 'speed', 'order': 3, 'description': '', 'type': 'float', 'optional':",
    "metadata": {
      "concept_name": "CircularParticleCreationSpecification",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CircularParticleCreationSpecification",
    "content": "'order': 3, 'description': '', 'type': 'float', 'optional': False}, {'name': 'speed_deviation', 'order': 4, 'description': '', 'type': 'float', 'optional': False}, {'name': 'starting_frame_speed', 'order': 5, 'description': '', 'type': 'float', 'optional': False}, {'name': 'starting_frame_speed_deviation', 'order': 6, 'description': '', 'type': 'float', 'optional': False}, {'name': 'use_source_position', 'order': 14, 'description': '', 'type': 'boolean', 'optional': False}, {'name': 'vertical_speed',",
    "metadata": {
      "concept_name": "CircularParticleCreationSpecification",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CircularParticleCreationSpecification",
    "content": "'boolean', 'optional': False}, {'name': 'vertical_speed', 'order': 9, 'description': '', 'type': 'float', 'optional': False}, {'name': 'vertical_speed_deviation', 'order': 10, 'description': '', 'type': 'float', 'optional': False}]}",
    "metadata": {
      "concept_name": "CircularParticleCreationSpecification",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CircularProjectileCreationSpecification",
    "content": "Concept: CircularProjectileCreationSpecification\nDescription: \nComplex_type: {'complex_type': 'tuple', 'values': ['RealOrientation', 'Vector']}",
    "metadata": {
      "concept_name": "CircularProjectileCreationSpecification",
      "concept_type": "tuple"
    }
  },
  {
    "type": "concept",
    "name": "CliffOrientation",
    "content": "Concept: CliffOrientation\nDescription:",
    "metadata": {
      "concept_name": "CliffOrientation",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "CliffOrientation",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'west-to-east', 'description': ''}, {'complex_type': 'literal', 'value': 'north-to-south', 'description': ''}, {'complex_type': 'literal', 'value': 'east-to-west', 'description': ''}, {'complex_type': 'literal', 'value': 'south-to-north', 'description': ''}, {'complex_type': 'literal', 'value': 'west-to-north', 'description': ''}, {'complex_type': 'literal', 'value': 'north-to-east', 'description': ''},",
    "metadata": {
      "concept_name": "CliffOrientation",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "CliffOrientation",
    "content": "'literal', 'value': 'north-to-east', 'description': ''}, {'complex_type': 'literal', 'value': 'east-to-south', 'description': ''}, {'complex_type': 'literal', 'value': 'south-to-west', 'description': ''}, {'complex_type': 'literal', 'value': 'west-to-south', 'description': ''}, {'complex_type': 'literal', 'value': 'north-to-west', 'description': ''}, {'complex_type': 'literal', 'value': 'east-to-north', 'description': ''}, {'complex_type': 'literal', 'value': 'south-to-east', 'description': ''},",
    "metadata": {
      "concept_name": "CliffOrientation",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "CliffOrientation",
    "content": "'literal', 'value': 'south-to-east', 'description': ''}, {'complex_type': 'literal', 'value': 'west-to-none', 'description': ''}, {'complex_type': 'literal', 'value': 'none-to-east', 'description': ''}, {'complex_type': 'literal', 'value': 'east-to-none', 'description': ''}, {'complex_type': 'literal', 'value': 'none-to-west', 'description': ''}, {'complex_type': 'literal', 'value': 'north-to-none', 'description': ''}, {'complex_type': 'literal', 'value': 'none-to-south', 'description': ''},",
    "metadata": {
      "concept_name": "CliffOrientation",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "CliffOrientation",
    "content": "'literal', 'value': 'none-to-south', 'description': ''}, {'complex_type': 'literal', 'value': 'south-to-none', 'description': ''}, {'complex_type': 'literal', 'value': 'none-to-north', 'description': ''}], 'full_format': True}",
    "metadata": {
      "concept_name": "CliffOrientation",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "CliffPlacementSettings",
    "content": "Concept: CliffPlacementSettings\nDescription:",
    "metadata": {
      "concept_name": "CliffPlacementSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CliffPlacementSettings",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'cliff_elevation_0', 'order': 2, 'description': 'Elevation at which the first row of cliffs is placed. The default is `10`, and this cannot be set from the map generation GUI.', 'type': 'float', 'optional': False}, {'name': 'cliff_elevation_interval', 'order': 3, 'description': \"Elevation difference between successive rows of cliffs. This is inversely proportional to 'frequency' in the map generation GUI. Specifically, when set from the GUI",
    "metadata": {
      "concept_name": "CliffPlacementSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CliffPlacementSettings",
    "content": "in the map generation GUI. Specifically, when set from the GUI the value is `40 / frequency`.\", 'type': 'float', 'optional': False}, {'name': 'cliff_smoothing', 'order': 4, 'description': 'Smoothing makes cliffs straighter on rough elevation but makes placement inaccurate. 0 is no smoothing, 1 is full smoothing. Values outside of 0-1 are possible for specific effects but not recommended.', 'type': 'float', 'optional': False}, {'name': 'control', 'order': 1, 'description': 'Name of the autoplace control",
    "metadata": {
      "concept_name": "CliffPlacementSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CliffPlacementSettings",
    "content": "'order': 1, 'description': 'Name of the autoplace control prototype.', 'type': 'string', 'optional': False}, {'name': 'name', 'order': 0, 'description': 'Name of the cliff prototype.', 'type': 'string', 'optional': False}, {'name': 'richness', 'order': 5, 'description': \"Corresponds to 'continuity' in the GUI. This value is not used directly, but is used by the 'cliffiness' noise expression, which in combination with elevation and the two cliff elevation properties drives cliff placement (cliffs are placed",
    "metadata": {
      "concept_name": "CliffPlacementSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CliffPlacementSettings",
    "content": "elevation properties drives cliff placement (cliffs are placed when elevation crosses the elevation contours defined by `cliff_elevation_0` and `cliff_elevation_interval` when 'cliffiness' is greater than `0.5`). The default 'cliffiness' expression interprets this value such that larger values result in longer unbroken walls of cliffs, and smaller values (between `0` and `1`) result in larger gaps in cliff walls.\", 'type': 'MapGenSize', 'optional': False}]}",
    "metadata": {
      "concept_name": "CliffPlacementSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CollisionLayerID",
    "content": "Concept: CollisionLayerID\nDescription: The name of a [LuaCollisionLayerPrototype](runtime:LuaCollisionLayerPrototype).\nComplex_type: string",
    "metadata": {
      "concept_name": "CollisionLayerID",
      "concept_type": "string"
    }
  },
  {
    "type": "concept",
    "name": "CollisionMask",
    "content": "Concept: CollisionMask\nDescription:",
    "metadata": {
      "concept_name": "CollisionMask",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CollisionMask",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'colliding_with_tiles_only', 'order': 3, 'description': \"Any prototype with this collision option will only be checked for collision with other prototype's collision masks if they are a tile. Defaults to `false`.\", 'type': 'boolean', 'optional': True}, {'name': 'consider_tile_transitions', 'order': 2, 'description': 'Uses the prototypes position rather than its collision box when doing collision checks with tile prototypes. Allows the",
    "metadata": {
      "concept_name": "CollisionMask",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CollisionMask",
    "content": "when doing collision checks with tile prototypes. Allows the prototype to overlap colliding tiles up until its center point. This is only respected for character movement and cars driven by players. Defaults to `false`.', 'type': 'boolean', 'optional': True}, {'name': 'layers', 'order': 0, 'description': 'Every key in the dictionary is the name of one [layer](runtime:LuaCollisionLayerPrototype) the object collides with. The value is meaningless and always `true`. An empty table means that no layers are",
    "metadata": {
      "concept_name": "CollisionMask",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CollisionMask",
    "content": "and always `true`. An empty table means that no layers are set.', 'type': {'complex_type': 'dictionary', 'key': 'string', 'value': {'complex_type': 'literal', 'value': True}}, 'optional': False}, {'name': 'not_colliding_with_itself', 'order': 1, 'description': 'Any two entities that both have this option enabled on their prototype and have an identical collision mask layers list will not collide. Other collision mask options are not included in the identical layer list check. This does mean that two",
    "metadata": {
      "concept_name": "CollisionMask",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CollisionMask",
    "content": "in the identical layer list check. This does mean that two different prototypes with the same collision mask layers and this option enabled will not collide. Defaults to `false`.', 'type': 'boolean', 'optional': True}]}",
    "metadata": {
      "concept_name": "CollisionMask",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Color",
    "content": "Concept: Color\nDescription: Red, green, blue and alpha values, all in range [0, 1] or all in range [0, 255] if any value is > 1. All values here are optional. Color channels default to `0`, the alpha channel defaults to `1`.",
    "metadata": {
      "concept_name": "Color",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "Color",
    "content": "Similar to [MapPosition](runtime:MapPosition), Color allows the short-hand notation of passing an array of exactly 3 or 4 numbers. The game usually expects colors to be in pre-multiplied form (color channels are pre-multiplied by alpha).",
    "metadata": {
      "concept_name": "Color",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "Color",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'table', 'parameters': [{'name': 'a', 'order': 3, 'description': '', 'type': 'float', 'optional': True}, {'name': 'b', 'order': 2, 'description': '', 'type': 'float', 'optional': True}, {'name': 'g', 'order': 1, 'description': '', 'type': 'float', 'optional': True}, {'name': 'r', 'order': 0, 'description': '', 'type': 'float', 'optional': True}]}, {'complex_type': 'tuple', 'values': ['float', 'float', 'float', 'float']}], 'full_format':",
    "metadata": {
      "concept_name": "Color",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "Color",
    "content": "['float', 'float', 'float', 'float']}], 'full_format': False}",
    "metadata": {
      "concept_name": "Color",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ColorModifier",
    "content": "Concept: ColorModifier\nDescription: Same as [Color](runtime:Color), but red, green, blue and alpha values can be any floating point number, without any special handling of the range [1, 255].",
    "metadata": {
      "concept_name": "ColorModifier",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ColorModifier",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'table', 'parameters': [{'name': 'a', 'order': 3, 'description': '', 'type': 'float', 'optional': True}, {'name': 'b', 'order': 2, 'description': '', 'type': 'float', 'optional': True}, {'name': 'g', 'order': 1, 'description': '', 'type': 'float', 'optional': True}, {'name': 'r', 'order': 0, 'description': '', 'type': 'float', 'optional': True}]}, {'complex_type': 'tuple', 'values': ['float', 'float', 'float', 'float']}], 'full_format':",
    "metadata": {
      "concept_name": "ColorModifier",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ColorModifier",
    "content": "['float', 'float', 'float', 'float']}], 'full_format': False}",
    "metadata": {
      "concept_name": "ColorModifier",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "Command",
    "content": "Concept: Command\nDescription: Commands can be given to enemies and unit groups.",
    "metadata": {
      "concept_name": "Command",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Command",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'type', 'order': 0, 'description': 'Type of command. The remaining fields depend on the value of this field.', 'type': 'defines.command', 'optional': False}], 'variant_parameter_groups': [{'name': 'defines.command.attack', 'order': 0, 'description': '', 'parameters': [{'name': 'distraction', 'order': 1, 'description': 'Defaults to `defines.distraction.by_enemy`.', 'type': 'defines.distraction', 'optional': True}, {'name': 'target', 'order': 0,",
    "metadata": {
      "concept_name": "Command",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Command",
    "content": "'optional': True}, {'name': 'target', 'order': 0, 'description': '', 'type': 'LuaEntity', 'optional': False}]}, {'name': 'defines.command.attack_area', 'order': 4, 'description': '', 'parameters': [{'name': 'destination', 'order': 0, 'description': 'Center of the attack area.', 'type': 'MapPosition', 'optional': False}, {'name': 'distraction', 'order': 2, 'description': 'Defaults to `defines.distraction.by_enemy`.', 'type': 'defines.distraction', 'optional': True}, {'name': 'radius', 'order': 1,",
    "metadata": {
      "concept_name": "Command",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Command",
    "content": "'optional': True}, {'name': 'radius', 'order': 1, 'description': 'Radius of the attack area.', 'type': 'double', 'optional': False}]}, {'name': 'defines.command.build_base', 'order': 8, 'description': '', 'parameters': [{'name': 'destination', 'order': 0, 'description': 'Where to build the base.', 'type': 'MapPosition', 'optional': False}, {'name': 'distraction', 'order': 1, 'description': 'Defaults to `defines.distraction.by_enemy`.', 'type': 'defines.distraction', 'optional': True}, {'name':",
    "metadata": {
      "concept_name": "Command",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Command",
    "content": "'type': 'defines.distraction', 'optional': True}, {'name': 'ignore_planner', 'order': 2, 'description': 'Whether the units should ignore expansion candidate chunks. When `false`, they will obey and not build a base in a non-candidate chunk. Defaults to `false`.', 'type': 'boolean', 'optional': True}]}, {'name': 'defines.command.compound', 'order': 2, 'description': '', 'parameters': [{'name': 'commands', 'order': 1, 'description': 'The sub-commands.', 'type': {'complex_type': 'array', 'value': 'Command'},",
    "metadata": {
      "concept_name": "Command",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Command",
    "content": "'type': {'complex_type': 'array', 'value': 'Command'}, 'optional': False}, {'name': 'structure_type', 'order': 0, 'description': 'How the commands should be chained together.', 'type': 'defines.compound_command', 'optional': False}]}, {'name': 'defines.command.flee', 'order': 7, 'description': '', 'parameters': [{'name': 'distraction', 'order': 1, 'description': 'Defaults to `defines.distraction.by_enemy`.', 'type': 'defines.distraction', 'optional': True}, {'name': 'from', 'order': 0, 'description': 'The",
    "metadata": {
      "concept_name": "Command",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Command",
    "content": "True}, {'name': 'from', 'order': 0, 'description': 'The entity to flee from', 'type': 'LuaEntity', 'optional': False}]}, {'name': 'defines.command.go_to_location', 'order': 1, 'description': '', 'parameters': [{'name': 'destination', 'order': 0, 'description': 'The position to path to. Either this or `destination_entity` need to be specified. If both are, `destination_entity` is used.', 'type': 'MapPosition', 'optional': True}, {'name': 'destination_entity', 'order': 1, 'description': 'The entity to path",
    "metadata": {
      "concept_name": "Command",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Command",
    "content": "'order': 1, 'description': 'The entity to path to. Either this or `destination` need to be specified. If both are, `destination_entity` is used.', 'type': 'LuaEntity', 'optional': True}, {'name': 'distraction', 'order': 2, 'description': 'Defaults to `defines.distraction.by_enemy`.', 'type': 'defines.distraction', 'optional': True}, {'name': 'pathfind_flags', 'order': 3, 'description': 'Flags that affect pathfinder behavior.', 'type': 'PathfinderFlags', 'optional': True}, {'name': 'radius', 'order': 4,",
    "metadata": {
      "concept_name": "Command",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Command",
    "content": "'optional': True}, {'name': 'radius', 'order': 4, 'description': 'How close the pathfinder needs to get to its destination (in tiles). Defaults to `3`.', 'type': 'double', 'optional': True}]}, {'name': 'defines.command.group', 'order': 3, 'description': '', 'parameters': [{'name': 'distraction', 'order': 1, 'description': 'Defaults to `defines.distraction.by_enemy`.', 'type': 'defines.distraction', 'optional': True}, {'name': 'group', 'order': 0, 'description': 'The group whose command to follow.', 'type':",
    "metadata": {
      "concept_name": "Command",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Command",
    "content": "0, 'description': 'The group whose command to follow.', 'type': 'LuaCommandable', 'optional': False}, {'name': 'use_group_distraction', 'order': 2, 'description': 'Whether the unit will use the group distraction or the commands distraction. Defaults to true.', 'type': 'boolean', 'optional': True}]}, {'name': 'defines.command.stop', 'order': 6, 'description': '', 'parameters': [{'name': 'distraction', 'order': 0, 'description': 'Defaults to `defines.distraction.by_enemy`.', 'type': 'defines.distraction',",
    "metadata": {
      "concept_name": "Command",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Command",
    "content": "'type': 'defines.distraction', 'optional': True}, {'name': 'ticks_to_wait', 'order': 1, 'description': 'Ticks to wander before successfully completing the command. Default is max uint, which means stop forever.', 'type': 'uint', 'optional': True}]}, {'name': 'defines.command.wander', 'order': 5, 'description': '', 'parameters': [{'name': 'distraction', 'order': 0, 'description': 'Defaults to `defines.distraction.by_enemy`.', 'type': 'defines.distraction', 'optional': True}, {'name': 'radius', 'order': 1,",
    "metadata": {
      "concept_name": "Command",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Command",
    "content": "'optional': True}, {'name': 'radius', 'order': 1, 'description': 'Defaults to 10. Does not apply when `wander_in_group` is `true`.', 'type': 'double', 'optional': True}, {'name': 'ticks_to_wait', 'order': 3, 'description': 'Ticks to wander before successfully completing the command. Default is max uint, which means wander forever.', 'type': 'uint', 'optional': True}, {'name': 'wander_in_group', 'order': 2, 'description': \"When commanding a group, defines how the group will wander. When `true`, the units in",
    "metadata": {
      "concept_name": "Command",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Command",
    "content": "defines how the group will wander. When `true`, the units in the group will wander around inside the group's radius, just like gathering biters. When `false`, the units will wander as a group, ie they will all walk together in the same random direction. Default is true for groups. Passing true for a single unit is an error.\", 'type': 'boolean', 'optional': True}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `type`:'}",
    "metadata": {
      "concept_name": "Command",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ComparatorString",
    "content": "Concept: ComparatorString\nDescription: A string that specifies how the inputs should be compared.",
    "metadata": {
      "concept_name": "ComparatorString",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ComparatorString",
    "content": "While the API accepts both versions for `\"less/greater than or equal to\"` and `\"not equal\"`, it'll always return `\"≥\"`, `\"≤\"` or `\"≠\"` respectively when reading them back.",
    "metadata": {
      "concept_name": "ComparatorString",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ComparatorString",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': '=', 'description': '\"equal to\"'}, {'complex_type': 'literal', 'value': '>', 'description': '\"greater than\"'}, {'complex_type': 'literal', 'value': '<', 'description': '\"lesser than\"'}, {'complex_type': 'literal', 'value': '≥', 'description': '\"greater than or equal to\"'}, {'complex_type': 'literal', 'value': '>=', 'description': '\"greater than or equal to\"'}, {'complex_type': 'literal', 'value': '≤', 'description':",
    "metadata": {
      "concept_name": "ComparatorString",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ComparatorString",
    "content": "to\"'}, {'complex_type': 'literal', 'value': '≤', 'description': '\"lesser than or equal to\"'}, {'complex_type': 'literal', 'value': '<=', 'description': '\"lesser than or equal to\"'}, {'complex_type': 'literal', 'value': '≠', 'description': '\"not equal to\"'}, {'complex_type': 'literal', 'value': '!=', 'description': '\"not equal to\"'}], 'full_format': True}",
    "metadata": {
      "concept_name": "ComparatorString",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "CompiledLogisticFilter",
    "content": "Concept: CompiledLogisticFilter\nDescription:",
    "metadata": {
      "concept_name": "CompiledLogisticFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CompiledLogisticFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'comparator', 'order': 4, 'description': 'The comparator for quality. `nil` if any quality.', 'type': 'ComparatorString', 'optional': True}, {'name': 'count', 'order': 5, 'description': '', 'type': 'int', 'optional': False}, {'name': 'index', 'order': 0, 'description': '', 'type': 'LogisticFilterIndex', 'optional': False}, {'name': 'max_count', 'order': 6, 'description': '', 'type': 'ItemCountType', 'optional': True}, {'name':",
    "metadata": {
      "concept_name": "CompiledLogisticFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CompiledLogisticFilter",
    "content": "'', 'type': 'ItemCountType', 'optional': True}, {'name': 'minimum_delivery_count', 'order': 7, 'description': 'Defaults to 0.', 'type': 'ItemCountType', 'optional': True}, {'name': 'name', 'order': 2, 'description': 'Name of the logistic filter.', 'type': 'string', 'optional': True}, {'name': 'quality', 'order': 3, 'description': 'The prototype name of the quality. `nil` for any quality.', 'type': 'string', 'optional': True}, {'name': 'type', 'order': 1, 'description': 'The type of the logistic filter.',",
    "metadata": {
      "concept_name": "CompiledLogisticFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CompiledLogisticFilter",
    "content": "'order': 1, 'description': 'The type of the logistic filter.', 'type': 'SignalIDType', 'optional': True}]}",
    "metadata": {
      "concept_name": "CompiledLogisticFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ConfigurationChangedData",
    "content": "Concept: ConfigurationChangedData\nDescription:",
    "metadata": {
      "concept_name": "ConfigurationChangedData",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ConfigurationChangedData",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'migration_applied', 'order': 4, 'description': '`true` when mod prototype migrations have been applied since the last time this save was loaded.', 'type': 'boolean', 'optional': False}, {'name': 'mod_changes', 'order': 2, 'description': 'Dictionary of mod changes. It is indexed by mod name.', 'type': {'complex_type': 'dictionary', 'key': 'string', 'value': 'ModChangeData'}, 'optional': False}, {'name': 'mod_startup_settings_changed', 'order':",
    "metadata": {
      "concept_name": "ConfigurationChangedData",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ConfigurationChangedData",
    "content": "False}, {'name': 'mod_startup_settings_changed', 'order': 3, 'description': '`true` when mod startup settings have changed since the last time this save was loaded.', 'type': 'boolean', 'optional': False}, {'name': 'new_version', 'order': 1, 'description': 'New version of the map. Present only when loading map version other than the current version.', 'type': 'string', 'optional': True}, {'name': 'old_version', 'order': 0, 'description': 'Old version of the map. Present only when loading map version other",
    "metadata": {
      "concept_name": "ConfigurationChangedData",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ConfigurationChangedData",
    "content": "version of the map. Present only when loading map version other than the current version.', 'type': 'string', 'optional': True}]}",
    "metadata": {
      "concept_name": "ConfigurationChangedData",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CraftingQueueItem",
    "content": "Concept: CraftingQueueItem\nDescription:",
    "metadata": {
      "concept_name": "CraftingQueueItem",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CraftingQueueItem",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'count', 'order': 2, 'description': 'The amount of items being crafted.', 'type': 'uint', 'optional': False}, {'name': 'index', 'order': 0, 'description': 'The index of the item in the crafting queue.', 'type': 'uint', 'optional': False}, {'name': 'prerequisite', 'order': 3, 'description': 'The item is a prerequisite for another item in the queue.', 'type': 'boolean', 'optional': False}, {'name': 'recipe', 'order': 1, 'description': 'The",
    "metadata": {
      "concept_name": "CraftingQueueItem",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CraftingQueueItem",
    "content": "False}, {'name': 'recipe', 'order': 1, 'description': 'The recipe being crafted.', 'type': 'string', 'optional': False}]}",
    "metadata": {
      "concept_name": "CraftingQueueItem",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CursorBoxRenderType",
    "content": "Concept: CursorBoxRenderType\nDescription:",
    "metadata": {
      "concept_name": "CursorBoxRenderType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "CursorBoxRenderType",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'entity', 'description': 'The normal entity selection box. Yellow by default.'}, {'complex_type': 'literal', 'value': 'multiplayer-entity', 'description': 'The multiplayer entity selection box which gets tinted using [LuaPlayer::chat_color](runtime:LuaPlayer::chat_color). White by default.'}, {'complex_type': 'literal', 'value': 'electricity', 'description': 'The selection box used to specify electric poles an entity",
    "metadata": {
      "concept_name": "CursorBoxRenderType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "CursorBoxRenderType",
    "content": "'The selection box used to specify electric poles an entity is connected to. Light blue by default.'}, {'complex_type': 'literal', 'value': 'copy', 'description': 'The selection box used when doing entity copy-paste. Green by default.'}, {'complex_type': 'literal', 'value': 'not-allowed', 'description': 'The selection box used when specifying colliding entities. Red by default.'}, {'complex_type': 'literal', 'value': 'pair', 'description': 'Light blue by default.'}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "CursorBoxRenderType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "CursorBoxRenderType",
    "content": "'Light blue by default.'}, {'complex_type': 'literal', 'value': 'logistics', 'description': 'Light blue by default.'}, {'complex_type': 'literal', 'value': 'train-visualization', 'description': 'White by default.'}, {'complex_type': 'literal', 'value': 'blueprint-snap-rectangle', 'description': 'Green by default.'}, {'complex_type': 'literal', 'value': 'spidertron-remote-selected', 'description': ''}, {'complex_type': 'literal', 'value': 'spidertron-remote-to-be-selected', 'description': ''}],",
    "metadata": {
      "concept_name": "CursorBoxRenderType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "CursorBoxRenderType",
    "content": "'spidertron-remote-to-be-selected', 'description': ''}], 'full_format': True}",
    "metadata": {
      "concept_name": "CursorBoxRenderType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "CustomCommandData",
    "content": "Concept: CustomCommandData\nDescription:",
    "metadata": {
      "concept_name": "CustomCommandData",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CustomCommandData",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The name of the command.', 'type': 'string', 'optional': False}, {'name': 'parameter', 'order': 3, 'description': 'The parameter passed after the command, if there is one.', 'type': 'string', 'optional': True}, {'name': 'player_index', 'order': 2, 'description': 'The player who issued the command, or `nil` if it was issued from the server console.', 'type': 'uint', 'optional': True}, {'name': 'tick',",
    "metadata": {
      "concept_name": "CustomCommandData",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CustomCommandData",
    "content": "console.', 'type': 'uint', 'optional': True}, {'name': 'tick', 'order': 1, 'description': 'The tick the command was used in.', 'type': 'uint', 'optional': False}]}",
    "metadata": {
      "concept_name": "CustomCommandData",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CustomEntityStatus",
    "content": "Concept: CustomEntityStatus\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'diode', 'order': 0, 'description': '', 'type': 'defines.entity_status_diode', 'optional': False}, {'name': 'label', 'order': 1, 'description': '', 'type': 'LocalisedString', 'optional': False}]}",
    "metadata": {
      "concept_name": "CustomEntityStatus",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CutsceneWaypoint",
    "content": "Concept: CutsceneWaypoint\nDescription:",
    "metadata": {
      "concept_name": "CutsceneWaypoint",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CutsceneWaypoint",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'position', 'order': 0, 'description': 'Position to pan the camera to.', 'type': 'MapPosition', 'optional': True}, {'name': 'target', 'order': 1, 'description': 'Entity or unit group to pan the camera to.', 'type': {'complex_type': 'union', 'options': ['LuaEntity', 'LuaCommandable'], 'full_format': False}, 'optional': True}, {'name': 'time_to_wait', 'order': 3, 'description': 'Time in ticks to wait before moving to the next waypoint.', 'type':",
    "metadata": {
      "concept_name": "CutsceneWaypoint",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "CutsceneWaypoint",
    "content": "in ticks to wait before moving to the next waypoint.', 'type': 'uint', 'optional': False}, {'name': 'transition_time', 'order': 2, 'description': 'How many ticks it will take to reach this waypoint from the previous one.', 'type': 'uint', 'optional': False}, {'name': 'zoom', 'order': 4, 'description': \"Zoom level to be set when the waypoint is reached. When not specified, the previous waypoint's zoom is used.\", 'type': 'double', 'optional': True}]}",
    "metadata": {
      "concept_name": "CutsceneWaypoint",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "DamageTypeFilters",
    "content": "Concept: DamageTypeFilters\nDescription:",
    "metadata": {
      "concept_name": "DamageTypeFilters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "DamageTypeFilters",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'types', 'order': 1, 'description': 'The damage types to filter for. The value in the dictionary is meaningless and exists just to allow for easy lookup.', 'type': {'complex_type': 'dictionary', 'key': 'string', 'value': {'complex_type': 'literal', 'value': True}}, 'optional': False}, {'name': 'whitelist', 'order': 0, 'description': 'Whether this is a whitelist or a blacklist of damage types. `true` means whitelist.', 'type': 'boolean',",
    "metadata": {
      "concept_name": "DamageTypeFilters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "DamageTypeFilters",
    "content": "of damage types. `true` means whitelist.', 'type': 'boolean', 'optional': False}]}",
    "metadata": {
      "concept_name": "DamageTypeFilters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "DamageTypeID",
    "content": "Concept: DamageTypeID\nDescription: A damage type prototype may be specified in one of two ways.\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'LuaDamagePrototype', 'description': 'The damage type prototype.'}, {'complex_type': 'type', 'value': 'string', 'description': 'The prototype name.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "DamageTypeID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "DeciderCombinatorCondition",
    "content": "Concept: DeciderCombinatorCondition\nDescription: \nComplex_type: table",
    "metadata": {
      "concept_name": "DeciderCombinatorCondition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "DeciderCombinatorOutput",
    "content": "Concept: DeciderCombinatorOutput\nDescription: \nComplex_type: table",
    "metadata": {
      "concept_name": "DeciderCombinatorOutput",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "DeciderCombinatorParameters",
    "content": "Concept: DeciderCombinatorParameters\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'conditions', 'order': 0, 'description': 'List of conditions.', 'type': {'complex_type': 'array', 'value': 'DeciderCombinatorCondition'}, 'optional': False}, {'name': 'outputs', 'order': 1, 'description': 'List of outputs.', 'type': {'complex_type': 'array', 'value': 'DeciderCombinatorOutput'}, 'optional': False}]}",
    "metadata": {
      "concept_name": "DeciderCombinatorParameters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Decorative",
    "content": "Concept: Decorative\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'amount', 'order': 2, 'description': '', 'type': 'uint8', 'optional': False}, {'name': 'name', 'order': 0, 'description': 'The name of the decorative prototype.', 'type': 'string', 'optional': False}, {'name': 'position', 'order': 1, 'description': '', 'type': 'TilePosition', 'optional': False}]}",
    "metadata": {
      "concept_name": "Decorative",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "DecorativeID",
    "content": "Concept: DecorativeID\nDescription: A decorative prototype may be specified in one of two ways.\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'LuaDecorativePrototype', 'description': 'The decorative prototype.'}, {'complex_type': 'type', 'value': 'string', 'description': 'The prototype name.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "DecorativeID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "DecorativePrototypeFilter",
    "content": "Concept: DecorativePrototypeFilter\nDescription:",
    "metadata": {
      "concept_name": "DecorativePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "DecorativePrototypeFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'decal'}, {'complex_type': 'literal', 'value': 'autoplace'}, {'complex_type': 'literal', 'value': 'collision-mask'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True},",
    "metadata": {
      "concept_name": "DecorativePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "DecorativePrototypeFilter",
    "content": "Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'collision-mask', 'order': 0, 'description': '',",
    "metadata": {
      "concept_name": "DecorativePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "DecorativePrototypeFilter",
    "content": "[{'name': 'collision-mask', 'order': 0, 'description': '', 'parameters': [{'name': 'mask', 'order': 0, 'description': 'Name of one [layer](runtime:LuaCollisionLayerPrototype) or a full collision mask.', 'type': {'complex_type': 'union', 'options': ['CollisionLayerID', 'CollisionMask'], 'full_format': False}, 'optional': False}, {'name': 'mask_mode', 'order': 1, 'description': 'How to filter.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'collides'}, {'complex_type':",
    "metadata": {
      "concept_name": "DecorativePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "DecorativePrototypeFilter",
    "content": "'literal', 'value': 'collides'}, {'complex_type': 'literal', 'value': 'layers-equals'}, {'complex_type': 'literal', 'value': 'contains-any'}, {'complex_type': 'literal', 'value': 'contains-all'}], 'full_format': False}, 'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "DecorativePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "DecorativeResult",
    "content": "Concept: DecorativeResult\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'amount', 'order': 2, 'description': '', 'type': 'uint', 'optional': False}, {'name': 'decorative', 'order': 1, 'description': '', 'type': 'LuaDecorativePrototype', 'optional': False}, {'name': 'position', 'order': 0, 'description': '', 'type': 'TilePosition', 'optional': False}]}",
    "metadata": {
      "concept_name": "DecorativeResult",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "DetailedItemOnLine",
    "content": "Concept: DetailedItemOnLine\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'position', 'order': 1, 'description': 'Linear position of this stack on this line.', 'type': 'float', 'optional': False}, {'name': 'stack', 'order': 0, 'description': '', 'type': 'LuaItemStack', 'optional': False}, {'name': 'unique_id', 'order': 2, 'description': 'Unique identifier of this item while it is on transport lines.', 'type': 'uint', 'optional': False}]}",
    "metadata": {
      "concept_name": "DetailedItemOnLine",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "DifficultySettings",
    "content": "Concept: DifficultySettings\nDescription: Technology difficulty settings. Updating any of the attributes will immediately take effect in the game engine.",
    "metadata": {
      "concept_name": "DifficultySettings",
      "concept_type": "LuaStruct"
    }
  },
  {
    "type": "concept",
    "name": "DifficultySettings",
    "content": "Complex_type: {'complex_type': 'LuaStruct', 'attributes': [{'name': 'spoil_time_modifier', 'order': 1, 'description': 'A value in range [0.01, 100].', 'read_type': 'double', 'write_type': 'double', 'optional': False}, {'name': 'technology_price_multiplier', 'order': 0, 'description': 'A value in range [0.001, 1000].', 'read_type': 'double', 'write_type': 'double', 'optional': False}]}",
    "metadata": {
      "concept_name": "DifficultySettings",
      "concept_type": "LuaStruct"
    }
  },
  {
    "type": "concept",
    "name": "DisplayPanelMessageDefinition",
    "content": "Concept: DisplayPanelMessageDefinition\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'condition', 'order': 2, 'description': 'The circuit condition under which to show the message.', 'type': 'CircuitConditionDefinition', 'optional': False}, {'name': 'icon', 'order': 1, 'description': 'The icon to show alongside the message.', 'type': 'SignalID', 'optional': False}, {'name': 'text', 'order': 0, 'description': 'The message to show.', 'type': 'string', 'optional': False}]}",
    "metadata": {
      "concept_name": "DisplayPanelMessageDefinition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "DisplayResolution",
    "content": "Concept: DisplayResolution\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'height', 'order': 1, 'description': '', 'type': 'uint', 'optional': False}, {'name': 'width', 'order': 0, 'description': '', 'type': 'uint', 'optional': False}]}",
    "metadata": {
      "concept_name": "DisplayResolution",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "DragTarget",
    "content": "Concept: DragTarget\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'target_entity', 'order': 0, 'description': '', 'type': 'LuaEntity', 'optional': False}, {'name': 'wire_connector_id', 'order': 1, 'description': 'Identifier of the wire connector from which the wire is being dragged.', 'type': 'defines.wire_connector_id', 'optional': False}]}",
    "metadata": {
      "concept_name": "DragTarget",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EffectReceiver",
    "content": "Concept: EffectReceiver\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'base_effect', 'order': 0, 'description': '', 'type': 'ModuleEffects', 'optional': False}, {'name': 'uses_beacon_effects', 'order': 2, 'description': '', 'type': 'boolean', 'optional': False}, {'name': 'uses_module_effects', 'order': 1, 'description': '', 'type': 'boolean', 'optional': False}, {'name': 'uses_surface_effects', 'order': 3, 'description': '', 'type': 'boolean', 'optional': False}]}",
    "metadata": {
      "concept_name": "EffectReceiver",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ElemID",
    "content": "Concept: ElemID\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'name', 'order': 1, 'description': 'Name of a prototype as defined by `type`.', 'type': 'string', 'optional': False}, {'name': 'quality', 'order': 2, 'description': 'Name of a quality prototype if `type` use quality.', 'type': 'string', 'optional': True}, {'name': 'type', 'order': 0, 'description': '', 'type': 'ElemType', 'optional': False}]}",
    "metadata": {
      "concept_name": "ElemID",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ElemType",
    "content": "Concept: ElemType\nDescription: A [string](runtime:string) specifying a type for [choose elem buttons](runtime:LuaGuiElement::elem_type). It's also used by [ElemID](runtime:ElemID) for [LuaGuiElement::elem_tooltip](runtime:LuaGuiElement::elem_tooltip).",
    "metadata": {
      "concept_name": "ElemType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ElemType",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'achievement', 'description': ''}, {'complex_type': 'literal', 'value': 'decorative', 'description': ''}, {'complex_type': 'literal', 'value': 'entity', 'description': ''}, {'complex_type': 'literal', 'value': 'equipment', 'description': ''}, {'complex_type': 'literal', 'value': 'fluid', 'description': ''}, {'complex_type': 'literal', 'value': 'item', 'description': ''}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "ElemType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ElemType",
    "content": "'description': ''}, {'complex_type': 'literal', 'value': 'item-group', 'description': ''}, {'complex_type': 'literal', 'value': 'recipe', 'description': ''}, {'complex_type': 'literal', 'value': 'signal', 'description': ''}, {'complex_type': 'literal', 'value': 'technology', 'description': ''}, {'complex_type': 'literal', 'value': 'tile', 'description': ''}, {'complex_type': 'literal', 'value': 'asteroid-chunk', 'description': ''}, {'complex_type': 'literal', 'value': 'space-location', 'description': ''},",
    "metadata": {
      "concept_name": "ElemType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ElemType",
    "content": "'literal', 'value': 'space-location', 'description': ''}, {'complex_type': 'literal', 'value': 'item-with-quality', 'description': ''}, {'complex_type': 'literal', 'value': 'entity-with-quality', 'description': ''}, {'complex_type': 'literal', 'value': 'recipe-with-quality', 'description': ''}, {'complex_type': 'literal', 'value': 'equipment-with-quality', 'description': ''}], 'full_format': True}",
    "metadata": {
      "concept_name": "ElemType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "EnemyEvolutionMapSettings",
    "content": "Concept: EnemyEvolutionMapSettings\nDescription: These values represent a percentual increase in evolution. This means a value of `0.1` would increase evolution by 10%.",
    "metadata": {
      "concept_name": "EnemyEvolutionMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EnemyEvolutionMapSettings",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'destroy_factor', 'order': 2, 'description': 'The amount evolution progresses for every destroyed spawner. Defaults to `0.002`.', 'type': 'double', 'optional': False}, {'name': 'enabled', 'order': 0, 'description': 'Whether enemy evolution is enabled at all.', 'type': 'boolean', 'optional': False}, {'name': 'pollution_factor', 'order': 3, 'description': 'The amount evolution progresses for every unit of pollution. Defaults to `0.0000009`.',",
    "metadata": {
      "concept_name": "EnemyEvolutionMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EnemyEvolutionMapSettings",
    "content": "for every unit of pollution. Defaults to `0.0000009`.', 'type': 'double', 'optional': False}, {'name': 'time_factor', 'order': 1, 'description': 'The amount evolution naturally progresses by every second. Defaults to `0.000004`.', 'type': 'double', 'optional': False}]}",
    "metadata": {
      "concept_name": "EnemyEvolutionMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EnemyExpansionMapSettings",
    "content": "Concept: EnemyExpansionMapSettings\nDescription: Candidate chunks are given scores to determine which one of them should be expanded into. This score takes into account various settings noted below. The iteration is over a square region centered around the chunk for which the calculation is done, and includes the central chunk as well. Distances are calculated as [Manhattan distance](https://en.wikipedia.org/wiki/Taxicab_geometry).\n\nThe pseudocode algorithm to determine a chunk's score is as follows:",
    "metadata": {
      "concept_name": "EnemyExpansionMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EnemyExpansionMapSettings",
    "content": "```\nplayer = 0\nfor neighbour in all chunks within enemy_building_influence_radius from chunk:\n  player += number of player buildings on neighbour\n    * building_coefficient\n    * neighbouring_chunk_coefficient^distance(chunk, neighbour)\nbase = 0\nfor neighbour in all chunk within friendly_base_influence_radius from chunk:\n  base += num of enemy bases on neighbour\n    * other_base_coefficient\n    * neighbouring_base_chunk_coefficient^distance(chunk, neighbour)\nscore(chunk) = 1 / (1 + player + base)\n```",
    "metadata": {
      "concept_name": "EnemyExpansionMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EnemyExpansionMapSettings",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'building_coefficient', 'order': 4, 'description': 'Defaults to `0.1`.', 'type': 'double', 'optional': False}, {'name': 'enabled', 'order': 0, 'description': 'Whether enemy expansion is enabled at all.', 'type': 'boolean', 'optional': False}, {'name': 'enemy_building_influence_radius', 'order': 3, 'description': 'Defaults to `2`.', 'type': 'uint', 'optional': False}, {'name': 'friendly_base_influence_radius', 'order': 2, 'description':",
    "metadata": {
      "concept_name": "EnemyExpansionMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EnemyExpansionMapSettings",
    "content": "'friendly_base_influence_radius', 'order': 2, 'description': 'Defaults to `2`.', 'type': 'uint', 'optional': False}, {'name': 'max_colliding_tiles_coefficient', 'order': 8, 'description': 'A chunk has to have at most this high of a percentage of unbuildable tiles for it to be considered a candidate to avoid chunks full of water as candidates. Defaults to `0.9`, or 90%.', 'type': 'double', 'optional': False}, {'name': 'max_expansion_cooldown', 'order': 12, 'description': 'The maximum time between expansions",
    "metadata": {
      "concept_name": "EnemyExpansionMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EnemyExpansionMapSettings",
    "content": "12, 'description': 'The maximum time between expansions in ticks. The actual cooldown is adjusted to the current evolution levels. Defaults to `60*3 600=216 000` ticks.', 'type': 'uint', 'optional': False}, {'name': 'max_expansion_distance', 'order': 1, 'description': \"Distance in chunks from the furthest base around to prevent expansions from reaching too far into the player's territory. Defaults to `7`.\", 'type': 'uint', 'optional': False}, {'name': 'min_expansion_cooldown', 'order': 11, 'description':",
    "metadata": {
      "concept_name": "EnemyExpansionMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EnemyExpansionMapSettings",
    "content": "{'name': 'min_expansion_cooldown', 'order': 11, 'description': 'The minimum time between expansions in ticks. The actual cooldown is adjusted to the current evolution levels. Defaults to `4*3 600=14 400` ticks.', 'type': 'uint', 'optional': False}, {'name': 'neighbouring_base_chunk_coefficient', 'order': 7, 'description': 'Defaults to `0.4`.', 'type': 'double', 'optional': False}, {'name': 'neighbouring_chunk_coefficient', 'order': 6, 'description': 'Defaults to `0.5`.', 'type': 'double', 'optional':",
    "metadata": {
      "concept_name": "EnemyExpansionMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EnemyExpansionMapSettings",
    "content": "'Defaults to `0.5`.', 'type': 'double', 'optional': False}, {'name': 'other_base_coefficient', 'order': 5, 'description': 'Defaults to `2.0`.', 'type': 'double', 'optional': False}, {'name': 'settler_group_max_size', 'order': 10, 'description': 'The maximum size of a biter group that goes to build a new base. This is multiplied by the evolution factor. Defaults to `20`.', 'type': 'uint', 'optional': False}, {'name': 'settler_group_min_size', 'order': 9, 'description': 'The minimum size of a biter group",
    "metadata": {
      "concept_name": "EnemyExpansionMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EnemyExpansionMapSettings",
    "content": "'order': 9, 'description': 'The minimum size of a biter group that goes to build a new base. This is multiplied by the evolution factor. Defaults to `5`.', 'type': 'uint', 'optional': False}]}",
    "metadata": {
      "concept_name": "EnemyExpansionMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EntityID",
    "content": "Concept: EntityID\nDescription: An entity prototype may be specified in one of three ways.\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'LuaEntityPrototype', 'description': 'The entity prototype.'}, {'complex_type': 'type', 'value': 'LuaEntity', 'description': 'The entity.'}, {'complex_type': 'type', 'value': 'string', 'description': 'The prototype name.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "EntityID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "EntityIDAndQualityIDPair",
    "content": "Concept: EntityIDAndQualityIDPair\nDescription: An entity prototype with optional quality specification.\nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'name', 'order': 0, 'description': 'Entity prototype.', 'type': 'EntityID', 'optional': False}, {'name': 'quality', 'order': 1, 'description': 'Quality prototype. Normal quality will be used if not specified.', 'type': 'QualityID', 'optional': True}]}",
    "metadata": {
      "concept_name": "EntityIDAndQualityIDPair",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EntityIDFilter",
    "content": "Concept: EntityIDFilter\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'comparator', 'order': 2, 'description': 'The quality comparison type.', 'type': 'ComparatorString', 'optional': True}, {'name': 'name', 'order': 0, 'description': 'The entity name.', 'type': 'string', 'optional': False}, {'name': 'quality', 'order': 1, 'description': 'The name of the quality.', 'type': 'string', 'optional': True}]}",
    "metadata": {
      "concept_name": "EntityIDFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFilter",
    "content": "Concept: EntityPrototypeFilter\nDescription:",
    "metadata": {
      "concept_name": "EntityPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'flying-robot'}, {'complex_type': 'literal', 'value': 'robot-with-logistics-interface'}, {'complex_type': 'literal', 'value': 'rail'}, {'complex_type': 'literal', 'value': 'ghost'}, {'complex_type': 'literal', 'value': 'explosion'}, {'complex_type': 'literal', 'value': 'vehicle'},",
    "metadata": {
      "concept_name": "EntityPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFilter",
    "content": "'explosion'}, {'complex_type': 'literal', 'value': 'vehicle'}, {'complex_type': 'literal', 'value': 'crafting-machine'}, {'complex_type': 'literal', 'value': 'rolling-stock'}, {'complex_type': 'literal', 'value': 'turret'}, {'complex_type': 'literal', 'value': 'transport-belt-connectable'}, {'complex_type': 'literal', 'value': 'wall-connectable'}, {'complex_type': 'literal', 'value': 'buildable'}, {'complex_type': 'literal', 'value': 'placable-in-editor'}, {'complex_type': 'literal', 'value': 'clonable'},",
    "metadata": {
      "concept_name": "EntityPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFilter",
    "content": "{'complex_type': 'literal', 'value': 'clonable'}, {'complex_type': 'literal', 'value': 'selectable'}, {'complex_type': 'literal', 'value': 'hidden'}, {'complex_type': 'literal', 'value': 'entity-with-health'}, {'complex_type': 'literal', 'value': 'building'}, {'complex_type': 'literal', 'value': 'fast-replaceable'}, {'complex_type': 'literal', 'value': 'uses-direction'}, {'complex_type': 'literal', 'value': 'minable'}, {'complex_type': 'literal', 'value': 'circuit-connectable'}, {'complex_type': 'literal',",
    "metadata": {
      "concept_name": "EntityPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFilter",
    "content": "'value': 'circuit-connectable'}, {'complex_type': 'literal', 'value': 'autoplace'}, {'complex_type': 'literal', 'value': 'blueprintable'}, {'complex_type': 'literal', 'value': 'item-to-place'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'collision-mask'}, {'complex_type': 'literal', 'value': 'flag'}, {'complex_type': 'literal', 'value': 'build-base-evolution-requirement'}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "EntityPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFilter",
    "content": "{'complex_type': 'literal', 'value': 'selection-priority'}, {'complex_type': 'literal', 'value': 'emissions-per-second'}, {'complex_type': 'literal', 'value': 'crafting-category'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has",
    "metadata": {
      "concept_name": "EntityPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFilter",
    "content": "Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'build-base-evolution-requirement', 'order': 4, 'description': '', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name':",
    "metadata": {
      "concept_name": "EntityPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFilter",
    "content": "'', 'type': 'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'double', 'optional': False}]}, {'name': 'collision-mask', 'order': 2, 'description': 'Usage example:\\n\\n```\\nprototypes.get_entity_filtered({{filter = \"collision-mask\", mask = \"player\", mask_mode = \"collides\"}})\\n```', 'parameters': [{'name': 'mask', 'order': 0, 'description': 'Name of one [layer](runtime:LuaCollisionLayerPrototype) or a full collision mask.', 'type':",
    "metadata": {
      "concept_name": "EntityPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFilter",
    "content": "or a full collision mask.', 'type': {'complex_type': 'union', 'options': ['CollisionLayerID', 'CollisionMask'], 'full_format': False}, 'optional': False}, {'name': 'mask_mode', 'order': 1, 'description': '', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'collides'}, {'complex_type': 'literal', 'value': 'layers-equals'}, {'complex_type': 'literal', 'value': 'contains-any'}, {'complex_type': 'literal', 'value': 'contains-all'}], 'full_format': False}, 'optional':",
    "metadata": {
      "concept_name": "EntityPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFilter",
    "content": "'value': 'contains-all'}], 'full_format': False}, 'optional': False}]}, {'name': 'crafting-category', 'order': 7, 'description': '', 'parameters': [{'name': 'crafting_category', 'order': 0, 'description': 'Matches if the prototype is for a crafting machine with this [crafting category](runtime:LuaEntityPrototype::crafting_categories).', 'type': 'string', 'optional': False}]}, {'name': 'emissions-per-second', 'order': 6, 'description': '', 'parameters': [{'name': 'comparison', 'order': 1, 'description': '',",
    "metadata": {
      "concept_name": "EntityPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFilter",
    "content": "[{'name': 'comparison', 'order': 1, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'pollutant', 'order': 0, 'description': 'The name of a pollutant type to check.', 'type': 'string', 'optional': False}, {'name': 'value', 'order': 2, 'description': 'The value to compare against.', 'type': 'double', 'optional': False}]}, {'name': 'flag', 'order': 3, 'description': 'Usage example:\\n\\n```\\nprototypes.get_entity_filtered({{filter = \"flag\", flag = \"placeable-player\"}, {filter =",
    "metadata": {
      "concept_name": "EntityPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFilter",
    "content": "= \"flag\", flag = \"placeable-player\"}, {filter = \"flag\", flag = \"placeable-enemy\", mode = \"and\"}})\\n```', 'parameters': [{'name': 'flag', 'order': 0, 'description': '', 'type': 'EntityPrototypeFlag', 'optional': False}]}, {'name': 'name', 'order': 0, 'description': 'For use within nested filters such as the `place-result` filter of array[[ItemPrototypeFilter](runtime:ItemPrototypeFilter)].\\n\\nTo get a specific prototype by name, see [LuaPrototypes::entity](runtime:LuaPrototypes::entity).', 'parameters':",
    "metadata": {
      "concept_name": "EntityPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFilter",
    "content": "'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name, or list of acceptable names.', 'type': {'complex_type': 'union', 'options': ['string', {'complex_type': 'array', 'value': 'string'}], 'full_format': False}, 'optional': False}]}, {'name': 'selection-priority', 'order': 5, 'description': '', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The value to compare",
    "metadata": {
      "concept_name": "EntityPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFilter",
    "content": "'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'uint8', 'optional': False}]}, {'name': 'type', 'order': 1, 'description': 'Usage example: \\n```\\nprototypes.get_entity_filtered({{filter = \"type\", type = \"unit\"}})\\n```', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type, or a list of acceptable types.', 'type': {'complex_type': 'union', 'options': ['string', {'complex_type': 'array', 'value': 'string'}], 'full_format': False}, 'optional': False}]}],",
    "metadata": {
      "concept_name": "EntityPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFilter",
    "content": "'string'}], 'full_format': False}, 'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "EntityPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFlag",
    "content": "Concept: EntityPrototypeFlag\nDescription: A [string](runtime:string) specifying an entity prototype flag.",
    "metadata": {
      "concept_name": "EntityPrototypeFlag",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFlag",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'not-rotatable', 'description': 'Prevents the entity from being rotated before or after placement.'}, {'complex_type': 'literal', 'value': 'placeable-neutral', 'description': 'Determines the default force when placing entities in the map editor and using the \"AUTO\" option for the force.'}, {'complex_type': 'literal', 'value': 'placeable-player', 'description': 'Determines the default force when placing entities in the",
    "metadata": {
      "concept_name": "EntityPrototypeFlag",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFlag",
    "content": "'Determines the default force when placing entities in the map editor and using the \"AUTO\" option for the force.'}, {'complex_type': 'literal', 'value': 'placeable-enemy', 'description': 'Determines the default force when placing entities in the map editor and using the \"AUTO\" option for the force.'}, {'complex_type': 'literal', 'value': 'placeable-off-grid', 'description': 'Determines whether the entity needs to be aligned with the invisible grid within the world. Most entities are confined in this way,",
    "metadata": {
      "concept_name": "EntityPrototypeFlag",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFlag",
    "content": "grid within the world. Most entities are confined in this way, with a few exceptions such as trees and land mines.'}, {'complex_type': 'literal', 'value': 'player-creation', 'description': 'Makes it possible to blueprint, deconstruct, and repair the entity (which can be turned off again using the specific flags). Makes it possible for the biter AI to target the entity as a distraction. Enables dust to automatically be created when building the entity. If the entity does not have a `map_color` set, this",
    "metadata": {
      "concept_name": "EntityPrototypeFlag",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFlag",
    "content": "the entity. If the entity does not have a `map_color` set, this flag makes the entity appear on the map with the default color specified by the UtilityConstants.'}, {'complex_type': 'literal', 'value': 'building-direction-8-way', 'description': 'Uses 45 degree angle increments when selecting direction.'}, {'complex_type': 'literal', 'value': 'filter-directions', 'description': 'Used to automatically detect the proper direction of the entity if possible. Used by the pump, train stop, and train signal by",
    "metadata": {
      "concept_name": "EntityPrototypeFlag",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFlag",
    "content": "if possible. Used by the pump, train stop, and train signal by default.'}, {'complex_type': 'literal', 'value': 'get-by-unit-number', 'description': 'When set, entity will be possible to obtain by using [LuaGameScript::get_entity_by_unit_number](runtime:LuaGameScript::get_entity_by_unit_number). It also changes input actions sent by a player to be selecting entity by unit number instead of a position which may help players in latency to select moving entities.'}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "EntityPrototypeFlag",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFlag",
    "content": "select moving entities.'}, {'complex_type': 'literal', 'value': 'breaths-air', 'description': 'Used to specify that the entity breathes air, and is thus affected by poison.'}, {'complex_type': 'literal', 'value': 'not-repairable', 'description': \"Used to specify that the entity can not be 'healed' by repair packs.\"}, {'complex_type': 'literal', 'value': 'not-on-map', 'description': 'Prevents the entity from being drawn on the map.'}, {'complex_type': 'literal', 'value': 'not-deconstructable',",
    "metadata": {
      "concept_name": "EntityPrototypeFlag",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFlag",
    "content": "{'complex_type': 'literal', 'value': 'not-deconstructable', 'description': 'Prevents the entity from being deconstructed.'}, {'complex_type': 'literal', 'value': 'not-blueprintable', 'description': 'Prevents the entity from being part of a blueprint.'}, {'complex_type': 'literal', 'value': 'hide-alt-info', 'description': 'Hides the alt-info of this entity when in alt-mode.'}, {'complex_type': 'literal', 'value': 'no-gap-fill-while-building', 'description': ''}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "EntityPrototypeFlag",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFlag",
    "content": "'description': ''}, {'complex_type': 'literal', 'value': 'not-flammable', 'description': 'Does not apply fire stickers to the entity.'}, {'complex_type': 'literal', 'value': 'no-automated-item-removal', 'description': 'Prevents inserters and loaders from taking items from this entity.'}, {'complex_type': 'literal', 'value': 'no-automated-item-insertion', 'description': 'Prevents inserters and loaders from inserting items into this entity.'}, {'complex_type': 'literal', 'value': 'no-copy-paste',",
    "metadata": {
      "concept_name": "EntityPrototypeFlag",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFlag",
    "content": "{'complex_type': 'literal', 'value': 'no-copy-paste', 'description': 'Prevents the entity from being copy-pasted.'}, {'complex_type': 'literal', 'value': 'not-selectable-in-game', 'description': 'Disallows selection of the entity even when a selection box is specified for other reasons. For example, selection boxes are used to determine the size of outlines to be shown when highlighting entities inside electric pole ranges.'}, {'complex_type': 'literal', 'value': 'not-upgradable', 'description': 'Prevents",
    "metadata": {
      "concept_name": "EntityPrototypeFlag",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFlag",
    "content": "'literal', 'value': 'not-upgradable', 'description': 'Prevents the entity from being selected by the upgrade planner.'}, {'complex_type': 'literal', 'value': 'not-in-kill-statistics', 'description': 'Prevents the entity from being shown in the kill statistics.'}, {'complex_type': 'literal', 'value': 'building-direction-16-way', 'description': ''}, {'complex_type': 'literal', 'value': 'snap-to-rail-support-spot', 'description': ''}, {'complex_type': 'literal', 'value': 'not-in-made-in', 'description':",
    "metadata": {
      "concept_name": "EntityPrototypeFlag",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFlag",
    "content": "'literal', 'value': 'not-in-made-in', 'description': 'Prevents the entity from being shown in the \"made in\" list in recipe tooltips.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "EntityPrototypeFlag",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "EntityPrototypeFlags",
    "content": "Concept: EntityPrototypeFlags\nDescription: A set of flags. Active flags are in the dictionary as `true`, while inactive flags aren't present at all.\n\nBy default, none of these flags are set.\nComplex_type: {'complex_type': 'dictionary', 'key': 'EntityPrototypeFlag', 'value': {'complex_type': 'literal', 'value': True}}",
    "metadata": {
      "concept_name": "EntityPrototypeFlags",
      "concept_type": "dictionary"
    }
  },
  {
    "type": "concept",
    "name": "EntitySearchFilters",
    "content": "Concept: EntitySearchFilters\nDescription:",
    "metadata": {
      "concept_name": "EntitySearchFilters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EntitySearchFilters",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'area', 'order': 0, 'description': '', 'type': 'BoundingBox', 'optional': True}, {'name': 'collision_mask', 'order': 8, 'description': '', 'type': {'complex_type': 'union', 'options': ['CollisionLayerID', {'complex_type': 'array', 'value': 'CollisionLayerID'}, {'complex_type': 'dictionary', 'key': 'CollisionLayerID', 'value': {'complex_type': 'literal', 'value': True}}], 'full_format': False}, 'optional': True}, {'name': 'direction', 'order':",
    "metadata": {
      "concept_name": "EntitySearchFilters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EntitySearchFilters",
    "content": "False}, 'optional': True}, {'name': 'direction', 'order': 7, 'description': '', 'type': {'complex_type': 'union', 'options': ['defines.direction', {'complex_type': 'array', 'value': 'defines.direction'}], 'full_format': False}, 'optional': True}, {'name': 'force', 'order': 9, 'description': '', 'type': 'ForceSet', 'optional': True}, {'name': 'ghost_name', 'order': 5, 'description': 'An empty array means nothing matches the ghost_name filter.', 'type': {'complex_type': 'union', 'options': ['EntityID',",
    "metadata": {
      "concept_name": "EntitySearchFilters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EntitySearchFilters",
    "content": "'type': {'complex_type': 'union', 'options': ['EntityID', {'complex_type': 'array', 'value': 'EntityID'}], 'full_format': False}, 'optional': True}, {'name': 'ghost_type', 'order': 6, 'description': 'An empty array means nothing matches the ghost_type filter.', 'type': {'complex_type': 'union', 'options': ['string', {'complex_type': 'array', 'value': 'string'}], 'full_format': False}, 'optional': True}, {'name': 'has_item_inside', 'order': 14, 'description': '', 'type': 'ItemWithQualityID', 'optional':",
    "metadata": {
      "concept_name": "EntitySearchFilters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EntitySearchFilters",
    "content": "14, 'description': '', 'type': 'ItemWithQualityID', 'optional': True}, {'name': 'invert', 'order': 16, 'description': 'Whether the filters should be inverted.', 'type': 'boolean', 'optional': True}, {'name': 'is_military_target', 'order': 13, 'description': '', 'type': 'boolean', 'optional': True}, {'name': 'limit', 'order': 12, 'description': '', 'type': 'uint', 'optional': True}, {'name': 'name', 'order': 3, 'description': 'An empty array means nothing matches the name filter.', 'type': {'complex_type':",
    "metadata": {
      "concept_name": "EntitySearchFilters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EntitySearchFilters",
    "content": "nothing matches the name filter.', 'type': {'complex_type': 'union', 'options': ['EntityID', {'complex_type': 'array', 'value': 'EntityID'}], 'full_format': False}, 'optional': True}, {'name': 'position', 'order': 1, 'description': 'Has precedence over area field.', 'type': 'MapPosition', 'optional': True}, {'name': 'quality', 'order': 15, 'description': '', 'type': 'QualityCondition', 'optional': True}, {'name': 'radius', 'order': 2, 'description': 'If given with position, will return all entities within",
    "metadata": {
      "concept_name": "EntitySearchFilters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EntitySearchFilters",
    "content": "'If given with position, will return all entities within the radius of the position.', 'type': 'double', 'optional': True}, {'name': 'to_be_deconstructed', 'order': 10, 'description': '', 'type': 'boolean', 'optional': True}, {'name': 'to_be_upgraded', 'order': 11, 'description': '', 'type': 'boolean', 'optional': True}, {'name': 'type', 'order': 4, 'description': 'An empty array means nothing matches the type filter.', 'type': {'complex_type': 'union', 'options': ['string', {'complex_type': 'array',",
    "metadata": {
      "concept_name": "EntitySearchFilters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EntitySearchFilters",
    "content": "'union', 'options': ['string', {'complex_type': 'array', 'value': 'string'}], 'full_format': False}, 'optional': True}]}",
    "metadata": {
      "concept_name": "EntitySearchFilters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EntityWithQualityID",
    "content": "Concept: EntityWithQualityID\nDescription: An entity prototype with optional quality specification. Can be specified in one of four ways.",
    "metadata": {
      "concept_name": "EntityWithQualityID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "EntityWithQualityID",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'LuaEntity', 'description': 'The entity. Both prototype and quality of the entity will be used.'}, {'complex_type': 'type', 'value': 'LuaEntityPrototype', 'description': 'The entity prototype. Normal quality will be used.'}, {'complex_type': 'type', 'value': 'string', 'description': 'The prototype name. Normal quality will be used.'}, {'complex_type': 'type', 'value': 'EntityIDAndQualityIDPair', 'description': 'A table of",
    "metadata": {
      "concept_name": "EntityWithQualityID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "EntityWithQualityID",
    "content": "'value': 'EntityIDAndQualityIDPair', 'description': 'A table of entity prototype and quality.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "EntityWithQualityID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "EquipmentID",
    "content": "Concept: EquipmentID\nDescription: An equipment prototype may be specified in one of three ways.\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'LuaEquipmentPrototype', 'description': 'The equipment prototype.'}, {'complex_type': 'type', 'value': 'LuaEquipment', 'description': 'The equipment.'}, {'complex_type': 'type', 'value': 'string', 'description': 'The prototype name.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "EquipmentID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "EquipmentIDAndQualityIDPair",
    "content": "Concept: EquipmentIDAndQualityIDPair\nDescription: An equipment prototype with optional quality specification.\nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'name', 'order': 0, 'description': 'Equipment prototype.', 'type': 'EquipmentID', 'optional': False}, {'name': 'quality', 'order': 1, 'description': 'Quality prototype. Normal quality will be used if not specified.', 'type': 'QualityID', 'optional': True}]}",
    "metadata": {
      "concept_name": "EquipmentIDAndQualityIDPair",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EquipmentPoint",
    "content": "Concept: EquipmentPoint\nDescription: A table used to define a manual shape for a piece of equipment.\nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'x', 'order': 0, 'description': '', 'type': 'uint', 'optional': False}, {'name': 'y', 'order': 1, 'description': '', 'type': 'uint', 'optional': False}]}",
    "metadata": {
      "concept_name": "EquipmentPoint",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EquipmentPosition",
    "content": "Concept: EquipmentPosition\nDescription: Position inside an equipment grid. This uses the same format as [MapPosition](runtime:MapPosition), meaning it can be specified either with or without explicit keys.",
    "metadata": {
      "concept_name": "EquipmentPosition",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "EquipmentPosition",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'table', 'parameters': [{'name': 'x', 'order': 0, 'description': '', 'type': 'int', 'optional': False}, {'name': 'y', 'order': 1, 'description': '', 'type': 'int', 'optional': False}]}, {'complex_type': 'tuple', 'values': ['int', 'int']}], 'full_format': False}",
    "metadata": {
      "concept_name": "EquipmentPosition",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "EquipmentPrototypeFilter",
    "content": "Concept: EquipmentPrototypeFilter\nDescription:",
    "metadata": {
      "concept_name": "EquipmentPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EquipmentPrototypeFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'item-to-place'}, {'complex_type': 'literal', 'value': 'type'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to",
    "metadata": {
      "concept_name": "EquipmentPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EquipmentPrototypeFilter",
    "content": "True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The",
    "metadata": {
      "concept_name": "EquipmentPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EquipmentPrototypeFilter",
    "content": "'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type, or a list of acceptable types.', 'type': {'complex_type': 'union', 'options': ['string', {'complex_type': 'array', 'value': 'string'}], 'full_format': False}, 'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "EquipmentPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EquipmentWithQualityCounts",
    "content": "Concept: EquipmentWithQualityCounts\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'count', 'order': 1, 'description': 'The number of equipment items.', 'type': 'uint', 'optional': False}, {'name': 'name', 'order': 0, 'description': 'Name of the equipment prototype.', 'type': 'string', 'optional': False}, {'name': 'quality', 'order': 2, 'description': \"Name of the equipment's quality prototype.\", 'type': 'string', 'optional': False}]}",
    "metadata": {
      "concept_name": "EquipmentWithQualityCounts",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EquipmentWithQualityID",
    "content": "Concept: EquipmentWithQualityID\nDescription: An equipment prototype with optional quality specification.",
    "metadata": {
      "concept_name": "EquipmentWithQualityID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "EquipmentWithQualityID",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'LuaEquipmentPrototype', 'description': 'The equipment prototype. Normal quality will be used.'}, {'complex_type': 'type', 'value': 'LuaEquipment', 'description': 'The equipment. Both prototype and quality of the provided equipment will be used.'}, {'complex_type': 'type', 'value': 'string', 'description': 'The prototype name. Normal quality will be used.'}, {'complex_type': 'type', 'value': 'EquipmentIDAndQualityIDPair',",
    "metadata": {
      "concept_name": "EquipmentWithQualityID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "EquipmentWithQualityID",
    "content": "'type', 'value': 'EquipmentIDAndQualityIDPair', 'description': 'A table of equipment prototype and quality.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "EquipmentWithQualityID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "EventData",
    "content": "Concept: EventData\nDescription: Information about the event that has been raised. The table can also contain other fields depending on the type of event. See [the list of Factorio events](runtime:events) for more information on these.",
    "metadata": {
      "concept_name": "EventData",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EventData",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'mod_name', 'order': 2, 'description': 'The name of the mod that raised the event if it was raised using [LuaBootstrap::raise_event](runtime:LuaBootstrap::raise_event).', 'type': 'string', 'optional': True}, {'name': 'name', 'order': 0, 'description': 'The identifier of the event this handler was registered to.', 'type': 'defines.events', 'optional': False}, {'name': 'tick', 'order': 1, 'description': 'The tick during which the event",
    "metadata": {
      "concept_name": "EventData",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EventData",
    "content": "'order': 1, 'description': 'The tick during which the event happened.', 'type': 'uint', 'optional': False}]}",
    "metadata": {
      "concept_name": "EventData",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "EventFilter",
    "content": "Concept: EventFilter\nDescription: Used to filter out irrelevant event callbacks in a performant way.",
    "metadata": {
      "concept_name": "EventFilter",
      "concept_type": "array"
    }
  },
  {
    "type": "concept",
    "name": "EventFilter",
    "content": "Filters are always used as an array of filters of a specific type. Every filter can only be used with its corresponding event, and different types of event filters can not be mixed.",
    "metadata": {
      "concept_name": "EventFilter",
      "concept_type": "array"
    }
  },
  {
    "type": "concept",
    "name": "EventFilter",
    "content": "Complex_type: {'complex_type': 'array', 'value': {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'LuaPrePlatformMinedEntityEventFilter', 'description': ''}, {'complex_type': 'type', 'value': 'LuaRobotMinedEntityEventFilter', 'description': ''}, {'complex_type': 'type', 'value': 'LuaEntityMarkedForUpgradeEventFilter', 'description': ''}, {'complex_type': 'type', 'value': 'LuaPreGhostUpgradedEventFilter', 'description': ''}, {'complex_type': 'type', 'value':",
    "metadata": {
      "concept_name": "EventFilter",
      "concept_type": "array"
    }
  },
  {
    "type": "concept",
    "name": "EventFilter",
    "content": "'description': ''}, {'complex_type': 'type', 'value': 'LuaPlatformMinedEntityEventFilter', 'description': ''}, {'complex_type': 'type', 'value': 'LuaScriptRaisedDestroyEventFilter', 'description': ''}, {'complex_type': 'type', 'value': 'LuaPlayerBuiltEntityEventFilter', 'description': ''}, {'complex_type': 'type', 'value': 'LuaPlatformBuiltEntityEventFilter', 'description': ''}, {'complex_type': 'type', 'value': 'LuaPreGhostDeconstructedEventFilter', 'description': ''}, {'complex_type': 'type', 'value':",
    "metadata": {
      "concept_name": "EventFilter",
      "concept_type": "array"
    }
  },
  {
    "type": "concept",
    "name": "EventFilter",
    "content": "'description': ''}, {'complex_type': 'type', 'value': 'LuaEntityClonedEventFilter', 'description': ''}, {'complex_type': 'type', 'value': 'LuaScriptRaisedTeleportedEventFilter', 'description': ''}, {'complex_type': 'type', 'value': 'LuaEntityDeconstructionCancelledEventFilter', 'description': ''}, {'complex_type': 'type', 'value': 'LuaRobotBuiltEntityEventFilter', 'description': ''}, {'complex_type': 'type', 'value': 'LuaScriptRaisedBuiltEventFilter', 'description': ''}, {'complex_type': 'type', 'value':",
    "metadata": {
      "concept_name": "EventFilter",
      "concept_type": "array"
    }
  },
  {
    "type": "concept",
    "name": "EventFilter",
    "content": "'description': ''}, {'complex_type': 'type', 'value': 'LuaPrePlayerMinedEntityEventFilter', 'description': ''}, {'complex_type': 'type', 'value': 'LuaPlayerRepairedEntityEventFilter', 'description': ''}, {'complex_type': 'type', 'value': 'LuaUpgradeCancelledEventFilter', 'description': ''}, {'complex_type': 'type', 'value': 'LuaSectorScannedEventFilter', 'description': ''}, {'complex_type': 'type', 'value': 'LuaPostEntityDiedEventFilter', 'description': ''}, {'complex_type': 'type', 'value':",
    "metadata": {
      "concept_name": "EventFilter",
      "concept_type": "array"
    }
  },
  {
    "type": "concept",
    "name": "EventFilter",
    "content": "'description': ''}, {'complex_type': 'type', 'value': 'LuaEntityMarkedForDeconstructionEventFilter', 'description': ''}, {'complex_type': 'type', 'value': 'LuaPlayerMinedEntityEventFilter', 'description': ''}, {'complex_type': 'type', 'value': 'LuaEntityDamagedEventFilter', 'description': ''}, {'complex_type': 'type', 'value': 'LuaScriptRaisedReviveEventFilter', 'description': ''}, {'complex_type': 'type', 'value': 'LuaEntityDiedEventFilter', 'description': ''}, {'complex_type': 'type', 'value':",
    "metadata": {
      "concept_name": "EventFilter",
      "concept_type": "array"
    }
  },
  {
    "type": "concept",
    "name": "EventFilter",
    "content": "'description': ''}, {'complex_type': 'type', 'value': 'LuaPreRobotMinedEntityEventFilter', 'description': ''}], 'full_format': True}}",
    "metadata": {
      "concept_name": "EventFilter",
      "concept_type": "array"
    }
  },
  {
    "type": "concept",
    "name": "FlowStatisticsID",
    "content": "Concept: FlowStatisticsID\nDescription: Identifies a statistics prototype, depending on the statistics type.",
    "metadata": {
      "concept_name": "FlowStatisticsID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "FlowStatisticsID",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'ItemWithQualityID', 'description': 'Used with item production statistics.'}, {'complex_type': 'type', 'value': 'FluidID', 'description': 'Used with fluid production statistics.'}, {'complex_type': 'type', 'value': 'EntityWithQualityID', 'description': 'Used with electric network, entity build count, and kill count statistics.'}, {'complex_type': 'type', 'value': 'EntityID', 'description': 'Used with pollution",
    "metadata": {
      "concept_name": "FlowStatisticsID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "FlowStatisticsID",
    "content": "'value': 'EntityID', 'description': 'Used with pollution statistics.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "FlowStatisticsID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "Fluid",
    "content": "Concept: Fluid\nDescription:",
    "metadata": {
      "concept_name": "Fluid",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Fluid",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'amount', 'order': 1, 'description': 'Amount of the fluid.', 'type': 'double', 'optional': False}, {'name': 'name', 'order': 0, 'description': 'Fluid prototype name of the fluid.', 'type': 'string', 'optional': False}, {'name': 'temperature', 'order': 2, 'description': \"The temperature. When reading from [LuaFluidBox](runtime:LuaFluidBox), this field will always be present. It is not necessary to specify it when writing, however. When not",
    "metadata": {
      "concept_name": "Fluid",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Fluid",
    "content": "is not necessary to specify it when writing, however. When not specified, the fluid will be set to the fluid's default temperature as specified in the fluid's prototype.\", 'type': 'float', 'optional': True}]}",
    "metadata": {
      "concept_name": "Fluid",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "FluidBoxConnectionRecord",
    "content": "Concept: FluidBoxConnectionRecord\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'other_entity', 'order': 1, 'description': '', 'type': 'LuaEntity', 'optional': False}, {'name': 'other_linked_connection_id', 'order': 2, 'description': '', 'type': 'uint', 'optional': False}, {'name': 'this_linked_connection_id', 'order': 0, 'description': '', 'type': 'uint', 'optional': False}]}",
    "metadata": {
      "concept_name": "FluidBoxConnectionRecord",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "FluidBoxFilter",
    "content": "Concept: FluidBoxFilter\nDescription:",
    "metadata": {
      "concept_name": "FluidBoxFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "FluidBoxFilter",
    "content": "Description: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'maximum_temperature', 'order': 2, 'description': 'The maximum temperature allowed into the fluidbox.', 'type': 'float', 'optional': False}, {'name': 'minimum_temperature', 'order': 1, 'description': 'The minimum temperature allowed into the fluidbox.', 'type': 'float', 'optional': False}, {'name': 'name', 'order': 0, 'description': 'Fluid prototype name of the filtered fluid.', 'type': 'string', 'optional': False}]}",
    "metadata": {
      "concept_name": "FluidBoxFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "FluidBoxFilterSpec",
    "content": "Concept: FluidBoxFilterSpec\nDescription:",
    "metadata": {
      "concept_name": "FluidBoxFilterSpec",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "FluidBoxFilterSpec",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'force', 'order': 3, 'description': 'Force the filter to be set, regardless of current fluid content.', 'type': 'boolean', 'optional': True}, {'name': 'maximum_temperature', 'order': 2, 'description': 'The maximum temperature allowed into the fluidbox.', 'type': 'float', 'optional': True}, {'name': 'minimum_temperature', 'order': 1, 'description': 'The minimum temperature allowed into the fluidbox.', 'type': 'float', 'optional': True},",
    "metadata": {
      "concept_name": "FluidBoxFilterSpec",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "FluidBoxFilterSpec",
    "content": "into the fluidbox.', 'type': 'float', 'optional': True}, {'name': 'name', 'order': 0, 'description': 'Fluid prototype name of the filtered fluid.', 'type': 'string', 'optional': False}]}",
    "metadata": {
      "concept_name": "FluidBoxFilterSpec",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "FluidID",
    "content": "Concept: FluidID\nDescription: A fluid may be specified in one of three ways.\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'string', 'description': 'The fluid name.'}, {'complex_type': 'type', 'value': 'LuaFluidPrototype', 'description': 'The fluid prototype.'}, {'complex_type': 'type', 'value': 'Fluid', 'description': 'The fluid.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "FluidID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "FluidProduct",
    "content": "Concept: FluidProduct\nDescription:",
    "metadata": {
      "concept_name": "FluidProduct",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "FluidProduct",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'amount', 'order': 2, 'description': 'Amount of the fluid to give. If not returned, `amount_min` and `amount_max` will be present instead.', 'type': 'double', 'optional': True}, {'name': 'amount_max', 'order': 4, 'description': 'Maximum amount of the fluid to give. Not returned if `amount` is returned.', 'type': 'double', 'optional': True}, {'name': 'amount_min', 'order': 3, 'description': 'Minimal amount of the fluid to give. Not returned if",
    "metadata": {
      "concept_name": "FluidProduct",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "FluidProduct",
    "content": "'Minimal amount of the fluid to give. Not returned if `amount` is returned.', 'type': 'double', 'optional': True}, {'name': 'fluidbox_index', 'order': 9, 'description': '', 'type': 'uint', 'optional': True}, {'name': 'ignored_by_productivity', 'order': 7, 'description': 'How much of this product is ignored by productivity.', 'type': 'double', 'optional': True}, {'name': 'ignored_by_stats', 'order': 6, 'description': 'How much of this product is ignored by statistics.', 'type': 'double', 'optional': True},",
    "metadata": {
      "concept_name": "FluidProduct",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "FluidProduct",
    "content": "ignored by statistics.', 'type': 'double', 'optional': True}, {'name': 'name', 'order': 1, 'description': 'Prototype name of the result.', 'type': 'string', 'optional': False}, {'name': 'probability', 'order': 5, 'description': 'A value in range `[0, 1]`. Fluid is only given with this probability; otherwise no product is produced.', 'type': 'double', 'optional': False}, {'name': 'temperature', 'order': 8, 'description': 'The fluid temperature of this product.', 'type': 'float', 'optional': True}, {'name':",
    "metadata": {
      "concept_name": "FluidProduct",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "FluidProduct",
    "content": "of this product.', 'type': 'float', 'optional': True}, {'name': 'type', 'order': 0, 'description': '', 'type': {'complex_type': 'literal', 'value': 'fluid'}, 'optional': False}]}",
    "metadata": {
      "concept_name": "FluidProduct",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "FluidPrototypeFilter",
    "content": "Concept: FluidPrototypeFilter\nDescription:",
    "metadata": {
      "concept_name": "FluidPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "FluidPrototypeFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'hidden'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'subgroup'}, {'complex_type': 'literal', 'value': 'default-temperature'}, {'complex_type': 'literal', 'value': 'max-temperature'}, {'complex_type': 'literal', 'value': 'heat-capacity'}, {'complex_type':",
    "metadata": {
      "concept_name": "FluidPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "FluidPrototypeFilter",
    "content": "'literal', 'value': 'heat-capacity'}, {'complex_type': 'literal', 'value': 'fuel-value'}, {'complex_type': 'literal', 'value': 'emissions-multiplier'}, {'complex_type': 'literal', 'value': 'gas-temperature'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating",
    "metadata": {
      "concept_name": "FluidPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "FluidPrototypeFilter",
    "content": "with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'default-temperature', 'order': 2, 'description': '', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional': False},",
    "metadata": {
      "concept_name": "FluidPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "FluidPrototypeFilter",
    "content": "'', 'type': 'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'double', 'optional': False}]}, {'name': 'emissions-multiplier', 'order': 6, 'description': '', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'double', 'optional': False}]}, {'name': 'fuel-value', 'order': 5,",
    "metadata": {
      "concept_name": "FluidPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "FluidPrototypeFilter",
    "content": "'optional': False}]}, {'name': 'fuel-value', 'order': 5, 'description': '', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'double', 'optional': False}]}, {'name': 'gas-temperature', 'order': 7, 'description': '', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'value',",
    "metadata": {
      "concept_name": "FluidPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "FluidPrototypeFilter",
    "content": "'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'double', 'optional': False}]}, {'name': 'heat-capacity', 'order': 4, 'description': '', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'double', 'optional': False}]}, {'name': 'max-temperature', 'order': 3, 'description': '',",
    "metadata": {
      "concept_name": "FluidPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "FluidPrototypeFilter",
    "content": "{'name': 'max-temperature', 'order': 3, 'description': '', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'double', 'optional': False}]}, {'name': 'name', 'order': 0, 'description': 'For use within nested filters such as the `has-product-fluid` filter of array[[RecipePrototypeFilter](runtime:RecipePrototypeFilter)].\\n\\nTo get a specific prototype by",
    "metadata": {
      "concept_name": "FluidPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "FluidPrototypeFilter",
    "content": "get a specific prototype by name, see [LuaPrototypes::fluid](runtime:LuaPrototypes::fluid).', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name, or list of acceptable names.', 'type': {'complex_type': 'union', 'options': ['string', {'complex_type': 'array', 'value': 'string'}], 'full_format': False}, 'optional': False}]}, {'name': 'subgroup', 'order': 1, 'description': '', 'parameters': [{'name': 'subgroup', 'order': 0, 'description': 'A [LuaGroup](runtime:LuaGroup) (subgroup)",
    "metadata": {
      "concept_name": "FluidPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "FluidPrototypeFilter",
    "content": "0, 'description': 'A [LuaGroup](runtime:LuaGroup) (subgroup) name', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "FluidPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ForceCondition",
    "content": "Concept: ForceCondition\nDescription:",
    "metadata": {
      "concept_name": "ForceCondition",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ForceCondition",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'all', 'description': 'All forces pass.'}, {'complex_type': 'literal', 'value': 'enemy', 'description': 'Forces which will attack pass.'}, {'complex_type': 'literal', 'value': 'ally', 'description': \"Forces which won't attack pass.\"}, {'complex_type': 'literal', 'value': 'friend', 'description': 'Forces which are friends pass.'}, {'complex_type': 'literal', 'value': 'not-friend', 'description': 'Forces which are not",
    "metadata": {
      "concept_name": "ForceCondition",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ForceCondition",
    "content": "'value': 'not-friend', 'description': 'Forces which are not friends pass.'}, {'complex_type': 'literal', 'value': 'same', 'description': 'The same force pass.'}, {'complex_type': 'literal', 'value': 'not-same', 'description': 'The non-same forces pass.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "ForceCondition",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ForceID",
    "content": "Concept: ForceID\nDescription: A force may be specified in one of three ways.",
    "metadata": {
      "concept_name": "ForceID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ForceID",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'string', 'description': 'Name of the force, same as [LuaForce::name](runtime:LuaForce::name).'}, {'complex_type': 'type', 'value': 'uint8', 'description': 'Index of the force, same as [LuaForce::index](runtime:LuaForce::index).'}, {'complex_type': 'type', 'value': 'LuaForce', 'description': 'A reference to [LuaForce](runtime:LuaForce) may be passed directly.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "ForceID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ForceSet",
    "content": "Concept: ForceSet\nDescription: Set of forces. Can be specified in one of two ways.\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': {'complex_type': 'array', 'value': 'ForceID'}, 'description': 'Array of many forces.'}, {'complex_type': 'type', 'value': 'ForceID', 'description': 'A single force.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "ForceSet",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "GameViewSettings",
    "content": "Concept: GameViewSettings\nDescription: Parameters that affect the look and control of the game. Updating any of the member attributes here will immediately take effect in the game engine.",
    "metadata": {
      "concept_name": "GameViewSettings",
      "concept_type": "LuaStruct"
    }
  },
  {
    "type": "concept",
    "name": "GameViewSettings",
    "content": "Complex_type: {'complex_type': 'LuaStruct', 'attributes': [{'name': 'show_alert_gui', 'order': 4, 'description': \"Show the flashing alert icons next to the player's toolbar.\", 'read_type': 'boolean', 'write_type': 'boolean', 'optional': False}, {'name': 'show_controller_gui', 'order': 0, 'description': 'Show the controller GUI elements. This includes the toolbar, the selected tool slot, the armour slot, and the gun and ammunition slots.', 'read_type': 'boolean', 'write_type': 'boolean', 'optional': False},",
    "metadata": {
      "concept_name": "GameViewSettings",
      "concept_type": "LuaStruct"
    }
  },
  {
    "type": "concept",
    "name": "GameViewSettings",
    "content": "'boolean', 'write_type': 'boolean', 'optional': False}, {'name': 'show_crafting_queue', 'order': 12, 'description': 'Shows or hides the crafting queue.', 'read_type': 'boolean', 'write_type': 'boolean', 'optional': False}, {'name': 'show_entity_info', 'order': 3, 'description': 'Show overlay icons on entities. Also known as \"alt-mode\".', 'read_type': 'boolean', 'write_type': 'boolean', 'optional': False}, {'name': 'show_entity_tooltip', 'order': 9, 'description': 'Shows or hides the tooltip that is",
    "metadata": {
      "concept_name": "GameViewSettings",
      "concept_type": "LuaStruct"
    }
  },
  {
    "type": "concept",
    "name": "GameViewSettings",
    "content": "'order': 9, 'description': 'Shows or hides the tooltip that is displayed when selecting an entity.', 'read_type': 'boolean', 'write_type': 'boolean', 'optional': False}, {'name': 'show_hotkey_suggestions', 'order': 14, 'description': 'Shows or hides the mouse and keyboard/controller button hints in the bottom left corner if they are enabled in the interface settings.', 'read_type': 'boolean', 'write_type': 'boolean', 'optional': False}, {'name': 'show_map_view_options', 'order': 8, 'description': 'Shows or",
    "metadata": {
      "concept_name": "GameViewSettings",
      "concept_type": "LuaStruct"
    }
  },
  {
    "type": "concept",
    "name": "GameViewSettings",
    "content": "'show_map_view_options', 'order': 8, 'description': 'Shows or hides the view options when map is opened.', 'read_type': 'boolean', 'write_type': 'boolean', 'optional': False}, {'name': 'show_minimap', 'order': 1, 'description': 'Show the chart in the upper right-hand corner of the screen.', 'read_type': 'boolean', 'write_type': 'boolean', 'optional': False}, {'name': 'show_quickbar', 'order': 10, 'description': 'Shows or hides quickbar of shortcuts.', 'read_type': 'boolean', 'write_type': 'boolean',",
    "metadata": {
      "concept_name": "GameViewSettings",
      "concept_type": "LuaStruct"
    }
  },
  {
    "type": "concept",
    "name": "GameViewSettings",
    "content": "shortcuts.', 'read_type': 'boolean', 'write_type': 'boolean', 'optional': False}, {'name': 'show_rail_block_visualisation', 'order': 6, 'description': 'When `true` (`false` is default), the rails will always show the rail block visualisation.', 'read_type': 'boolean', 'write_type': 'boolean', 'optional': False}, {'name': 'show_research_info', 'order': 2, 'description': 'Show research progress and name in the upper right-hand corner of the screen.', 'read_type': 'boolean', 'write_type': 'boolean',",
    "metadata": {
      "concept_name": "GameViewSettings",
      "concept_type": "LuaStruct"
    }
  },
  {
    "type": "concept",
    "name": "GameViewSettings",
    "content": "the screen.', 'read_type': 'boolean', 'write_type': 'boolean', 'optional': False}, {'name': 'show_shortcut_bar', 'order': 11, 'description': 'Shows or hides the shortcut bar.', 'read_type': 'boolean', 'write_type': 'boolean', 'optional': False}, {'name': 'show_side_menu', 'order': 7, 'description': 'Shows or hides the buttons row.', 'read_type': 'boolean', 'write_type': 'boolean', 'optional': False}, {'name': 'show_surface_list', 'order': 15, 'description': 'Shows or hides the surface list while in Remote",
    "metadata": {
      "concept_name": "GameViewSettings",
      "concept_type": "LuaStruct"
    }
  },
  {
    "type": "concept",
    "name": "GameViewSettings",
    "content": "'description': 'Shows or hides the surface list while in Remote View.', 'read_type': 'boolean', 'write_type': 'boolean', 'optional': False}, {'name': 'show_tool_bar', 'order': 13, 'description': 'Shows or hides the tool window with the weapons and armor.', 'read_type': 'boolean', 'write_type': 'boolean', 'optional': False}, {'name': 'update_entity_selection', 'order': 5, 'description': \"When `true` (the default), mousing over an entity will select it. Otherwise, moving the mouse won't update entity",
    "metadata": {
      "concept_name": "GameViewSettings",
      "concept_type": "LuaStruct"
    }
  },
  {
    "type": "concept",
    "name": "GameViewSettings",
    "content": "will select it. Otherwise, moving the mouse won't update entity selection.\", 'read_type': 'boolean', 'write_type': 'boolean', 'optional': False}]}",
    "metadata": {
      "concept_name": "GameViewSettings",
      "concept_type": "LuaStruct"
    }
  },
  {
    "type": "concept",
    "name": "GuiAnchor",
    "content": "Concept: GuiAnchor\nDescription:",
    "metadata": {
      "concept_name": "GuiAnchor",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "GuiAnchor",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'gui', 'order': 0, 'description': '', 'type': 'defines.relative_gui_type', 'optional': False}, {'name': 'name', 'order': 3, 'description': 'If provided, only anchors the GUI element when the opened thing matches the name. `name` takes precedence over `names`.', 'type': 'string', 'optional': True}, {'name': 'names', 'order': 4, 'description': 'If provided, only anchors the GUI element when the opened thing matches one of the names. When reading",
    "metadata": {
      "concept_name": "GuiAnchor",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "GuiAnchor",
    "content": "when the opened thing matches one of the names. When reading an anchor, `names` is always populated.', 'type': {'complex_type': 'array', 'value': 'string'}, 'optional': True}, {'name': 'position', 'order': 1, 'description': '', 'type': 'defines.relative_gui_position', 'optional': False}, {'name': 'type', 'order': 2, 'description': 'If provided, only anchors the GUI element when the opened things type matches the type.', 'type': 'string', 'optional': True}]}",
    "metadata": {
      "concept_name": "GuiAnchor",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "GuiArrowSpecification",
    "content": "Concept: GuiArrowSpecification\nDescription: Used for specifying where a GUI arrow should point to.",
    "metadata": {
      "concept_name": "GuiArrowSpecification",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "GuiArrowSpecification",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'margin', 'order': 0, 'description': '', 'type': 'uint', 'optional': False}, {'name': 'type', 'order': 1, 'description': 'This determines which of the following fields will be required.', 'type': 'GuiArrowType', 'optional': False}], 'variant_parameter_groups': [{'name': 'crafting_queue', 'order': 2, 'description': '', 'parameters': [{'name': 'crafting_queueindex', 'order': 0, 'description': 'Index in the crafting queue to point to.', 'type':",
    "metadata": {
      "concept_name": "GuiArrowSpecification",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "GuiArrowSpecification",
    "content": "'Index in the crafting queue to point to.', 'type': 'uint', 'optional': False}]}, {'name': 'entity', 'order': 0, 'description': '', 'parameters': [{'name': 'entity', 'order': 0, 'description': '', 'type': 'LuaEntity', 'optional': False}]}, {'name': 'item_stack', 'order': 3, 'description': '', 'parameters': [{'name': 'inventory_index', 'order': 0, 'description': 'Which inventory the stack is in.', 'type': 'defines.inventory', 'optional': False}, {'name': 'item_stack_index', 'order': 1, 'description': 'Which",
    "metadata": {
      "concept_name": "GuiArrowSpecification",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "GuiArrowSpecification",
    "content": "{'name': 'item_stack_index', 'order': 1, 'description': 'Which stack to point to.', 'type': 'uint', 'optional': False}, {'name': 'source', 'order': 2, 'description': '', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'player'}, {'complex_type': 'literal', 'value': 'target'}, {'complex_type': 'literal', 'value': 'player-quickbar'}], 'full_format': False}, 'optional': False}]}, {'name': 'position', 'order': 1, 'description': '', 'parameters': [{'name': 'position', 'order':",
    "metadata": {
      "concept_name": "GuiArrowSpecification",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "GuiArrowSpecification",
    "content": "'description': '', 'parameters': [{'name': 'position', 'order': 0, 'description': '', 'type': 'MapPosition', 'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `type`:'}",
    "metadata": {
      "concept_name": "GuiArrowSpecification",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "GuiArrowType",
    "content": "Concept: GuiArrowType\nDescription: Used by [GuiArrowSpecification](runtime:GuiArrowSpecification).",
    "metadata": {
      "concept_name": "GuiArrowType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "GuiArrowType",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'nowhere', 'description': 'Will remove the arrow entirely.'}, {'complex_type': 'literal', 'value': 'goal', 'description': 'Will point to the current goal.'}, {'complex_type': 'literal', 'value': 'entity_info', 'description': ''}, {'complex_type': 'literal', 'value': 'active_window', 'description': ''}, {'complex_type': 'literal', 'value': 'entity', 'description': ''}, {'complex_type': 'literal', 'value': 'position',",
    "metadata": {
      "concept_name": "GuiArrowType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "GuiArrowType",
    "content": "''}, {'complex_type': 'literal', 'value': 'position', 'description': ''}, {'complex_type': 'literal', 'value': 'crafting_queue', 'description': ''}, {'complex_type': 'literal', 'value': 'item_stack', 'description': 'Will point to a given item stack in an inventory.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "GuiArrowType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "GuiDirection",
    "content": "Concept: GuiDirection\nDescription: Direction of a [LuaGuiElement's](runtime:LuaGuiElement::direction) layout.\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'horizontal', 'description': ''}, {'complex_type': 'literal', 'value': 'vertical', 'description': ''}], 'full_format': True}",
    "metadata": {
      "concept_name": "GuiDirection",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "GuiElementType",
    "content": "Concept: GuiElementType\nDescription:",
    "metadata": {
      "concept_name": "GuiElementType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "GuiElementType",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'button', 'description': 'A clickable element. Relevant event: [on_gui_click](runtime:on_gui_click)'}, {'complex_type': 'literal', 'value': 'sprite-button', 'description': 'A `button` that displays a sprite rather than text. Relevant event: [on_gui_click](runtime:on_gui_click)'}, {'complex_type': 'literal', 'value': 'checkbox', 'description': 'A clickable element with a check mark that can be turned off or on. Relevant",
    "metadata": {
      "concept_name": "GuiElementType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "GuiElementType",
    "content": "with a check mark that can be turned off or on. Relevant event: [on_gui_checked_state_changed](runtime:on_gui_checked_state_changed)'}, {'complex_type': 'literal', 'value': 'flow', 'description': 'An invisible container that lays out its children either horizontally or vertically.'}, {'complex_type': 'literal', 'value': 'frame', 'description': 'A non-transparent box that contains other elements. It can have a title (set via the `caption` attribute). Just like a `flow`, it lays out its children either",
    "metadata": {
      "concept_name": "GuiElementType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "GuiElementType",
    "content": "attribute). Just like a `flow`, it lays out its children either horizontally or vertically. Relevant event: [on_gui_location_changed](runtime:on_gui_location_changed)'}, {'complex_type': 'literal', 'value': 'label', 'description': 'A piece of text.'}, {'complex_type': 'literal', 'value': 'line', 'description': 'A horizontal or vertical separation line.'}, {'complex_type': 'literal', 'value': 'progressbar', 'description': 'A partially filled bar that can be used to indicate progress.'}, {'complex_type':",
    "metadata": {
      "concept_name": "GuiElementType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "GuiElementType",
    "content": "bar that can be used to indicate progress.'}, {'complex_type': 'literal', 'value': 'table', 'description': 'An invisible container that lays out its children in a specific number of columns. The width of each column is determined by the widest element it contains.'}, {'complex_type': 'literal', 'value': 'textfield', 'description': 'A single-line box the user can type into. Relevant events: [on_gui_text_changed](runtime:on_gui_text_changed), [on_gui_confirmed](runtime:on_gui_confirmed)'}, {'complex_type':",
    "metadata": {
      "concept_name": "GuiElementType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "GuiElementType",
    "content": "{'complex_type': 'literal', 'value': 'radiobutton', 'description': 'An element that is similar to a `checkbox`, but with a circular appearance. Clicking a selected radio button will not unselect it. Radio buttons are not linked to each other in any way. Relevant event: [on_gui_checked_state_changed](runtime:on_gui_checked_state_changed)'}, {'complex_type': 'literal', 'value': 'sprite', 'description': 'An element that shows an image.'}, {'complex_type': 'literal', 'value': 'scroll-pane', 'description': 'An",
    "metadata": {
      "concept_name": "GuiElementType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "GuiElementType",
    "content": "'literal', 'value': 'scroll-pane', 'description': 'An invisible element that is similar to a `flow`, but has the ability to show and use scroll bars.'}, {'complex_type': 'literal', 'value': 'drop-down', 'description': 'A drop-down containing strings of text. Relevant event: [on_gui_selection_state_changed](runtime:on_gui_selection_state_changed)'}, {'complex_type': 'literal', 'value': 'list-box', 'description': 'A list of strings, only one of which can be selected at a time. Shows a scroll bar if",
    "metadata": {
      "concept_name": "GuiElementType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "GuiElementType",
    "content": "one of which can be selected at a time. Shows a scroll bar if necessary. Relevant event: [on_gui_selection_state_changed](runtime:on_gui_selection_state_changed)'}, {'complex_type': 'literal', 'value': 'camera', 'description': 'A camera that shows the game at the given position on the given surface. It can visually track an [entity](runtime:LuaGuiElement::entity) that is set after the element has been created.'}, {'complex_type': 'literal', 'value': 'choose-elem-button', 'description': 'A button that lets",
    "metadata": {
      "concept_name": "GuiElementType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "GuiElementType",
    "content": "'choose-elem-button', 'description': 'A button that lets the player pick from a certain kind of prototype, with optional filtering. Relevant event: [on_gui_elem_changed](runtime:on_gui_elem_changed)'}, {'complex_type': 'literal', 'value': 'text-box', 'description': 'A multi-line `textfield`. Relevant event: [on_gui_text_changed](runtime:on_gui_text_changed)'}, {'complex_type': 'literal', 'value': 'slider', 'description': 'A horizontal number line which can be used to choose a number. Relevant event:",
    "metadata": {
      "concept_name": "GuiElementType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "GuiElementType",
    "content": "line which can be used to choose a number. Relevant event: [on_gui_value_changed](runtime:on_gui_value_changed)'}, {'complex_type': 'literal', 'value': 'minimap', 'description': 'A minimap preview, similar to the normal player minimap. It can visually track an [entity](runtime:LuaGuiElement::entity) that is set after the element has been created.'}, {'complex_type': 'literal', 'value': 'entity-preview', 'description': 'A preview of an entity. The [entity](runtime:LuaGuiElement::entity) has to be set after",
    "metadata": {
      "concept_name": "GuiElementType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "GuiElementType",
    "content": "The [entity](runtime:LuaGuiElement::entity) has to be set after the element has been created.'}, {'complex_type': 'literal', 'value': 'empty-widget', 'description': 'An empty element that just exists. The root GUI elements `screen` and `relative` are `empty-widget`s.'}, {'complex_type': 'literal', 'value': 'tabbed-pane', 'description': 'A collection of `tab`s and their contents. Relevant event: [on_gui_selected_tab_changed](runtime:on_gui_selected_tab_changed)'}, {'complex_type': 'literal', 'value': 'tab',",
    "metadata": {
      "concept_name": "GuiElementType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "GuiElementType",
    "content": "{'complex_type': 'literal', 'value': 'tab', 'description': 'A tab for use in a `tabbed-pane`.'}, {'complex_type': 'literal', 'value': 'switch', 'description': 'A switch with three possible states. Can have labels attached to either side. Relevant event: [on_gui_switch_state_changed](runtime:on_gui_switch_state_changed)'}], 'full_format': True}",
    "metadata": {
      "concept_name": "GuiElementType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "GuiLocation",
    "content": "Concept: GuiLocation\nDescription: Screen coordinates of a GUI element in a [LuaGui](runtime:LuaGui). This uses the same format as [TilePosition](runtime:TilePosition), meaning it can be specified either with or without explicit keys.",
    "metadata": {
      "concept_name": "GuiLocation",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "GuiLocation",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'table', 'parameters': [{'name': 'x', 'order': 0, 'description': '', 'type': 'int', 'optional': False}, {'name': 'y', 'order': 1, 'description': '', 'type': 'int', 'optional': False}]}, {'complex_type': 'tuple', 'values': ['int', 'int']}], 'full_format': False}",
    "metadata": {
      "concept_name": "GuiLocation",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "GunShift4Way",
    "content": "Concept: GunShift4Way\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'east', 'order': 1, 'description': '', 'type': 'Vector', 'optional': False}, {'name': 'north', 'order': 0, 'description': '', 'type': 'Vector', 'optional': False}, {'name': 'south', 'order': 2, 'description': '', 'type': 'Vector', 'optional': False}, {'name': 'west', 'order': 3, 'description': '', 'type': 'Vector', 'optional': False}]}",
    "metadata": {
      "concept_name": "GunShift4Way",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "HeatConnection",
    "content": "Concept: HeatConnection\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'direction', 'order': 1, 'description': '', 'type': 'defines.direction', 'optional': False}, {'name': 'position', 'order': 0, 'description': '', 'type': 'Vector', 'optional': False}]}",
    "metadata": {
      "concept_name": "HeatConnection",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "HeatSetting",
    "content": "Concept: HeatSetting\nDescription: The settings used by a heat-interface type entity.",
    "metadata": {
      "concept_name": "HeatSetting",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "HeatSetting",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'mode', 'order': 1, 'description': 'Defaults to `\"at-least\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'at-least'}, {'complex_type': 'literal', 'value': 'at-most'}, {'complex_type': 'literal', 'value': 'exactly'}, {'complex_type': 'literal', 'value': 'add'}, {'complex_type': 'literal', 'value': 'remove'}], 'full_format': False}, 'optional': True}, {'name': 'temperature', 'order': 0, 'description':",
    "metadata": {
      "concept_name": "HeatSetting",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "HeatSetting",
    "content": "True}, {'name': 'temperature', 'order': 0, 'description': 'The target temperature. Defaults to the minimum temperature of the heat buffer.', 'type': 'double', 'optional': True}]}",
    "metadata": {
      "concept_name": "HeatSetting",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "InfinityInventoryFilter",
    "content": "Concept: InfinityInventoryFilter\nDescription: A single filter used by an infinity-filters instance.",
    "metadata": {
      "concept_name": "InfinityInventoryFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "InfinityInventoryFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'count', 'order': 1, 'description': 'The count of the filter.', 'type': 'uint', 'optional': True}, {'name': 'index', 'order': 3, 'description': 'The index of this filter in the filters list. Not required when writing a filter.', 'type': 'uint', 'optional': False}, {'name': 'mode', 'order': 2, 'description': 'Defaults to `\"at-least\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'at-least'},",
    "metadata": {
      "concept_name": "InfinityInventoryFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "InfinityInventoryFilter",
    "content": "'options': [{'complex_type': 'literal', 'value': 'at-least'}, {'complex_type': 'literal', 'value': 'at-most'}, {'complex_type': 'literal', 'value': 'exactly'}], 'full_format': False}, 'optional': True}, {'name': 'name', 'order': 0, 'description': 'Name of the item.', 'type': 'string', 'optional': False}]}",
    "metadata": {
      "concept_name": "InfinityInventoryFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "InfinityPipeFilter",
    "content": "Concept: InfinityPipeFilter\nDescription: A single filter used by an infinity-pipe type entity.",
    "metadata": {
      "concept_name": "InfinityPipeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "InfinityPipeFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'mode', 'order': 3, 'description': 'Defaults to `\"at-least\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'at-least'}, {'complex_type': 'literal', 'value': 'at-most'}, {'complex_type': 'literal', 'value': 'exactly'}, {'complex_type': 'literal', 'value': 'add'}, {'complex_type': 'literal', 'value': 'remove'}], 'full_format': False}, 'optional': True}, {'name': 'name', 'order': 0, 'description': 'Name of",
    "metadata": {
      "concept_name": "InfinityPipeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "InfinityPipeFilter",
    "content": "True}, {'name': 'name', 'order': 0, 'description': 'Name of the fluid.', 'type': 'string', 'optional': False}, {'name': 'percentage', 'order': 1, 'description': \"The fill percentage the pipe (for example `0.5` for 50%). Can't be negative.\", 'type': 'double', 'optional': True}, {'name': 'temperature', 'order': 2, 'description': 'The temperature of the fluid. Defaults to the default/minimum temperature of the fluid.', 'type': 'double', 'optional': True}]}",
    "metadata": {
      "concept_name": "InfinityPipeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Ingredient",
    "content": "Concept: Ingredient\nDescription:",
    "metadata": {
      "concept_name": "Ingredient",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Ingredient",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'amount', 'order': 2, 'description': 'Amount of the item or fluid.', 'type': 'double', 'optional': False}, {'name': 'ignored_by_stats', 'order': 3, 'description': 'How much of this ingredient is ignored by statistics.', 'type': {'complex_type': 'union', 'options': ['uint', 'double'], 'full_format': False}, 'optional': True}, {'name': 'name', 'order': 1, 'description': 'Prototype name of the required item or fluid.', 'type': 'string',",
    "metadata": {
      "concept_name": "Ingredient",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Ingredient",
    "content": "name of the required item or fluid.', 'type': 'string', 'optional': False}, {'name': 'type', 'order': 0, 'description': '', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'item'}, {'complex_type': 'literal', 'value': 'fluid'}], 'full_format': False}, 'optional': False}], 'variant_parameter_groups': [{'name': 'fluid', 'order': 0, 'description': '', 'parameters': [{'name': 'maximum_temperature', 'order': 1, 'description': 'The maximum fluid temperature allowed.', 'type':",
    "metadata": {
      "concept_name": "Ingredient",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Ingredient",
    "content": "'The maximum fluid temperature allowed.', 'type': 'float', 'optional': True}, {'name': 'minimum_temperature', 'order': 0, 'description': 'The minimum fluid temperature required.', 'type': 'float', 'optional': True}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `type`:'}",
    "metadata": {
      "concept_name": "Ingredient",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "InserterCircuitConditions",
    "content": "Concept: InserterCircuitConditions\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'circuit', 'order': 0, 'description': '', 'type': 'CircuitCondition', 'optional': True}, {'name': 'logistics', 'order': 1, 'description': '', 'type': 'CircuitCondition', 'optional': True}]}",
    "metadata": {
      "concept_name": "InserterCircuitConditions",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "InventoryFilter",
    "content": "Concept: InventoryFilter\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'index', 'order': 0, 'description': 'Position of the corresponding filter slot.', 'type': 'uint', 'optional': False}, {'name': 'name', 'order': 1, 'description': 'Item prototype name of the item to filter.', 'type': 'string', 'optional': False}]}",
    "metadata": {
      "concept_name": "InventoryFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "InventoryIndex",
    "content": "Concept: InventoryIndex\nDescription: \nComplex_type: uint8",
    "metadata": {
      "concept_name": "InventoryIndex",
      "concept_type": "uint8"
    }
  },
  {
    "type": "concept",
    "name": "InventoryPosition",
    "content": "Concept: InventoryPosition\nDescription:",
    "metadata": {
      "concept_name": "InventoryPosition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "InventoryPosition",
    "content": "Description: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'count', 'order': 2, 'description': 'How many items to insert. Defaults to `1`.', 'type': 'ItemCountType', 'optional': True}, {'name': 'inventory', 'order': 0, 'description': 'The ID of the inventory to insert into.', 'type': 'defines.inventory', 'optional': False}, {'name': 'stack', 'order': 1, 'description': 'The stack index of the inventory to insert into.', 'type': 'ItemStackIndex', 'optional': False}]}",
    "metadata": {
      "concept_name": "InventoryPosition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemCountType",
    "content": "Concept: ItemCountType\nDescription: \nComplex_type: uint",
    "metadata": {
      "concept_name": "ItemCountType",
      "concept_type": "uint"
    }
  },
  {
    "type": "concept",
    "name": "ItemFilter",
    "content": "Concept: ItemFilter\nDescription: An item filter may be specified in two ways, either as a string which is an item prototype name or as a table.",
    "metadata": {
      "concept_name": "ItemFilter",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ItemFilter",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'table', 'parameters': [{'name': 'comparator', 'order': 2, 'description': 'The quality comparison type.', 'type': 'ComparatorString', 'optional': True}, {'name': 'name', 'order': 0, 'description': 'The item.', 'type': 'ItemID', 'optional': True}, {'name': 'quality', 'order': 1, 'description': 'The quality.', 'type': 'QualityID', 'optional': True}]}, 'string'], 'full_format': False}",
    "metadata": {
      "concept_name": "ItemFilter",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ItemID",
    "content": "Concept: ItemID\nDescription: An item prototype may be specified in one of four ways.\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'LuaItemPrototype', 'description': 'Item prototype.'}, {'complex_type': 'type', 'value': 'LuaItemStack', 'description': 'Non empty item stack.'}, {'complex_type': 'type', 'value': 'LuaItem', 'description': 'The item.'}, {'complex_type': 'type', 'value': 'string', 'description': 'The prototype name.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "ItemID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ItemIDAndQualityIDPair",
    "content": "Concept: ItemIDAndQualityIDPair\nDescription: An item prototype with optional quality specification.\nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'name', 'order': 0, 'description': 'Item prototype. Returns `LuaItemPrototype` when read.', 'type': 'ItemID', 'optional': False}, {'name': 'quality', 'order': 1, 'description': 'Quality prototype. Normal quality will be used if not specified. Returns `LuaQualityPrototype` when read.', 'type': 'QualityID', 'optional': True}]}",
    "metadata": {
      "concept_name": "ItemIDAndQualityIDPair",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemIDFilter",
    "content": "Concept: ItemIDFilter\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'comparator', 'order': 2, 'description': 'The quality comparison type.', 'type': 'ComparatorString', 'optional': True}, {'name': 'name', 'order': 0, 'description': 'The item name.', 'type': 'string', 'optional': False}, {'name': 'quality', 'order': 1, 'description': 'The name of the quality.', 'type': 'string', 'optional': True}]}",
    "metadata": {
      "concept_name": "ItemIDFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemInventoryPositions",
    "content": "Concept: ItemInventoryPositions\nDescription:",
    "metadata": {
      "concept_name": "ItemInventoryPositions",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemInventoryPositions",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'grid_count', 'order': 1, 'description': 'Defaults to `0`. Number of items to request for the equipment grid. When the items arrive they will be used to revive the first matching ghost equipment.', 'type': 'ItemCountType', 'optional': True}, {'name': 'in_inventory', 'order': 0, 'description': 'A list of stacks into which items should be inserted.', 'type': {'complex_type': 'array', 'value': 'InventoryPosition'}, 'optional': True}]}",
    "metadata": {
      "concept_name": "ItemInventoryPositions",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemLocationData",
    "content": "Concept: ItemLocationData\nDescription:",
    "metadata": {
      "concept_name": "ItemLocationData",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemLocationData",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'entity', 'order': 1, 'description': '', 'type': 'LuaEntity', 'optional': True}, {'name': 'force', 'order': 4, 'description': '', 'type': 'LuaForce', 'optional': False}, {'name': 'player', 'order': 2, 'description': '', 'type': 'LuaPlayer', 'optional': True}, {'name': 'position', 'order': 3, 'description': '', 'type': 'MapPosition', 'optional': False}, {'name': 'surface', 'order': 0, 'description': '', 'type': 'LuaSurface', 'optional':",
    "metadata": {
      "concept_name": "ItemLocationData",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemLocationData",
    "content": "0, 'description': '', 'type': 'LuaSurface', 'optional': False}]}",
    "metadata": {
      "concept_name": "ItemLocationData",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemProduct",
    "content": "Concept: ItemProduct\nDescription:",
    "metadata": {
      "concept_name": "ItemProduct",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemProduct",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'amount', 'order': 2, 'description': 'Amount of the item to give. If not returned, `amount_min` and `amount_max` will be present instead.', 'type': 'uint16', 'optional': True}, {'name': 'amount_max', 'order': 4, 'description': 'Maximum amount of the item to give. Not returned if `amount` is returned.', 'type': 'uint16', 'optional': True}, {'name': 'amount_min', 'order': 3, 'description': 'Minimal amount of the item to give. Not returned if",
    "metadata": {
      "concept_name": "ItemProduct",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemProduct",
    "content": "'Minimal amount of the item to give. Not returned if `amount` is returned.', 'type': 'uint16', 'optional': True}, {'name': 'extra_count_fraction', 'order': 8, 'description': 'Probability that a craft will yield one additional product. Also applies to bonus crafts caused by productivity.', 'type': 'float', 'optional': True}, {'name': 'ignored_by_productivity', 'order': 7, 'description': 'How much of this product is ignored by productivity.', 'type': 'uint16', 'optional': True}, {'name': 'ignored_by_stats',",
    "metadata": {
      "concept_name": "ItemProduct",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemProduct",
    "content": "'uint16', 'optional': True}, {'name': 'ignored_by_stats', 'order': 6, 'description': 'How much of this product is ignored by statistics.', 'type': 'uint16', 'optional': True}, {'name': 'name', 'order': 1, 'description': 'Prototype name of the result.', 'type': 'string', 'optional': False}, {'name': 'percent_spoiled', 'order': 9, 'description': '', 'type': 'float', 'optional': True}, {'name': 'probability', 'order': 5, 'description': 'A value in range `[0, 1]`. Item is only given with this probability;",
    "metadata": {
      "concept_name": "ItemProduct",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemProduct",
    "content": "in range `[0, 1]`. Item is only given with this probability; otherwise no product is produced.', 'type': 'double', 'optional': False}, {'name': 'type', 'order': 0, 'description': '', 'type': {'complex_type': 'literal', 'value': 'item'}, 'optional': False}]}",
    "metadata": {
      "concept_name": "ItemProduct",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemPrototypeFilter",
    "content": "Concept: ItemPrototypeFilter\nDescription:",
    "metadata": {
      "concept_name": "ItemPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemPrototypeFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'tool'}, {'complex_type': 'literal', 'value': 'mergeable'}, {'complex_type': 'literal', 'value': 'hidden'}, {'complex_type': 'literal', 'value': 'hidden-in-factoriopedia'}, {'complex_type': 'literal', 'value': 'is-parameter'}, {'complex_type': 'literal', 'value': 'item-with-inventory'},",
    "metadata": {
      "concept_name": "ItemPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemPrototypeFilter",
    "content": "{'complex_type': 'literal', 'value': 'item-with-inventory'}, {'complex_type': 'literal', 'value': 'selection-tool'}, {'complex_type': 'literal', 'value': 'item-with-label'}, {'complex_type': 'literal', 'value': 'has-rocket-launch-products'}, {'complex_type': 'literal', 'value': 'fuel'}, {'complex_type': 'literal', 'value': 'place-result'}, {'complex_type': 'literal', 'value': 'burnt-result'}, {'complex_type': 'literal', 'value': 'place-as-tile'}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "ItemPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemPrototypeFilter",
    "content": "'value': 'place-as-tile'}, {'complex_type': 'literal', 'value': 'placed-as-equipment-result'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'flag'}, {'complex_type': 'literal', 'value': 'subgroup'}, {'complex_type': 'literal', 'value': 'fuel-category'}, {'complex_type': 'literal', 'value': 'stack-size'}, {'complex_type': 'literal', 'value': 'fuel-value'}, {'complex_type': 'literal', 'value': 'fuel-acceleration-multiplier'},",
    "metadata": {
      "concept_name": "ItemPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemPrototypeFilter",
    "content": "'literal', 'value': 'fuel-acceleration-multiplier'}, {'complex_type': 'literal', 'value': 'fuel-top-speed-multiplier'}, {'complex_type': 'literal', 'value': 'fuel-emissions-multiplier'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"`",
    "metadata": {
      "concept_name": "ItemPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemPrototypeFilter",
    "content": "Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'burnt-result', 'order': 1, 'description': '', 'parameters': [{'name': 'elem_filters', 'order': 0, 'description': 'Filters for the burnt result.', 'type': {'complex_type': 'array', 'value':",
    "metadata": {
      "concept_name": "ItemPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemPrototypeFilter",
    "content": "the burnt result.', 'type': {'complex_type': 'array', 'value': 'ItemPrototypeFilter'}, 'optional': True}]}, {'name': 'flag', 'order': 6, 'description': '', 'parameters': [{'name': 'flag', 'order': 0, 'description': '', 'type': 'ItemPrototypeFlag', 'optional': False}]}, {'name': 'fuel-acceleration-multiplier', 'order': 11, 'description': '', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The",
    "metadata": {
      "concept_name": "ItemPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemPrototypeFilter",
    "content": "False}, {'name': 'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'double', 'optional': False}]}, {'name': 'fuel-category', 'order': 8, 'description': '', 'parameters': [{'name': 'fuel-category', 'order': 0, 'description': 'A [LuaFuelCategoryPrototype](runtime:LuaFuelCategoryPrototype) name', 'type': 'string', 'optional': False}]}, {'name': 'fuel-emissions-multiplier', 'order': 13, 'description': '', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type':",
    "metadata": {
      "concept_name": "ItemPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemPrototypeFilter",
    "content": "[{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'double', 'optional': False}]}, {'name': 'fuel-top-speed-multiplier', 'order': 12, 'description': '', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'double',",
    "metadata": {
      "concept_name": "ItemPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemPrototypeFilter",
    "content": "'The value to compare against.', 'type': 'double', 'optional': False}]}, {'name': 'fuel-value', 'order': 10, 'description': '', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'double', 'optional': False}]}, {'name': 'name', 'order': 4, 'description': 'For use within nested filters such as the `has-product-item` filter of",
    "metadata": {
      "concept_name": "ItemPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemPrototypeFilter",
    "content": "within nested filters such as the `has-product-item` filter of array[[RecipePrototypeFilter](runtime:RecipePrototypeFilter)].\\n\\nTo get a specific prototype by name, see [LuaPrototypes::item](runtime:LuaPrototypes::item).', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name, or list of acceptable names.', 'type': {'complex_type': 'union', 'options': ['string', {'complex_type': 'array', 'value': 'string'}], 'full_format': False}, 'optional': False}]}, {'name': 'place-as-tile',",
    "metadata": {
      "concept_name": "ItemPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemPrototypeFilter",
    "content": "False}, 'optional': False}]}, {'name': 'place-as-tile', 'order': 2, 'description': '', 'parameters': [{'name': 'elem_filters', 'order': 0, 'description': 'Filters for the placed tile.', 'type': {'complex_type': 'array', 'value': 'TilePrototypeFilter'}, 'optional': True}]}, {'name': 'place-result', 'order': 0, 'description': '', 'parameters': [{'name': 'elem_filters', 'order': 0, 'description': 'Filters for the place result.', 'type': {'complex_type': 'array', 'value': 'EntityPrototypeFilter'}, 'optional':",
    "metadata": {
      "concept_name": "ItemPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemPrototypeFilter",
    "content": "'array', 'value': 'EntityPrototypeFilter'}, 'optional': True}]}, {'name': 'placed-as-equipment-result', 'order': 3, 'description': '', 'parameters': [{'name': 'elem_filters', 'order': 0, 'description': 'Filters for the placed equipment.', 'type': {'complex_type': 'array', 'value': 'EquipmentPrototypeFilter'}, 'optional': True}]}, {'name': 'stack-size', 'order': 9, 'description': 'Usage example:\\n\\n```\\nprototypes.get_item_filtered({{filter = \"stack-size\", comparison = \">\", value = 20}, {filter =",
    "metadata": {
      "concept_name": "ItemPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemPrototypeFilter",
    "content": "= \"stack-size\", comparison = \">\", value = 20}, {filter = \"stack-size\", comparison = \"<\", value = 100, mode = \"and\"}})\\n```', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'uint', 'optional': False}]}, {'name': 'subgroup', 'order': 7, 'description': '', 'parameters': [{'name': 'subgroup', 'order': 0, 'description': 'A [LuaGroup](runtime:LuaGroup)",
    "metadata": {
      "concept_name": "ItemPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemPrototypeFilter",
    "content": "'order': 0, 'description': 'A [LuaGroup](runtime:LuaGroup) (subgroup) name', 'type': 'string', 'optional': False}]}, {'name': 'type', 'order': 5, 'description': 'Usage example: \\n```\\nprototypes.get_item_filtered({{filter = \"type\", type = \"armor\"}})\\n```', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type, or a list of acceptable types.', 'type': {'complex_type': 'union', 'options': ['string', {'complex_type': 'array', 'value': 'string'}], 'full_format': False}, 'optional':",
    "metadata": {
      "concept_name": "ItemPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemPrototypeFilter",
    "content": "'value': 'string'}], 'full_format': False}, 'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "ItemPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemPrototypeFlag",
    "content": "Concept: ItemPrototypeFlag\nDescription: A [string](runtime:string) specifying an item prototype flag.",
    "metadata": {
      "concept_name": "ItemPrototypeFlag",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ItemPrototypeFlag",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'draw-logistic-overlay', 'description': 'Determines whether the logistics areas of roboports should be drawn when holding this item. Used by the deconstruction planner by default.'}, {'complex_type': 'literal', 'value': 'excluded-from-trash-unrequested', 'description': 'If this item is skipped by the trash-unrequested logic.'}, {'complex_type': 'literal', 'value': 'always-show', 'description': 'Always shows the item in",
    "metadata": {
      "concept_name": "ItemPrototypeFlag",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ItemPrototypeFlag",
    "content": "'always-show', 'description': 'Always shows the item in the logistic requests and filters GUIs (among others) even when the recipe for that item is locked.'}, {'complex_type': 'literal', 'value': 'hide-from-bonus-gui', 'description': 'Hides the item from the bonus GUI.'}, {'complex_type': 'literal', 'value': 'hide-from-fuel-tooltip', 'description': \"Hides the item from the tooltip that's shown when hovering over a burner inventory.\"}, {'complex_type': 'literal', 'value': 'not-stackable', 'description':",
    "metadata": {
      "concept_name": "ItemPrototypeFlag",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ItemPrototypeFlag",
    "content": "'literal', 'value': 'not-stackable', 'description': 'Prevents the item from being stacked. It also prevents the item from stacking in assembling machine input slots, which can otherwise exceed the item stack size if required by the recipe. Additionally, the item does not show an item count when in the cursor.'}, {'complex_type': 'literal', 'value': 'primary-place-result', 'description': 'Makes construction bots prefer this item when building the entity specified by its `place_result`.'}, {'complex_type':",
    "metadata": {
      "concept_name": "ItemPrototypeFlag",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ItemPrototypeFlag",
    "content": "the entity specified by its `place_result`.'}, {'complex_type': 'literal', 'value': 'mod-openable', 'description': 'Allows the item to be opened by the player, firing the `on_mod_item_opened` event. Only has an effect for selection tool items.'}, {'complex_type': 'literal', 'value': 'only-in-cursor', 'description': \"Makes it so the item is deleted when clearing the cursor, instead of being put into the player's inventory. The copy-paste tools use this by default, for example.\"}, {'complex_type': 'literal',",
    "metadata": {
      "concept_name": "ItemPrototypeFlag",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ItemPrototypeFlag",
    "content": "this by default, for example.\"}, {'complex_type': 'literal', 'value': 'spawnable', 'description': 'Allows the item to be spawned by a quickbar shortcut or custom input.'}, {'complex_type': 'literal', 'value': 'spoil-result', 'description': ''}, {'complex_type': 'literal', 'value': 'ignore-spoil-time-modifier', 'description': 'Controls whether the spoil time ignores the spoil time modifier in the [DifficultySettings](runtime:DifficultySettings).'}], 'full_format': True}",
    "metadata": {
      "concept_name": "ItemPrototypeFlag",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ItemPrototypeFlags",
    "content": "Concept: ItemPrototypeFlags\nDescription: A set of flags. Active flags are in the dictionary as `true`, while inactive flags aren't present at all.\n\nBy default, none of these flags are set.\nComplex_type: {'complex_type': 'dictionary', 'key': 'ItemPrototypeFlag', 'value': {'complex_type': 'literal', 'value': True}}",
    "metadata": {
      "concept_name": "ItemPrototypeFlags",
      "concept_type": "dictionary"
    }
  },
  {
    "type": "concept",
    "name": "ItemStackDefinition",
    "content": "Concept: ItemStackDefinition\nDescription:",
    "metadata": {
      "concept_name": "ItemStackDefinition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemStackDefinition",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'ammo', 'order': 5, 'description': 'Amount of ammo in the ammo items in the stack.', 'type': 'float', 'optional': True}, {'name': 'count', 'order': 1, 'description': 'Number of items the stack holds. Defaults to `1`.', 'type': 'ItemCountType', 'optional': True}, {'name': 'custom_description', 'order': 7, 'description': 'Description of the items with tags in the stack.', 'type': 'LocalisedString', 'optional': True}, {'name': 'durability',",
    "metadata": {
      "concept_name": "ItemStackDefinition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemStackDefinition",
    "content": "'LocalisedString', 'optional': True}, {'name': 'durability', 'order': 4, 'description': 'Durability of the tool items in the stack.', 'type': 'double', 'optional': True}, {'name': 'health', 'order': 3, 'description': 'Health of the items in the stack. Defaults to `1.0`.', 'type': 'float', 'optional': True}, {'name': 'name', 'order': 0, 'description': 'Prototype name of the item the stack holds.', 'type': 'string', 'optional': False}, {'name': 'quality', 'order': 2, 'description': 'Quality of the item the",
    "metadata": {
      "concept_name": "ItemStackDefinition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemStackDefinition",
    "content": "'quality', 'order': 2, 'description': 'Quality of the item the stack holds. Defaults to `\"normal\"`.', 'type': 'string', 'optional': True}, {'name': 'spoil_percent', 'order': 8, 'description': 'The spoil percent for this item if the item can spoil. Defaults to `0`.', 'type': 'double', 'optional': True}, {'name': 'tags', 'order': 6, 'description': 'Tags of the items with tags in the stack.', 'type': {'complex_type': 'array', 'value': 'string'}, 'optional': True}]}",
    "metadata": {
      "concept_name": "ItemStackDefinition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemStackIdentification",
    "content": "Concept: ItemStackIdentification\nDescription: An item may be specified in one of two ways.\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'SimpleItemStack', 'description': ''}, {'complex_type': 'type', 'value': 'LuaItemStack', 'description': ''}], 'full_format': True}",
    "metadata": {
      "concept_name": "ItemStackIdentification",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ItemStackIndex",
    "content": "Concept: ItemStackIndex\nDescription: \nComplex_type: uint16",
    "metadata": {
      "concept_name": "ItemStackIndex",
      "concept_type": "uint16"
    }
  },
  {
    "type": "concept",
    "name": "ItemStackLocation",
    "content": "Concept: ItemStackLocation\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'inventory', 'order': 0, 'description': '', 'type': 'defines.inventory', 'optional': False}, {'name': 'slot', 'order': 1, 'description': '', 'type': 'uint', 'optional': False}]}",
    "metadata": {
      "concept_name": "ItemStackLocation",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemWithQualityCounts",
    "content": "Concept: ItemWithQualityCounts\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'count', 'order': 1, 'description': 'The number of items.', 'type': 'uint', 'optional': False}, {'name': 'name', 'order': 0, 'description': 'Name of the item prototype.', 'type': 'string', 'optional': False}, {'name': 'quality', 'order': 2, 'description': \"Name of the item's quality prototype.\", 'type': 'string', 'optional': False}]}",
    "metadata": {
      "concept_name": "ItemWithQualityCounts",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ItemWithQualityID",
    "content": "Concept: ItemWithQualityID\nDescription: An item prototype with optional quality specification. Can be specified in one of four ways.",
    "metadata": {
      "concept_name": "ItemWithQualityID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ItemWithQualityID",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'LuaItemStack', 'description': 'The item stack. Both prototype and quality of the item stack will be used.'}, {'complex_type': 'type', 'value': 'LuaItemPrototype', 'description': 'The item prototype. Normal quality will be used.'}, {'complex_type': 'type', 'value': 'string', 'description': 'The prototype name. Normal quality will be used.'}, {'complex_type': 'type', 'value': 'ItemIDAndQualityIDPair', 'description': 'A",
    "metadata": {
      "concept_name": "ItemWithQualityID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ItemWithQualityID",
    "content": "'type', 'value': 'ItemIDAndQualityIDPair', 'description': 'A table of entity prototype and quality.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "ItemWithQualityID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "Concept: LinkedGameControl\nDescription: The internal name of a game control (key binding).",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'move-up', 'description': ''}, {'complex_type': 'literal', 'value': 'move-down', 'description': ''}, {'complex_type': 'literal', 'value': 'move-left', 'description': ''}, {'complex_type': 'literal', 'value': 'move-right', 'description': ''}, {'complex_type': 'literal', 'value': 'open-character-gui', 'description': ''}, {'complex_type': 'literal', 'value': 'open-gui', 'description': ''}, {'complex_type': 'literal',",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "'open-gui', 'description': ''}, {'complex_type': 'literal', 'value': 'confirm-gui', 'description': ''}, {'complex_type': 'literal', 'value': 'toggle-free-cursor', 'description': ''}, {'complex_type': 'literal', 'value': 'mine', 'description': ''}, {'complex_type': 'literal', 'value': 'build', 'description': ''}, {'complex_type': 'literal', 'value': 'build-ghost', 'description': ''}, {'complex_type': 'literal', 'value': 'super-forced-build', 'description': ''}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "'description': ''}, {'complex_type': 'literal', 'value': 'clear-cursor', 'description': ''}, {'complex_type': 'literal', 'value': 'pipette', 'description': ''}, {'complex_type': 'literal', 'value': 'rotate', 'description': ''}, {'complex_type': 'literal', 'value': 'reverse-rotate', 'description': ''}, {'complex_type': 'literal', 'value': 'flip-horizontal', 'description': ''}, {'complex_type': 'literal', 'value': 'flip-vertical', 'description': ''}, {'complex_type': 'literal', 'value': 'pick-items',",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "''}, {'complex_type': 'literal', 'value': 'pick-items', 'description': ''}, {'complex_type': 'literal', 'value': 'drop-cursor', 'description': ''}, {'complex_type': 'literal', 'value': 'show-info', 'description': ''}, {'complex_type': 'literal', 'value': 'shoot-enemy', 'description': ''}, {'complex_type': 'literal', 'value': 'shoot-selected', 'description': ''}, {'complex_type': 'literal', 'value': 'next-weapon', 'description': ''}, {'complex_type': 'literal', 'value': 'toggle-driving', 'description': ''},",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "'literal', 'value': 'toggle-driving', 'description': ''}, {'complex_type': 'literal', 'value': 'zoom-in', 'description': ''}, {'complex_type': 'literal', 'value': 'zoom-out', 'description': ''}, {'complex_type': 'literal', 'value': 'use-item', 'description': ''}, {'complex_type': 'literal', 'value': 'alternative-use-item', 'description': ''}, {'complex_type': 'literal', 'value': 'toggle-console', 'description': ''}, {'complex_type': 'literal', 'value': 'copy-entity-settings', 'description': ''},",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "'literal', 'value': 'copy-entity-settings', 'description': ''}, {'complex_type': 'literal', 'value': 'paste-entity-settings', 'description': ''}, {'complex_type': 'literal', 'value': 'controller-gui-logistics-tab', 'description': ''}, {'complex_type': 'literal', 'value': 'controller-gui-character-tab', 'description': ''}, {'complex_type': 'literal', 'value': 'controller-gui-crafting-tab', 'description': ''}, {'complex_type': 'literal', 'value': 'toggle-rail-layer', 'description': ''}, {'complex_type':",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "'toggle-rail-layer', 'description': ''}, {'complex_type': 'literal', 'value': 'select-for-blueprint', 'description': ''}, {'complex_type': 'literal', 'value': 'select-for-cancel-deconstruct', 'description': ''}, {'complex_type': 'literal', 'value': 'select-for-super-forced-deconstruct', 'description': ''}, {'complex_type': 'literal', 'value': 'reverse-select', 'description': ''}, {'complex_type': 'literal', 'value': 'alt-reverse-select', 'description': ''}, {'complex_type': 'literal', 'value': 'deselect',",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "''}, {'complex_type': 'literal', 'value': 'deselect', 'description': ''}, {'complex_type': 'literal', 'value': 'cycle-blueprint-forwards', 'description': ''}, {'complex_type': 'literal', 'value': 'cycle-blueprint-backwards', 'description': ''}, {'complex_type': 'literal', 'value': 'focus-search', 'description': ''}, {'complex_type': 'literal', 'value': 'larger-terrain-building-area', 'description': ''}, {'complex_type': 'literal', 'value': 'smaller-terrain-building-area', 'description': ''},",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "'value': 'smaller-terrain-building-area', 'description': ''}, {'complex_type': 'literal', 'value': 'remove-pole-cables', 'description': ''}, {'complex_type': 'literal', 'value': 'build-with-obstacle-avoidance', 'description': ''}, {'complex_type': 'literal', 'value': 'add-station', 'description': ''}, {'complex_type': 'literal', 'value': 'add-temporary-station', 'description': ''}, {'complex_type': 'literal', 'value': 'rename-all', 'description': ''}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "'description': ''}, {'complex_type': 'literal', 'value': 'fast-wait-condition', 'description': ''}, {'complex_type': 'literal', 'value': 'drag-map', 'description': ''}, {'complex_type': 'literal', 'value': 'move-tag', 'description': ''}, {'complex_type': 'literal', 'value': 'place-in-chat', 'description': ''}, {'complex_type': 'literal', 'value': 'place-ping', 'description': ''}, {'complex_type': 'literal', 'value': 'pin', 'description': ''}, {'complex_type': 'literal', 'value': 'activate-tooltip',",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "''}, {'complex_type': 'literal', 'value': 'activate-tooltip', 'description': ''}, {'complex_type': 'literal', 'value': 'next-surface', 'description': ''}, {'complex_type': 'literal', 'value': 'previous-surface', 'description': ''}, {'complex_type': 'literal', 'value': 'cycle-quality-up', 'description': ''}, {'complex_type': 'literal', 'value': 'cycle-quality-down', 'description': ''}, {'complex_type': 'literal', 'value': 'craft', 'description': ''}, {'complex_type': 'literal', 'value': 'craft-5',",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "''}, {'complex_type': 'literal', 'value': 'craft-5', 'description': ''}, {'complex_type': 'literal', 'value': 'craft-all', 'description': ''}, {'complex_type': 'literal', 'value': 'cancel-craft', 'description': ''}, {'complex_type': 'literal', 'value': 'cancel-craft-5', 'description': ''}, {'complex_type': 'literal', 'value': 'cancel-craft-all', 'description': ''}, {'complex_type': 'literal', 'value': 'pick-item', 'description': ''}, {'complex_type': 'literal', 'value': 'stack-transfer', 'description':",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "'literal', 'value': 'stack-transfer', 'description': ''}, {'complex_type': 'literal', 'value': 'inventory-transfer', 'description': ''}, {'complex_type': 'literal', 'value': 'fast-entity-transfer', 'description': ''}, {'complex_type': 'literal', 'value': 'cursor-split', 'description': ''}, {'complex_type': 'literal', 'value': 'stack-split', 'description': ''}, {'complex_type': 'literal', 'value': 'inventory-split', 'description': ''}, {'complex_type': 'literal', 'value': 'fast-entity-split', 'description':",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "'literal', 'value': 'fast-entity-split', 'description': ''}, {'complex_type': 'literal', 'value': 'toggle-filter', 'description': ''}, {'complex_type': 'literal', 'value': 'open-item', 'description': ''}, {'complex_type': 'literal', 'value': 'copy-inventory-filter', 'description': ''}, {'complex_type': 'literal', 'value': 'paste-inventory-filter', 'description': ''}, {'complex_type': 'literal', 'value': 'show-quick-panel', 'description': ''}, {'complex_type': 'literal', 'value': 'next-quick-panel-page',",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "{'complex_type': 'literal', 'value': 'next-quick-panel-page', 'description': ''}, {'complex_type': 'literal', 'value': 'previous-quick-panel-page', 'description': ''}, {'complex_type': 'literal', 'value': 'next-quick-panel-tab', 'description': ''}, {'complex_type': 'literal', 'value': 'previous-quick-panel-tab', 'description': ''}, {'complex_type': 'literal', 'value': 'rotate-active-quick-bars', 'description': ''}, {'complex_type': 'literal', 'value': 'next-active-quick-bar', 'description': ''},",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "'value': 'next-active-quick-bar', 'description': ''}, {'complex_type': 'literal', 'value': 'previous-active-quick-bar', 'description': ''}, {'complex_type': 'literal', 'value': 'quick-bar-button-1', 'description': ''}, {'complex_type': 'literal', 'value': 'quick-bar-button-2', 'description': ''}, {'complex_type': 'literal', 'value': 'quick-bar-button-3', 'description': ''}, {'complex_type': 'literal', 'value': 'quick-bar-button-4', 'description': ''}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "'description': ''}, {'complex_type': 'literal', 'value': 'quick-bar-button-5', 'description': ''}, {'complex_type': 'literal', 'value': 'quick-bar-button-6', 'description': ''}, {'complex_type': 'literal', 'value': 'quick-bar-button-7', 'description': ''}, {'complex_type': 'literal', 'value': 'quick-bar-button-8', 'description': ''}, {'complex_type': 'literal', 'value': 'quick-bar-button-9', 'description': ''}, {'complex_type': 'literal', 'value': 'quick-bar-button-10', 'description': ''}, {'complex_type':",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "'quick-bar-button-10', 'description': ''}, {'complex_type': 'literal', 'value': 'quick-bar-button-1-secondary', 'description': ''}, {'complex_type': 'literal', 'value': 'quick-bar-button-2-secondary', 'description': ''}, {'complex_type': 'literal', 'value': 'quick-bar-button-3-secondary', 'description': ''}, {'complex_type': 'literal', 'value': 'quick-bar-button-4-secondary', 'description': ''}, {'complex_type': 'literal', 'value': 'quick-bar-button-5-secondary', 'description': ''}, {'complex_type':",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "'description': ''}, {'complex_type': 'literal', 'value': 'quick-bar-button-6-secondary', 'description': ''}, {'complex_type': 'literal', 'value': 'quick-bar-button-7-secondary', 'description': ''}, {'complex_type': 'literal', 'value': 'quick-bar-button-8-secondary', 'description': ''}, {'complex_type': 'literal', 'value': 'quick-bar-button-9-secondary', 'description': ''}, {'complex_type': 'literal', 'value': 'quick-bar-button-10-secondary', 'description': ''}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "'description': ''}, {'complex_type': 'literal', 'value': 'action-bar-select-page-1', 'description': ''}, {'complex_type': 'literal', 'value': 'action-bar-select-page-2', 'description': ''}, {'complex_type': 'literal', 'value': 'action-bar-select-page-3', 'description': ''}, {'complex_type': 'literal', 'value': 'action-bar-select-page-4', 'description': ''}, {'complex_type': 'literal', 'value': 'action-bar-select-page-5', 'description': ''}, {'complex_type': 'literal', 'value': 'action-bar-select-page-6',",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "'literal', 'value': 'action-bar-select-page-6', 'description': ''}, {'complex_type': 'literal', 'value': 'action-bar-select-page-7', 'description': ''}, {'complex_type': 'literal', 'value': 'action-bar-select-page-8', 'description': ''}, {'complex_type': 'literal', 'value': 'action-bar-select-page-9', 'description': ''}, {'complex_type': 'literal', 'value': 'action-bar-select-page-10', 'description': ''}, {'complex_type': 'literal', 'value': 'copy', 'description': ''}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "'description': ''}, {'complex_type': 'literal', 'value': 'cut', 'description': ''}, {'complex_type': 'literal', 'value': 'paste', 'description': ''}, {'complex_type': 'literal', 'value': 'cycle-clipboard-forwards', 'description': ''}, {'complex_type': 'literal', 'value': 'cycle-clipboard-backwards', 'description': ''}, {'complex_type': 'literal', 'value': 'undo', 'description': ''}, {'complex_type': 'literal', 'value': 'redo', 'description': ''}, {'complex_type': 'literal', 'value': 'toggle-menu',",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "''}, {'complex_type': 'literal', 'value': 'toggle-menu', 'description': ''}, {'complex_type': 'literal', 'value': 'toggle-map', 'description': ''}, {'complex_type': 'literal', 'value': 'close-menu', 'description': ''}, {'complex_type': 'literal', 'value': 'open-technology-gui', 'description': ''}, {'complex_type': 'literal', 'value': 'production-statistics', 'description': ''}, {'complex_type': 'literal', 'value': 'logistic-networks', 'description': ''}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "'description': ''}, {'complex_type': 'literal', 'value': 'toggle-blueprint-library', 'description': ''}, {'complex_type': 'literal', 'value': 'open-trains-gui', 'description': ''}, {'complex_type': 'literal', 'value': 'open-factoriopedia', 'description': ''}, {'complex_type': 'literal', 'value': 'back', 'description': ''}, {'complex_type': 'literal', 'value': 'forward', 'description': ''}, {'complex_type': 'literal', 'value': 'pause-game', 'description': ''}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "'description': ''}, {'complex_type': 'literal', 'value': 'confirm-message', 'description': ''}, {'complex_type': 'literal', 'value': 'previous-technology', 'description': ''}, {'complex_type': 'literal', 'value': 'previous-mod', 'description': ''}, {'complex_type': 'literal', 'value': 'connect-train', 'description': ''}, {'complex_type': 'literal', 'value': 'disconnect-train', 'description': ''}, {'complex_type': 'literal', 'value': 'submit-feedback', 'description': ''}, {'complex_type': 'literal',",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "'description': ''}, {'complex_type': 'literal', 'value': 'editor-next-variation', 'description': ''}, {'complex_type': 'literal', 'value': 'editor-previous-variation', 'description': ''}, {'complex_type': 'literal', 'value': 'editor-clone-item', 'description': ''}, {'complex_type': 'literal', 'value': 'editor-delete-item', 'description': ''}, {'complex_type': 'literal', 'value': 'editor-toggle-pause', 'description': ''}, {'complex_type': 'literal', 'value': 'editor-tick-once', 'description': ''},",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "'literal', 'value': 'editor-tick-once', 'description': ''}, {'complex_type': 'literal', 'value': 'editor-speed-up', 'description': ''}, {'complex_type': 'literal', 'value': 'editor-speed-down', 'description': ''}, {'complex_type': 'literal', 'value': 'editor-reset-speed', 'description': ''}, {'complex_type': 'literal', 'value': 'editor-set-clone-brush-source', 'description': ''}, {'complex_type': 'literal', 'value': 'editor-set-clone-brush-destination', 'description': ''}, {'complex_type': 'literal',",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "'description': ''}, {'complex_type': 'literal', 'value': 'editor-switch-to-surface', 'description': ''}, {'complex_type': 'literal', 'value': 'editor-remove-scripting-object', 'description': ''}, {'complex_type': 'literal', 'value': 'debug-toggle-atlas-gui', 'description': ''}, {'complex_type': 'literal', 'value': 'debug-toggle-gui-visibility', 'description': ''}, {'complex_type': 'literal', 'value': 'debug-toggle-debug-settings', 'description': ''}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "'description': ''}, {'complex_type': 'literal', 'value': 'debug-toggle-basic', 'description': ''}, {'complex_type': 'literal', 'value': 'debug-reset-zoom', 'description': ''}, {'complex_type': 'literal', 'value': 'debug-reset-zoom-2x', 'description': ''}, {'complex_type': 'literal', 'value': 'toggle-gui-debug', 'description': ''}, {'complex_type': 'literal', 'value': 'toggle-gui-style-view', 'description': ''}, {'complex_type': 'literal', 'value': 'toggle-gui-shadows', 'description': ''}, {'complex_type':",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "'toggle-gui-shadows', 'description': ''}, {'complex_type': 'literal', 'value': 'toggle-gui-glows', 'description': ''}, {'complex_type': 'literal', 'value': 'open-prototypes-gui', 'description': ''}, {'complex_type': 'literal', 'value': 'open-prototype-explorer-gui', 'description': ''}, {'complex_type': 'literal', 'value': 'increase-ui-scale', 'description': ''}, {'complex_type': 'literal', 'value': 'decrease-ui-scale', 'description': ''}, {'complex_type': 'literal', 'value': 'reset-ui-scale',",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "''}, {'complex_type': 'literal', 'value': 'reset-ui-scale', 'description': ''}, {'complex_type': 'literal', 'value': 'slash-editor', 'description': ''}, {'complex_type': 'literal', 'value': 'toggle-entity', 'description': ''}, {'complex_type': 'literal', 'value': 'next-player-in-replay', 'description': ''}, {'complex_type': 'literal', 'value': 'move-blueprint-absolute-grid-up', 'description': ''}, {'complex_type': 'literal', 'value': 'move-blueprint-absolute-grid-down', 'description': ''}, {'complex_type':",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "'description': ''}, {'complex_type': 'literal', 'value': 'move-blueprint-absolute-grid-left', 'description': ''}, {'complex_type': 'literal', 'value': 'move-blueprint-absolute-grid-right', 'description': ''}, {'complex_type': 'literal', 'value': 'move-blueprint-entities-up', 'description': ''}, {'complex_type': 'literal', 'value': 'move-blueprint-entities-down', 'description': ''}, {'complex_type': 'literal', 'value': 'move-blueprint-entities-left', 'description': ''}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LinkedGameControl",
    "content": "'description': ''}, {'complex_type': 'literal', 'value': 'move-blueprint-entities-right', 'description': ''}, {'complex_type': 'literal', 'value': 'play-next-track', 'description': ''}, {'complex_type': 'literal', 'value': 'play-previous-track', 'description': ''}, {'complex_type': 'literal', 'value': 'pause-resume-music', 'description': ''}], 'full_format': True}",
    "metadata": {
      "concept_name": "LinkedGameControl",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LocalisedString",
    "content": "Concept: LocalisedString\nDescription: Localised strings are a way to support translation of in-game text. It is an array where the first element is the key and the remaining elements are parameters that will be substituted for placeholders in the template designated by the key.\n\nThe key identifies the string template. For example, `\"gui-alert-tooltip.attack\"` (for the template `\"__1__ objects are being damaged\"`; see the file `data/core/locale/en.cfg`).",
    "metadata": {
      "concept_name": "LocalisedString",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LocalisedString",
    "content": "The template can contain placeholders such as `__1__` or `__2__`. These will be replaced by the respective parameter in the LocalisedString. The parameters themselves can be other localised strings, which will be processed recursively in the same fashion. Localised strings can not be recursed deeper than 20 levels and can not have more than 20 parameters.",
    "metadata": {
      "concept_name": "LocalisedString",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LocalisedString",
    "content": "There are two special flags for the localised string, indicated by the key being a particular string. First, if the key is the empty string (`\"\"`), then all parameters will be concatenated (after processing, if any are localised strings themselves). Second, if the key is a question mark (`\"?\"`), then the first valid parameter will be used. A parameter can be invalid if its name doesn't match any string template. If no parameters are valid, the last one is returned. This is useful to implement a fallback",
    "metadata": {
      "concept_name": "LocalisedString",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LocalisedString",
    "content": "last one is returned. This is useful to implement a fallback for missing locale templates.",
    "metadata": {
      "concept_name": "LocalisedString",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LocalisedString",
    "content": "Furthermore, when an API function expects a localised string, it will also accept a regular string (i.e. not a table) which will not be translated, as well as a number, boolean or `nil`, which will be converted to their textual representation.\nComplex_type: {'complex_type': 'union', 'options': ['string', 'number', 'boolean', 'LuaObject', 'nil', {'complex_type': 'array', 'value': 'LocalisedString'}], 'full_format': False}",
    "metadata": {
      "concept_name": "LocalisedString",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LogisticFilter",
    "content": "Concept: LogisticFilter\nDescription:",
    "metadata": {
      "concept_name": "LogisticFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LogisticFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'import_from', 'order': 4, 'description': 'The space location to import from.', 'type': 'SpaceLocationID', 'optional': True}, {'name': 'max', 'order': 2, 'description': 'The maximum amount to keep in inventory. `nil` for infinite.', 'type': 'ItemCountType', 'optional': True}, {'name': 'min', 'order': 1, 'description': 'The minimum amount to satisfy.', 'type': 'int', 'optional': True}, {'name': 'minimum_delivery_count', 'order': 3,",
    "metadata": {
      "concept_name": "LogisticFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LogisticFilter",
    "content": "True}, {'name': 'minimum_delivery_count', 'order': 3, 'description': 'The minimum count that will be delivered to a space platform. `nil` if unchanged from the default.', 'type': 'ItemCountType', 'optional': True}, {'name': 'value', 'order': 0, 'description': 'The item filter to put into the slot.', 'type': 'SignalFilter', 'optional': True}]}",
    "metadata": {
      "concept_name": "LogisticFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LogisticFilterIndex",
    "content": "Concept: LogisticFilterIndex\nDescription: \nComplex_type: uint16",
    "metadata": {
      "concept_name": "LogisticFilterIndex",
      "concept_type": "uint16"
    }
  },
  {
    "type": "concept",
    "name": "LogisticSection",
    "content": "Concept: LogisticSection\nDescription:",
    "metadata": {
      "concept_name": "LogisticSection",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LogisticSection",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'active', 'order': 4, 'description': 'Defaults to true.', 'type': 'float', 'optional': True}, {'name': 'filters', 'order': 1, 'description': '', 'type': {'complex_type': 'array', 'value': 'BlueprintLogisticFilter'}, 'optional': True}, {'name': 'group', 'order': 2, 'description': '', 'type': 'string', 'optional': True}, {'name': 'index', 'order': 0, 'description': '', 'type': 'uint8', 'optional': False}, {'name': 'multiplier', 'order': 3,",
    "metadata": {
      "concept_name": "LogisticSection",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LogisticSection",
    "content": "'uint8', 'optional': False}, {'name': 'multiplier', 'order': 3, 'description': 'Defaults to 1.', 'type': 'float', 'optional': True}]}",
    "metadata": {
      "concept_name": "LogisticSection",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LogisticSections",
    "content": "Concept: LogisticSections\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'sections', 'order': 0, 'description': '', 'type': {'complex_type': 'array', 'value': 'LogisticSection'}, 'optional': True}, {'name': 'trash_not_requested', 'order': 1, 'description': 'Defaults to false.', 'type': 'boolean', 'optional': True}]}",
    "metadata": {
      "concept_name": "LogisticSections",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LogisticsNetworkSupplyCounts",
    "content": "Concept: LogisticsNetworkSupplyCounts\nDescription:",
    "metadata": {
      "concept_name": "LogisticsNetworkSupplyCounts",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LogisticsNetworkSupplyCounts",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'active-provider', 'order': 3, 'description': 'Number of available items in the active provider members.', 'type': 'uint', 'optional': False}, {'name': 'buffer', 'order': 2, 'description': 'Number of available items in the buffer members.', 'type': 'uint', 'optional': False}, {'name': 'passive-provider', 'order': 1, 'description': 'Number of available items in the passive provider members.', 'type': 'uint', 'optional': False}, {'name':",
    "metadata": {
      "concept_name": "LogisticsNetworkSupplyCounts",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LogisticsNetworkSupplyCounts",
    "content": "members.', 'type': 'uint', 'optional': False}, {'name': 'storage', 'order': 0, 'description': 'Number of available items in the storage members.', 'type': 'uint', 'optional': False}]}",
    "metadata": {
      "concept_name": "LogisticsNetworkSupplyCounts",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LogisticsNetworkSupplyPoints",
    "content": "Concept: LogisticsNetworkSupplyPoints\nDescription:",
    "metadata": {
      "concept_name": "LogisticsNetworkSupplyPoints",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LogisticsNetworkSupplyPoints",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'active-provider', 'order': 3, 'description': '', 'type': {'complex_type': 'array', 'value': 'LuaLogisticPoint'}, 'optional': False}, {'name': 'buffer', 'order': 2, 'description': '', 'type': {'complex_type': 'array', 'value': 'LuaLogisticPoint'}, 'optional': False}, {'name': 'passive-provider', 'order': 1, 'description': '', 'type': {'complex_type': 'array', 'value': 'LuaLogisticPoint'}, 'optional': False}, {'name': 'storage', 'order': 0,",
    "metadata": {
      "concept_name": "LogisticsNetworkSupplyPoints",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LogisticsNetworkSupplyPoints",
    "content": "'optional': False}, {'name': 'storage', 'order': 0, 'description': '', 'type': {'complex_type': 'array', 'value': 'LuaLogisticPoint'}, 'optional': False}]}",
    "metadata": {
      "concept_name": "LogisticsNetworkSupplyPoints",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Loot",
    "content": "Concept: Loot\nDescription:",
    "metadata": {
      "concept_name": "Loot",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Loot",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'count_max', 'order': 3, 'description': 'Maximum amount of loot to drop.', 'type': 'double', 'optional': False}, {'name': 'count_min', 'order': 2, 'description': 'Minimum amount of loot to drop.', 'type': 'double', 'optional': False}, {'name': 'item', 'order': 0, 'description': 'Item prototype name of the result.', 'type': 'string', 'optional': False}, {'name': 'probability', 'order': 1, 'description': 'Probability that any loot at all will",
    "metadata": {
      "concept_name": "Loot",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Loot",
    "content": "1, 'description': 'Probability that any loot at all will drop, as a number in range [0, 1].', 'type': 'double', 'optional': False}]}",
    "metadata": {
      "concept_name": "Loot",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityClonedEventFilter",
    "content": "Concept: LuaEntityClonedEventFilter\nDescription:",
    "metadata": {
      "concept_name": "LuaEntityClonedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityClonedEventFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'ghost'}, {'complex_type': 'literal', 'value': 'rail'}, {'complex_type': 'literal', 'value': 'rail-signal'}, {'complex_type': 'literal', 'value': 'rolling-stock'}, {'complex_type': 'literal', 'value': 'robot-with-logistics-interface'}, {'complex_type': 'literal', 'value': 'vehicle'},",
    "metadata": {
      "concept_name": "LuaEntityClonedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityClonedEventFilter",
    "content": "{'complex_type': 'literal', 'value': 'vehicle'}, {'complex_type': 'literal', 'value': 'turret'}, {'complex_type': 'literal', 'value': 'crafting-machine'}, {'complex_type': 'literal', 'value': 'wall-connectable'}, {'complex_type': 'literal', 'value': 'transport-belt-connectable'}, {'complex_type': 'literal', 'value': 'circuit-network-connectable'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'ghost_type'}, {'complex_type':",
    "metadata": {
      "concept_name": "LuaEntityClonedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityClonedEventFilter",
    "content": "'literal', 'value': 'ghost_type'}, {'complex_type': 'literal', 'value': 'ghost_name'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type':",
    "metadata": {
      "concept_name": "LuaEntityClonedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityClonedEventFilter",
    "content": "'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'ghost_name', 'order': 3, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The ghost prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'ghost_type', 'order': 2, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The",
    "metadata": {
      "concept_name": "LuaEntityClonedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityClonedEventFilter",
    "content": "'parameters': [{'name': 'type', 'order': 0, 'description': 'The ghost prototype type.', 'type': 'string', 'optional': False}]}, {'name': 'name', 'order': 1, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other",
    "metadata": {
      "concept_name": "LuaEntityClonedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityClonedEventFilter",
    "content": "'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "LuaEntityClonedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityDamagedEventFilter",
    "content": "Concept: LuaEntityDamagedEventFilter\nDescription:",
    "metadata": {
      "concept_name": "LuaEntityDamagedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityDamagedEventFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'ghost'}, {'complex_type': 'literal', 'value': 'rail'}, {'complex_type': 'literal', 'value': 'rail-signal'}, {'complex_type': 'literal', 'value': 'rolling-stock'}, {'complex_type': 'literal', 'value': 'robot-with-logistics-interface'}, {'complex_type': 'literal', 'value': 'vehicle'},",
    "metadata": {
      "concept_name": "LuaEntityDamagedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityDamagedEventFilter",
    "content": "{'complex_type': 'literal', 'value': 'vehicle'}, {'complex_type': 'literal', 'value': 'turret'}, {'complex_type': 'literal', 'value': 'crafting-machine'}, {'complex_type': 'literal', 'value': 'wall-connectable'}, {'complex_type': 'literal', 'value': 'transport-belt-connectable'}, {'complex_type': 'literal', 'value': 'circuit-network-connectable'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'ghost_type'}, {'complex_type':",
    "metadata": {
      "concept_name": "LuaEntityDamagedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityDamagedEventFilter",
    "content": "'literal', 'value': 'ghost_type'}, {'complex_type': 'literal', 'value': 'ghost_name'}, {'complex_type': 'literal', 'value': 'original-damage-amount'}, {'complex_type': 'literal', 'value': 'final-damage-amount'}, {'complex_type': 'literal', 'value': 'damage-type'}, {'complex_type': 'literal', 'value': 'final-health'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode',",
    "metadata": {
      "concept_name": "LuaEntityDamagedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityDamagedEventFilter",
    "content": "'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'damage-type', 'order': 6, 'description': '', 'parameters': [{'name':",
    "metadata": {
      "concept_name": "LuaEntityDamagedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityDamagedEventFilter",
    "content": "'order': 6, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'A [LuaDamagePrototype](runtime:LuaDamagePrototype) name.', 'type': 'string', 'optional': False}]}, {'name': 'final-damage-amount', 'order': 5, 'description': '', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'float', 'optional': False}]}, {'name': 'final-health',",
    "metadata": {
      "concept_name": "LuaEntityDamagedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityDamagedEventFilter",
    "content": "'type': 'float', 'optional': False}]}, {'name': 'final-health', 'order': 7, 'description': '', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'float', 'optional': False}]}, {'name': 'ghost_name', 'order': 3, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The ghost prototype name.', 'type': 'string', 'optional': False}]},",
    "metadata": {
      "concept_name": "LuaEntityDamagedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityDamagedEventFilter",
    "content": "ghost prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'ghost_type', 'order': 2, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The ghost prototype type.', 'type': 'string', 'optional': False}]}, {'name': 'name', 'order': 1, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'original-damage-amount', 'order': 4, 'description': '', 'parameters': [{'name':",
    "metadata": {
      "concept_name": "LuaEntityDamagedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityDamagedEventFilter",
    "content": "'order': 4, 'description': '', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'float', 'optional': False}]}, {'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified",
    "metadata": {
      "concept_name": "LuaEntityDamagedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityDamagedEventFilter",
    "content": "'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "LuaEntityDamagedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityDeconstructionCancelledEventFilter",
    "content": "Concept: LuaEntityDeconstructionCancelledEventFilter\nDescription:",
    "metadata": {
      "concept_name": "LuaEntityDeconstructionCancelledEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityDeconstructionCancelledEventFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'ghost'}, {'complex_type': 'literal', 'value': 'rail'}, {'complex_type': 'literal', 'value': 'rail-signal'}, {'complex_type': 'literal', 'value': 'rolling-stock'}, {'complex_type': 'literal', 'value': 'robot-with-logistics-interface'}, {'complex_type': 'literal', 'value': 'vehicle'},",
    "metadata": {
      "concept_name": "LuaEntityDeconstructionCancelledEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityDeconstructionCancelledEventFilter",
    "content": "{'complex_type': 'literal', 'value': 'vehicle'}, {'complex_type': 'literal', 'value': 'turret'}, {'complex_type': 'literal', 'value': 'crafting-machine'}, {'complex_type': 'literal', 'value': 'wall-connectable'}, {'complex_type': 'literal', 'value': 'transport-belt-connectable'}, {'complex_type': 'literal', 'value': 'circuit-network-connectable'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'ghost_type'}, {'complex_type':",
    "metadata": {
      "concept_name": "LuaEntityDeconstructionCancelledEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityDeconstructionCancelledEventFilter",
    "content": "'literal', 'value': 'ghost_type'}, {'complex_type': 'literal', 'value': 'ghost_name'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type':",
    "metadata": {
      "concept_name": "LuaEntityDeconstructionCancelledEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityDeconstructionCancelledEventFilter",
    "content": "'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'ghost_name', 'order': 3, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The ghost prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'ghost_type', 'order': 2, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The",
    "metadata": {
      "concept_name": "LuaEntityDeconstructionCancelledEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityDeconstructionCancelledEventFilter",
    "content": "'parameters': [{'name': 'type', 'order': 0, 'description': 'The ghost prototype type.', 'type': 'string', 'optional': False}]}, {'name': 'name', 'order': 1, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other",
    "metadata": {
      "concept_name": "LuaEntityDeconstructionCancelledEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityDeconstructionCancelledEventFilter",
    "content": "'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "LuaEntityDeconstructionCancelledEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityDiedEventFilter",
    "content": "Concept: LuaEntityDiedEventFilter\nDescription:",
    "metadata": {
      "concept_name": "LuaEntityDiedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityDiedEventFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'ghost'}, {'complex_type': 'literal', 'value': 'rail'}, {'complex_type': 'literal', 'value': 'rail-signal'}, {'complex_type': 'literal', 'value': 'rolling-stock'}, {'complex_type': 'literal', 'value': 'robot-with-logistics-interface'}, {'complex_type': 'literal', 'value': 'vehicle'},",
    "metadata": {
      "concept_name": "LuaEntityDiedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityDiedEventFilter",
    "content": "{'complex_type': 'literal', 'value': 'vehicle'}, {'complex_type': 'literal', 'value': 'turret'}, {'complex_type': 'literal', 'value': 'crafting-machine'}, {'complex_type': 'literal', 'value': 'wall-connectable'}, {'complex_type': 'literal', 'value': 'transport-belt-connectable'}, {'complex_type': 'literal', 'value': 'circuit-network-connectable'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'ghost_type'}, {'complex_type':",
    "metadata": {
      "concept_name": "LuaEntityDiedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityDiedEventFilter",
    "content": "'literal', 'value': 'ghost_type'}, {'complex_type': 'literal', 'value': 'ghost_name'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type':",
    "metadata": {
      "concept_name": "LuaEntityDiedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityDiedEventFilter",
    "content": "'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'ghost_name', 'order': 3, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The ghost prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'ghost_type', 'order': 2, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The",
    "metadata": {
      "concept_name": "LuaEntityDiedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityDiedEventFilter",
    "content": "'parameters': [{'name': 'type', 'order': 0, 'description': 'The ghost prototype type.', 'type': 'string', 'optional': False}]}, {'name': 'name', 'order': 1, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other",
    "metadata": {
      "concept_name": "LuaEntityDiedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityDiedEventFilter",
    "content": "'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "LuaEntityDiedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityMarkedForDeconstructionEventFilter",
    "content": "Concept: LuaEntityMarkedForDeconstructionEventFilter\nDescription:",
    "metadata": {
      "concept_name": "LuaEntityMarkedForDeconstructionEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityMarkedForDeconstructionEventFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'ghost'}, {'complex_type': 'literal', 'value': 'rail'}, {'complex_type': 'literal', 'value': 'rail-signal'}, {'complex_type': 'literal', 'value': 'rolling-stock'}, {'complex_type': 'literal', 'value': 'robot-with-logistics-interface'}, {'complex_type': 'literal', 'value': 'vehicle'},",
    "metadata": {
      "concept_name": "LuaEntityMarkedForDeconstructionEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityMarkedForDeconstructionEventFilter",
    "content": "{'complex_type': 'literal', 'value': 'vehicle'}, {'complex_type': 'literal', 'value': 'turret'}, {'complex_type': 'literal', 'value': 'crafting-machine'}, {'complex_type': 'literal', 'value': 'wall-connectable'}, {'complex_type': 'literal', 'value': 'transport-belt-connectable'}, {'complex_type': 'literal', 'value': 'circuit-network-connectable'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'ghost_type'}, {'complex_type':",
    "metadata": {
      "concept_name": "LuaEntityMarkedForDeconstructionEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityMarkedForDeconstructionEventFilter",
    "content": "'literal', 'value': 'ghost_type'}, {'complex_type': 'literal', 'value': 'ghost_name'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type':",
    "metadata": {
      "concept_name": "LuaEntityMarkedForDeconstructionEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityMarkedForDeconstructionEventFilter",
    "content": "'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'ghost_name', 'order': 3, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The ghost prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'ghost_type', 'order': 2, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The",
    "metadata": {
      "concept_name": "LuaEntityMarkedForDeconstructionEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityMarkedForDeconstructionEventFilter",
    "content": "'parameters': [{'name': 'type', 'order': 0, 'description': 'The ghost prototype type.', 'type': 'string', 'optional': False}]}, {'name': 'name', 'order': 1, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other",
    "metadata": {
      "concept_name": "LuaEntityMarkedForDeconstructionEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityMarkedForDeconstructionEventFilter",
    "content": "'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "LuaEntityMarkedForDeconstructionEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityMarkedForUpgradeEventFilter",
    "content": "Concept: LuaEntityMarkedForUpgradeEventFilter\nDescription:",
    "metadata": {
      "concept_name": "LuaEntityMarkedForUpgradeEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityMarkedForUpgradeEventFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'ghost'}, {'complex_type': 'literal', 'value': 'rail'}, {'complex_type': 'literal', 'value': 'rail-signal'}, {'complex_type': 'literal', 'value': 'rolling-stock'}, {'complex_type': 'literal', 'value': 'robot-with-logistics-interface'}, {'complex_type': 'literal', 'value': 'vehicle'},",
    "metadata": {
      "concept_name": "LuaEntityMarkedForUpgradeEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityMarkedForUpgradeEventFilter",
    "content": "{'complex_type': 'literal', 'value': 'vehicle'}, {'complex_type': 'literal', 'value': 'turret'}, {'complex_type': 'literal', 'value': 'crafting-machine'}, {'complex_type': 'literal', 'value': 'wall-connectable'}, {'complex_type': 'literal', 'value': 'transport-belt-connectable'}, {'complex_type': 'literal', 'value': 'circuit-network-connectable'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'ghost_type'}, {'complex_type':",
    "metadata": {
      "concept_name": "LuaEntityMarkedForUpgradeEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityMarkedForUpgradeEventFilter",
    "content": "'literal', 'value': 'ghost_type'}, {'complex_type': 'literal', 'value': 'ghost_name'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type':",
    "metadata": {
      "concept_name": "LuaEntityMarkedForUpgradeEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityMarkedForUpgradeEventFilter",
    "content": "'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'ghost_name', 'order': 3, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The ghost prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'ghost_type', 'order': 2, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The",
    "metadata": {
      "concept_name": "LuaEntityMarkedForUpgradeEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityMarkedForUpgradeEventFilter",
    "content": "'parameters': [{'name': 'type', 'order': 0, 'description': 'The ghost prototype type.', 'type': 'string', 'optional': False}]}, {'name': 'name', 'order': 1, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other",
    "metadata": {
      "concept_name": "LuaEntityMarkedForUpgradeEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEntityMarkedForUpgradeEventFilter",
    "content": "'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "LuaEntityMarkedForUpgradeEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaEventType",
    "content": "Concept: LuaEventType\nDescription: Event name may be specified in one of four ways.",
    "metadata": {
      "concept_name": "LuaEventType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LuaEventType",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'LuaCustomEventPrototype', 'description': 'Custom event prototype.'}, {'complex_type': 'type', 'value': 'LuaCustomInputPrototype', 'description': 'Custom input prototype.'}, {'complex_type': 'type', 'value': 'defines.events', 'description': 'Event identifier.'}, {'complex_type': 'type', 'value': 'string', 'description': 'Name of the event.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "LuaEventType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "LuaObject",
    "content": "Concept: LuaObject\nDescription: Any LuaObject listed on the [Classes](runtime:classes) page.\nComplex_type: {'complex_type': 'builtin'}",
    "metadata": {
      "concept_name": "LuaObject",
      "concept_type": "builtin"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlatformBuiltEntityEventFilter",
    "content": "Concept: LuaPlatformBuiltEntityEventFilter\nDescription:",
    "metadata": {
      "concept_name": "LuaPlatformBuiltEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlatformBuiltEntityEventFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'ghost'}, {'complex_type': 'literal', 'value': 'rail'}, {'complex_type': 'literal', 'value': 'rail-signal'}, {'complex_type': 'literal', 'value': 'rolling-stock'}, {'complex_type': 'literal', 'value': 'robot-with-logistics-interface'}, {'complex_type': 'literal', 'value': 'vehicle'},",
    "metadata": {
      "concept_name": "LuaPlatformBuiltEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlatformBuiltEntityEventFilter",
    "content": "{'complex_type': 'literal', 'value': 'vehicle'}, {'complex_type': 'literal', 'value': 'turret'}, {'complex_type': 'literal', 'value': 'crafting-machine'}, {'complex_type': 'literal', 'value': 'wall-connectable'}, {'complex_type': 'literal', 'value': 'transport-belt-connectable'}, {'complex_type': 'literal', 'value': 'circuit-network-connectable'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'ghost_type'}, {'complex_type':",
    "metadata": {
      "concept_name": "LuaPlatformBuiltEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlatformBuiltEntityEventFilter",
    "content": "'literal', 'value': 'ghost_type'}, {'complex_type': 'literal', 'value': 'ghost_name'}, {'complex_type': 'literal', 'value': 'force'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type':",
    "metadata": {
      "concept_name": "LuaPlatformBuiltEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlatformBuiltEntityEventFilter",
    "content": "filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'force', 'order': 4, 'description': '', 'parameters': [{'name': 'force', 'order': 0, 'description': 'The entity force', 'type': 'string', 'optional': False}]}, {'name': 'ghost_name', 'order': 3, 'description': '', 'parameters': [{'name':",
    "metadata": {
      "concept_name": "LuaPlatformBuiltEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlatformBuiltEntityEventFilter",
    "content": "'order': 3, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The ghost prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'ghost_type', 'order': 2, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The ghost prototype type.', 'type': 'string', 'optional': False}]}, {'name': 'name', 'order': 1, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name.', 'type': 'string', 'optional': False}]},",
    "metadata": {
      "concept_name": "LuaPlatformBuiltEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlatformBuiltEntityEventFilter",
    "content": "'The prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "LuaPlatformBuiltEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlatformMinedEntityEventFilter",
    "content": "Concept: LuaPlatformMinedEntityEventFilter\nDescription:",
    "metadata": {
      "concept_name": "LuaPlatformMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlatformMinedEntityEventFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'ghost'}, {'complex_type': 'literal', 'value': 'rail'}, {'complex_type': 'literal', 'value': 'rail-signal'}, {'complex_type': 'literal', 'value': 'rolling-stock'}, {'complex_type': 'literal', 'value': 'robot-with-logistics-interface'}, {'complex_type': 'literal', 'value': 'vehicle'},",
    "metadata": {
      "concept_name": "LuaPlatformMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlatformMinedEntityEventFilter",
    "content": "{'complex_type': 'literal', 'value': 'vehicle'}, {'complex_type': 'literal', 'value': 'turret'}, {'complex_type': 'literal', 'value': 'crafting-machine'}, {'complex_type': 'literal', 'value': 'wall-connectable'}, {'complex_type': 'literal', 'value': 'transport-belt-connectable'}, {'complex_type': 'literal', 'value': 'circuit-network-connectable'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'ghost_type'}, {'complex_type':",
    "metadata": {
      "concept_name": "LuaPlatformMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlatformMinedEntityEventFilter",
    "content": "'literal', 'value': 'ghost_type'}, {'complex_type': 'literal', 'value': 'ghost_name'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type':",
    "metadata": {
      "concept_name": "LuaPlatformMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlatformMinedEntityEventFilter",
    "content": "'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'ghost_name', 'order': 3, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The ghost prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'ghost_type', 'order': 2, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The",
    "metadata": {
      "concept_name": "LuaPlatformMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlatformMinedEntityEventFilter",
    "content": "'parameters': [{'name': 'type', 'order': 0, 'description': 'The ghost prototype type.', 'type': 'string', 'optional': False}]}, {'name': 'name', 'order': 1, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other",
    "metadata": {
      "concept_name": "LuaPlatformMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlatformMinedEntityEventFilter",
    "content": "'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "LuaPlatformMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlayerBuiltEntityEventFilter",
    "content": "Concept: LuaPlayerBuiltEntityEventFilter\nDescription:",
    "metadata": {
      "concept_name": "LuaPlayerBuiltEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlayerBuiltEntityEventFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'ghost'}, {'complex_type': 'literal', 'value': 'rail'}, {'complex_type': 'literal', 'value': 'rail-signal'}, {'complex_type': 'literal', 'value': 'rolling-stock'}, {'complex_type': 'literal', 'value': 'robot-with-logistics-interface'}, {'complex_type': 'literal', 'value': 'vehicle'},",
    "metadata": {
      "concept_name": "LuaPlayerBuiltEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlayerBuiltEntityEventFilter",
    "content": "{'complex_type': 'literal', 'value': 'vehicle'}, {'complex_type': 'literal', 'value': 'turret'}, {'complex_type': 'literal', 'value': 'crafting-machine'}, {'complex_type': 'literal', 'value': 'wall-connectable'}, {'complex_type': 'literal', 'value': 'transport-belt-connectable'}, {'complex_type': 'literal', 'value': 'circuit-network-connectable'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'ghost_type'}, {'complex_type':",
    "metadata": {
      "concept_name": "LuaPlayerBuiltEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlayerBuiltEntityEventFilter",
    "content": "'literal', 'value': 'ghost_type'}, {'complex_type': 'literal', 'value': 'ghost_name'}, {'complex_type': 'literal', 'value': 'force'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type':",
    "metadata": {
      "concept_name": "LuaPlayerBuiltEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlayerBuiltEntityEventFilter",
    "content": "filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'force', 'order': 4, 'description': '', 'parameters': [{'name': 'force', 'order': 0, 'description': 'The entity force', 'type': 'string', 'optional': False}]}, {'name': 'ghost_name', 'order': 3, 'description': '', 'parameters': [{'name':",
    "metadata": {
      "concept_name": "LuaPlayerBuiltEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlayerBuiltEntityEventFilter",
    "content": "'order': 3, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The ghost prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'ghost_type', 'order': 2, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The ghost prototype type.', 'type': 'string', 'optional': False}]}, {'name': 'name', 'order': 1, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name.', 'type': 'string', 'optional': False}]},",
    "metadata": {
      "concept_name": "LuaPlayerBuiltEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlayerBuiltEntityEventFilter",
    "content": "'The prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "LuaPlayerBuiltEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlayerMinedEntityEventFilter",
    "content": "Concept: LuaPlayerMinedEntityEventFilter\nDescription:",
    "metadata": {
      "concept_name": "LuaPlayerMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlayerMinedEntityEventFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'ghost'}, {'complex_type': 'literal', 'value': 'rail'}, {'complex_type': 'literal', 'value': 'rail-signal'}, {'complex_type': 'literal', 'value': 'rolling-stock'}, {'complex_type': 'literal', 'value': 'robot-with-logistics-interface'}, {'complex_type': 'literal', 'value': 'vehicle'},",
    "metadata": {
      "concept_name": "LuaPlayerMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlayerMinedEntityEventFilter",
    "content": "{'complex_type': 'literal', 'value': 'vehicle'}, {'complex_type': 'literal', 'value': 'turret'}, {'complex_type': 'literal', 'value': 'crafting-machine'}, {'complex_type': 'literal', 'value': 'wall-connectable'}, {'complex_type': 'literal', 'value': 'transport-belt-connectable'}, {'complex_type': 'literal', 'value': 'circuit-network-connectable'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'ghost_type'}, {'complex_type':",
    "metadata": {
      "concept_name": "LuaPlayerMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlayerMinedEntityEventFilter",
    "content": "'literal', 'value': 'ghost_type'}, {'complex_type': 'literal', 'value': 'ghost_name'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type':",
    "metadata": {
      "concept_name": "LuaPlayerMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlayerMinedEntityEventFilter",
    "content": "'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'ghost_name', 'order': 3, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The ghost prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'ghost_type', 'order': 2, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The",
    "metadata": {
      "concept_name": "LuaPlayerMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlayerMinedEntityEventFilter",
    "content": "'parameters': [{'name': 'type', 'order': 0, 'description': 'The ghost prototype type.', 'type': 'string', 'optional': False}]}, {'name': 'name', 'order': 1, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other",
    "metadata": {
      "concept_name": "LuaPlayerMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlayerMinedEntityEventFilter",
    "content": "'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "LuaPlayerMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlayerRepairedEntityEventFilter",
    "content": "Concept: LuaPlayerRepairedEntityEventFilter\nDescription:",
    "metadata": {
      "concept_name": "LuaPlayerRepairedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlayerRepairedEntityEventFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'ghost'}, {'complex_type': 'literal', 'value': 'rail'}, {'complex_type': 'literal', 'value': 'rail-signal'}, {'complex_type': 'literal', 'value': 'rolling-stock'}, {'complex_type': 'literal', 'value': 'robot-with-logistics-interface'}, {'complex_type': 'literal', 'value': 'vehicle'},",
    "metadata": {
      "concept_name": "LuaPlayerRepairedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlayerRepairedEntityEventFilter",
    "content": "{'complex_type': 'literal', 'value': 'vehicle'}, {'complex_type': 'literal', 'value': 'turret'}, {'complex_type': 'literal', 'value': 'crafting-machine'}, {'complex_type': 'literal', 'value': 'wall-connectable'}, {'complex_type': 'literal', 'value': 'transport-belt-connectable'}, {'complex_type': 'literal', 'value': 'circuit-network-connectable'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'ghost_type'}, {'complex_type':",
    "metadata": {
      "concept_name": "LuaPlayerRepairedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlayerRepairedEntityEventFilter",
    "content": "'literal', 'value': 'ghost_type'}, {'complex_type': 'literal', 'value': 'ghost_name'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type':",
    "metadata": {
      "concept_name": "LuaPlayerRepairedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlayerRepairedEntityEventFilter",
    "content": "'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'ghost_name', 'order': 3, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The ghost prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'ghost_type', 'order': 2, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The",
    "metadata": {
      "concept_name": "LuaPlayerRepairedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlayerRepairedEntityEventFilter",
    "content": "'parameters': [{'name': 'type', 'order': 0, 'description': 'The ghost prototype type.', 'type': 'string', 'optional': False}]}, {'name': 'name', 'order': 1, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other",
    "metadata": {
      "concept_name": "LuaPlayerRepairedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPlayerRepairedEntityEventFilter",
    "content": "'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "LuaPlayerRepairedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPostEntityDiedEventFilter",
    "content": "Concept: LuaPostEntityDiedEventFilter\nDescription:",
    "metadata": {
      "concept_name": "LuaPostEntityDiedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPostEntityDiedEventFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'ghost'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`.",
    "metadata": {
      "concept_name": "LuaPostEntityDiedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPostEntityDiedEventFilter",
    "content": "to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type.', 'type': 'string', 'optional':",
    "metadata": {
      "concept_name": "LuaPostEntityDiedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPostEntityDiedEventFilter",
    "content": "'The prototype type.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "LuaPostEntityDiedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPreGhostDeconstructedEventFilter",
    "content": "Concept: LuaPreGhostDeconstructedEventFilter\nDescription:",
    "metadata": {
      "concept_name": "LuaPreGhostDeconstructedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPreGhostDeconstructedEventFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'ghost'}, {'complex_type': 'literal', 'value': 'rail'}, {'complex_type': 'literal', 'value': 'rail-signal'}, {'complex_type': 'literal', 'value': 'rolling-stock'}, {'complex_type': 'literal', 'value': 'robot-with-logistics-interface'}, {'complex_type': 'literal', 'value': 'vehicle'},",
    "metadata": {
      "concept_name": "LuaPreGhostDeconstructedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPreGhostDeconstructedEventFilter",
    "content": "{'complex_type': 'literal', 'value': 'vehicle'}, {'complex_type': 'literal', 'value': 'turret'}, {'complex_type': 'literal', 'value': 'crafting-machine'}, {'complex_type': 'literal', 'value': 'wall-connectable'}, {'complex_type': 'literal', 'value': 'transport-belt-connectable'}, {'complex_type': 'literal', 'value': 'circuit-network-connectable'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'ghost_type'}, {'complex_type':",
    "metadata": {
      "concept_name": "LuaPreGhostDeconstructedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPreGhostDeconstructedEventFilter",
    "content": "'literal', 'value': 'ghost_type'}, {'complex_type': 'literal', 'value': 'ghost_name'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type':",
    "metadata": {
      "concept_name": "LuaPreGhostDeconstructedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPreGhostDeconstructedEventFilter",
    "content": "'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'ghost_name', 'order': 3, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The ghost prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'ghost_type', 'order': 2, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The",
    "metadata": {
      "concept_name": "LuaPreGhostDeconstructedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPreGhostDeconstructedEventFilter",
    "content": "'parameters': [{'name': 'type', 'order': 0, 'description': 'The ghost prototype type.', 'type': 'string', 'optional': False}]}, {'name': 'name', 'order': 1, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other",
    "metadata": {
      "concept_name": "LuaPreGhostDeconstructedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPreGhostDeconstructedEventFilter",
    "content": "'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "LuaPreGhostDeconstructedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPreGhostUpgradedEventFilter",
    "content": "Concept: LuaPreGhostUpgradedEventFilter\nDescription:",
    "metadata": {
      "concept_name": "LuaPreGhostUpgradedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPreGhostUpgradedEventFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'ghost'}, {'complex_type': 'literal', 'value': 'rail'}, {'complex_type': 'literal', 'value': 'rail-signal'}, {'complex_type': 'literal', 'value': 'rolling-stock'}, {'complex_type': 'literal', 'value': 'robot-with-logistics-interface'}, {'complex_type': 'literal', 'value': 'vehicle'},",
    "metadata": {
      "concept_name": "LuaPreGhostUpgradedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPreGhostUpgradedEventFilter",
    "content": "{'complex_type': 'literal', 'value': 'vehicle'}, {'complex_type': 'literal', 'value': 'turret'}, {'complex_type': 'literal', 'value': 'crafting-machine'}, {'complex_type': 'literal', 'value': 'wall-connectable'}, {'complex_type': 'literal', 'value': 'transport-belt-connectable'}, {'complex_type': 'literal', 'value': 'circuit-network-connectable'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'ghost_type'}, {'complex_type':",
    "metadata": {
      "concept_name": "LuaPreGhostUpgradedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPreGhostUpgradedEventFilter",
    "content": "'literal', 'value': 'ghost_type'}, {'complex_type': 'literal', 'value': 'ghost_name'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type':",
    "metadata": {
      "concept_name": "LuaPreGhostUpgradedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPreGhostUpgradedEventFilter",
    "content": "'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'ghost_name', 'order': 3, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The ghost prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'ghost_type', 'order': 2, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The",
    "metadata": {
      "concept_name": "LuaPreGhostUpgradedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPreGhostUpgradedEventFilter",
    "content": "'parameters': [{'name': 'type', 'order': 0, 'description': 'The ghost prototype type.', 'type': 'string', 'optional': False}]}, {'name': 'name', 'order': 1, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other",
    "metadata": {
      "concept_name": "LuaPreGhostUpgradedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPreGhostUpgradedEventFilter",
    "content": "'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "LuaPreGhostUpgradedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPrePlatformMinedEntityEventFilter",
    "content": "Concept: LuaPrePlatformMinedEntityEventFilter\nDescription:",
    "metadata": {
      "concept_name": "LuaPrePlatformMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPrePlatformMinedEntityEventFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'ghost'}, {'complex_type': 'literal', 'value': 'rail'}, {'complex_type': 'literal', 'value': 'rail-signal'}, {'complex_type': 'literal', 'value': 'rolling-stock'}, {'complex_type': 'literal', 'value': 'robot-with-logistics-interface'}, {'complex_type': 'literal', 'value': 'vehicle'},",
    "metadata": {
      "concept_name": "LuaPrePlatformMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPrePlatformMinedEntityEventFilter",
    "content": "{'complex_type': 'literal', 'value': 'vehicle'}, {'complex_type': 'literal', 'value': 'turret'}, {'complex_type': 'literal', 'value': 'crafting-machine'}, {'complex_type': 'literal', 'value': 'wall-connectable'}, {'complex_type': 'literal', 'value': 'transport-belt-connectable'}, {'complex_type': 'literal', 'value': 'circuit-network-connectable'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'ghost_type'}, {'complex_type':",
    "metadata": {
      "concept_name": "LuaPrePlatformMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPrePlatformMinedEntityEventFilter",
    "content": "'literal', 'value': 'ghost_type'}, {'complex_type': 'literal', 'value': 'ghost_name'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type':",
    "metadata": {
      "concept_name": "LuaPrePlatformMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPrePlatformMinedEntityEventFilter",
    "content": "'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'ghost_name', 'order': 3, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The ghost prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'ghost_type', 'order': 2, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The",
    "metadata": {
      "concept_name": "LuaPrePlatformMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPrePlatformMinedEntityEventFilter",
    "content": "'parameters': [{'name': 'type', 'order': 0, 'description': 'The ghost prototype type.', 'type': 'string', 'optional': False}]}, {'name': 'name', 'order': 1, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other",
    "metadata": {
      "concept_name": "LuaPrePlatformMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPrePlatformMinedEntityEventFilter",
    "content": "'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "LuaPrePlatformMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPrePlayerMinedEntityEventFilter",
    "content": "Concept: LuaPrePlayerMinedEntityEventFilter\nDescription:",
    "metadata": {
      "concept_name": "LuaPrePlayerMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPrePlayerMinedEntityEventFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'ghost'}, {'complex_type': 'literal', 'value': 'rail'}, {'complex_type': 'literal', 'value': 'rail-signal'}, {'complex_type': 'literal', 'value': 'rolling-stock'}, {'complex_type': 'literal', 'value': 'robot-with-logistics-interface'}, {'complex_type': 'literal', 'value': 'vehicle'},",
    "metadata": {
      "concept_name": "LuaPrePlayerMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPrePlayerMinedEntityEventFilter",
    "content": "{'complex_type': 'literal', 'value': 'vehicle'}, {'complex_type': 'literal', 'value': 'turret'}, {'complex_type': 'literal', 'value': 'crafting-machine'}, {'complex_type': 'literal', 'value': 'wall-connectable'}, {'complex_type': 'literal', 'value': 'transport-belt-connectable'}, {'complex_type': 'literal', 'value': 'circuit-network-connectable'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'ghost_type'}, {'complex_type':",
    "metadata": {
      "concept_name": "LuaPrePlayerMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPrePlayerMinedEntityEventFilter",
    "content": "'literal', 'value': 'ghost_type'}, {'complex_type': 'literal', 'value': 'ghost_name'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type':",
    "metadata": {
      "concept_name": "LuaPrePlayerMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPrePlayerMinedEntityEventFilter",
    "content": "'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'ghost_name', 'order': 3, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The ghost prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'ghost_type', 'order': 2, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The",
    "metadata": {
      "concept_name": "LuaPrePlayerMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPrePlayerMinedEntityEventFilter",
    "content": "'parameters': [{'name': 'type', 'order': 0, 'description': 'The ghost prototype type.', 'type': 'string', 'optional': False}]}, {'name': 'name', 'order': 1, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other",
    "metadata": {
      "concept_name": "LuaPrePlayerMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPrePlayerMinedEntityEventFilter",
    "content": "'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "LuaPrePlayerMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPreRobotMinedEntityEventFilter",
    "content": "Concept: LuaPreRobotMinedEntityEventFilter\nDescription:",
    "metadata": {
      "concept_name": "LuaPreRobotMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPreRobotMinedEntityEventFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'ghost'}, {'complex_type': 'literal', 'value': 'rail'}, {'complex_type': 'literal', 'value': 'rail-signal'}, {'complex_type': 'literal', 'value': 'rolling-stock'}, {'complex_type': 'literal', 'value': 'robot-with-logistics-interface'}, {'complex_type': 'literal', 'value': 'vehicle'},",
    "metadata": {
      "concept_name": "LuaPreRobotMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPreRobotMinedEntityEventFilter",
    "content": "{'complex_type': 'literal', 'value': 'vehicle'}, {'complex_type': 'literal', 'value': 'turret'}, {'complex_type': 'literal', 'value': 'crafting-machine'}, {'complex_type': 'literal', 'value': 'wall-connectable'}, {'complex_type': 'literal', 'value': 'transport-belt-connectable'}, {'complex_type': 'literal', 'value': 'circuit-network-connectable'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'ghost_type'}, {'complex_type':",
    "metadata": {
      "concept_name": "LuaPreRobotMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPreRobotMinedEntityEventFilter",
    "content": "'literal', 'value': 'ghost_type'}, {'complex_type': 'literal', 'value': 'ghost_name'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type':",
    "metadata": {
      "concept_name": "LuaPreRobotMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPreRobotMinedEntityEventFilter",
    "content": "'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'ghost_name', 'order': 3, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The ghost prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'ghost_type', 'order': 2, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The",
    "metadata": {
      "concept_name": "LuaPreRobotMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPreRobotMinedEntityEventFilter",
    "content": "'parameters': [{'name': 'type', 'order': 0, 'description': 'The ghost prototype type.', 'type': 'string', 'optional': False}]}, {'name': 'name', 'order': 1, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other",
    "metadata": {
      "concept_name": "LuaPreRobotMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaPreRobotMinedEntityEventFilter",
    "content": "'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "LuaPreRobotMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaRobotBuiltEntityEventFilter",
    "content": "Concept: LuaRobotBuiltEntityEventFilter\nDescription:",
    "metadata": {
      "concept_name": "LuaRobotBuiltEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaRobotBuiltEntityEventFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'ghost'}, {'complex_type': 'literal', 'value': 'rail'}, {'complex_type': 'literal', 'value': 'rail-signal'}, {'complex_type': 'literal', 'value': 'rolling-stock'}, {'complex_type': 'literal', 'value': 'robot-with-logistics-interface'}, {'complex_type': 'literal', 'value': 'vehicle'},",
    "metadata": {
      "concept_name": "LuaRobotBuiltEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaRobotBuiltEntityEventFilter",
    "content": "{'complex_type': 'literal', 'value': 'vehicle'}, {'complex_type': 'literal', 'value': 'turret'}, {'complex_type': 'literal', 'value': 'crafting-machine'}, {'complex_type': 'literal', 'value': 'wall-connectable'}, {'complex_type': 'literal', 'value': 'transport-belt-connectable'}, {'complex_type': 'literal', 'value': 'circuit-network-connectable'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'ghost_type'}, {'complex_type':",
    "metadata": {
      "concept_name": "LuaRobotBuiltEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaRobotBuiltEntityEventFilter",
    "content": "'literal', 'value': 'ghost_type'}, {'complex_type': 'literal', 'value': 'ghost_name'}, {'complex_type': 'literal', 'value': 'force'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type':",
    "metadata": {
      "concept_name": "LuaRobotBuiltEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaRobotBuiltEntityEventFilter",
    "content": "filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'force', 'order': 4, 'description': '', 'parameters': [{'name': 'force', 'order': 0, 'description': 'The entity force', 'type': 'string', 'optional': False}]}, {'name': 'ghost_name', 'order': 3, 'description': '', 'parameters': [{'name':",
    "metadata": {
      "concept_name": "LuaRobotBuiltEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaRobotBuiltEntityEventFilter",
    "content": "'order': 3, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The ghost prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'ghost_type', 'order': 2, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The ghost prototype type.', 'type': 'string', 'optional': False}]}, {'name': 'name', 'order': 1, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name.', 'type': 'string', 'optional': False}]},",
    "metadata": {
      "concept_name": "LuaRobotBuiltEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaRobotBuiltEntityEventFilter",
    "content": "'The prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "LuaRobotBuiltEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaRobotMinedEntityEventFilter",
    "content": "Concept: LuaRobotMinedEntityEventFilter\nDescription:",
    "metadata": {
      "concept_name": "LuaRobotMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaRobotMinedEntityEventFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'ghost'}, {'complex_type': 'literal', 'value': 'rail'}, {'complex_type': 'literal', 'value': 'rail-signal'}, {'complex_type': 'literal', 'value': 'rolling-stock'}, {'complex_type': 'literal', 'value': 'robot-with-logistics-interface'}, {'complex_type': 'literal', 'value': 'vehicle'},",
    "metadata": {
      "concept_name": "LuaRobotMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaRobotMinedEntityEventFilter",
    "content": "{'complex_type': 'literal', 'value': 'vehicle'}, {'complex_type': 'literal', 'value': 'turret'}, {'complex_type': 'literal', 'value': 'crafting-machine'}, {'complex_type': 'literal', 'value': 'wall-connectable'}, {'complex_type': 'literal', 'value': 'transport-belt-connectable'}, {'complex_type': 'literal', 'value': 'circuit-network-connectable'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'ghost_type'}, {'complex_type':",
    "metadata": {
      "concept_name": "LuaRobotMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaRobotMinedEntityEventFilter",
    "content": "'literal', 'value': 'ghost_type'}, {'complex_type': 'literal', 'value': 'ghost_name'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type':",
    "metadata": {
      "concept_name": "LuaRobotMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaRobotMinedEntityEventFilter",
    "content": "'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'ghost_name', 'order': 3, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The ghost prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'ghost_type', 'order': 2, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The",
    "metadata": {
      "concept_name": "LuaRobotMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaRobotMinedEntityEventFilter",
    "content": "'parameters': [{'name': 'type', 'order': 0, 'description': 'The ghost prototype type.', 'type': 'string', 'optional': False}]}, {'name': 'name', 'order': 1, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other",
    "metadata": {
      "concept_name": "LuaRobotMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaRobotMinedEntityEventFilter",
    "content": "'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "LuaRobotMinedEntityEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedBuiltEventFilter",
    "content": "Concept: LuaScriptRaisedBuiltEventFilter\nDescription:",
    "metadata": {
      "concept_name": "LuaScriptRaisedBuiltEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedBuiltEventFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'ghost'}, {'complex_type': 'literal', 'value': 'rail'}, {'complex_type': 'literal', 'value': 'rail-signal'}, {'complex_type': 'literal', 'value': 'rolling-stock'}, {'complex_type': 'literal', 'value': 'robot-with-logistics-interface'}, {'complex_type': 'literal', 'value': 'vehicle'},",
    "metadata": {
      "concept_name": "LuaScriptRaisedBuiltEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedBuiltEventFilter",
    "content": "{'complex_type': 'literal', 'value': 'vehicle'}, {'complex_type': 'literal', 'value': 'turret'}, {'complex_type': 'literal', 'value': 'crafting-machine'}, {'complex_type': 'literal', 'value': 'wall-connectable'}, {'complex_type': 'literal', 'value': 'transport-belt-connectable'}, {'complex_type': 'literal', 'value': 'circuit-network-connectable'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'ghost_type'}, {'complex_type':",
    "metadata": {
      "concept_name": "LuaScriptRaisedBuiltEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedBuiltEventFilter",
    "content": "'literal', 'value': 'ghost_type'}, {'complex_type': 'literal', 'value': 'ghost_name'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type':",
    "metadata": {
      "concept_name": "LuaScriptRaisedBuiltEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedBuiltEventFilter",
    "content": "'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'ghost_name', 'order': 3, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The ghost prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'ghost_type', 'order': 2, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The",
    "metadata": {
      "concept_name": "LuaScriptRaisedBuiltEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedBuiltEventFilter",
    "content": "'parameters': [{'name': 'type', 'order': 0, 'description': 'The ghost prototype type.', 'type': 'string', 'optional': False}]}, {'name': 'name', 'order': 1, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other",
    "metadata": {
      "concept_name": "LuaScriptRaisedBuiltEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedBuiltEventFilter",
    "content": "'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "LuaScriptRaisedBuiltEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedDestroyEventFilter",
    "content": "Concept: LuaScriptRaisedDestroyEventFilter\nDescription:",
    "metadata": {
      "concept_name": "LuaScriptRaisedDestroyEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedDestroyEventFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'ghost'}, {'complex_type': 'literal', 'value': 'rail'}, {'complex_type': 'literal', 'value': 'rail-signal'}, {'complex_type': 'literal', 'value': 'rolling-stock'}, {'complex_type': 'literal', 'value': 'robot-with-logistics-interface'}, {'complex_type': 'literal', 'value': 'vehicle'},",
    "metadata": {
      "concept_name": "LuaScriptRaisedDestroyEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedDestroyEventFilter",
    "content": "{'complex_type': 'literal', 'value': 'vehicle'}, {'complex_type': 'literal', 'value': 'turret'}, {'complex_type': 'literal', 'value': 'crafting-machine'}, {'complex_type': 'literal', 'value': 'wall-connectable'}, {'complex_type': 'literal', 'value': 'transport-belt-connectable'}, {'complex_type': 'literal', 'value': 'circuit-network-connectable'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'ghost_type'}, {'complex_type':",
    "metadata": {
      "concept_name": "LuaScriptRaisedDestroyEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedDestroyEventFilter",
    "content": "'literal', 'value': 'ghost_type'}, {'complex_type': 'literal', 'value': 'ghost_name'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type':",
    "metadata": {
      "concept_name": "LuaScriptRaisedDestroyEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedDestroyEventFilter",
    "content": "'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'ghost_name', 'order': 3, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The ghost prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'ghost_type', 'order': 2, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The",
    "metadata": {
      "concept_name": "LuaScriptRaisedDestroyEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedDestroyEventFilter",
    "content": "'parameters': [{'name': 'type', 'order': 0, 'description': 'The ghost prototype type.', 'type': 'string', 'optional': False}]}, {'name': 'name', 'order': 1, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other",
    "metadata": {
      "concept_name": "LuaScriptRaisedDestroyEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedDestroyEventFilter",
    "content": "'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "LuaScriptRaisedDestroyEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedReviveEventFilter",
    "content": "Concept: LuaScriptRaisedReviveEventFilter\nDescription:",
    "metadata": {
      "concept_name": "LuaScriptRaisedReviveEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedReviveEventFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'ghost'}, {'complex_type': 'literal', 'value': 'rail'}, {'complex_type': 'literal', 'value': 'rail-signal'}, {'complex_type': 'literal', 'value': 'rolling-stock'}, {'complex_type': 'literal', 'value': 'robot-with-logistics-interface'}, {'complex_type': 'literal', 'value': 'vehicle'},",
    "metadata": {
      "concept_name": "LuaScriptRaisedReviveEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedReviveEventFilter",
    "content": "{'complex_type': 'literal', 'value': 'vehicle'}, {'complex_type': 'literal', 'value': 'turret'}, {'complex_type': 'literal', 'value': 'crafting-machine'}, {'complex_type': 'literal', 'value': 'wall-connectable'}, {'complex_type': 'literal', 'value': 'transport-belt-connectable'}, {'complex_type': 'literal', 'value': 'circuit-network-connectable'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'ghost_type'}, {'complex_type':",
    "metadata": {
      "concept_name": "LuaScriptRaisedReviveEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedReviveEventFilter",
    "content": "'literal', 'value': 'ghost_type'}, {'complex_type': 'literal', 'value': 'ghost_name'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type':",
    "metadata": {
      "concept_name": "LuaScriptRaisedReviveEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedReviveEventFilter",
    "content": "'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'ghost_name', 'order': 3, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The ghost prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'ghost_type', 'order': 2, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The",
    "metadata": {
      "concept_name": "LuaScriptRaisedReviveEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedReviveEventFilter",
    "content": "'parameters': [{'name': 'type', 'order': 0, 'description': 'The ghost prototype type.', 'type': 'string', 'optional': False}]}, {'name': 'name', 'order': 1, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other",
    "metadata": {
      "concept_name": "LuaScriptRaisedReviveEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedReviveEventFilter",
    "content": "'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "LuaScriptRaisedReviveEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedTeleportedEventFilter",
    "content": "Concept: LuaScriptRaisedTeleportedEventFilter\nDescription:",
    "metadata": {
      "concept_name": "LuaScriptRaisedTeleportedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedTeleportedEventFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'ghost'}, {'complex_type': 'literal', 'value': 'rail'}, {'complex_type': 'literal', 'value': 'rail-signal'}, {'complex_type': 'literal', 'value': 'rolling-stock'}, {'complex_type': 'literal', 'value': 'robot-with-logistics-interface'}, {'complex_type': 'literal', 'value': 'vehicle'},",
    "metadata": {
      "concept_name": "LuaScriptRaisedTeleportedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedTeleportedEventFilter",
    "content": "{'complex_type': 'literal', 'value': 'vehicle'}, {'complex_type': 'literal', 'value': 'turret'}, {'complex_type': 'literal', 'value': 'crafting-machine'}, {'complex_type': 'literal', 'value': 'wall-connectable'}, {'complex_type': 'literal', 'value': 'transport-belt-connectable'}, {'complex_type': 'literal', 'value': 'circuit-network-connectable'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'ghost_type'}, {'complex_type':",
    "metadata": {
      "concept_name": "LuaScriptRaisedTeleportedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedTeleportedEventFilter",
    "content": "'literal', 'value': 'ghost_type'}, {'complex_type': 'literal', 'value': 'ghost_name'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type':",
    "metadata": {
      "concept_name": "LuaScriptRaisedTeleportedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedTeleportedEventFilter",
    "content": "'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'ghost_name', 'order': 3, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The ghost prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'ghost_type', 'order': 2, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The",
    "metadata": {
      "concept_name": "LuaScriptRaisedTeleportedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedTeleportedEventFilter",
    "content": "'parameters': [{'name': 'type', 'order': 0, 'description': 'The ghost prototype type.', 'type': 'string', 'optional': False}]}, {'name': 'name', 'order': 1, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other",
    "metadata": {
      "concept_name": "LuaScriptRaisedTeleportedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaScriptRaisedTeleportedEventFilter",
    "content": "'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "LuaScriptRaisedTeleportedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaSectorScannedEventFilter",
    "content": "Concept: LuaSectorScannedEventFilter\nDescription:",
    "metadata": {
      "concept_name": "LuaSectorScannedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaSectorScannedEventFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'ghost'}, {'complex_type': 'literal', 'value': 'rail'}, {'complex_type': 'literal', 'value': 'rail-signal'}, {'complex_type': 'literal', 'value': 'rolling-stock'}, {'complex_type': 'literal', 'value': 'robot-with-logistics-interface'}, {'complex_type': 'literal', 'value': 'vehicle'},",
    "metadata": {
      "concept_name": "LuaSectorScannedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaSectorScannedEventFilter",
    "content": "{'complex_type': 'literal', 'value': 'vehicle'}, {'complex_type': 'literal', 'value': 'turret'}, {'complex_type': 'literal', 'value': 'crafting-machine'}, {'complex_type': 'literal', 'value': 'wall-connectable'}, {'complex_type': 'literal', 'value': 'transport-belt-connectable'}, {'complex_type': 'literal', 'value': 'circuit-network-connectable'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'ghost_type'}, {'complex_type':",
    "metadata": {
      "concept_name": "LuaSectorScannedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaSectorScannedEventFilter",
    "content": "'literal', 'value': 'ghost_type'}, {'complex_type': 'literal', 'value': 'ghost_name'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type':",
    "metadata": {
      "concept_name": "LuaSectorScannedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaSectorScannedEventFilter",
    "content": "'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'ghost_name', 'order': 3, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The ghost prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'ghost_type', 'order': 2, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The",
    "metadata": {
      "concept_name": "LuaSectorScannedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaSectorScannedEventFilter",
    "content": "'parameters': [{'name': 'type', 'order': 0, 'description': 'The ghost prototype type.', 'type': 'string', 'optional': False}]}, {'name': 'name', 'order': 1, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other",
    "metadata": {
      "concept_name": "LuaSectorScannedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaSectorScannedEventFilter",
    "content": "'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "LuaSectorScannedEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaUpgradeCancelledEventFilter",
    "content": "Concept: LuaUpgradeCancelledEventFilter\nDescription:",
    "metadata": {
      "concept_name": "LuaUpgradeCancelledEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaUpgradeCancelledEventFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'ghost'}, {'complex_type': 'literal', 'value': 'rail'}, {'complex_type': 'literal', 'value': 'rail-signal'}, {'complex_type': 'literal', 'value': 'rolling-stock'}, {'complex_type': 'literal', 'value': 'robot-with-logistics-interface'}, {'complex_type': 'literal', 'value': 'vehicle'},",
    "metadata": {
      "concept_name": "LuaUpgradeCancelledEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaUpgradeCancelledEventFilter",
    "content": "{'complex_type': 'literal', 'value': 'vehicle'}, {'complex_type': 'literal', 'value': 'turret'}, {'complex_type': 'literal', 'value': 'crafting-machine'}, {'complex_type': 'literal', 'value': 'wall-connectable'}, {'complex_type': 'literal', 'value': 'transport-belt-connectable'}, {'complex_type': 'literal', 'value': 'circuit-network-connectable'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'name'}, {'complex_type': 'literal', 'value': 'ghost_type'}, {'complex_type':",
    "metadata": {
      "concept_name": "LuaUpgradeCancelledEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaUpgradeCancelledEventFilter",
    "content": "'literal', 'value': 'ghost_type'}, {'complex_type': 'literal', 'value': 'ghost_name'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type':",
    "metadata": {
      "concept_name": "LuaUpgradeCancelledEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaUpgradeCancelledEventFilter",
    "content": "'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'ghost_name', 'order': 3, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The ghost prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'ghost_type', 'order': 2, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The",
    "metadata": {
      "concept_name": "LuaUpgradeCancelledEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaUpgradeCancelledEventFilter",
    "content": "'parameters': [{'name': 'type', 'order': 0, 'description': 'The ghost prototype type.', 'type': 'string', 'optional': False}]}, {'name': 'name', 'order': 1, 'description': '', 'parameters': [{'name': 'name', 'order': 0, 'description': 'The prototype name.', 'type': 'string', 'optional': False}]}, {'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other",
    "metadata": {
      "concept_name": "LuaUpgradeCancelledEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "LuaUpgradeCancelledEventFilter",
    "content": "'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "LuaUpgradeCancelledEventFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "MapAndDifficultySettings",
    "content": "Concept: MapAndDifficultySettings\nDescription: A standard table containing all [MapSettings](runtime:MapSettings) attributes plus an additional table that contains all [DifficultySettings](runtime:DifficultySettings) properties.",
    "metadata": {
      "concept_name": "MapAndDifficultySettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "MapAndDifficultySettings",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'asteroids', 'order': 6, 'description': '', 'type': 'AsteroidMapSettings', 'optional': False}, {'name': 'difficulty_settings', 'order': 8, 'description': '', 'type': 'MapDifficultySettings', 'optional': False}, {'name': 'enemy_evolution', 'order': 1, 'description': '', 'type': 'EnemyEvolutionMapSettings', 'optional': False}, {'name': 'enemy_expansion', 'order': 2, 'description': '', 'type': 'EnemyExpansionMapSettings', 'optional': False},",
    "metadata": {
      "concept_name": "MapAndDifficultySettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "MapAndDifficultySettings",
    "content": "'', 'type': 'EnemyExpansionMapSettings', 'optional': False}, {'name': 'max_failed_behavior_count', 'order': 7, 'description': 'If a behavior fails this many times, the enemy (or enemy group) is destroyed. This solves biters getting stuck within their own base.', 'type': 'uint', 'optional': False}, {'name': 'path_finder', 'order': 5, 'description': '', 'type': 'PathFinderMapSettings', 'optional': False}, {'name': 'pollution', 'order': 0, 'description': '', 'type': 'PollutionMapSettings', 'optional': False},",
    "metadata": {
      "concept_name": "MapAndDifficultySettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "MapAndDifficultySettings",
    "content": "'', 'type': 'PollutionMapSettings', 'optional': False}, {'name': 'steering', 'order': 4, 'description': '', 'type': 'SteeringMapSettings', 'optional': False}, {'name': 'unit_group', 'order': 3, 'description': '', 'type': 'UnitGroupMapSettings', 'optional': False}]}",
    "metadata": {
      "concept_name": "MapAndDifficultySettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "MapDifficultySettings",
    "content": "Concept: MapDifficultySettings\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'spoil_time_modifier', 'order': 1, 'description': 'A value in range [0.01, 100].', 'type': 'double', 'optional': False}, {'name': 'technology_price_multiplier', 'order': 0, 'description': 'A value in range [0.001, 1000].', 'type': 'double', 'optional': False}]}",
    "metadata": {
      "concept_name": "MapDifficultySettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "MapExchangeStringData",
    "content": "Concept: MapExchangeStringData\nDescription: The data that can be extracted from a map exchange string, as a plain table.\nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'map_gen_settings', 'order': 1, 'description': '', 'type': 'MapGenSettings', 'optional': False}, {'name': 'map_settings', 'order': 0, 'description': '', 'type': 'MapAndDifficultySettings', 'optional': False}]}",
    "metadata": {
      "concept_name": "MapExchangeStringData",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "MapGenPreset",
    "content": "Concept: MapGenPreset\nDescription:",
    "metadata": {
      "concept_name": "MapGenPreset",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "MapGenPreset",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'advanced_settings', 'order': 3, 'description': '', 'type': 'AdvancedMapGenSettings', 'optional': True}, {'name': 'basic_settings', 'order': 2, 'description': '', 'type': 'MapGenSettings', 'optional': True}, {'name': 'default', 'order': 1, 'description': 'Whether this is the preset that is selected by default.', 'type': 'boolean', 'optional': True}, {'name': 'order', 'order': 0, 'description': 'The string used to alphabetically sort the",
    "metadata": {
      "concept_name": "MapGenPreset",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "MapGenPreset",
    "content": "0, 'description': 'The string used to alphabetically sort the presets. It is a simple string that has no additional semantic meaning.', 'type': 'string', 'optional': False}]}",
    "metadata": {
      "concept_name": "MapGenPreset",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "MapGenSettings",
    "content": "Concept: MapGenSettings\nDescription:",
    "metadata": {
      "concept_name": "MapGenSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "MapGenSettings",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'autoplace_controls', 'order': 0, 'description': 'Indexed by autoplace control prototype name.', 'type': {'complex_type': 'dictionary', 'key': 'string', 'value': 'AutoplaceControl'}, 'optional': False}, {'name': 'autoplace_settings', 'order': 2, 'description': 'Each setting in this dictionary maps the string type to the settings for that type.', 'type': {'complex_type': 'dictionary', 'key': {'complex_type': 'union', 'options':",
    "metadata": {
      "concept_name": "MapGenSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "MapGenSettings",
    "content": "'dictionary', 'key': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'entity'}, {'complex_type': 'literal', 'value': 'tile'}, {'complex_type': 'literal', 'value': 'decorative'}], 'full_format': False}, 'value': 'AutoplaceSettings'}, 'optional': False}, {'name': 'cliff_settings', 'order': 11, 'description': 'Map generation settings for entities of the type \"cliff\".', 'type': 'CliffPlacementSettings', 'optional': False}, {'name': 'default_enable_all_autoplace_controls', 'order': 1,",
    "metadata": {
      "concept_name": "MapGenSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "MapGenSettings",
    "content": "{'name': 'default_enable_all_autoplace_controls', 'order': 1, 'description': 'Whether undefined `autoplace_controls` should fall back to the default controls or not. Defaults to `true`.', 'type': 'boolean', 'optional': False}, {'name': 'height', 'order': 5, 'description': \"Height in tiles. If `0`, the map has 'infinite' height, with the actual limitation being one million tiles in each direction from the center.\", 'type': 'uint', 'optional': False}, {'name': 'no_enemies_mode', 'order': 9, 'description':",
    "metadata": {
      "concept_name": "MapGenSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "MapGenSettings",
    "content": "False}, {'name': 'no_enemies_mode', 'order': 9, 'description': 'Whether enemy creatures will not naturally spawn from spawners, map gen, or trigger effects.', 'type': 'boolean', 'optional': False}, {'name': 'peaceful_mode', 'order': 8, 'description': 'Whether enemy creatures will not attack unless the player first attacks them.', 'type': 'boolean', 'optional': False}, {'name': 'property_expression_names', 'order': 10, 'description': 'Overrides for tile property value generators.', 'type':",
    "metadata": {
      "concept_name": "MapGenSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "MapGenSettings",
    "content": "'Overrides for tile property value generators.', 'type': 'PropertyExpressionNames', 'optional': False}, {'name': 'seed', 'order': 3, 'description': 'The random seed used to generated this map.', 'type': 'uint', 'optional': False}, {'name': 'starting_area', 'order': 6, 'description': 'Size of the starting area.', 'type': 'MapGenSize', 'optional': False}, {'name': 'starting_points', 'order': 7, 'description': 'Positions of the starting areas.', 'type': {'complex_type': 'array', 'value': 'MapPosition'},",
    "metadata": {
      "concept_name": "MapGenSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "MapGenSettings",
    "content": "'type': {'complex_type': 'array', 'value': 'MapPosition'}, 'optional': False}, {'name': 'territory_settings', 'order': 12, 'description': '', 'type': 'TerritorySettings', 'optional': False}, {'name': 'width', 'order': 4, 'description': \"Width in tiles. If `0`, the map has 'infinite' width, with the actual limitation being one million tiles in each direction from the center.\", 'type': 'uint', 'optional': False}]}",
    "metadata": {
      "concept_name": "MapGenSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "MapGenSize",
    "content": "Concept: MapGenSize\nDescription: A floating point number specifying an amount.\n\nFor backwards compatibility, MapGenSizes can also be specified as a string, which will be converted to a number (when queried, a number will always be returned).",
    "metadata": {
      "concept_name": "MapGenSize",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "MapGenSize",
    "content": "The map generation algorithm officially supports the range of values the in-game map generation screen shows (specifically `0` and values from `1/6` to `6`). Values outside this range are not guaranteed to work as expected.",
    "metadata": {
      "concept_name": "MapGenSize",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "MapGenSize",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'float', 'description': 'Specifying a map gen dimension.'}, {'complex_type': 'literal', 'value': 'none', 'description': 'equivalent to `0`.'}, {'complex_type': 'literal', 'value': 'very-low', 'description': 'equivalent to `1/2`.'}, {'complex_type': 'literal', 'value': 'very-small', 'description': 'equivalent to `1/2`.'}, {'complex_type': 'literal', 'value': 'very-poor', 'description': 'equivalent to `1/2`.'},",
    "metadata": {
      "concept_name": "MapGenSize",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "MapGenSize",
    "content": "'value': 'very-poor', 'description': 'equivalent to `1/2`.'}, {'complex_type': 'literal', 'value': 'low', 'description': 'equivalent to `1/sqrt(2)`.'}, {'complex_type': 'literal', 'value': 'small', 'description': 'equivalent to `1/sqrt(2)`.'}, {'complex_type': 'literal', 'value': 'poor', 'description': 'equivalent to `1/sqrt(2)`.'}, {'complex_type': 'literal', 'value': 'normal', 'description': 'equivalent to `1`.'}, {'complex_type': 'literal', 'value': 'medium', 'description': 'equivalent to `1`.'},",
    "metadata": {
      "concept_name": "MapGenSize",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "MapGenSize",
    "content": "'value': 'medium', 'description': 'equivalent to `1`.'}, {'complex_type': 'literal', 'value': 'regular', 'description': 'equivalent to `1`.'}, {'complex_type': 'literal', 'value': 'high', 'description': 'equivalent to `sqrt(2)`.'}, {'complex_type': 'literal', 'value': 'big', 'description': 'equivalent to `sqrt(2)`.'}, {'complex_type': 'literal', 'value': 'good', 'description': 'equivalent to `sqrt(2)`.'}, {'complex_type': 'literal', 'value': 'very-high', 'description': 'equivalent to `2`.'},",
    "metadata": {
      "concept_name": "MapGenSize",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "MapGenSize",
    "content": "'value': 'very-high', 'description': 'equivalent to `2`.'}, {'complex_type': 'literal', 'value': 'very-big', 'description': 'equivalent to `2`.'}, {'complex_type': 'literal', 'value': 'very-good', 'description': 'equivalent to `2`.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "MapGenSize",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "MapPosition",
    "content": "Concept: MapPosition\nDescription: Coordinates on a surface, for example of an entity. MapPositions may be specified either as a dictionary with `x`, `y` as keys, or simply as an array with two elements.",
    "metadata": {
      "concept_name": "MapPosition",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "MapPosition",
    "content": "The coordinates are saved as a fixed-size 32 bit integer, with 8 bits reserved for decimal precision, meaning the smallest value step is `1/2^8 = 0.00390625` tiles.\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'table', 'parameters': [{'name': 'x', 'order': 0, 'description': '', 'type': 'double', 'optional': False}, {'name': 'y', 'order': 1, 'description': '', 'type': 'double', 'optional': False}]}, {'complex_type': 'tuple', 'values': ['double', 'double']}], 'full_format': False}",
    "metadata": {
      "concept_name": "MapPosition",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "MapSettings",
    "content": "Concept: MapSettings\nDescription: Various game-related settings. Updating any of the attributes will immediately take effect in the game engine.",
    "metadata": {
      "concept_name": "MapSettings",
      "concept_type": "LuaStruct"
    }
  },
  {
    "type": "concept",
    "name": "MapSettings",
    "content": "Complex_type: {'complex_type': 'LuaStruct', 'attributes': [{'name': 'asteroids', 'order': 6, 'description': '', 'read_type': 'AsteroidMapSettings', 'write_type': 'AsteroidMapSettings', 'optional': False}, {'name': 'enemy_evolution', 'order': 1, 'description': '', 'read_type': 'EnemyEvolutionMapSettings', 'write_type': 'EnemyEvolutionMapSettings', 'optional': False}, {'name': 'enemy_expansion', 'order': 2, 'description': '', 'read_type': 'EnemyExpansionMapSettings', 'write_type':",
    "metadata": {
      "concept_name": "MapSettings",
      "concept_type": "LuaStruct"
    }
  },
  {
    "type": "concept",
    "name": "MapSettings",
    "content": "'', 'read_type': 'EnemyExpansionMapSettings', 'write_type': 'EnemyExpansionMapSettings', 'optional': False}, {'name': 'max_failed_behavior_count', 'order': 7, 'description': 'If a behavior fails this many times, the enemy (or enemy group) is destroyed. This solves biters getting stuck within their own base.', 'read_type': 'uint', 'write_type': 'uint', 'optional': False}, {'name': 'path_finder', 'order': 5, 'description': '', 'read_type': 'PathFinderMapSettings', 'write_type': 'PathFinderMapSettings',",
    "metadata": {
      "concept_name": "MapSettings",
      "concept_type": "LuaStruct"
    }
  },
  {
    "type": "concept",
    "name": "MapSettings",
    "content": "'PathFinderMapSettings', 'write_type': 'PathFinderMapSettings', 'optional': False}, {'name': 'pollution', 'order': 0, 'description': '', 'read_type': 'PollutionMapSettings', 'write_type': 'PollutionMapSettings', 'optional': False}, {'name': 'steering', 'order': 4, 'description': '', 'read_type': 'SteeringMapSetting', 'write_type': 'SteeringMapSetting', 'optional': False}, {'name': 'unit_group', 'order': 3, 'description': '', 'read_type': 'UnitGroupMapSettings', 'write_type': 'UnitGroupMapSettings',",
    "metadata": {
      "concept_name": "MapSettings",
      "concept_type": "LuaStruct"
    }
  },
  {
    "type": "concept",
    "name": "MapSettings",
    "content": "'UnitGroupMapSettings', 'write_type': 'UnitGroupMapSettings', 'optional': False}]}",
    "metadata": {
      "concept_name": "MapSettings",
      "concept_type": "LuaStruct"
    }
  },
  {
    "type": "concept",
    "name": "MapTick",
    "content": "Concept: MapTick\nDescription: `math.huge` represents the maximum possible tick.\nComplex_type: uint64",
    "metadata": {
      "concept_name": "MapTick",
      "concept_type": "uint64"
    }
  },
  {
    "type": "concept",
    "name": "MapViewSettings",
    "content": "Concept: MapViewSettings\nDescription: What is shown in the map view. If a field is not given, that setting will not be changed.",
    "metadata": {
      "concept_name": "MapViewSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "MapViewSettings",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'show-electric-network', 'order': 1, 'description': '', 'type': 'boolean', 'optional': True}, {'name': 'show-logistic-network', 'order': 0, 'description': '', 'type': 'boolean', 'optional': True}, {'name': 'show-networkless-logistic-members', 'order': 4, 'description': '', 'type': 'boolean', 'optional': True}, {'name': 'show-non-standard-map-info', 'order': 12, 'description': '', 'type': 'boolean', 'optional': True}, {'name': 'show-pipelines',",
    "metadata": {
      "concept_name": "MapViewSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "MapViewSettings",
    "content": "'boolean', 'optional': True}, {'name': 'show-pipelines', 'order': 11, 'description': '', 'type': 'boolean', 'optional': True}, {'name': 'show-player-names', 'order': 6, 'description': '', 'type': 'boolean', 'optional': True}, {'name': 'show-pollution', 'order': 3, 'description': '', 'type': 'boolean', 'optional': True}, {'name': 'show-rail-signal-states', 'order': 9, 'description': '', 'type': 'boolean', 'optional': True}, {'name': 'show-recipe-icons', 'order': 10, 'description': '', 'type': 'boolean',",
    "metadata": {
      "concept_name": "MapViewSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "MapViewSettings",
    "content": "'order': 10, 'description': '', 'type': 'boolean', 'optional': True}, {'name': 'show-tags', 'order': 7, 'description': '', 'type': 'boolean', 'optional': True}, {'name': 'show-train-station-names', 'order': 5, 'description': '', 'type': 'boolean', 'optional': True}, {'name': 'show-turret-range', 'order': 2, 'description': '', 'type': 'boolean', 'optional': True}, {'name': 'show-worker-robots', 'order': 8, 'description': '', 'type': 'boolean', 'optional': True}]}",
    "metadata": {
      "concept_name": "MapViewSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "MarketIngredient",
    "content": "Concept: MarketIngredient\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'count', 'order': 2, 'description': 'Count of the item. Cannot be 0.', 'type': 'ItemCountType', 'optional': False}, {'name': 'name', 'order': 0, 'description': 'Prototype name of the required item.', 'type': 'string', 'optional': False}, {'name': 'quality', 'order': 1, 'description': 'Normal quality will be used if not specified.', 'type': 'string', 'optional': True}]}",
    "metadata": {
      "concept_name": "MarketIngredient",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "MathExpression",
    "content": "Concept: MathExpression\nDescription: A string that represents a math expression. The expression parser recognizes four basic token types (with their regex):\n\n- Whitespace: `[ \\n\\r\\t]*`\n\n- Number: `(0x[0-9a-f]+|([0-9]+\\.?[0-9]*|\\.[0-9]+)(e-?[0-9]+)?)` (e.g. `3.2`, `100`, `.6`, `4.2e-5`, `0x2a5f`). Supports hexadecimal input and scientific notation for decimal numbers.\n\n- Operator: `+`, `-`, `*`, `/`, `^`, and `()` for brackets, which may be nested.",
    "metadata": {
      "concept_name": "MathExpression",
      "concept_type": "string"
    }
  },
  {
    "type": "concept",
    "name": "MathExpression",
    "content": "- Identifier: The functions listed below and any variables listed where the expression is used.\n\nIdentifiers are used to name functions and variables, which result in or represent numbers. The following functions are always available:\n\n- `abs(value)`: Returns absolute value of the given argument; i.e. if the argument is negative, it is inverted.\n\n- `log2(value)`: Returns a binary logarithm of the given value.",
    "metadata": {
      "concept_name": "MathExpression",
      "concept_type": "string"
    }
  },
  {
    "type": "concept",
    "name": "MathExpression",
    "content": "- `sign(value)`: Returns `-1` for negative numbers, `0` for zero (regardless of sign), `1` for positive numbers\n\n- `max(value1, value2, ...)`: Returns the greater of the given values. Supports between 2 and 255 arguments.\n\n- `min(value1, value2, ...)`: Returns the smaller of the given values. Supports between 2 and 255 arguments.",
    "metadata": {
      "concept_name": "MathExpression",
      "concept_type": "string"
    }
  },
  {
    "type": "concept",
    "name": "MathExpression",
    "content": "The property where the expression is used may provide variables. For example in [TechnologyUnit::count_formula](prototype:TechnologyUnit::count_formula) `L` and `l` may be used for the technology level.\n\nThe formula is executed following the [BODMAS](https://en.wikipedia.org/wiki/Order_of_operations#Conventional_order) order (also known as PEMDAS).\nComplex_type: string",
    "metadata": {
      "concept_name": "MathExpression",
      "concept_type": "string"
    }
  },
  {
    "type": "concept",
    "name": "MineableProperties",
    "content": "Concept: MineableProperties\nDescription:",
    "metadata": {
      "concept_name": "MineableProperties",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "MineableProperties",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'fluid_amount', 'order': 4, 'description': 'The required fluid amount if any.', 'type': 'double', 'optional': True}, {'name': 'minable', 'order': 0, 'description': 'Is this entity mineable at all?', 'type': 'boolean', 'optional': False}, {'name': 'mining_particle', 'order': 2, 'description': 'Prototype name of the particle produced when mining this entity. Will only be present if this entity produces any particle during mining.', 'type':",
    "metadata": {
      "concept_name": "MineableProperties",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "MineableProperties",
    "content": "if this entity produces any particle during mining.', 'type': 'string', 'optional': True}, {'name': 'mining_time', 'order': 1, 'description': 'Energy required to mine an entity.', 'type': 'double', 'optional': False}, {'name': 'mining_trigger', 'order': 6, 'description': 'The mining trigger if any.', 'type': {'complex_type': 'array', 'value': 'TriggerItem'}, 'optional': True}, {'name': 'products', 'order': 3, 'description': 'Products obtained by mining this entity.', 'type': {'complex_type': 'array',",
    "metadata": {
      "concept_name": "MineableProperties",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "MineableProperties",
    "content": "by mining this entity.', 'type': {'complex_type': 'array', 'value': 'Product'}, 'optional': True}, {'name': 'required_fluid', 'order': 5, 'description': 'The prototype name of the required fluid if any.', 'type': 'string', 'optional': True}]}",
    "metadata": {
      "concept_name": "MineableProperties",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ModChangeData",
    "content": "Concept: ModChangeData\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'new_version', 'order': 1, 'description': 'New version of the mod. May be `nil` if the mod is no longer present (i.e. it was just removed).', 'type': 'string', 'optional': False}, {'name': 'old_version', 'order': 0, 'description': \"Old version of the mod. May be `nil` if the mod wasn't previously present (i.e. it was just added).\", 'type': 'string', 'optional': False}]}",
    "metadata": {
      "concept_name": "ModChangeData",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ModSetting",
    "content": "Concept: ModSetting\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'value', 'order': 0, 'description': 'The value of the mod setting. The type depends on the kind of setting.', 'type': {'complex_type': 'union', 'options': ['int', 'double', 'boolean', 'string', 'Color'], 'full_format': False}, 'optional': False}]}",
    "metadata": {
      "concept_name": "ModSetting",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ModSettingPrototypeFilter",
    "content": "Concept: ModSettingPrototypeFilter\nDescription:",
    "metadata": {
      "concept_name": "ModSettingPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ModSettingPrototypeFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'mod'}, {'complex_type': 'literal', 'value': 'setting-type'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name':",
    "metadata": {
      "concept_name": "ModSettingPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ModSettingPrototypeFilter",
    "content": "is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'mod', 'order': 1, 'description': '', 'parameters':",
    "metadata": {
      "concept_name": "ModSettingPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ModSettingPrototypeFilter",
    "content": "[{'name': 'mod', 'order': 1, 'description': '', 'parameters': [{'name': 'mod', 'order': 0, 'description': 'The mod name', 'type': 'string', 'optional': False}]}, {'name': 'setting-type', 'order': 2, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The setting scope type.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'startup'}, {'complex_type': 'literal', 'value': 'runtime-global'}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "ModSettingPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ModSettingPrototypeFilter",
    "content": "'runtime-global'}, {'complex_type': 'literal', 'value': 'runtime-per-user'}], 'full_format': False}, 'optional': False}]}, {'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type, or a list of acceptable types.', 'type': {'complex_type': 'union', 'options': ['string', {'complex_type': 'array', 'value': 'string'}], 'full_format': False}, 'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending",
    "metadata": {
      "concept_name": "ModSettingPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ModSettingPrototypeFilter",
    "content": "'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "ModSettingPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ModifierType",
    "content": "Concept: ModifierType\nDescription: Used by [TechnologyModifier](runtime:TechnologyModifier).",
    "metadata": {
      "concept_name": "ModifierType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ModifierType",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'inserter-stack-size-bonus', 'description': ''}, {'complex_type': 'literal', 'value': 'bulk-inserter-capacity-bonus', 'description': ''}, {'complex_type': 'literal', 'value': 'laboratory-speed', 'description': ''}, {'complex_type': 'literal', 'value': 'character-logistic-trash-slots', 'description': ''}, {'complex_type': 'literal', 'value': 'maximum-following-robots-count', 'description': ''}, {'complex_type':",
    "metadata": {
      "concept_name": "ModifierType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ModifierType",
    "content": "'description': ''}, {'complex_type': 'literal', 'value': 'worker-robot-speed', 'description': ''}, {'complex_type': 'literal', 'value': 'worker-robot-storage', 'description': ''}, {'complex_type': 'literal', 'value': 'turret-attack', 'description': ''}, {'complex_type': 'literal', 'value': 'ammo-damage', 'description': ''}, {'complex_type': 'literal', 'value': 'give-item', 'description': ''}, {'complex_type': 'literal', 'value': 'gun-speed', 'description': ''}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "ModifierType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ModifierType",
    "content": "'description': ''}, {'complex_type': 'literal', 'value': 'unlock-recipe', 'description': ''}, {'complex_type': 'literal', 'value': 'character-crafting-speed', 'description': ''}, {'complex_type': 'literal', 'value': 'character-mining-speed', 'description': ''}, {'complex_type': 'literal', 'value': 'character-running-speed', 'description': ''}, {'complex_type': 'literal', 'value': 'character-build-distance', 'description': ''}, {'complex_type': 'literal', 'value': 'character-item-drop-distance',",
    "metadata": {
      "concept_name": "ModifierType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ModifierType",
    "content": "'literal', 'value': 'character-item-drop-distance', 'description': ''}, {'complex_type': 'literal', 'value': 'character-reach-distance', 'description': ''}, {'complex_type': 'literal', 'value': 'character-resource-reach-distance', 'description': ''}, {'complex_type': 'literal', 'value': 'character-item-pickup-distance', 'description': ''}, {'complex_type': 'literal', 'value': 'character-loot-pickup-distance', 'description': ''}, {'complex_type': 'literal', 'value': 'character-inventory-slots-bonus',",
    "metadata": {
      "concept_name": "ModifierType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ModifierType",
    "content": "'literal', 'value': 'character-inventory-slots-bonus', 'description': ''}, {'complex_type': 'literal', 'value': 'deconstruction-time-to-live', 'description': ''}, {'complex_type': 'literal', 'value': 'max-failed-attempts-per-tick-per-construction-queue', 'description': ''}, {'complex_type': 'literal', 'value': 'max-successful-attempts-per-tick-per-construction-queue', 'description': ''}, {'complex_type': 'literal', 'value': 'character-health-bonus', 'description': ''}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "ModifierType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ModifierType",
    "content": "'description': ''}, {'complex_type': 'literal', 'value': 'mining-drill-productivity-bonus', 'description': ''}, {'complex_type': 'literal', 'value': 'train-braking-force-bonus', 'description': ''}, {'complex_type': 'literal', 'value': 'worker-robot-battery', 'description': ''}, {'complex_type': 'literal', 'value': 'laboratory-productivity', 'description': ''}, {'complex_type': 'literal', 'value': 'follower-robot-lifetime', 'description': ''}, {'complex_type': 'literal', 'value': 'artillery-range',",
    "metadata": {
      "concept_name": "ModifierType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ModifierType",
    "content": "''}, {'complex_type': 'literal', 'value': 'artillery-range', 'description': ''}, {'complex_type': 'literal', 'value': 'nothing', 'description': ''}, {'complex_type': 'literal', 'value': 'character-logistic-requests', 'description': ''}, {'complex_type': 'literal', 'value': 'unlock-space-location', 'description': ''}, {'complex_type': 'literal', 'value': 'unlock-quality', 'description': ''}, {'complex_type': 'literal', 'value': 'unlock-space-platforms', 'description': ''}, {'complex_type': 'literal',",
    "metadata": {
      "concept_name": "ModifierType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ModifierType",
    "content": "'description': ''}, {'complex_type': 'literal', 'value': 'unlock-circuit-network', 'description': ''}, {'complex_type': 'literal', 'value': 'cargo-landing-pad-count', 'description': ''}, {'complex_type': 'literal', 'value': 'change-recipe-productivity', 'description': ''}, {'complex_type': 'literal', 'value': 'cliff-deconstruction-enabled', 'description': ''}, {'complex_type': 'literal', 'value': 'mining-with-fluid', 'description': ''}, {'complex_type': 'literal', 'value': 'rail-support-on-deep-oil-ocean',",
    "metadata": {
      "concept_name": "ModifierType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ModifierType",
    "content": "'literal', 'value': 'rail-support-on-deep-oil-ocean', 'description': ''}, {'complex_type': 'literal', 'value': 'rail-planner-allow-elevated-rails', 'description': ''}, {'complex_type': 'literal', 'value': 'beacon-distribution', 'description': ''}, {'complex_type': 'literal', 'value': 'create-ghost-on-entity-death', 'description': ''}, {'complex_type': 'literal', 'value': 'belt-stack-size-bonus', 'description': ''}, {'complex_type': 'literal', 'value': 'vehicle-logistics', 'description': ''}],",
    "metadata": {
      "concept_name": "ModifierType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ModifierType",
    "content": "'literal', 'value': 'vehicle-logistics', 'description': ''}], 'full_format': True}",
    "metadata": {
      "concept_name": "ModifierType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ModuleEffectValue",
    "content": "Concept: ModuleEffectValue\nDescription: The percentual increase of the attribute. A value of `0.6` means a 60% increase.\n\nQuality values are divided by 10 internally, allowing for one more decimal of precision.\nComplex_type: float",
    "metadata": {
      "concept_name": "ModuleEffectValue",
      "concept_type": "float"
    }
  },
  {
    "type": "concept",
    "name": "ModuleEffects",
    "content": "Concept: ModuleEffects\nDescription:",
    "metadata": {
      "concept_name": "ModuleEffects",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ModuleEffects",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'consumption', 'order': 0, 'description': '', 'type': 'ModuleEffectValue', 'optional': True}, {'name': 'pollution', 'order': 3, 'description': '', 'type': 'ModuleEffectValue', 'optional': True}, {'name': 'productivity', 'order': 2, 'description': '', 'type': 'ModuleEffectValue', 'optional': True}, {'name': 'quality', 'order': 4, 'description': '', 'type': 'ModuleEffectValue', 'optional': True}, {'name': 'speed', 'order': 1, 'description': '',",
    "metadata": {
      "concept_name": "ModuleEffects",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ModuleEffects",
    "content": "True}, {'name': 'speed', 'order': 1, 'description': '', 'type': 'ModuleEffectValue', 'optional': True}]}",
    "metadata": {
      "concept_name": "ModuleEffects",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "MouseButtonFlags",
    "content": "Concept: MouseButtonFlags\nDescription: A set of flags. Active flags are in the dictionary as `true`, while inactive flags aren't present at all.",
    "metadata": {
      "concept_name": "MouseButtonFlags",
      "concept_type": "dictionary"
    }
  },
  {
    "type": "concept",
    "name": "MouseButtonFlags",
    "content": "To write to this, use an array[[string](runtime:string)] of the mouse buttons that should be possible to use with on button. The flag `\"left-and-right\"` can also be set, which will set `\"left\"` and `\"right\"` to `true`.",
    "metadata": {
      "concept_name": "MouseButtonFlags",
      "concept_type": "dictionary"
    }
  },
  {
    "type": "concept",
    "name": "MouseButtonFlags",
    "content": "Complex_type: {'complex_type': 'dictionary', 'key': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'left', 'description': ''}, {'complex_type': 'literal', 'value': 'right', 'description': ''}, {'complex_type': 'literal', 'value': 'middle', 'description': ''}, {'complex_type': 'literal', 'value': 'button-4', 'description': ''}, {'complex_type': 'literal', 'value': 'button-5', 'description': ''}, {'complex_type': 'literal', 'value': 'button-6', 'description': ''}, {'complex_type':",
    "metadata": {
      "concept_name": "MouseButtonFlags",
      "concept_type": "dictionary"
    }
  },
  {
    "type": "concept",
    "name": "MouseButtonFlags",
    "content": "'value': 'button-6', 'description': ''}, {'complex_type': 'literal', 'value': 'button-7', 'description': ''}, {'complex_type': 'literal', 'value': 'button-8', 'description': ''}, {'complex_type': 'literal', 'value': 'button-9', 'description': ''}], 'full_format': True}, 'value': {'complex_type': 'literal', 'value': True}}",
    "metadata": {
      "concept_name": "MouseButtonFlags",
      "concept_type": "dictionary"
    }
  },
  {
    "type": "concept",
    "name": "NoiseExpression",
    "content": "Concept: NoiseExpression\nDescription: A fragment of a functional program used to generate coherent noise, probably for purposes related to terrain generation. These can only be meaningfully written/modified during the data load phase. More detailed information is found on the [prototype docs](prototype:NamedNoiseExpression).",
    "metadata": {
      "concept_name": "NoiseExpression",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "NoiseExpression",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'type', 'order': 0, 'description': 'Names the type of the expression and determines what other fields are required.', 'type': 'string', 'optional': False}]}",
    "metadata": {
      "concept_name": "NoiseExpression",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "NthTickEventData",
    "content": "Concept: NthTickEventData\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'nth_tick', 'order': 1, 'description': 'The nth tick this handler was registered to.', 'type': 'uint', 'optional': False}, {'name': 'tick', 'order': 0, 'description': 'The tick during which the event happened.', 'type': 'uint', 'optional': False}]}",
    "metadata": {
      "concept_name": "NthTickEventData",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Offer",
    "content": "Concept: Offer\nDescription: A single offer on a market entity.\nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'offer', 'order': 1, 'description': 'The action that will take place when a player accepts the offer. Usually a `\"give-item\"` modifier.', 'type': 'TechnologyModifier', 'optional': False}, {'name': 'price', 'order': 0, 'description': 'List of prices.', 'type': {'complex_type': 'array', 'value': 'MarketIngredient'}, 'optional': True}]}",
    "metadata": {
      "concept_name": "Offer",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "OldTileAndPosition",
    "content": "Concept: OldTileAndPosition\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'old_tile', 'order': 0, 'description': '', 'type': 'LuaTilePrototype', 'optional': False}, {'name': 'position', 'order': 1, 'description': '', 'type': 'TilePosition', 'optional': False}]}",
    "metadata": {
      "concept_name": "OldTileAndPosition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ParticleID",
    "content": "Concept: ParticleID\nDescription: A particle prototype may be specified in one of two ways.\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'LuaParticlePrototype', 'description': 'The particle prototype.'}, {'complex_type': 'type', 'value': 'string', 'description': 'The prototype name.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "ParticleID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "PathFinderMapSettings",
    "content": "Concept: PathFinderMapSettings\nDescription:",
    "metadata": {
      "concept_name": "PathFinderMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PathFinderMapSettings",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'cache_accept_path_end_distance_ratio', 'order': 12, 'description': \"When looking for a path from cache, make sure it doesn't end too far from the requested end in relative terms. This is typically more lenient than the start ratio since the end target could be moving. Defaults to `0.15`.\", 'type': 'double', 'optional': False}, {'name': 'cache_accept_path_start_distance_ratio', 'order': 11, 'description': \"When looking for a path from cache,",
    "metadata": {
      "concept_name": "PathFinderMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PathFinderMapSettings",
    "content": "11, 'description': \"When looking for a path from cache, make sure it doesn't start too far from the requested start in relative terms. Defaults to `0.2`.\", 'type': 'double', 'optional': False}, {'name': 'cache_max_connect_to_cache_steps_multiplier', 'order': 10, 'description': 'When looking for a connection to a cached path, search at most for this number of steps times the original estimate. Defaults to `100`.', 'type': 'uint', 'optional': False}, {'name': 'cache_path_end_distance_rating_multiplier',",
    "metadata": {
      "concept_name": "PathFinderMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PathFinderMapSettings",
    "content": "False}, {'name': 'cache_path_end_distance_rating_multiplier', 'order': 16, 'description': 'When assigning a rating to the best path, this multiplier times end distances is considered. This value is typically higher than the start multiplier as this results in better end path quality. Defaults to `20`.', 'type': 'double', 'optional': False}, {'name': 'cache_path_start_distance_rating_multiplier', 'order': 15, 'description': 'When assigning a rating to the best path, this multiplier times start distances is",
    "metadata": {
      "concept_name": "PathFinderMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PathFinderMapSettings",
    "content": "to the best path, this multiplier times start distances is considered. Defaults to `10`.', 'type': 'double', 'optional': False}, {'name': 'direct_distance_to_consider_short_request', 'order': 25, 'description': 'The maximum direct distance in tiles before a request is no longer considered short. Defaults to `100`.', 'type': 'uint', 'optional': False}, {'name': 'enemy_with_different_destination_collision_penalty', 'order': 19, 'description': 'A penalty that is applied for another unit that is too close and",
    "metadata": {
      "concept_name": "PathFinderMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PathFinderMapSettings",
    "content": "penalty that is applied for another unit that is too close and either not moving or has a different goal. Defaults to `30`.', 'type': 'double', 'optional': False}, {'name': 'extended_collision_penalty', 'order': 22, 'description': \"The collision penalty for collisions in the extended bounding box but outside the entity's actual bounding box. Defaults to `3`.\", 'type': 'double', 'optional': False}, {'name': 'fwd2bwd_ratio', 'order': 0, 'description': \"The pathfinder performs a step of the backward search",
    "metadata": {
      "concept_name": "PathFinderMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PathFinderMapSettings",
    "content": "\"The pathfinder performs a step of the backward search every `fwd2bwd_ratio`'th step. The minimum allowed value is `2`, which means symmetric search. The default value is `5`.\", 'type': 'uint', 'optional': False}, {'name': 'general_entity_collision_penalty', 'order': 20, 'description': 'The general collision penalty with other units. Defaults to `10`.', 'type': 'double', 'optional': False}, {'name': 'general_entity_subsequent_collision_penalty', 'order': 21, 'description': 'The collision penalty for",
    "metadata": {
      "concept_name": "PathFinderMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PathFinderMapSettings",
    "content": "'order': 21, 'description': 'The collision penalty for positions that require the destruction of an entity to get to. Defaults to `3`.', 'type': 'double', 'optional': False}, {'name': 'goal_pressure_ratio', 'order': 1, 'description': 'When looking at which node to check next, their heuristic value is multiplied by this ratio. The higher it is, the more the search is directed straight at the goal. Defaults to `2`.', 'type': 'double', 'optional': False}, {'name': 'ignore_moving_enemy_collision_distance',",
    "metadata": {
      "concept_name": "PathFinderMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PathFinderMapSettings",
    "content": "False}, {'name': 'ignore_moving_enemy_collision_distance', 'order': 18, 'description': 'The distance in tiles after which other moving units are not considered for pathfinding. Defaults to `5`.', 'type': 'double', 'optional': False}, {'name': 'long_cache_min_cacheable_distance', 'order': 9, 'description': 'The minimal distance to the goal in tiles required to be searched in the long path cache. Defaults to `30`.', 'type': 'double', 'optional': False}, {'name': 'long_cache_size', 'order': 6, 'description':",
    "metadata": {
      "concept_name": "PathFinderMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PathFinderMapSettings",
    "content": "False}, {'name': 'long_cache_size', 'order': 6, 'description': 'Number of elements in the long cache. Defaults to `25`.', 'type': 'uint', 'optional': False}, {'name': 'max_clients_to_accept_any_new_request', 'order': 23, 'description': \"The amount of path finder requests accepted per tick regardless of the requested path's length. Defaults to `10`.\", 'type': 'uint', 'optional': False}, {'name': 'max_clients_to_accept_short_new_request', 'order': 24, 'description': 'When the",
    "metadata": {
      "concept_name": "PathFinderMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PathFinderMapSettings",
    "content": "'order': 24, 'description': 'When the `max_clients_to_accept_any_new_request` amount is exhausted, only path finder requests with a short estimate will be accepted until this amount (per tick) is reached. Defaults to `100`.', 'type': 'uint', 'optional': False}, {'name': 'max_steps_worked_per_tick', 'order': 3, 'description': 'The maximum number of nodes that are expanded per tick. Defaults to `1 000`.', 'type': 'double', 'optional': False}, {'name': 'max_work_done_per_tick', 'order': 4, 'description': 'The",
    "metadata": {
      "concept_name": "PathFinderMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PathFinderMapSettings",
    "content": "'max_work_done_per_tick', 'order': 4, 'description': 'The maximum amount of work each pathfinding job is allowed to do per tick. Defaults to `8 000`.', 'type': 'uint', 'optional': False}, {'name': 'min_steps_to_check_path_find_termination', 'order': 28, 'description': 'The minimum amount of steps that are guaranteed to be performed for every request. Defaults to `2000`.', 'type': 'uint', 'optional': False}, {'name': 'negative_cache_accept_path_end_distance_ratio', 'order': 14, 'description': 'Same",
    "metadata": {
      "concept_name": "PathFinderMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PathFinderMapSettings",
    "content": "'order': 14, 'description': 'Same principle as `cache_accept_path_end_distance_ratio`, but used for negative cache queries. Defaults to `0.3`.', 'type': 'double', 'optional': False}, {'name': 'negative_cache_accept_path_start_distance_ratio', 'order': 13, 'description': 'Same principle as `cache_accept_path_start_distance_ratio`, but used for negative cache queries. Defaults to `0.3`.', 'type': 'double', 'optional': False}, {'name': 'negative_path_cache_delay_interval', 'order': 32, 'description': 'The",
    "metadata": {
      "concept_name": "PathFinderMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PathFinderMapSettings",
    "content": "'order': 32, 'description': 'The delay in ticks between decrementing the score of all paths in the negative cache by one. Defaults to `20`.', 'type': 'uint', 'optional': False}, {'name': 'overload_levels', 'order': 30, 'description': 'The thresholds of waiting clients after each of which the per-tick work limit will be increased by the corresponding value in `overload_multipliers`. This is to avoid clients having to wait too long. Must have the same number of elements as `overload_multipliers`. Defaults to",
    "metadata": {
      "concept_name": "PathFinderMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PathFinderMapSettings",
    "content": "same number of elements as `overload_multipliers`. Defaults to `{0, 100, 500}`.', 'type': {'complex_type': 'array', 'value': 'uint'}, 'optional': False}, {'name': 'overload_multipliers', 'order': 31, 'description': 'The multipliers to the amount of per-tick work applied after the corresponding thresholds in `overload_levels` have been reached. Must have the same number of elements as `overload_multipliers`. Defaults to `{2, 3, 4}`.', 'type': {'complex_type': 'array', 'value': 'double'}, 'optional': False},",
    "metadata": {
      "concept_name": "PathFinderMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PathFinderMapSettings",
    "content": "'array', 'value': 'double'}, 'optional': False}, {'name': 'short_cache_min_algo_steps_to_cache', 'order': 8, 'description': 'The minimal number of nodes required to be searched in the short path cache. Defaults to `50`.', 'type': 'uint', 'optional': False}, {'name': 'short_cache_min_cacheable_distance', 'order': 7, 'description': 'The minimal distance to the goal in tiles required to be searched in the short path cache. Defaults to `10`.', 'type': 'double', 'optional': False}, {'name': 'short_cache_size',",
    "metadata": {
      "concept_name": "PathFinderMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PathFinderMapSettings",
    "content": "'double', 'optional': False}, {'name': 'short_cache_size', 'order': 5, 'description': 'Number of elements in the short cache. Defaults to `5`.', 'type': 'uint', 'optional': False}, {'name': 'short_request_max_steps', 'order': 26, 'description': 'The maximum amount of nodes a short request will traverse before being rescheduled as a long request. Defaults to `1000`.', 'type': 'uint', 'optional': False}, {'name': 'short_request_ratio', 'order': 27, 'description': 'The amount of steps that are allocated to",
    "metadata": {
      "concept_name": "PathFinderMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PathFinderMapSettings",
    "content": "27, 'description': 'The amount of steps that are allocated to short requests each tick, as a percentage of all available steps. Defaults to `0.5`, or 50%.', 'type': 'double', 'optional': False}, {'name': 'stale_enemy_with_same_destination_collision_penalty', 'order': 17, 'description': 'A penalty that is applied for another unit that is on the way to the goal. This is mainly relevant for situations where a group of units has arrived at the target they are supposed to attack, making units further back",
    "metadata": {
      "concept_name": "PathFinderMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PathFinderMapSettings",
    "content": "target they are supposed to attack, making units further back circle around to reach the target. Defaults to `30`.', 'type': 'double', 'optional': False}, {'name': 'start_to_goal_cost_multiplier_to_terminate_path_find', 'order': 29, 'description': 'If the actual amount of steps is higher than the initial estimate by this factor, pathfinding is terminated. Defaults to `2000.0`.', 'type': 'double', 'optional': False}, {'name': 'use_path_cache', 'order': 2, 'description': 'Whether to cache paths at all.",
    "metadata": {
      "concept_name": "PathFinderMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PathFinderMapSettings",
    "content": "'order': 2, 'description': 'Whether to cache paths at all. Defaults to `true`.', 'type': 'boolean', 'optional': False}]}",
    "metadata": {
      "concept_name": "PathFinderMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PathfinderFlags",
    "content": "Concept: PathfinderFlags\nDescription:",
    "metadata": {
      "concept_name": "PathfinderFlags",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PathfinderFlags",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'allow_destroy_friendly_entities', 'order': 0, 'description': 'Allows pathing through friendly entities. Defaults to `false`.', 'type': 'boolean', 'optional': True}, {'name': 'allow_paths_through_own_entities', 'order': 1, 'description': 'Allows the pathfinder to path through entities of the same force. Defaults to `false`.', 'type': 'boolean', 'optional': True}, {'name': 'cache', 'order': 2, 'description': 'Enables path caching. This can be",
    "metadata": {
      "concept_name": "PathfinderFlags",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PathfinderFlags",
    "content": "'order': 2, 'description': 'Enables path caching. This can be more efficient, but might fail to respond to changes in the environment. Defaults to `true`.', 'type': 'boolean', 'optional': True}, {'name': 'low_priority', 'order': 4, 'description': 'Sets lower priority on the path request, meaning it might take longer to find a path at the expense of speeding up others. Defaults to `false`.', 'type': 'boolean', 'optional': True}, {'name': 'no_break', 'order': 5, 'description': 'Makes the pathfinder not break",
    "metadata": {
      "concept_name": "PathfinderFlags",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PathfinderFlags",
    "content": "'order': 5, 'description': 'Makes the pathfinder not break in the middle of processing this pathfind, no matter how much work is needed. Defaults to `false`.', 'type': 'boolean', 'optional': True}, {'name': 'prefer_straight_paths', 'order': 3, 'description': 'Makes the pathfinder try to path in straight lines. Defaults to `false`.', 'type': 'boolean', 'optional': True}]}",
    "metadata": {
      "concept_name": "PathfinderFlags",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PathfinderWaypoint",
    "content": "Concept: PathfinderWaypoint\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'needs_destroy_to_reach', 'order': 1, 'description': '`true` if the path from the previous waypoint to this one goes through an entity that must be destroyed.', 'type': 'boolean', 'optional': False}, {'name': 'position', 'order': 0, 'description': 'The position of the waypoint on its surface.', 'type': 'MapPosition', 'optional': False}]}",
    "metadata": {
      "concept_name": "PathfinderWaypoint",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PipeConnection",
    "content": "Concept: PipeConnection\nDescription: A single pipe connection for a given fluidbox.",
    "metadata": {
      "concept_name": "PipeConnection",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PipeConnection",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'connection_type', 'order': 1, 'description': '', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'normal'}, {'complex_type': 'literal', 'value': 'underground'}, {'complex_type': 'literal', 'value': 'linked'}], 'full_format': False}, 'optional': False}, {'name': 'flow_direction', 'order': 0, 'description': '', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'input'},",
    "metadata": {
      "concept_name": "PipeConnection",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PipeConnection",
    "content": "'options': [{'complex_type': 'literal', 'value': 'input'}, {'complex_type': 'literal', 'value': 'output'}, {'complex_type': 'literal', 'value': 'input-output'}], 'full_format': False}, 'optional': False}, {'name': 'position', 'order': 2, 'description': 'The absolute position of this connection within the entity.', 'type': 'MapPosition', 'optional': False}, {'name': 'target', 'order': 4, 'description': 'The connected fluidbox, if any.', 'type': 'LuaFluidBox', 'optional': True}, {'name':",
    "metadata": {
      "concept_name": "PipeConnection",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PipeConnection",
    "content": "if any.', 'type': 'LuaFluidBox', 'optional': True}, {'name': 'target_fluidbox_index', 'order': 5, 'description': 'The index of the target fluidbox, if any.', 'type': 'uint', 'optional': True}, {'name': 'target_pipe_connection_index', 'order': 6, 'description': 'The index of the target fluidbox pipe connection, if any.', 'type': 'uint', 'optional': True}, {'name': 'target_position', 'order': 3, 'description': \"The absolute position of the connection's intended target.\", 'type': 'MapPosition', 'optional':",
    "metadata": {
      "concept_name": "PipeConnection",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PipeConnection",
    "content": "intended target.\", 'type': 'MapPosition', 'optional': False}]}",
    "metadata": {
      "concept_name": "PipeConnection",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PipeConnectionDefinition",
    "content": "Concept: PipeConnectionDefinition\nDescription:",
    "metadata": {
      "concept_name": "PipeConnectionDefinition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PipeConnectionDefinition",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'connection_category', 'order': 5, 'description': '', 'type': {'complex_type': 'array', 'value': 'string'}, 'optional': False}, {'name': 'connection_type', 'order': 0, 'description': '', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'normal'}, {'complex_type': 'literal', 'value': 'underground'}, {'complex_type': 'literal', 'value': 'linked'}], 'full_format': False}, 'optional': False}, {'name': 'direction',",
    "metadata": {
      "concept_name": "PipeConnectionDefinition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PipeConnectionDefinition",
    "content": "False}, 'optional': False}, {'name': 'direction', 'order': 4, 'description': '', 'type': 'defines.direction', 'optional': False}, {'name': 'flow_direction', 'order': 3, 'description': '', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'input-output'}, {'complex_type': 'literal', 'value': 'input'}, {'complex_type': 'literal', 'value': 'output'}], 'full_format': False}, 'optional': False}, {'name': 'linked_connection_id', 'order': 6, 'description': 'Only supplied if",
    "metadata": {
      "concept_name": "PipeConnectionDefinition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PipeConnectionDefinition",
    "content": "'order': 6, 'description': 'Only supplied if `connection_type` is `\"linked\"`.', 'type': 'uint', 'optional': True}, {'name': 'max_underground_distance', 'order': 2, 'description': 'The maximum tile distance this underground connection can connect.', 'type': 'uint', 'optional': True}, {'name': 'positions', 'order': 1, 'description': 'The 4 cardinal direction connection points for this pipe.', 'type': {'complex_type': 'array', 'value': 'MapPosition'}, 'optional': False}]}",
    "metadata": {
      "concept_name": "PipeConnectionDefinition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PlaceAsTileResult",
    "content": "Concept: PlaceAsTileResult\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'condition', 'order': 2, 'description': '', 'type': 'CollisionMask', 'optional': False}, {'name': 'condition_size', 'order': 1, 'description': '', 'type': 'uint', 'optional': False}, {'name': 'result', 'order': 0, 'description': 'The tile prototype.', 'type': 'LuaTilePrototype', 'optional': False}]}",
    "metadata": {
      "concept_name": "PlaceAsTileResult",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PlatformSchedule",
    "content": "Concept: PlatformSchedule\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'current', 'order': 0, 'description': 'Index of the currently active record', 'type': 'uint', 'optional': False}, {'name': 'records', 'order': 1, 'description': '', 'type': {'complex_type': 'array', 'value': 'ScheduleRecord'}, 'optional': False}]}",
    "metadata": {
      "concept_name": "PlatformSchedule",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PlayerIdentification",
    "content": "Concept: PlayerIdentification\nDescription: A player may be specified in one of three ways.\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'uint', 'description': 'The player index.'}, {'complex_type': 'type', 'value': 'string', 'description': 'The player name.'}, {'complex_type': 'type', 'value': 'LuaPlayer', 'description': 'A reference to [LuaPlayer](runtime:LuaPlayer) may be passed directly.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "PlayerIdentification",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "PollutionMapSettings",
    "content": "Concept: PollutionMapSettings\nDescription: These values are for the time frame of one second (60 ticks).",
    "metadata": {
      "concept_name": "PollutionMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PollutionMapSettings",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'ageing', 'order': 3, 'description': \"The amount of pollution eaten by a chunk's tiles as a percentage of 1. Also known as absorption modifier. Defaults to `1`.\", 'type': 'double', 'optional': False}, {'name': 'diffusion_ratio', 'order': 1, 'description': 'The amount that is diffused to a neighboring chunk (possibly repeated for other directions as well). Defaults to `0.02`.', 'type': 'double', 'optional': False}, {'name': 'enabled', 'order':",
    "metadata": {
      "concept_name": "PollutionMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PollutionMapSettings",
    "content": "'double', 'optional': False}, {'name': 'enabled', 'order': 0, 'description': 'Whether pollution is enabled at all.', 'type': 'boolean', 'optional': False}, {'name': 'enemy_attack_pollution_consumption_modifier', 'order': 11, 'description': 'Defaults to `1`.', 'type': 'double', 'optional': False}, {'name': 'expected_max_per_chunk', 'order': 4, 'description': 'Any amount of pollution larger than this value is visualized as this value instead. Defaults to `150`.', 'type': 'double', 'optional': False},",
    "metadata": {
      "concept_name": "PollutionMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PollutionMapSettings",
    "content": "Defaults to `150`.', 'type': 'double', 'optional': False}, {'name': 'max_pollution_to_restore_trees', 'order': 10, 'description': 'Defaults to `20`.', 'type': 'double', 'optional': False}, {'name': 'min_pollution_to_damage_trees', 'order': 6, 'description': 'Defaults to `60`.', 'type': 'double', 'optional': False}, {'name': 'min_to_diffuse', 'order': 2, 'description': 'The amount of PUs that need to be in a chunk for it to start diffusing. Defaults to `15`.', 'type': 'double', 'optional': False}, {'name':",
    "metadata": {
      "concept_name": "PollutionMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PollutionMapSettings",
    "content": "to `15`.', 'type': 'double', 'optional': False}, {'name': 'min_to_show_per_chunk', 'order': 5, 'description': 'Any amount of pollution smaller than this value (but bigger than zero) is visualized as this value instead. Defaults to `50`.', 'type': 'double', 'optional': False}, {'name': 'pollution_per_tree_damage', 'order': 8, 'description': 'Defaults to `50`.', 'type': 'double', 'optional': False}, {'name': 'pollution_restored_per_tree_damage', 'order': 9, 'description': 'Defaults to `10`.', 'type':",
    "metadata": {
      "concept_name": "PollutionMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PollutionMapSettings",
    "content": "'order': 9, 'description': 'Defaults to `10`.', 'type': 'double', 'optional': False}, {'name': 'pollution_with_max_forest_damage', 'order': 7, 'description': 'Defaults to `150`.', 'type': 'double', 'optional': False}]}",
    "metadata": {
      "concept_name": "PollutionMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PrintSettings",
    "content": "Concept: PrintSettings\nDescription:",
    "metadata": {
      "concept_name": "PrintSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PrintSettings",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'color', 'order': 0, 'description': 'Color of the message to print. Defaults to white.', 'type': 'Color', 'optional': True}, {'name': 'game_state', 'order': 5, 'description': 'If set to false, message will not be part of game state and will disappear from output console after save-load. Defaults to `true`.', 'type': 'boolean', 'optional': True}, {'name': 'skip', 'order': 2, 'description': 'Condition when to skip adding message. Defaults to",
    "metadata": {
      "concept_name": "PrintSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PrintSettings",
    "content": "'Condition when to skip adding message. Defaults to `defines.print_skip.if_redundant`.', 'type': 'defines.print_skip', 'optional': True}, {'name': 'sound', 'order': 1, 'description': 'If a sound should be emitted for this message. Defaults to `defines.print_sound.use_player_settings`.', 'type': 'defines.print_sound', 'optional': True}, {'name': 'sound_path', 'order': 3, 'description': 'The sound to play. If not given, [UtilitySounds::console_message](prototype:UtilitySounds::console_message) will be used",
    "metadata": {
      "concept_name": "PrintSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PrintSettings",
    "content": "will be used instead.', 'type': 'SoundPath', 'optional': True}, {'name': 'volume_modifier', 'order': 4, 'description': 'The volume of the sound to play. Must be between 0 and 1 inclusive. Defaults to 1.', 'type': 'float', 'optional': True}]}",
    "metadata": {
      "concept_name": "PrintSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Product",
    "content": "Concept: Product\nDescription: Returns one of the subtypes, depending on the value of `type`.\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'ItemProduct', 'description': 'Returned when the `type` is `\"item\"`.'}, {'complex_type': 'type', 'value': 'FluidProduct', 'description': 'Returned when the `type` is `\"fluid\"`.'}, {'complex_type': 'type', 'value': 'ResearchProgressProduct', 'description': 'Returned when the `type` is `\"research-progress\"`.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "Product",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ProgrammableSpeakerAlertParameters",
    "content": "Concept: ProgrammableSpeakerAlertParameters\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'alert_message', 'order': 3, 'description': '', 'type': 'string', 'optional': False}, {'name': 'icon_signal_id', 'order': 2, 'description': '', 'type': 'SignalID', 'optional': False}, {'name': 'show_alert', 'order': 0, 'description': '', 'type': 'boolean', 'optional': False}, {'name': 'show_on_map', 'order': 1, 'description': '', 'type': 'boolean', 'optional': False}]}",
    "metadata": {
      "concept_name": "ProgrammableSpeakerAlertParameters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ProgrammableSpeakerCircuitParameters",
    "content": "Concept: ProgrammableSpeakerCircuitParameters\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'instrument_id', 'order': 1, 'description': '', 'type': 'uint', 'optional': False}, {'name': 'note_id', 'order': 2, 'description': '', 'type': 'uint', 'optional': False}, {'name': 'signal_value_is_pitch', 'order': 0, 'description': '', 'type': 'boolean', 'optional': False}]}",
    "metadata": {
      "concept_name": "ProgrammableSpeakerCircuitParameters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ProgrammableSpeakerInstrument",
    "content": "Concept: ProgrammableSpeakerInstrument\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'name', 'order': 0, 'description': '', 'type': 'string', 'optional': False}, {'name': 'notes', 'order': 1, 'description': '', 'type': {'complex_type': 'array', 'value': 'string'}, 'optional': False}]}",
    "metadata": {
      "concept_name": "ProgrammableSpeakerInstrument",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ProgrammableSpeakerParameters",
    "content": "Concept: ProgrammableSpeakerParameters\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'allow_polyphony', 'order': 2, 'description': '', 'type': 'boolean', 'optional': False}, {'name': 'playback_mode', 'order': 1, 'description': '', 'type': 'ProgrammableSpeakerPlaybackMode', 'optional': False}, {'name': 'playback_volume', 'order': 0, 'description': '', 'type': 'float', 'optional': False}]}",
    "metadata": {
      "concept_name": "ProgrammableSpeakerParameters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ProgrammableSpeakerPlaybackMode",
    "content": "Concept: ProgrammableSpeakerPlaybackMode\nDescription: Specifies from where the programmable speaker's sound will be heard.",
    "metadata": {
      "concept_name": "ProgrammableSpeakerPlaybackMode",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ProgrammableSpeakerPlaybackMode",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'local', 'description': 'The sound can be heard within the audible range around the speaker.'}, {'complex_type': 'literal', 'value': 'surface', 'description': \"The sound can be heard anywhere on the speaker's surface.\"}, {'complex_type': 'literal', 'value': 'global', 'description': 'The sound can be heard everywhere.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "ProgrammableSpeakerPlaybackMode",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "PropertyExpressionNames",
    "content": "Concept: PropertyExpressionNames\nDescription: All other MapGenSettings feed into named noise expressions, and therefore placement can be overridden by including the name of a property in this dictionary. The probability and richness functions for placing specific tiles, entities, and decoratives can be overridden by including an entry named `{tile|entity|decorative}:(prototype name):{probability|richness}`.\nComplex_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'string'}",
    "metadata": {
      "concept_name": "PropertyExpressionNames",
      "concept_type": "dictionary"
    }
  },
  {
    "type": "concept",
    "name": "PrototypeFilter",
    "content": "Concept: PrototypeFilter\nDescription: Types `\"signal\"` and `\"item-group\"` do not support filters.",
    "metadata": {
      "concept_name": "PrototypeFilter",
      "concept_type": "array"
    }
  },
  {
    "type": "concept",
    "name": "PrototypeFilter",
    "content": "Filters are always used as an array of filters of a specific type. Every filter can only be used with its corresponding event, and different types of event filters can not be mixed.",
    "metadata": {
      "concept_name": "PrototypeFilter",
      "concept_type": "array"
    }
  },
  {
    "type": "concept",
    "name": "PrototypeFilter",
    "content": "Complex_type: {'complex_type': 'array', 'value': {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'ModSettingPrototypeFilter', 'description': ''}, {'complex_type': 'type', 'value': 'TilePrototypeFilter', 'description': ''}, {'complex_type': 'type', 'value': 'DecorativePrototypeFilter', 'description': ''}, {'complex_type': 'type', 'value': 'RecipePrototypeFilter', 'description': ''}, {'complex_type': 'type', 'value': 'AchievementPrototypeFilter', 'description': ''}, {'complex_type':",
    "metadata": {
      "concept_name": "PrototypeFilter",
      "concept_type": "array"
    }
  },
  {
    "type": "concept",
    "name": "PrototypeFilter",
    "content": "'description': ''}, {'complex_type': 'type', 'value': 'TechnologyPrototypeFilter', 'description': ''}, {'complex_type': 'type', 'value': 'AsteroidChunkPrototypeFilter', 'description': ''}, {'complex_type': 'type', 'value': 'ItemPrototypeFilter', 'description': ''}, {'complex_type': 'type', 'value': 'EquipmentPrototypeFilter', 'description': ''}, {'complex_type': 'type', 'value': 'EntityPrototypeFilter', 'description': ''}, {'complex_type': 'type', 'value': 'SpaceLocationPrototypeFilter', 'description':",
    "metadata": {
      "concept_name": "PrototypeFilter",
      "concept_type": "array"
    }
  },
  {
    "type": "concept",
    "name": "PrototypeFilter",
    "content": "'type', 'value': 'SpaceLocationPrototypeFilter', 'description': ''}, {'complex_type': 'type', 'value': 'FluidPrototypeFilter', 'description': ''}], 'full_format': True}}",
    "metadata": {
      "concept_name": "PrototypeFilter",
      "concept_type": "array"
    }
  },
  {
    "type": "concept",
    "name": "PrototypeFilterMode",
    "content": "Concept: PrototypeFilterMode\nDescription: \nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'none', 'description': ''}, {'complex_type': 'literal', 'value': 'whitelist', 'description': ''}, {'complex_type': 'literal', 'value': 'blacklist', 'description': ''}], 'full_format': True}",
    "metadata": {
      "concept_name": "PrototypeFilterMode",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "PrototypeHistory",
    "content": "Concept: PrototypeHistory\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'changed', 'order': 1, 'description': 'The mods that changed this prototype in the order they changed it.', 'type': {'complex_type': 'array', 'value': 'string'}, 'optional': False}, {'name': 'created', 'order': 0, 'description': 'The mod that created this prototype.', 'type': 'string', 'optional': False}]}",
    "metadata": {
      "concept_name": "PrototypeHistory",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "PrototypeWithQuality",
    "content": "Concept: PrototypeWithQuality\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'name', 'order': 0, 'description': 'Name of a prototype.', 'type': 'string', 'optional': False}, {'name': 'quality', 'order': 1, 'description': 'Name of a quality prototype. Always defined when reading, defaults to \"normal\" when writing.', 'type': 'string', 'optional': True}]}",
    "metadata": {
      "concept_name": "PrototypeWithQuality",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "QualityCondition",
    "content": "Concept: QualityCondition\nDescription: An item filter may be specified in two ways, either as a string which is a quality prototype name or as a table.",
    "metadata": {
      "concept_name": "QualityCondition",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "QualityCondition",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'table', 'parameters': [{'name': 'comparator', 'order': 1, 'description': 'The comparator for quality.', 'type': 'ComparatorString', 'optional': True}, {'name': 'quality', 'order': 0, 'description': 'The prototype name of the quality.', 'type': 'string', 'optional': True}]}, 'string'], 'full_format': False}",
    "metadata": {
      "concept_name": "QualityCondition",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "QualityID",
    "content": "Concept: QualityID\nDescription: A quality prototype may be specified in one of two ways.\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'LuaQualityPrototype', 'description': 'The quality prototype.'}, {'complex_type': 'type', 'value': 'string', 'description': 'The prototype name.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "QualityID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "RadiusVisualisationSpecification",
    "content": "Concept: RadiusVisualisationSpecification\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'distance', 'order': 0, 'description': '', 'type': 'double', 'optional': False}, {'name': 'draw_in_cursor', 'order': 2, 'description': '', 'type': 'boolean', 'optional': False}, {'name': 'draw_on_selection', 'order': 3, 'description': '', 'type': 'boolean', 'optional': False}, {'name': 'offset', 'order': 1, 'description': '', 'type': 'Vector', 'optional': False}]}",
    "metadata": {
      "concept_name": "RadiusVisualisationSpecification",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RailEndGoal",
    "content": "Concept: RailEndGoal\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'direction', 'order': 1, 'description': '', 'type': 'defines.rail_direction', 'optional': False}, {'name': 'priority', 'order': 2, 'description': 'Goal priority. If not provided, defaults to 50.', 'type': 'uint8', 'optional': True}, {'name': 'rail', 'order': 0, 'description': 'Rail target.', 'type': 'LuaEntity', 'optional': False}]}",
    "metadata": {
      "concept_name": "RailEndGoal",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RailEndStart",
    "content": "Concept: RailEndStart\nDescription:",
    "metadata": {
      "concept_name": "RailEndStart",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RailEndStart",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'allow_path_within_segment', 'order': 2, 'description': 'Defaults to `true`. Providing false will cause the pathfinder to reject a path that starts here and ends in the same segment as the path would be too short to provide correct alignment with a goal.', 'type': 'boolean', 'optional': True}, {'name': 'direction', 'order': 1, 'description': '', 'type': 'defines.rail_direction', 'optional': False}, {'name': 'is_front', 'order': 3,",
    "metadata": {
      "concept_name": "RailEndStart",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RailEndStart",
    "content": "'optional': False}, {'name': 'is_front', 'order': 3, 'description': 'Defaults to `false`.', 'type': 'boolean', 'optional': True}, {'name': 'priority', 'order': 4, 'description': 'Start priority. Defaults to `50`.', 'type': 'uint8', 'optional': True}, {'name': 'rail', 'order': 0, 'description': '', 'type': 'LuaEntity', 'optional': False}]}",
    "metadata": {
      "concept_name": "RailEndStart",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RailExtensionData",
    "content": "Concept: RailExtensionData\nDescription:",
    "metadata": {
      "concept_name": "RailExtensionData",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RailExtensionData",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'direction', 'order': 2, 'description': 'Direction of the entity to be built', 'type': 'defines.direction', 'optional': False}, {'name': 'goal', 'order': 3, 'description': 'Goal where this rail extension will go to', 'type': 'RailLocation', 'optional': False}, {'name': 'name', 'order': 0, 'description': 'Name of the entity prototype to be built', 'type': 'string', 'optional': False}, {'name': 'position', 'order': 1, 'description': 'Position of",
    "metadata": {
      "concept_name": "RailExtensionData",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RailExtensionData",
    "content": "{'name': 'position', 'order': 1, 'description': 'Position of the entity to be built', 'type': 'MapPosition', 'optional': False}]}",
    "metadata": {
      "concept_name": "RailExtensionData",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RailLocation",
    "content": "Concept: RailLocation\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'direction', 'order': 1, 'description': '', 'type': 'defines.direction', 'optional': False}, {'name': 'position', 'order': 0, 'description': '', 'type': 'MapPosition', 'optional': False}, {'name': 'rail_layer', 'order': 2, 'description': '', 'type': 'defines.rail_layer', 'optional': False}]}",
    "metadata": {
      "concept_name": "RailLocation",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RaiseEventParameters",
    "content": "Concept: RaiseEventParameters\nDescription: A table containing the parameters required to raise a given game event. See the event being raised for what parameters are required.\nComplex_type: table",
    "metadata": {
      "concept_name": "RaiseEventParameters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RangeMode",
    "content": "Concept: RangeMode\nDescription: \nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'center-to-center', 'description': ''}, {'complex_type': 'literal', 'value': 'bounding-box-to-bounding-box', 'description': ''}, {'complex_type': 'literal', 'value': 'center-to-bounding-box', 'description': ''}], 'full_format': True}",
    "metadata": {
      "concept_name": "RangeMode",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "RealOrientation",
    "content": "Concept: RealOrientation\nDescription: The smooth orientation. It is a [float](runtime:float) in the range `[0, 1)` that covers a full circle, starting at the top and going clockwise. This means a value of `0` indicates \"north\", a value of `0.5` indicates \"south\".\n\nFor example then, a value of `0.625` would indicate \"south-west\", and a value of `0.875` would indicate \"north-west\".\nComplex_type: float",
    "metadata": {
      "concept_name": "RealOrientation",
      "concept_type": "float"
    }
  },
  {
    "type": "concept",
    "name": "RecipeID",
    "content": "Concept: RecipeID\nDescription: A recipe may be specified in one of three ways.\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'LuaRecipePrototype', 'description': 'By recipe prototype.'}, {'complex_type': 'type', 'value': 'LuaRecipe', 'description': 'By instance of recipe.'}, {'complex_type': 'type', 'value': 'string', 'description': 'By name of the recipe prototype.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "RecipeID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "RecipeIDAndQualityIDPair",
    "content": "Concept: RecipeIDAndQualityIDPair\nDescription: A recipe prototype with optional quality specification.\nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'name', 'order': 0, 'description': 'Recipe prototype.', 'type': 'RecipeID', 'optional': False}, {'name': 'quality', 'order': 1, 'description': 'Quality prototype.', 'type': 'QualityID', 'optional': False}]}",
    "metadata": {
      "concept_name": "RecipeIDAndQualityIDPair",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RecipePrototypeFilter",
    "content": "Concept: RecipePrototypeFilter\nDescription:",
    "metadata": {
      "concept_name": "RecipePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RecipePrototypeFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'enabled'}, {'complex_type': 'literal', 'value': 'hidden'}, {'complex_type': 'literal', 'value': 'hidden-from-flow-stats'}, {'complex_type': 'literal', 'value': 'hidden-from-player-crafting'}, {'complex_type': 'literal', 'value': 'allow-as-intermediate'}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "RecipePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RecipePrototypeFilter",
    "content": "'allow-as-intermediate'}, {'complex_type': 'literal', 'value': 'allow-intermediates'}, {'complex_type': 'literal', 'value': 'allow-decomposition'}, {'complex_type': 'literal', 'value': 'always-show-made-in'}, {'complex_type': 'literal', 'value': 'always-show-products'}, {'complex_type': 'literal', 'value': 'show-amount-in-title'}, {'complex_type': 'literal', 'value': 'has-ingredients'}, {'complex_type': 'literal', 'value': 'has-products'}, {'complex_type': 'literal', 'value': 'has-ingredient-item'},",
    "metadata": {
      "concept_name": "RecipePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RecipePrototypeFilter",
    "content": "{'complex_type': 'literal', 'value': 'has-ingredient-item'}, {'complex_type': 'literal', 'value': 'has-ingredient-fluid'}, {'complex_type': 'literal', 'value': 'has-product-item'}, {'complex_type': 'literal', 'value': 'has-product-fluid'}, {'complex_type': 'literal', 'value': 'subgroup'}, {'complex_type': 'literal', 'value': 'category'}, {'complex_type': 'literal', 'value': 'energy'}, {'complex_type': 'literal', 'value': 'emissions-multiplier'}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "RecipePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RecipePrototypeFilter",
    "content": "'emissions-multiplier'}, {'complex_type': 'literal', 'value': 'request-paste-multiplier'}, {'complex_type': 'literal', 'value': 'overload-multiplier'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.',",
    "metadata": {
      "concept_name": "RecipePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RecipePrototypeFilter",
    "content": "the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'category', 'order': 5, 'description': '', 'parameters': [{'name': 'category', 'order': 0, 'description': 'A [LuaRecipeCategoryPrototype](runtime:LuaRecipeCategoryPrototype) name', 'type': 'string', 'optional': False}]}, {'name':",
    "metadata": {
      "concept_name": "RecipePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RecipePrototypeFilter",
    "content": "name', 'type': 'string', 'optional': False}]}, {'name': 'emissions-multiplier', 'order': 7, 'description': '', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'double', 'optional': False}]}, {'name': 'energy', 'order': 6, 'description': '', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional':",
    "metadata": {
      "concept_name": "RecipePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RecipePrototypeFilter",
    "content": "0, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'double', 'optional': False}]}, {'name': 'has-ingredient-fluid', 'order': 1, 'description': '```\\n-- selects recipes that consume sulfuric acid\\n{{filter = \"has-ingredient-fluid\", elem_filters = {{filter = \"name\", name = \"sulfuric-acid\"}}}}\\n```', 'parameters': [{'name': 'elem_filters', 'order': 0, 'description': 'Matches if at least 1 ingredient is a",
    "metadata": {
      "concept_name": "RecipePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RecipePrototypeFilter",
    "content": "0, 'description': 'Matches if at least 1 ingredient is a fluid that matches these filters.', 'type': {'complex_type': 'array', 'value': 'FluidPrototypeFilter'}, 'optional': True}]}, {'name': 'has-ingredient-item', 'order': 0, 'description': '', 'parameters': [{'name': 'elem_filters', 'order': 0, 'description': 'Matches if at least 1 ingredient is an item that matches these filters.', 'type': {'complex_type': 'array', 'value': 'ItemPrototypeFilter'}, 'optional': True}]}, {'name': 'has-product-fluid',",
    "metadata": {
      "concept_name": "RecipePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RecipePrototypeFilter",
    "content": "'optional': True}]}, {'name': 'has-product-fluid', 'order': 3, 'description': '', 'parameters': [{'name': 'elem_filters', 'order': 0, 'description': 'Matches if at least 1 product is a fluid that matches', 'type': {'complex_type': 'array', 'value': 'FluidPrototypeFilter'}, 'optional': True}]}, {'name': 'has-product-item', 'order': 2, 'description': 'Usage example: \\n```\\n-- selects recipes that produce an item\\n{{filter = \"has-product-item\"}}\\n-- selects recipes that produce iron plates\\n{{filter =",
    "metadata": {
      "concept_name": "RecipePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RecipePrototypeFilter",
    "content": "selects recipes that produce iron plates\\n{{filter = \"has-product-item\", elem_filters = {{filter = \"name\", name = \"iron-plate\"}}}}\\n-- selects recipes that produce items that place furnaces\\n{{filter = \"has-product-item\", elem_filters = {{filter = \"place-result\", elem_filters = {{filter = \"type\", type = \"furnace\"}}}}}}\\n```', 'parameters': [{'name': 'elem_filters', 'order': 0, 'description': 'Matches if at least 1 product is an item that matches these filters.', 'type': {'complex_type': 'array', 'value':",
    "metadata": {
      "concept_name": "RecipePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RecipePrototypeFilter",
    "content": "these filters.', 'type': {'complex_type': 'array', 'value': 'ItemPrototypeFilter'}, 'optional': True}]}, {'name': 'overload-multiplier', 'order': 9, 'description': '', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'uint', 'optional': False}]}, {'name': 'request-paste-multiplier', 'order': 8, 'description': '', 'parameters': [{'name': 'comparison',",
    "metadata": {
      "concept_name": "RecipePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RecipePrototypeFilter",
    "content": "8, 'description': '', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'uint', 'optional': False}]}, {'name': 'subgroup', 'order': 4, 'description': '', 'parameters': [{'name': 'subgroup', 'order': 0, 'description': 'A [LuaGroup](runtime:LuaGroup) (subgroup) name', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other attributes",
    "metadata": {
      "concept_name": "RecipePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RecipePrototypeFilter",
    "content": "False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "RecipePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RegistrationTarget",
    "content": "Concept: RegistrationTarget\nDescription: Represents an object that can be [registered](runtime:LuaBootstrap::register_on_object_destroyed) for the [on_object_destroyed](runtime:on_object_destroyed) event. Each target has an associated [defines.target_type](runtime:defines.target_type) and some have a unique identifier.",
    "metadata": {
      "concept_name": "RegistrationTarget",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "RegistrationTarget",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'LuaEntity', 'description': 'Target type [entity](runtime:defines.target_type.entity); `useful_id` [LuaEntity::unit_number](runtime:LuaEntity::unit_number)'}, {'complex_type': 'type', 'value': 'LuaEquipment', 'description': 'Target type [equipment](runtime:defines.target_type.equipment)'}, {'complex_type': 'type', 'value': 'LuaEquipmentGrid', 'description': 'Target type",
    "metadata": {
      "concept_name": "RegistrationTarget",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "RegistrationTarget",
    "content": "'value': 'LuaEquipmentGrid', 'description': 'Target type [equipment_grid](runtime:defines.target_type.equipment_grid); `useful_id` [LuaEquipmentGrid::unique_id](runtime:LuaEquipmentGrid::unique_id)'}, {'complex_type': 'type', 'value': 'LuaItem', 'description': 'Target type [item](runtime:defines.target_type.item); `useful_id` [LuaItemCommon::item_number](runtime:LuaItemCommon::item_number)'}, {'complex_type': 'type', 'value': 'LuaLogisticCell', 'description': 'Target type",
    "metadata": {
      "concept_name": "RegistrationTarget",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "RegistrationTarget",
    "content": "'type', 'value': 'LuaLogisticCell', 'description': 'Target type [logistic_cell](runtime:defines.target_type.logistic_cell)'}, {'complex_type': 'type', 'value': 'LuaLogisticNetwork', 'description': 'Target type [logistic_network](runtime:defines.target_type.logistic_network); `useful_id` [LuaLogisticNetwork::network_id](runtime:LuaLogisticNetwork::network_id)'}, {'complex_type': 'type', 'value': 'LuaLogisticSection', 'description': 'Target type",
    "metadata": {
      "concept_name": "RegistrationTarget",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "RegistrationTarget",
    "content": "'value': 'LuaLogisticSection', 'description': 'Target type [logistic_section](runtime:defines.target_type.logistic_section)'}, {'complex_type': 'type', 'value': 'LuaPermissionGroup', 'description': 'Target type [permission_group](runtime:defines.target_type.permission_group); `useful_id` [LuaPermissionGroup::group_id](runtime:LuaPermissionGroup::group_id)'}, {'complex_type': 'type', 'value': 'LuaPlanet', 'description': 'Target type [planet](runtime:defines.target_type.planet)'}, {'complex_type': 'type',",
    "metadata": {
      "concept_name": "RegistrationTarget",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "RegistrationTarget",
    "content": "{'complex_type': 'type', 'value': 'LuaPlayer', 'description': 'Target type [player](runtime:defines.target_type.player); `useful_id` [LuaPlayer::index](runtime:LuaPlayer::index)'}, {'complex_type': 'type', 'value': 'LuaRailPath', 'description': 'Target type [rail_path](runtime:defines.target_type.rail_path)'}, {'complex_type': 'type', 'value': 'LuaRenderObject', 'description': 'Target type [render_object](runtime:defines.target_type.render_object); `useful_id`",
    "metadata": {
      "concept_name": "RegistrationTarget",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "RegistrationTarget",
    "content": "`useful_id` [LuaRenderObject::id](runtime:LuaRenderObject::id)'}, {'complex_type': 'type', 'value': 'LuaSpacePlatform', 'description': 'Target type [space_platform](runtime:defines.target_type.space_platform); `useful_id` [LuaSpacePlatform::index](runtime:LuaSpacePlatform::index)'}, {'complex_type': 'type', 'value': 'LuaSurface', 'description': 'Target type [surface](runtime:defines.target_type.surface); `useful_id` [LuaSurface::index](runtime:LuaSurface::index)'}, {'complex_type': 'type', 'value':",
    "metadata": {
      "concept_name": "RegistrationTarget",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "RegistrationTarget",
    "content": "{'complex_type': 'type', 'value': 'LuaTrain', 'description': 'Target type [train](runtime:defines.target_type.train); `useful_id` [LuaTrain::id](runtime:LuaTrain::id)'}, {'complex_type': 'type', 'value': 'LuaCommandable', 'description': 'Target type [commandable](runtime:defines.target_type.commandable); `useful_id` [LuaCommandable::unique_id](runtime:LuaCommandable::unique_id)'}, {'complex_type': 'type', 'value': 'LuaCustomChartTag', 'description': 'Target type",
    "metadata": {
      "concept_name": "RegistrationTarget",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "RegistrationTarget",
    "content": "'value': 'LuaCustomChartTag', 'description': 'Target type [custom_chart_tag](runtime:defines.target_type.custom_chart_tag); `useful_id` [LuaCustomChartTag::tag_number](runtime:LuaCustomChartTag::tag_number)'}, {'complex_type': 'type', 'value': 'LuaGuiElement', 'description': 'Target type [gui_element](runtime:defines.target_type.gui_element); `useful_id` [LuaGuiElement::index](runtime:LuaGuiElement::index)'}], 'full_format': True}",
    "metadata": {
      "concept_name": "RegistrationTarget",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "RenderLayer",
    "content": "Concept: RenderLayer\nDescription: A number between 0 and 255 inclusive, represented by one of the following named strings or the string version of the number. For example `\"10\"` and `\"decals\"` are both valid. Higher values are rendered above lower values.",
    "metadata": {
      "concept_name": "RenderLayer",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "RenderLayer",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'string', 'description': 'A string of a number'}, {'complex_type': 'literal', 'value': 'zero', 'description': '0'}, {'complex_type': 'literal', 'value': 'background-transitions', 'description': '1'}, {'complex_type': 'literal', 'value': 'under-tiles', 'description': '2'}, {'complex_type': 'literal', 'value': 'decals', 'description': '10'}, {'complex_type': 'literal', 'value': 'above-tiles', 'description': '11'},",
    "metadata": {
      "concept_name": "RenderLayer",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "RenderLayer",
    "content": "'literal', 'value': 'above-tiles', 'description': '11'}, {'complex_type': 'literal', 'value': 'ground-layer-1', 'description': '12'}, {'complex_type': 'literal', 'value': 'ground-layer-2', 'description': '13'}, {'complex_type': 'literal', 'value': 'ground-layer-3', 'description': '14'}, {'complex_type': 'literal', 'value': 'ground-layer-4', 'description': '15'}, {'complex_type': 'literal', 'value': 'ground-layer-5', 'description': '16'}, {'complex_type': 'literal', 'value': 'lower-radius-visualization',",
    "metadata": {
      "concept_name": "RenderLayer",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "RenderLayer",
    "content": "'literal', 'value': 'lower-radius-visualization', 'description': '29'}, {'complex_type': 'literal', 'value': 'radius-visualization', 'description': '30'}, {'complex_type': 'literal', 'value': 'transport-belt-integration', 'description': '65'}, {'complex_type': 'literal', 'value': 'resource', 'description': '66'}, {'complex_type': 'literal', 'value': 'building-smoke', 'description': '67'}, {'complex_type': 'literal', 'value': 'rail-stone-path-lower', 'description': '68'}, {'complex_type': 'literal',",
    "metadata": {
      "concept_name": "RenderLayer",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "RenderLayer",
    "content": "'description': '68'}, {'complex_type': 'literal', 'value': 'rail-stone-path', 'description': '76'}, {'complex_type': 'literal', 'value': 'rail-tie', 'description': '84'}, {'complex_type': 'literal', 'value': 'decorative', 'description': '92'}, {'complex_type': 'literal', 'value': 'ground-patch', 'description': '93'}, {'complex_type': 'literal', 'value': 'ground-patch-higher', 'description': '94'}, {'complex_type': 'literal', 'value': 'ground-patch-higher2', 'description': '95'}, {'complex_type': 'literal',",
    "metadata": {
      "concept_name": "RenderLayer",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "RenderLayer",
    "content": "'description': '95'}, {'complex_type': 'literal', 'value': 'rail-chain-signal-metal', 'description': '96'}, {'complex_type': 'literal', 'value': 'rail-screw', 'description': '97'}, {'complex_type': 'literal', 'value': 'rail-metal', 'description': '100'}, {'complex_type': 'literal', 'value': 'remnants', 'description': '102'}, {'complex_type': 'literal', 'value': 'floor', 'description': '103'}, {'complex_type': 'literal', 'value': 'transport-belt', 'description': '104'}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "RenderLayer",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "RenderLayer",
    "content": "'description': '104'}, {'complex_type': 'literal', 'value': 'transport-belt-endings', 'description': '105'}, {'complex_type': 'literal', 'value': 'floor-mechanics-under-corpse', 'description': '106'}, {'complex_type': 'literal', 'value': 'corpse', 'description': '107'}, {'complex_type': 'literal', 'value': 'floor-mechanics', 'description': '108'}, {'complex_type': 'literal', 'value': 'item', 'description': '109'}, {'complex_type': 'literal', 'value': 'transport-belt-reader', 'description': '117'},",
    "metadata": {
      "concept_name": "RenderLayer",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "RenderLayer",
    "content": "'value': 'transport-belt-reader', 'description': '117'}, {'complex_type': 'literal', 'value': 'lower-object', 'description': '118'}, {'complex_type': 'literal', 'value': 'transport-belt-circuit-connector', 'description': '120'}, {'complex_type': 'literal', 'value': 'lower-object-above-shadow', 'description': '121'}, {'complex_type': 'literal', 'value': 'lower-object-overlay', 'description': '122'}, {'complex_type': 'literal', 'value': 'object-under', 'description': '123'}, {'complex_type': 'literal',",
    "metadata": {
      "concept_name": "RenderLayer",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "RenderLayer",
    "content": "'description': '123'}, {'complex_type': 'literal', 'value': 'object', 'description': '124'}, {'complex_type': 'literal', 'value': 'cargo-hatch', 'description': '125'}, {'complex_type': 'literal', 'value': 'higher-object-under', 'description': '126'}, {'complex_type': 'literal', 'value': 'higher-object-above', 'description': '127'}, {'complex_type': 'literal', 'value': 'train-stop-top', 'description': '128'}, {'complex_type': 'literal', 'value': 'item-in-inserter-hand', 'description': '129'},",
    "metadata": {
      "concept_name": "RenderLayer",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "RenderLayer",
    "content": "'value': 'item-in-inserter-hand', 'description': '129'}, {'complex_type': 'literal', 'value': 'above-inserters', 'description': '130'}, {'complex_type': 'literal', 'value': 'wires', 'description': '131'}, {'complex_type': 'literal', 'value': 'under-elevated', 'description': '132'}, {'complex_type': 'literal', 'value': 'elevated-rail-stone-path-lower', 'description': '133'}, {'complex_type': 'literal', 'value': 'elevated-rail-stone-path', 'description': '134'}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "RenderLayer",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "RenderLayer",
    "content": "'description': '134'}, {'complex_type': 'literal', 'value': 'elevated-rail-tie', 'description': '135'}, {'complex_type': 'literal', 'value': 'elevated-rail-screw', 'description': '136'}, {'complex_type': 'literal', 'value': 'elevated-rail-metal', 'description': '137'}, {'complex_type': 'literal', 'value': 'elevated-lower-object', 'description': '141'}, {'complex_type': 'literal', 'value': 'elevated-object', 'description': '142'}, {'complex_type': 'literal', 'value': 'elevated-higher-object', 'description':",
    "metadata": {
      "concept_name": "RenderLayer",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "RenderLayer",
    "content": "'literal', 'value': 'elevated-higher-object', 'description': '143'}, {'complex_type': 'literal', 'value': 'fluid-visualization', 'description': '149'}, {'complex_type': 'literal', 'value': 'wires-above', 'description': '150'}, {'complex_type': 'literal', 'value': 'entity-info-icon', 'description': '153'}, {'complex_type': 'literal', 'value': 'entity-info-icon-above', 'description': '154'}, {'complex_type': 'literal', 'value': 'explosion', 'description': '157'}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "RenderLayer",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "RenderLayer",
    "content": "'description': '157'}, {'complex_type': 'literal', 'value': 'projectile', 'description': '158'}, {'complex_type': 'literal', 'value': 'smoke', 'description': '159'}, {'complex_type': 'literal', 'value': 'air-object', 'description': '160'}, {'complex_type': 'literal', 'value': 'air-entity-info-icon', 'description': '161'}, {'complex_type': 'literal', 'value': 'light-effect', 'description': '162'}, {'complex_type': 'literal', 'value': 'selection-box', 'description': '187'}, {'complex_type': 'literal',",
    "metadata": {
      "concept_name": "RenderLayer",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "RenderLayer",
    "content": "'description': '187'}, {'complex_type': 'literal', 'value': 'higher-selection-box', 'description': '188'}, {'complex_type': 'literal', 'value': 'collision-selection-box', 'description': '189'}, {'complex_type': 'literal', 'value': 'arrow', 'description': '190'}, {'complex_type': 'literal', 'value': 'cursor', 'description': '226'}], 'full_format': True}",
    "metadata": {
      "concept_name": "RenderLayer",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ResearchIngredient",
    "content": "Concept: ResearchIngredient\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'amount', 'order': 1, 'description': 'Amount of items required to research one unit of technology.', 'type': 'uint16', 'optional': False}, {'name': 'name', 'order': 0, 'description': 'Prototype name of the required item.', 'type': 'string', 'optional': False}]}",
    "metadata": {
      "concept_name": "ResearchIngredient",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ResearchProgressProduct",
    "content": "Concept: ResearchProgressProduct\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'amount', 'order': 2, 'description': '', 'type': 'double', 'optional': False}, {'name': 'research_item', 'order': 1, 'description': 'Prototype name of the research item.', 'type': 'string', 'optional': False}, {'name': 'type', 'order': 0, 'description': '', 'type': {'complex_type': 'literal', 'value': 'research-progress'}, 'optional': False}]}",
    "metadata": {
      "concept_name": "ResearchProgressProduct",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ResearchTrigger",
    "content": "Concept: ResearchTrigger\nDescription:",
    "metadata": {
      "concept_name": "ResearchTrigger",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ResearchTrigger",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'type', 'order': 0, 'description': '', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'craft-item'}, {'complex_type': 'literal', 'value': 'mine-entity'}, {'complex_type': 'literal', 'value': 'craft-fluid'}, {'complex_type': 'literal', 'value': 'send-item-to-orbit'}, {'complex_type': 'literal', 'value': 'capture-spawner'}, {'complex_type': 'literal', 'value': 'build-entity'}, {'complex_type': 'literal',",
    "metadata": {
      "concept_name": "ResearchTrigger",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ResearchTrigger",
    "content": "'value': 'build-entity'}, {'complex_type': 'literal', 'value': 'create-space-platform'}], 'full_format': False}, 'optional': False}], 'variant_parameter_groups': [{'name': 'build-entity', 'order': 4, 'description': '', 'parameters': [{'name': 'entity', 'order': 0, 'description': '', 'type': 'EntityIDFilter', 'optional': False}]}, {'name': 'capture-spawner', 'order': 3, 'description': '', 'parameters': [{'name': 'entity', 'order': 0, 'description': '', 'type': 'string', 'optional': True}]}, {'name':",
    "metadata": {
      "concept_name": "ResearchTrigger",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ResearchTrigger",
    "content": "'', 'type': 'string', 'optional': True}]}, {'name': 'craft-fluid', 'order': 2, 'description': '', 'parameters': [{'name': 'amount', 'order': 1, 'description': '', 'type': 'double', 'optional': False}, {'name': 'fluid', 'order': 0, 'description': '', 'type': 'string', 'optional': False}]}, {'name': 'craft-item', 'order': 0, 'description': '', 'parameters': [{'name': 'item', 'order': 0, 'description': '', 'type': 'string', 'optional': False}, {'name': 'item_quality', 'order': 1, 'description': '', 'type':",
    "metadata": {
      "concept_name": "ResearchTrigger",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ResearchTrigger",
    "content": "{'name': 'item_quality', 'order': 1, 'description': '', 'type': 'string', 'optional': True}]}, {'name': 'mine-entity', 'order': 1, 'description': '', 'parameters': [{'name': 'entity', 'order': 0, 'description': '', 'type': 'string', 'optional': False}]}, {'name': 'send-item-to-orbit', 'order': 5, 'description': '', 'parameters': [{'name': 'item', 'order': 0, 'description': '', 'type': 'ItemIDFilter', 'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on",
    "metadata": {
      "concept_name": "ResearchTrigger",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ResearchTrigger",
    "content": "'Other attributes may be specified depending on `type`:'}",
    "metadata": {
      "concept_name": "ResearchTrigger",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Resistance",
    "content": "Concept: Resistance\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'decrease', 'order': 0, 'description': 'Absolute damage decrease', 'type': 'float', 'optional': False}, {'name': 'percent', 'order': 1, 'description': 'Percentual damage decrease', 'type': 'float', 'optional': False}]}",
    "metadata": {
      "concept_name": "Resistance",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RidingState",
    "content": "Concept: RidingState\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'acceleration', 'order': 0, 'description': '', 'type': 'defines.riding.acceleration', 'optional': False}, {'name': 'direction', 'order': 1, 'description': '', 'type': 'defines.riding.direction', 'optional': False}]}",
    "metadata": {
      "concept_name": "RidingState",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "RollingStockDrawData",
    "content": "Concept: RollingStockDrawData\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'height', 'order': 3, 'description': '', 'type': 'float', 'optional': False}, {'name': 'orientation', 'order': 1, 'description': '', 'type': 'RealOrientation', 'optional': False}, {'name': 'position', 'order': 0, 'description': '', 'type': 'MapPosition', 'optional': False}, {'name': 'slope', 'order': 2, 'description': '', 'type': 'float', 'optional': False}]}",
    "metadata": {
      "concept_name": "RollingStockDrawData",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ScheduleRecord",
    "content": "Concept: ScheduleRecord\nDescription:",
    "metadata": {
      "concept_name": "ScheduleRecord",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ScheduleRecord",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'rail', 'order': 1, 'description': 'Rail to path to. Ignored if `station` is present.', 'type': 'LuaEntity', 'optional': True}, {'name': 'rail_direction', 'order': 2, 'description': 'When a train is allowed to reach rail target from any direction it will be `nil`. If rail has to be reached from specific direction, this value allows to choose the direction. This value corresponds to",
    "metadata": {
      "concept_name": "ScheduleRecord",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ScheduleRecord",
    "content": "value allows to choose the direction. This value corresponds to [LuaEntity::connected_rail_direction](runtime:LuaEntity::connected_rail_direction) of a TrainStop.', 'type': 'defines.rail_direction', 'optional': True}, {'name': 'station', 'order': 0, 'description': 'Name of the station.', 'type': 'string', 'optional': True}, {'name': 'temporary', 'order': 4, 'description': 'Only present when the station is temporary, the value is then always `true`.', 'type': 'boolean', 'optional': True}, {'name':",
    "metadata": {
      "concept_name": "ScheduleRecord",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ScheduleRecord",
    "content": "always `true`.', 'type': 'boolean', 'optional': True}, {'name': 'wait_conditions', 'order': 3, 'description': '', 'type': {'complex_type': 'array', 'value': 'WaitCondition'}, 'optional': True}]}",
    "metadata": {
      "concept_name": "ScheduleRecord",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ScriptArea",
    "content": "Concept: ScriptArea\nDescription: An area defined using the map editor.\nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'area', 'order': 0, 'description': '', 'type': 'BoundingBox', 'optional': False}, {'name': 'color', 'order': 2, 'description': '', 'type': 'Color', 'optional': False}, {'name': 'id', 'order': 3, 'description': '', 'type': 'uint', 'optional': False}, {'name': 'name', 'order': 1, 'description': '', 'type': 'string', 'optional': False}]}",
    "metadata": {
      "concept_name": "ScriptArea",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ScriptPosition",
    "content": "Concept: ScriptPosition\nDescription: A position defined using the map editor.\nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'color', 'order': 2, 'description': '', 'type': 'Color', 'optional': False}, {'name': 'id', 'order': 3, 'description': '', 'type': 'uint', 'optional': False}, {'name': 'name', 'order': 1, 'description': '', 'type': 'string', 'optional': False}, {'name': 'position', 'order': 0, 'description': '', 'type': 'MapPosition', 'optional': False}]}",
    "metadata": {
      "concept_name": "ScriptPosition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ScriptRenderTarget",
    "content": "Concept: ScriptRenderTarget\nDescription: When writing it is possible to give LuaEntity or MapPosition directly. However, reading always returns the full ScriptRenderTargetTable.\nComplex_type: {'complex_type': 'union', 'options': ['LuaEntity', 'MapPosition', 'ScriptRenderTargetTable'], 'full_format': False}",
    "metadata": {
      "concept_name": "ScriptRenderTarget",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ScriptRenderTargetTable",
    "content": "Concept: ScriptRenderTargetTable\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'entity', 'order': 0, 'description': '', 'type': 'LuaEntity', 'optional': True}, {'name': 'offset', 'order': 1, 'description': 'Only used if `entity` was given.', 'type': 'Vector', 'optional': True}, {'name': 'position', 'order': 2, 'description': 'Only used, and mandatory if `entity` is not given.', 'type': 'MapPosition', 'optional': True}]}",
    "metadata": {
      "concept_name": "ScriptRenderTargetTable",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "ScrollPolicy",
    "content": "Concept: ScrollPolicy\nDescription: Scroll policy of a [scroll pane](runtime:LuaGuiElement).",
    "metadata": {
      "concept_name": "ScrollPolicy",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "ScrollPolicy",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'never', 'description': ''}, {'complex_type': 'literal', 'value': 'dont-show-but-allow-scrolling', 'description': ''}, {'complex_type': 'literal', 'value': 'always', 'description': ''}, {'complex_type': 'literal', 'value': 'auto', 'description': ''}, {'complex_type': 'literal', 'value': 'auto-and-reserve-space', 'description': ''}], 'full_format': True}",
    "metadata": {
      "concept_name": "ScrollPolicy",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "SelectedPrototypeData",
    "content": "Concept: SelectedPrototypeData\nDescription:",
    "metadata": {
      "concept_name": "SelectedPrototypeData",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SelectedPrototypeData",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'base_type', 'order': 0, 'description': 'E.g. `\"entity\"`.', 'type': 'string', 'optional': False}, {'name': 'derived_type', 'order': 1, 'description': 'The `type` of the prototype. E.g. `\"tree\"`.', 'type': 'string', 'optional': False}, {'name': 'name', 'order': 2, 'description': 'The `name` of the prototype. E.g. `\"tree-05\"`.', 'type': 'string', 'optional': False}, {'name': 'quality', 'order': 3, 'description': 'The `name` of the quality",
    "metadata": {
      "concept_name": "SelectedPrototypeData",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SelectedPrototypeData",
    "content": "'order': 3, 'description': 'The `name` of the quality prototype if any. E.g. `\"normal\"`.', 'type': 'string', 'optional': True}]}",
    "metadata": {
      "concept_name": "SelectedPrototypeData",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SelectionModeFlags",
    "content": "Concept: SelectionModeFlags\nDescription: A set of flags on a selection tool that define how entities and tiles are selected. Active flags are in the dictionary as `true`, while inactive flags aren't present at all.",
    "metadata": {
      "concept_name": "SelectionModeFlags",
      "concept_type": "dictionary"
    }
  },
  {
    "type": "concept",
    "name": "SelectionModeFlags",
    "content": "Complex_type: {'complex_type': 'dictionary', 'key': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'blueprint', 'description': 'Selects entities and tiles as if selecting them for a blueprint.'}, {'complex_type': 'literal', 'value': 'deconstruct', 'description': 'Selects entities and tiles as if selecting them for deconstruction.'}, {'complex_type': 'literal', 'value': 'cancel-deconstruct', 'description': 'Selects entities and tiles as if selecting them for deconstruction",
    "metadata": {
      "concept_name": "SelectionModeFlags",
      "concept_type": "dictionary"
    }
  },
  {
    "type": "concept",
    "name": "SelectionModeFlags",
    "content": "entities and tiles as if selecting them for deconstruction cancellation.'}, {'complex_type': 'literal', 'value': 'items', 'description': 'Selects items on the ground.'}, {'complex_type': 'literal', 'value': 'trees', 'description': 'Selects trees.'}, {'complex_type': 'literal', 'value': 'buildable-type', 'description': 'Selects entities which are considered a [building](runtime:LuaEntityPrototype::is_building), plus landmines.'}, {'complex_type': 'literal', 'value': 'nothing', 'description': 'Selects no",
    "metadata": {
      "concept_name": "SelectionModeFlags",
      "concept_type": "dictionary"
    }
  },
  {
    "type": "concept",
    "name": "SelectionModeFlags",
    "content": "'literal', 'value': 'nothing', 'description': 'Selects no entities or tiles, but is useful to select an area.'}, {'complex_type': 'literal', 'value': 'items-to-place', 'description': 'Selects entities and tiles that can be [built by an item](runtime:LuaItemPrototype::place_result).'}, {'complex_type': 'literal', 'value': 'any-entity', 'description': 'Selects all entities.'}, {'complex_type': 'literal', 'value': 'any-tile', 'description': 'Selects all tiles.'}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "SelectionModeFlags",
      "concept_type": "dictionary"
    }
  },
  {
    "type": "concept",
    "name": "SelectionModeFlags",
    "content": "'Selects all tiles.'}, {'complex_type': 'literal', 'value': 'same-force', 'description': 'Selects entities with the same force as the selecting player.'}, {'complex_type': 'literal', 'value': 'not-same-force', 'description': 'Selects entities with a different force as the selecting player.'}, {'complex_type': 'literal', 'value': 'friend', 'description': 'Selects entities from a [friendly](runtime:LuaForce::is_friend) force.'}, {'complex_type': 'literal', 'value': 'enemy', 'description': 'Selects entities",
    "metadata": {
      "concept_name": "SelectionModeFlags",
      "concept_type": "dictionary"
    }
  },
  {
    "type": "concept",
    "name": "SelectionModeFlags",
    "content": "'literal', 'value': 'enemy', 'description': 'Selects entities from an [enemy](runtime:LuaForce::is_enemy) force.'}, {'complex_type': 'literal', 'value': 'upgrade', 'description': 'Selects entities as if selecting them for upgrading.'}, {'complex_type': 'literal', 'value': 'cancel-upgrade', 'description': 'Selects entities as if selecting them for upgrade cancellation.'}, {'complex_type': 'literal', 'value': 'downgrade', 'description': 'Selects entities as if selecting them for downgrading.'},",
    "metadata": {
      "concept_name": "SelectionModeFlags",
      "concept_type": "dictionary"
    }
  },
  {
    "type": "concept",
    "name": "SelectionModeFlags",
    "content": "'Selects entities as if selecting them for downgrading.'}, {'complex_type': 'literal', 'value': 'entity-with-health', 'description': 'Selects entities that are [entities with health](runtime:LuaEntity::is_entity_with_health).'}, {'complex_type': 'literal', 'value': 'is-military-target', 'description': 'Selects entities that are [military targets](runtime:LuaEntity::is_military_target).'}, {'complex_type': 'literal', 'value': 'entity-with-owner', 'description': 'Selects entities that are [entities with",
    "metadata": {
      "concept_name": "SelectionModeFlags",
      "concept_type": "dictionary"
    }
  },
  {
    "type": "concept",
    "name": "SelectionModeFlags",
    "content": "'description': 'Selects entities that are [entities with owner](runtime:LuaEntity::is_entity_with_owner).'}, {'complex_type': 'literal', 'value': 'avoid-rolling-stock', 'description': 'Selects entities that are not `rolling-stock`s.'}, {'complex_type': 'literal', 'value': 'avoid-vehicle', 'description': ''}, {'complex_type': 'literal', 'value': 'controllable', 'description': ''}, {'complex_type': 'literal', 'value': 'controllable-add', 'description': ''}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "SelectionModeFlags",
      "concept_type": "dictionary"
    }
  },
  {
    "type": "concept",
    "name": "SelectionModeFlags",
    "content": "'description': ''}, {'complex_type': 'literal', 'value': 'controllable-remove', 'description': ''}, {'complex_type': 'literal', 'value': 'entity-ghost', 'description': 'Selects entities that are `entity-ghost`s.'}, {'complex_type': 'literal', 'value': 'tile-ghost', 'description': 'Selects entities that are `tile-ghost`s.'}], 'full_format': True}, 'value': {'complex_type': 'literal', 'value': True}}",
    "metadata": {
      "concept_name": "SelectionModeFlags",
      "concept_type": "dictionary"
    }
  },
  {
    "type": "concept",
    "name": "SelectorCombinatorParameters",
    "content": "Concept: SelectorCombinatorParameters\nDescription:",
    "metadata": {
      "concept_name": "SelectorCombinatorParameters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SelectorCombinatorParameters",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'count_signal', 'order': 2, 'description': 'The signal to emit.', 'type': 'SignalID', 'optional': False}, {'name': 'index_constant', 'order': 1, 'description': 'The signal index to use if not using a specific signal.', 'type': 'uint', 'optional': False}, {'name': 'index_signal', 'order': 0, 'description': 'The signal to use.', 'type': 'SignalID', 'optional': False}, {'name': 'operation', 'order': 3, 'description': 'Must be one of `\"select\"`,",
    "metadata": {
      "concept_name": "SelectorCombinatorParameters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SelectorCombinatorParameters",
    "content": "'order': 3, 'description': 'Must be one of `\"select\"`, `\"count\"`, `\"random\"`. When not specified, defaults to `\"select\"`.', 'type': 'string', 'optional': True}, {'name': 'select_max', 'order': 4, 'description': 'If the maximum value is used.', 'type': 'boolean', 'optional': False}]}",
    "metadata": {
      "concept_name": "SelectorCombinatorParameters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Signal",
    "content": "Concept: Signal\nDescription: An actual signal transmitted by the network.\nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'count', 'order': 1, 'description': 'Value of the signal.', 'type': 'int', 'optional': False}, {'name': 'signal', 'order': 0, 'description': 'ID of the signal.', 'type': 'SignalID', 'optional': False}]}",
    "metadata": {
      "concept_name": "Signal",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SignalFilter",
    "content": "Concept: SignalFilter\nDescription: A signal filter may be specified in two ways, either as a string which is a virtual signal name or item prototype name or as a table.",
    "metadata": {
      "concept_name": "SignalFilter",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "SignalFilter",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'table', 'parameters': [{'name': 'comparator', 'order': 3, 'description': 'The comparator for quality. `nil` if any quality.', 'type': 'ComparatorString', 'optional': True}, {'name': 'name', 'order': 1, 'description': 'Name of the signal.', 'type': 'string', 'optional': False}, {'name': 'quality', 'order': 2, 'description': \"The prototype name of the signal's quality. `nil` for any quality.\", 'type': 'QualityID', 'optional': True},",
    "metadata": {
      "concept_name": "SignalFilter",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "SignalFilter",
    "content": "for any quality.\", 'type': 'QualityID', 'optional': True}, {'name': 'type', 'order': 0, 'description': 'The type of the signal filter.', 'type': 'SignalIDType', 'optional': True}]}, 'string'], 'full_format': False}",
    "metadata": {
      "concept_name": "SignalFilter",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "SignalID",
    "content": "Concept: SignalID\nDescription:",
    "metadata": {
      "concept_name": "SignalID",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SignalID",
    "content": "Description: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'name', 'order': 1, 'description': 'Name of the prototype.', 'type': 'string', 'optional': True}, {'name': 'quality', 'order': 2, 'description': \"The prototype name of the signal's quality. Defaults to `normal`.\", 'type': 'QualityID', 'optional': True}, {'name': 'type', 'order': 0, 'description': 'The type of the signal. If the type is `\"item\"`, this will be `nil` when reading.', 'type': 'SignalIDType', 'optional': True}]}",
    "metadata": {
      "concept_name": "SignalID",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SignalIDType",
    "content": "Concept: SignalIDType\nDescription:",
    "metadata": {
      "concept_name": "SignalIDType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "SignalIDType",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'item', 'description': ''}, {'complex_type': 'literal', 'value': 'fluid', 'description': ''}, {'complex_type': 'literal', 'value': 'virtual', 'description': ''}, {'complex_type': 'literal', 'value': 'entity', 'description': ''}, {'complex_type': 'literal', 'value': 'recipe', 'description': ''}, {'complex_type': 'literal', 'value': 'space-location', 'description': ''}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "SignalIDType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "SignalIDType",
    "content": "'description': ''}, {'complex_type': 'literal', 'value': 'asteroid-chunk', 'description': ''}, {'complex_type': 'literal', 'value': 'quality', 'description': ''}], 'full_format': True}",
    "metadata": {
      "concept_name": "SignalIDType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "SimpleItemStack",
    "content": "Concept: SimpleItemStack\nDescription: An item stack may be specified in one of two ways.\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'string', 'description': 'The name of the item, which represents a full stack of that item.'}, {'complex_type': 'type', 'value': 'ItemStackDefinition', 'description': 'The detailed definition of an item stack.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "SimpleItemStack",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "SimulationWidgetType",
    "content": "Concept: SimulationWidgetType\nDescription:",
    "metadata": {
      "concept_name": "SimulationWidgetType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "SimulationWidgetType",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'signal-id', 'description': ''}, {'complex_type': 'literal', 'value': 'signal-id-base', 'description': ''}, {'complex_type': 'literal', 'value': 'signal-or-number', 'description': ''}, {'complex_type': 'literal', 'value': 'simple-slot', 'description': ''}, {'complex_type': 'literal', 'value': 'simple-item-slot', 'description': ''}, {'complex_type': 'literal', 'value': 'recipe-slot', 'description': ''}, {'complex_type':",
    "metadata": {
      "concept_name": "SimulationWidgetType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "SimulationWidgetType",
    "content": "'value': 'recipe-slot', 'description': ''}, {'complex_type': 'literal', 'value': 'quickbar-slot', 'description': ''}, {'complex_type': 'literal', 'value': 'logistics-button', 'description': ''}, {'complex_type': 'literal', 'value': 'logistics-button-space', 'description': ''}, {'complex_type': 'literal', 'value': 'text-button-localised-substring', 'description': ''}, {'complex_type': 'literal', 'value': 'text-button', 'description': ''}, {'complex_type': 'literal', 'value': 'text-button-substring',",
    "metadata": {
      "concept_name": "SimulationWidgetType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "SimulationWidgetType",
    "content": "{'complex_type': 'literal', 'value': 'text-button-substring', 'description': ''}, {'complex_type': 'literal', 'value': 'inventory-limit-slot-button', 'description': ''}, {'complex_type': 'literal', 'value': 'train-schedule-action-button', 'description': ''}, {'complex_type': 'literal', 'value': 'choose-button', 'description': ''}, {'complex_type': 'literal', 'value': 'textfield', 'description': ''}, {'complex_type': 'literal', 'value': 'item-group-tab', 'description': ''}, {'complex_type': 'literal',",
    "metadata": {
      "concept_name": "SimulationWidgetType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "SimulationWidgetType",
    "content": "'description': ''}, {'complex_type': 'literal', 'value': 'drop-down', 'description': ''}, {'complex_type': 'literal', 'value': 'check-box', 'description': ''}, {'complex_type': 'literal', 'value': 'switch', 'description': ''}, {'complex_type': 'literal', 'value': 'label', 'description': ''}], 'full_format': True}",
    "metadata": {
      "concept_name": "SimulationWidgetType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "SmokeSource",
    "content": "Concept: SmokeSource\nDescription:",
    "metadata": {
      "concept_name": "SmokeSource",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SmokeSource",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'deviation', 'order': 12, 'description': '', 'type': 'MapPosition', 'optional': True}, {'name': 'east_position', 'order': 6, 'description': '', 'type': 'Vector', 'optional': True}, {'name': 'frequency', 'order': 1, 'description': '', 'type': 'float', 'optional': False}, {'name': 'height', 'order': 15, 'description': '', 'type': 'float', 'optional': False}, {'name': 'height_deviation', 'order': 16, 'description': '', 'type': 'float',",
    "metadata": {
      "concept_name": "SmokeSource",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SmokeSource",
    "content": "'order': 16, 'description': '', 'type': 'float', 'optional': False}, {'name': 'name', 'order': 0, 'description': '', 'type': 'string', 'optional': False}, {'name': 'north_east_position', 'order': 5, 'description': '', 'type': 'Vector', 'optional': True}, {'name': 'north_position', 'order': 4, 'description': '', 'type': 'Vector', 'optional': True}, {'name': 'north_west_position', 'order': 11, 'description': '', 'type': 'Vector', 'optional': True}, {'name': 'offset', 'order': 2, 'description': '', 'type':",
    "metadata": {
      "concept_name": "SmokeSource",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SmokeSource",
    "content": "{'name': 'offset', 'order': 2, 'description': '', 'type': 'float', 'optional': False}, {'name': 'position', 'order': 3, 'description': '', 'type': 'Vector', 'optional': True}, {'name': 'south_east_position', 'order': 7, 'description': '', 'type': 'Vector', 'optional': True}, {'name': 'south_position', 'order': 8, 'description': '', 'type': 'Vector', 'optional': True}, {'name': 'south_west_position', 'order': 9, 'description': '', 'type': 'Vector', 'optional': True}, {'name': 'starting_frame', 'order': 13,",
    "metadata": {
      "concept_name": "SmokeSource",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SmokeSource",
    "content": "'optional': True}, {'name': 'starting_frame', 'order': 13, 'description': '', 'type': 'uint16', 'optional': False}, {'name': 'starting_frame_deviation', 'order': 14, 'description': '', 'type': 'uint16', 'optional': False}, {'name': 'starting_vertical_speed', 'order': 17, 'description': '', 'type': 'float', 'optional': False}, {'name': 'starting_vertical_speed_deviation', 'order': 18, 'description': '', 'type': 'float', 'optional': False}, {'name': 'vertical_speed_slowdown', 'order': 19, 'description': '',",
    "metadata": {
      "concept_name": "SmokeSource",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SmokeSource",
    "content": "'vertical_speed_slowdown', 'order': 19, 'description': '', 'type': 'float', 'optional': False}, {'name': 'west_position', 'order': 10, 'description': '', 'type': 'Vector', 'optional': True}]}",
    "metadata": {
      "concept_name": "SmokeSource",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SoundPath",
    "content": "Concept: SoundPath\nDescription: It can be either the name of a [SoundPrototype](prototype:SoundPrototype) defined in the data stage, or a path in the form `\"type/name\"`. The latter option can be sorted into three categories.\n\nThe validity of a SoundPath can be verified at runtime using [LuaHelpers::is_valid_sound_path](runtime:LuaHelpers::is_valid_sound_path).\nComplex_type: string",
    "metadata": {
      "concept_name": "SoundPath",
      "concept_type": "string"
    }
  },
  {
    "type": "concept",
    "name": "SoundType",
    "content": "Concept: SoundType\nDescription: Defines which slider in the game's sound settings affects the volume of this sound. Furthermore, some sound types are mixed differently than others, e.g. zoom level effects are applied.",
    "metadata": {
      "concept_name": "SoundType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "SoundType",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'game-effect', 'description': ''}, {'complex_type': 'literal', 'value': 'gui-effect', 'description': ''}, {'complex_type': 'literal', 'value': 'ambient', 'description': ''}, {'complex_type': 'literal', 'value': 'environment', 'description': ''}, {'complex_type': 'literal', 'value': 'walking', 'description': ''}, {'complex_type': 'literal', 'value': 'alert', 'description': ''}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "SoundType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "SoundType",
    "content": "'description': ''}, {'complex_type': 'literal', 'value': 'wind', 'description': ''}, {'complex_type': 'literal', 'value': 'world-ambient', 'description': ''}, {'complex_type': 'literal', 'value': 'weapon', 'description': ''}, {'complex_type': 'literal', 'value': 'explosion', 'description': ''}, {'complex_type': 'literal', 'value': 'enemy', 'description': ''}], 'full_format': True}",
    "metadata": {
      "concept_name": "SoundType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "SpaceConnectionAsteroidSpawnDefinition",
    "content": "Concept: SpaceConnectionAsteroidSpawnDefinition\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'asteroid', 'order': 1, 'description': 'The asteroid chunk or entity name.', 'type': 'string', 'optional': False}, {'name': 'spawn_points', 'order': 2, 'description': '', 'type': {'complex_type': 'array', 'value': 'SpaceConnectionAsteroidSpawnPoint'}, 'optional': False}, {'name': 'type', 'order': 0, 'description': '`asteroid-chunk` or `entity`', 'type': 'string', 'optional': False}]}",
    "metadata": {
      "concept_name": "SpaceConnectionAsteroidSpawnDefinition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SpaceConnectionAsteroidSpawnPoint",
    "content": "Concept: SpaceConnectionAsteroidSpawnPoint\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'distance', 'order': 2, 'description': '', 'type': 'double', 'optional': False}, {'name': 'probability', 'order': 0, 'description': '', 'type': 'double', 'optional': False}, {'name': 'speed', 'order': 1, 'description': '', 'type': 'double', 'optional': False}]}",
    "metadata": {
      "concept_name": "SpaceConnectionAsteroidSpawnPoint",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SpaceLocationAsteroidSpawnDefinition",
    "content": "Concept: SpaceLocationAsteroidSpawnDefinition\nDescription:",
    "metadata": {
      "concept_name": "SpaceLocationAsteroidSpawnDefinition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SpaceLocationAsteroidSpawnDefinition",
    "content": "Description: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'asteroid', 'order': 1, 'description': 'The asteroid chunk or entity name.', 'type': 'string', 'optional': False}, {'name': 'probability', 'order': 2, 'description': '', 'type': 'double', 'optional': False}, {'name': 'speed', 'order': 3, 'description': '', 'type': 'double', 'optional': False}, {'name': 'type', 'order': 0, 'description': '`asteroid-chunk` or `entity`', 'type': 'string', 'optional': False}]}",
    "metadata": {
      "concept_name": "SpaceLocationAsteroidSpawnDefinition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SpaceLocationID",
    "content": "Concept: SpaceLocationID\nDescription: A space location prototype may be specified in one of two ways.\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'LuaSpaceLocationPrototype', 'description': 'The space location prototype.'}, {'complex_type': 'type', 'value': 'string', 'description': 'The prototype name.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "SpaceLocationID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "SpaceLocationPrototypeFilter",
    "content": "Concept: SpaceLocationPrototypeFilter\nDescription:",
    "metadata": {
      "concept_name": "SpaceLocationPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SpaceLocationPrototypeFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'fly-condition'}, {'complex_type': 'literal', 'value': 'type'}, {'complex_type': 'literal', 'value': 'solar-power-in-space'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional':",
    "metadata": {
      "concept_name": "SpaceLocationPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SpaceLocationPrototypeFilter",
    "content": "condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'solar-power-in-space', 'order': 1,",
    "metadata": {
      "concept_name": "SpaceLocationPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SpaceLocationPrototypeFilter",
    "content": "[{'name': 'solar-power-in-space', 'order': 1, 'description': '', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'double', 'optional': False}]}, {'name': 'type', 'order': 0, 'description': '', 'parameters': [{'name': 'type', 'order': 0, 'description': 'The prototype type, or a list of acceptable types.', 'type': {'complex_type': 'union', 'options':",
    "metadata": {
      "concept_name": "SpaceLocationPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SpaceLocationPrototypeFilter",
    "content": "types.', 'type': {'complex_type': 'union', 'options': ['string', {'complex_type': 'array', 'value': 'string'}], 'full_format': False}, 'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "SpaceLocationPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SpacePlatformIdentification",
    "content": "Concept: SpacePlatformIdentification\nDescription: Space platform may be specified in one of one ways.\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'LuaSpacePlatform', 'description': ''}], 'full_format': True}",
    "metadata": {
      "concept_name": "SpacePlatformIdentification",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "SpawnPointDefinition",
    "content": "Concept: SpawnPointDefinition\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'evolution_factor', 'order': 0, 'description': 'Evolution factor for which this weight applies.', 'type': 'double', 'optional': False}, {'name': 'weight', 'order': 1, 'description': 'Probability of spawning this unit at this evolution factor.', 'type': 'double', 'optional': False}]}",
    "metadata": {
      "concept_name": "SpawnPointDefinition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SpoilToTriggerResult",
    "content": "Concept: SpoilToTriggerResult\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'items_per_trigger', 'order': 0, 'description': 'The trigger runs (count-in-stack / items_per_trigger) times; rounded up.', 'type': 'uint', 'optional': False}, {'name': 'trigger', 'order': 1, 'description': 'The trigger items that are run.', 'type': {'complex_type': 'array', 'value': 'TriggerItem'}, 'optional': False}]}",
    "metadata": {
      "concept_name": "SpoilToTriggerResult",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SpritePath",
    "content": "Concept: SpritePath\nDescription: It can be either the name of a [SpritePrototype](prototype:SpritePrototype) defined in the data stage, or a path in form \"type/name\" or \"type.name\".\n\nThe validity of a SpritePath can be verified at runtime using [LuaHelpers::is_valid_sprite_path](runtime:LuaHelpers::is_valid_sprite_path).\nComplex_type: string",
    "metadata": {
      "concept_name": "SpritePath",
      "concept_type": "string"
    }
  },
  {
    "type": "concept",
    "name": "SteeringMapSetting",
    "content": "Concept: SteeringMapSetting\nDescription:",
    "metadata": {
      "concept_name": "SteeringMapSetting",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SteeringMapSetting",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'force_unit_fuzzy_goto_behavior', 'order': 3, 'description': 'Used to make steering look better for aesthetic purposes.', 'type': 'boolean', 'optional': False}, {'name': 'radius', 'order': 0, 'description': 'Does not include the radius of the unit.', 'type': 'double', 'optional': False}, {'name': 'separation_factor', 'order': 1, 'description': '', 'type': 'double', 'optional': False}, {'name': 'separation_force', 'order': 2, 'description': '',",
    "metadata": {
      "concept_name": "SteeringMapSetting",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SteeringMapSetting",
    "content": "{'name': 'separation_force', 'order': 2, 'description': '', 'type': 'double', 'optional': False}]}",
    "metadata": {
      "concept_name": "SteeringMapSetting",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SteeringMapSettings",
    "content": "Concept: SteeringMapSettings\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'default', 'order': 0, 'description': '', 'type': 'SteeringMapSetting', 'optional': False}, {'name': 'moving', 'order': 1, 'description': '', 'type': 'SteeringMapSetting', 'optional': False}]}",
    "metadata": {
      "concept_name": "SteeringMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SurfaceCondition",
    "content": "Concept: SurfaceCondition\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'max', 'order': 2, 'description': '', 'type': 'double', 'optional': False}, {'name': 'min', 'order': 1, 'description': '', 'type': 'double', 'optional': False}, {'name': 'property', 'order': 0, 'description': '', 'type': 'string', 'optional': False}]}",
    "metadata": {
      "concept_name": "SurfaceCondition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "SurfaceIdentification",
    "content": "Concept: SurfaceIdentification\nDescription: A surface may be specified in one of three ways.",
    "metadata": {
      "concept_name": "SurfaceIdentification",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "SurfaceIdentification",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'uint', 'description': 'It will be the index of the surface. `nauvis` has index `1`, the first surface-created surface will have index `2` and so on.'}, {'complex_type': 'type', 'value': 'string', 'description': 'It will be the surface name. E.g. `\"nauvis\"`.'}, {'complex_type': 'type', 'value': 'LuaSurface', 'description': 'A reference to [LuaSurface](runtime:LuaSurface) may be passed directly.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "SurfaceIdentification",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "SurfacePropertyID",
    "content": "Concept: SurfacePropertyID\nDescription: Surface property prototype may be specified in one of two ways.\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'LuaSurfacePropertyPrototype', 'description': 'The surface property prototype.'}, {'complex_type': 'type', 'value': 'string', 'description': 'The prototype name.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "SurfacePropertyID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "SwitchState",
    "content": "Concept: SwitchState\nDescription: State of a GUI [switch](runtime:LuaGuiElement::switch_state).\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'left', 'description': ''}, {'complex_type': 'literal', 'value': 'right', 'description': ''}, {'complex_type': 'literal', 'value': 'none', 'description': ''}], 'full_format': True}",
    "metadata": {
      "concept_name": "SwitchState",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "TabAndContent",
    "content": "Concept: TabAndContent\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'content', 'order': 1, 'description': '', 'type': 'LuaGuiElement', 'optional': False}, {'name': 'tab', 'order': 0, 'description': '', 'type': 'LuaGuiElement', 'optional': False}]}",
    "metadata": {
      "concept_name": "TabAndContent",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Tags",
    "content": "Concept: Tags\nDescription: A dictionary of string to the four basic Lua types: `string`, `boolean`, `number`, `table`.\n\nNote that the API returns tags as a simple table, meaning any modifications to it will not propagate back to the game. Thus, to modify a set of tags, the whole table needs to be written back to the respective property.\nComplex_type: {'complex_type': 'dictionary', 'key': 'string', 'value': 'AnyBasic'}",
    "metadata": {
      "concept_name": "Tags",
      "concept_type": "dictionary"
    }
  },
  {
    "type": "concept",
    "name": "TargetType",
    "content": "Concept: TargetType\nDescription: Target type of an [AmmoType](runtime:AmmoType).\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'entity', 'description': 'Fires at an entity.'}, {'complex_type': 'literal', 'value': 'position', 'description': 'Fires directly at a position.'}, {'complex_type': 'literal', 'value': 'direction', 'description': 'Fires in a direction.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "TargetType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "TechnologyID",
    "content": "Concept: TechnologyID\nDescription: An technology prototype may be specified in one of three ways.\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'LuaTechnologyPrototype', 'description': 'The technology prototype.'}, {'complex_type': 'type', 'value': 'LuaTechnology', 'description': 'Instance of the technology.'}, {'complex_type': 'type', 'value': 'string', 'description': 'The prototype name.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "TechnologyID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "TechnologyModifier",
    "content": "Concept: TechnologyModifier\nDescription: The effect that is applied when a technology is researched. It is a table that contains at least the field `type`.",
    "metadata": {
      "concept_name": "TechnologyModifier",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TechnologyModifier",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'type', 'order': 0, 'description': 'Modifier type. Specifies which of the other fields will be available.', 'type': 'ModifierType', 'optional': False}], 'variant_parameter_groups': [{'name': 'OtherTypes', 'order': 6, 'description': '', 'parameters': [{'name': 'modifier', 'order': 0, 'description': 'Modification value. This value will be added to the variable it modifies.', 'type': 'double', 'optional': False}]}, {'name': 'ammo-damage',",
    "metadata": {
      "concept_name": "TechnologyModifier",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TechnologyModifier",
    "content": "'type': 'double', 'optional': False}]}, {'name': 'ammo-damage', 'order': 1, 'description': '', 'parameters': [{'name': 'ammo_category', 'order': 0, 'description': 'Prototype name of the ammunition category that is affected', 'type': 'string', 'optional': False}, {'name': 'modifier', 'order': 1, 'description': 'Modification value. This will be added to the current ammo damage modifier upon researching.', 'type': 'double', 'optional': False}]}, {'name': 'give-item', 'order': 2, 'description': '',",
    "metadata": {
      "concept_name": "TechnologyModifier",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TechnologyModifier",
    "content": "False}]}, {'name': 'give-item', 'order': 2, 'description': '', 'parameters': [{'name': 'count', 'order': 1, 'description': 'Number of items to give. Defaults to `1`.', 'type': 'uint', 'optional': True}, {'name': 'item', 'order': 0, 'description': 'Item prototype name to give.', 'type': 'string', 'optional': False}]}, {'name': 'gun-speed', 'order': 0, 'description': '', 'parameters': [{'name': 'ammo_category', 'order': 0, 'description': 'Prototype name of the ammunition category that is affected', 'type':",
    "metadata": {
      "concept_name": "TechnologyModifier",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TechnologyModifier",
    "content": "name of the ammunition category that is affected', 'type': 'string', 'optional': False}, {'name': 'modifier', 'order': 1, 'description': 'Modification value. This will be added to the current gun speed modifier upon researching.', 'type': 'double', 'optional': False}]}, {'name': 'nothing', 'order': 5, 'description': '', 'parameters': [{'name': 'effect_description', 'order': 0, 'description': 'Description of this nothing modifier.', 'type': 'LocalisedString', 'optional': False}]}, {'name': 'turret-attack',",
    "metadata": {
      "concept_name": "TechnologyModifier",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TechnologyModifier",
    "content": "'optional': False}]}, {'name': 'turret-attack', 'order': 3, 'description': '', 'parameters': [{'name': 'modifier', 'order': 1, 'description': 'Modification value. This will be added to the current turret damage modifier upon researching.', 'type': 'double', 'optional': False}, {'name': 'turret_id', 'order': 0, 'description': 'Turret prototype name this modifier will affect.', 'type': 'string', 'optional': False}]}, {'name': 'unlock-recipe', 'order': 4, 'description': '', 'parameters': [{'name': 'recipe',",
    "metadata": {
      "concept_name": "TechnologyModifier",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TechnologyModifier",
    "content": "4, 'description': '', 'parameters': [{'name': 'recipe', 'order': 0, 'description': 'Recipe prototype name to unlock.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `type`:'}",
    "metadata": {
      "concept_name": "TechnologyModifier",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TechnologyPrototypeFilter",
    "content": "Concept: TechnologyPrototypeFilter\nDescription:",
    "metadata": {
      "concept_name": "TechnologyPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TechnologyPrototypeFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'enabled'}, {'complex_type': 'literal', 'value': 'hidden'}, {'complex_type': 'literal', 'value': 'upgrade'}, {'complex_type': 'literal', 'value': 'visible-when-disabled'}, {'complex_type': 'literal', 'value': 'has-effects'}, {'complex_type': 'literal', 'value': 'has-prerequisites'},",
    "metadata": {
      "concept_name": "TechnologyPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TechnologyPrototypeFilter",
    "content": "{'complex_type': 'literal', 'value': 'has-prerequisites'}, {'complex_type': 'literal', 'value': 'research-unit-ingredient'}, {'complex_type': 'literal', 'value': 'unlocks-recipe'}, {'complex_type': 'literal', 'value': 'level'}, {'complex_type': 'literal', 'value': 'max-level'}, {'complex_type': 'literal', 'value': 'time'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name':",
    "metadata": {
      "concept_name": "TechnologyPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TechnologyPrototypeFilter",
    "content": "is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'level', 'order': 2, 'description': '', 'parameters':",
    "metadata": {
      "concept_name": "TechnologyPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TechnologyPrototypeFilter",
    "content": "[{'name': 'level', 'order': 2, 'description': '', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'uint', 'optional': False}]}, {'name': 'max-level', 'order': 3, 'description': '', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The value to",
    "metadata": {
      "concept_name": "TechnologyPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TechnologyPrototypeFilter",
    "content": "{'name': 'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'uint', 'optional': False}]}, {'name': 'research-unit-ingredient', 'order': 0, 'description': '', 'parameters': [{'name': 'ingredient', 'order': 0, 'description': 'The research ingredient to check.', 'type': 'string', 'optional': False}]}, {'name': 'time', 'order': 4, 'description': '', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'value',",
    "metadata": {
      "concept_name": "TechnologyPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TechnologyPrototypeFilter",
    "content": "'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'uint', 'optional': False}]}, {'name': 'unlocks-recipe', 'order': 1, 'description': '', 'parameters': [{'name': 'recipe', 'order': 0, 'description': 'The recipe to check.', 'type': 'string', 'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "TechnologyPrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TerritorySettings",
    "content": "Concept: TerritorySettings\nDescription:",
    "metadata": {
      "concept_name": "TerritorySettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TerritorySettings",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'minimum_territory_size', 'order': 3, 'description': '', 'type': 'uint', 'optional': False}, {'name': 'territory_index_expression', 'order': 1, 'description': '', 'type': 'string', 'optional': False}, {'name': 'territory_variation_expression', 'order': 2, 'description': '', 'type': 'string', 'optional': False}, {'name': 'units', 'order': 0, 'description': '', 'type': {'complex_type': 'array', 'value': 'string'}, 'optional': False}]}",
    "metadata": {
      "concept_name": "TerritorySettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TextAlign",
    "content": "Concept: TextAlign\nDescription: The text is aligned so that the target position is at the given side of the text.",
    "metadata": {
      "concept_name": "TextAlign",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "TextAlign",
    "content": "For example, `\"right\"` aligned text means the right side of the text is at the target position. Or in other words, the target is on the right of the text.\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'left', 'description': ''}, {'complex_type': 'literal', 'value': 'right', 'description': ''}, {'complex_type': 'literal', 'value': 'center', 'description': ''}], 'full_format': True}",
    "metadata": {
      "concept_name": "TextAlign",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "Tile",
    "content": "Concept: Tile\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'name', 'order': 1, 'description': 'The prototype name of the tile.', 'type': 'string', 'optional': False}, {'name': 'position', 'order': 0, 'description': 'The position of the tile.', 'type': 'TilePosition', 'optional': False}]}",
    "metadata": {
      "concept_name": "Tile",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TileID",
    "content": "Concept: TileID\nDescription: A tile may be specified in one of three ways.\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'LuaTilePrototype', 'description': 'By tile prototype.'}, {'complex_type': 'type', 'value': 'LuaTile', 'description': 'By instance of tile.'}, {'complex_type': 'type', 'value': 'string', 'description': 'By name of the tile prototype.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "TileID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "TilePosition",
    "content": "Concept: TilePosition\nDescription: Coordinates of a tile on a [LuaSurface](runtime:LuaSurface) where each integer `x`/`y` represents a different tile. This uses the same format as [MapPosition](runtime:MapPosition), except it rounds any non-integer `x`/`y` down to whole numbers. It can be specified either with or without explicit keys.",
    "metadata": {
      "concept_name": "TilePosition",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "TilePosition",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'table', 'parameters': [{'name': 'x', 'order': 0, 'description': '', 'type': 'int', 'optional': False}, {'name': 'y', 'order': 1, 'description': '', 'type': 'int', 'optional': False}]}, {'complex_type': 'tuple', 'values': ['int', 'int']}], 'full_format': False}",
    "metadata": {
      "concept_name": "TilePosition",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "TilePrototypeFilter",
    "content": "Concept: TilePrototypeFilter\nDescription:",
    "metadata": {
      "concept_name": "TilePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TilePrototypeFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'filter', 'order': 0, 'description': 'The condition to filter on.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'minable'}, {'complex_type': 'literal', 'value': 'autoplace'}, {'complex_type': 'literal', 'value': 'blueprintable'}, {'complex_type': 'literal', 'value': 'item-to-place'}, {'complex_type': 'literal', 'value': 'collision-mask'}, {'complex_type': 'literal', 'value': 'walking-speed-modifier'},",
    "metadata": {
      "concept_name": "TilePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TilePrototypeFilter",
    "content": "{'complex_type': 'literal', 'value': 'walking-speed-modifier'}, {'complex_type': 'literal', 'value': 'vehicle-friction-modifier'}, {'complex_type': 'literal', 'value': 'decorative-removal-probability'}, {'complex_type': 'literal', 'value': 'absorptions-per-second'}], 'full_format': False}, 'optional': False}, {'name': 'invert', 'order': 2, 'description': 'Inverts the condition. Default is `false`.', 'type': 'boolean', 'optional': True}, {'name': 'mode', 'order': 1, 'description': 'How to combine this with",
    "metadata": {
      "concept_name": "TilePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TilePrototypeFilter",
    "content": "'mode', 'order': 1, 'description': 'How to combine this with the previous filter. Defaults to `\"or\"`. When evaluating the filters, `\"and\"` has higher precedence than `\"or\"`.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'or'}, {'complex_type': 'literal', 'value': 'and'}], 'full_format': False}, 'optional': True}], 'variant_parameter_groups': [{'name': 'absorptions-per-second', 'order': 4, 'description': '', 'parameters': [{'name': 'comparison', 'order': 1,",
    "metadata": {
      "concept_name": "TilePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TilePrototypeFilter",
    "content": "'', 'parameters': [{'name': 'comparison', 'order': 1, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'pollutant', 'order': 0, 'description': 'The name of a pollutant type to check.', 'type': 'string', 'optional': False}, {'name': 'value', 'order': 2, 'description': 'The value to compare against.', 'type': 'double', 'optional': False}]}, {'name': 'collision-mask', 'order': 0, 'description': '', 'parameters': [{'name': 'mask', 'order': 0, 'description': 'Name of one",
    "metadata": {
      "concept_name": "TilePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TilePrototypeFilter",
    "content": "[{'name': 'mask', 'order': 0, 'description': 'Name of one [layer](runtime:LuaCollisionLayerPrototype) or a full collision mask.', 'type': {'complex_type': 'union', 'options': ['CollisionLayerID', 'CollisionMask'], 'full_format': False}, 'optional': False}, {'name': 'mask_mode', 'order': 1, 'description': 'How to filter.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'collides'}, {'complex_type': 'literal', 'value': 'layers-equals'}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "TilePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TilePrototypeFilter",
    "content": "'value': 'layers-equals'}, {'complex_type': 'literal', 'value': 'contains-any'}, {'complex_type': 'literal', 'value': 'contains-all'}], 'full_format': False}, 'optional': False}]}, {'name': 'decorative-removal-probability', 'order': 3, 'description': '', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'float', 'optional': False}]}, {'name':",
    "metadata": {
      "concept_name": "TilePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TilePrototypeFilter",
    "content": "against.', 'type': 'float', 'optional': False}]}, {'name': 'vehicle-friction-modifier', 'order': 2, 'description': '', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'double', 'optional': False}]}, {'name': 'walking-speed-modifier', 'order': 1, 'description': '', 'parameters': [{'name': 'comparison', 'order': 0, 'description': '', 'type':",
    "metadata": {
      "concept_name": "TilePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TilePrototypeFilter",
    "content": "[{'name': 'comparison', 'order': 0, 'description': '', 'type': 'ComparatorString', 'optional': False}, {'name': 'value', 'order': 1, 'description': 'The value to compare against.', 'type': 'double', 'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `filter`:'}",
    "metadata": {
      "concept_name": "TilePrototypeFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TileSearchFilters",
    "content": "Concept: TileSearchFilters\nDescription:",
    "metadata": {
      "concept_name": "TileSearchFilters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TileSearchFilters",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'area', 'order': 0, 'description': '', 'type': 'BoundingBox', 'optional': True}, {'name': 'collision_mask', 'order': 9, 'description': '', 'type': {'complex_type': 'union', 'options': ['CollisionLayerID', {'complex_type': 'array', 'value': 'CollisionLayerID'}, {'complex_type': 'dictionary', 'key': 'CollisionLayerID', 'value': {'complex_type': 'literal', 'value': True}}], 'full_format': False}, 'optional': True}, {'name': 'force', 'order': 10,",
    "metadata": {
      "concept_name": "TileSearchFilters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TileSearchFilters",
    "content": "False}, 'optional': True}, {'name': 'force', 'order': 10, 'description': '', 'type': 'ForceSet', 'optional': True}, {'name': 'has_double_hidden_tile', 'order': 6, 'description': 'Can be further filtered by supplying a `force` filter.', 'type': 'boolean', 'optional': True}, {'name': 'has_hidden_tile', 'order': 5, 'description': '', 'type': 'boolean', 'optional': True}, {'name': 'has_tile_ghost', 'order': 7, 'description': 'Can be further filtered by supplying a `force` filter.', 'type': 'boolean',",
    "metadata": {
      "concept_name": "TileSearchFilters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TileSearchFilters",
    "content": "filtered by supplying a `force` filter.', 'type': 'boolean', 'optional': True}, {'name': 'invert', 'order': 11, 'description': 'If the filters should be inverted.', 'type': 'boolean', 'optional': True}, {'name': 'limit', 'order': 4, 'description': '', 'type': 'uint', 'optional': True}, {'name': 'name', 'order': 3, 'description': 'An empty array means nothing matches the name filter.', 'type': {'complex_type': 'union', 'options': ['TileID', {'complex_type': 'array', 'value': 'TileID'}], 'full_format':",
    "metadata": {
      "concept_name": "TileSearchFilters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TileSearchFilters",
    "content": "{'complex_type': 'array', 'value': 'TileID'}], 'full_format': False}, 'optional': True}, {'name': 'position', 'order': 1, 'description': 'Ignored if not given with radius.', 'type': 'MapPosition', 'optional': True}, {'name': 'radius', 'order': 2, 'description': 'If given with position, will return all tiles within the radius of the position.', 'type': 'double', 'optional': True}, {'name': 'to_be_deconstructed', 'order': 8, 'description': 'Can be further filtered by supplying a `force` filter.', 'type':",
    "metadata": {
      "concept_name": "TileSearchFilters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TileSearchFilters",
    "content": "be further filtered by supplying a `force` filter.', 'type': 'boolean', 'optional': True}]}",
    "metadata": {
      "concept_name": "TileSearchFilters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TrainFilter",
    "content": "Concept: TrainFilter\nDescription:",
    "metadata": {
      "concept_name": "TrainFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TrainFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'force', 'order': 2, 'description': 'Train must contain at least one rolling stock of this force to pass', 'type': 'ForceID', 'optional': True}, {'name': 'has_passenger', 'order': 7, 'description': 'Checks if train has a passenger.', 'type': 'boolean', 'optional': True}, {'name': 'is_manual', 'order': 8, 'description': 'Checks if train is in manual controller.', 'type': 'boolean', 'optional': True}, {'name': 'is_moving', 'order': 6,",
    "metadata": {
      "concept_name": "TrainFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TrainFilter",
    "content": "'boolean', 'optional': True}, {'name': 'is_moving', 'order': 6, 'description': 'Checks if train is moving (has speed != 0) or not moving.', 'type': 'boolean', 'optional': True}, {'name': 'max_stocks', 'order': 5, 'description': 'Train must have at most that many stocks to pass', 'type': 'uint', 'optional': True}, {'name': 'min_stocks', 'order': 4, 'description': 'Train must have at least that many stocks to pass', 'type': 'uint', 'optional': True}, {'name': 'stock', 'order': 3, 'description': 'Train must",
    "metadata": {
      "concept_name": "TrainFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TrainFilter",
    "content": "True}, {'name': 'stock', 'order': 3, 'description': 'Train must contain a rolling stock of any of provided prototype to pass', 'type': {'complex_type': 'union', 'options': ['EntityID', {'complex_type': 'array', 'value': 'EntityID'}], 'full_format': False}, 'optional': True}, {'name': 'surface', 'order': 1, 'description': 'Surface the train must be on in order to pass', 'type': 'SurfaceIdentification', 'optional': True}, {'name': 'train_id', 'order': 0, 'description': 'Train ID filter', 'type': 'uint',",
    "metadata": {
      "concept_name": "TrainFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TrainFilter",
    "content": "'order': 0, 'description': 'Train ID filter', 'type': 'uint', 'optional': True}]}",
    "metadata": {
      "concept_name": "TrainFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TrainPathAllGoalsResult",
    "content": "Concept: TrainPathAllGoalsResult\nDescription:",
    "metadata": {
      "concept_name": "TrainPathAllGoalsResult",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TrainPathAllGoalsResult",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'accessible', 'order': 1, 'description': 'Array of the same length as requested goals: each field will tell if related goal is accessible for the train.', 'type': {'complex_type': 'array', 'value': 'boolean'}, 'optional': False}, {'name': 'amount_accessible', 'order': 0, 'description': 'Amount of goals that are accessible.', 'type': 'uint', 'optional': False}, {'name': 'penalties', 'order': 2, 'description': 'Array of the same length as",
    "metadata": {
      "concept_name": "TrainPathAllGoalsResult",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TrainPathAllGoalsResult",
    "content": "'order': 2, 'description': 'Array of the same length as requested goals. Only present if request type was `\"all-goals-penalties\"`.', 'type': {'complex_type': 'array', 'value': 'double'}, 'optional': True}, {'name': 'steps_count', 'order': 3, 'description': 'Amount of steps pathfinder performed. This is a measure of how expensive this search was.', 'type': 'uint', 'optional': False}]}",
    "metadata": {
      "concept_name": "TrainPathAllGoalsResult",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TrainPathFinderGoal",
    "content": "Concept: TrainPathFinderGoal\nDescription: \nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'TrainStopGoal', 'description': ''}, {'complex_type': 'type', 'value': 'RailEndGoal', 'description': ''}, {'complex_type': 'type', 'value': 'LuaRailEnd', 'description': ''}, {'complex_type': 'type', 'value': 'LuaEntity', 'description': 'Only if it points at train-stop that is connected to a rail.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "TrainPathFinderGoal",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "TrainPathFinderOneGoalResult",
    "content": "Concept: TrainPathFinderOneGoalResult\nDescription:",
    "metadata": {
      "concept_name": "TrainPathFinderOneGoalResult",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TrainPathFinderOneGoalResult",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'found_path', 'order': 0, 'description': 'True if found path.', 'type': 'boolean', 'optional': False}, {'name': 'goal_index', 'order': 1, 'description': 'If path was found, provides index of the specific goal to which the path goes to.', 'type': 'uint', 'optional': True}, {'name': 'is_front', 'order': 4, 'description': \"If path was found, tells if the path was reached from the train's front end or from [RailEndStart](runtime:RailEndStart) with",
    "metadata": {
      "concept_name": "TrainPathFinderOneGoalResult",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TrainPathFinderOneGoalResult",
    "content": "front end or from [RailEndStart](runtime:RailEndStart) with [RailEndStart::is_front](runtime:RailEndStart::is_front) set.\", 'type': 'boolean', 'optional': True}, {'name': 'path', 'order': 6, 'description': 'Only if search was of type `\"path\"`, `return_path` was set to true and path was found. Contains all rails in order that are part of the found path.', 'type': {'complex_type': 'array', 'value': 'LuaEntity'}, 'optional': True}, {'name': 'penalty', 'order': 3, 'description': 'Penalty of the path to goal if",
    "metadata": {
      "concept_name": "TrainPathFinderOneGoalResult",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TrainPathFinderOneGoalResult",
    "content": "'order': 3, 'description': 'Penalty of the path to goal if path was found.', 'type': 'double', 'optional': True}, {'name': 'start_index', 'order': 2, 'description': 'If path was found, provides index of the specific start from which the path to target goes from', 'type': 'uint', 'optional': True}, {'name': 'steps_count', 'order': 7, 'description': 'Amount of steps pathfinder performed. This is a measure of how expensive this search was.', 'type': 'uint', 'optional': False}, {'name': 'total_length',",
    "metadata": {
      "concept_name": "TrainPathFinderOneGoalResult",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TrainPathFinderOneGoalResult",
    "content": "'type': 'uint', 'optional': False}, {'name': 'total_length', 'order': 5, 'description': 'If path was found and search was of type `\"path\"`, provides total length of all rails of the path.', 'type': 'double', 'optional': True}]}",
    "metadata": {
      "concept_name": "TrainPathFinderOneGoalResult",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TrainPathRequestType",
    "content": "Concept: TrainPathRequestType\nDescription: A [string](runtime:string) specifying the type of request for [LuaTrainManager::request_train_path](runtime:LuaTrainManager::request_train_path).",
    "metadata": {
      "concept_name": "TrainPathRequestType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "TrainPathRequestType",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'path', 'description': 'The method will return [TrainPathFinderOneGoalResult](runtime:TrainPathFinderOneGoalResult).'}, {'complex_type': 'literal', 'value': 'any-goal-accessible', 'description': 'The method will return [TrainPathFinderOneGoalResult](runtime:TrainPathFinderOneGoalResult).'}, {'complex_type': 'literal', 'value': 'all-goals-accessible', 'description': 'The method will return",
    "metadata": {
      "concept_name": "TrainPathRequestType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "TrainPathRequestType",
    "content": "'all-goals-accessible', 'description': 'The method will return [TrainPathAllGoalsResult](runtime:TrainPathAllGoalsResult).'}, {'complex_type': 'literal', 'value': 'all-goals-penalties', 'description': 'The method will return [TrainPathAllGoalsResult](runtime:TrainPathAllGoalsResult) with `penalties`.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "TrainPathRequestType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "TrainSchedule",
    "content": "Concept: TrainSchedule\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'current', 'order': 0, 'description': 'Index of the currently active record', 'type': 'uint', 'optional': False}, {'name': 'records', 'order': 1, 'description': '', 'type': {'complex_type': 'array', 'value': 'ScheduleRecord'}, 'optional': False}]}",
    "metadata": {
      "concept_name": "TrainSchedule",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TrainStopFilter",
    "content": "Concept: TrainStopFilter\nDescription:",
    "metadata": {
      "concept_name": "TrainStopFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TrainStopFilter",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'force', 'order': 1, 'description': 'ForceID the train stop must have to pass', 'type': 'ForceID', 'optional': True}, {'name': 'is_connected_to_rail', 'order': 3, 'description': 'Checks if train stop has a rail next to it.', 'type': 'boolean', 'optional': True}, {'name': 'is_disabled', 'order': 7, 'description': 'If train stop is disabled by a control behavior', 'type': 'boolean', 'optional': True}, {'name': 'is_full', 'order': 2,",
    "metadata": {
      "concept_name": "TrainStopFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TrainStopFilter",
    "content": "'boolean', 'optional': True}, {'name': 'is_full', 'order': 2, 'description': 'Checks if train stop is full (trains count >= trains limit or disabled) or not full.', 'type': 'boolean', 'optional': True}, {'name': 'limit_set_by_control_behavior', 'order': 6, 'description': 'If train stop has limit set by control behavior', 'type': 'boolean', 'optional': True}, {'name': 'station_name', 'order': 5, 'description': 'Train stop must belong to given station name to pass', 'type': {'complex_type': 'union',",
    "metadata": {
      "concept_name": "TrainStopFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TrainStopFilter",
    "content": "given station name to pass', 'type': {'complex_type': 'union', 'options': ['string', {'complex_type': 'array', 'value': 'string'}], 'full_format': False}, 'optional': True}, {'name': 'surface', 'order': 0, 'description': 'Surface the train stop must be on in order to pass', 'type': 'SurfaceIdentification', 'optional': True}, {'name': 'type', 'order': 4, 'description': 'If given, only train stops of this type will pass', 'type': {'complex_type': 'union', 'options': ['EntityID', {'complex_type': 'array',",
    "metadata": {
      "concept_name": "TrainStopFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TrainStopFilter",
    "content": "'union', 'options': ['EntityID', {'complex_type': 'array', 'value': 'EntityID'}], 'full_format': False}, 'optional': True}]}",
    "metadata": {
      "concept_name": "TrainStopFilter",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TrainStopGoal",
    "content": "Concept: TrainStopGoal\nDescription:",
    "metadata": {
      "concept_name": "TrainStopGoal",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TrainStopGoal",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'priority', 'order': 1, 'description': 'Goal priority. If not provided, defaults to [LuaEntity::train_stop_priority](runtime:LuaEntity::train_stop_priority) of provided train_stop.', 'type': 'uint8', 'optional': True}, {'name': 'train_stop', 'order': 0, 'description': 'Train stop target. Must be connected to rail ([LuaEntity::connected_rail](runtime:LuaEntity::connected_rail) returns valid LuaEntity).', 'type': 'LuaEntity', 'optional':",
    "metadata": {
      "concept_name": "TrainStopGoal",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TrainStopGoal",
    "content": "returns valid LuaEntity).', 'type': 'LuaEntity', 'optional': False}]}",
    "metadata": {
      "concept_name": "TrainStopGoal",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TriggerDelivery",
    "content": "Concept: TriggerDelivery\nDescription:",
    "metadata": {
      "concept_name": "TriggerDelivery",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TriggerDelivery",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'source_effects', 'order': 1, 'description': '', 'type': {'complex_type': 'array', 'value': 'TriggerEffectItem'}, 'optional': False}, {'name': 'target_effects', 'order': 2, 'description': '', 'type': {'complex_type': 'array', 'value': 'TriggerEffectItem'}, 'optional': False}, {'name': 'type', 'order': 0, 'description': '', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'instant'}, {'complex_type': 'literal',",
    "metadata": {
      "concept_name": "TriggerDelivery",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TriggerDelivery",
    "content": "'literal', 'value': 'instant'}, {'complex_type': 'literal', 'value': 'projectile'}, {'complex_type': 'literal', 'value': 'beam'}, {'complex_type': 'literal', 'value': 'stream'}, {'complex_type': 'literal', 'value': 'artillery'}, {'complex_type': 'literal', 'value': 'chain'}, {'complex_type': 'literal', 'value': 'delayed'}], 'full_format': False}, 'optional': False}]}",
    "metadata": {
      "concept_name": "TriggerDelivery",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TriggerEffectItem",
    "content": "Concept: TriggerEffectItem\nDescription:",
    "metadata": {
      "concept_name": "TriggerEffectItem",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TriggerEffectItem",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'affects_target', 'order': 4, 'description': '', 'type': 'boolean', 'optional': False}, {'name': 'damage_type_filters', 'order': 6, 'description': '', 'type': 'DamageTypeFilters', 'optional': True}, {'name': 'probability', 'order': 3, 'description': '', 'type': 'float', 'optional': False}, {'name': 'repeat_count', 'order': 1, 'description': '', 'type': 'uint16', 'optional': False}, {'name': 'repeat_count_deviation', 'order': 2, 'description':",
    "metadata": {
      "concept_name": "TriggerEffectItem",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TriggerEffectItem",
    "content": "{'name': 'repeat_count_deviation', 'order': 2, 'description': '', 'type': 'uint16', 'optional': False}, {'name': 'show_in_tooltip', 'order': 5, 'description': '', 'type': 'boolean', 'optional': False}, {'name': 'type', 'order': 0, 'description': '', 'type': 'TriggerEffectItemType', 'optional': False}]}",
    "metadata": {
      "concept_name": "TriggerEffectItem",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TriggerEffectItemType",
    "content": "Concept: TriggerEffectItemType\nDescription: Used by [TriggerEffectItem](runtime:TriggerEffectItem).",
    "metadata": {
      "concept_name": "TriggerEffectItemType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "TriggerEffectItemType",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'damage', 'description': ''}, {'complex_type': 'literal', 'value': 'damage-tile', 'description': ''}, {'complex_type': 'literal', 'value': 'create-entity', 'description': ''}, {'complex_type': 'literal', 'value': 'create-explosion', 'description': ''}, {'complex_type': 'literal', 'value': 'create-fire', 'description': ''}, {'complex_type': 'literal', 'value': 'create-smoke', 'description': ''}, {'complex_type':",
    "metadata": {
      "concept_name": "TriggerEffectItemType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "TriggerEffectItemType",
    "content": "'value': 'create-smoke', 'description': ''}, {'complex_type': 'literal', 'value': 'create-trivial-smoke', 'description': ''}, {'complex_type': 'literal', 'value': 'create-asteroid-chunk', 'description': ''}, {'complex_type': 'literal', 'value': 'create-particle', 'description': ''}, {'complex_type': 'literal', 'value': 'create-sticker', 'description': ''}, {'complex_type': 'literal', 'value': 'create-decorative', 'description': ''}, {'complex_type': 'literal', 'value': 'nested-result', 'description': ''},",
    "metadata": {
      "concept_name": "TriggerEffectItemType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "TriggerEffectItemType",
    "content": "'literal', 'value': 'nested-result', 'description': ''}, {'complex_type': 'literal', 'value': 'play-sound', 'description': ''}, {'complex_type': 'literal', 'value': 'push-back', 'description': ''}, {'complex_type': 'literal', 'value': 'destroy-cliffs', 'description': ''}, {'complex_type': 'literal', 'value': 'show-explosion-on-chart', 'description': ''}, {'complex_type': 'literal', 'value': 'insert-item', 'description': ''}, {'complex_type': 'literal', 'value': 'script', 'description': ''},",
    "metadata": {
      "concept_name": "TriggerEffectItemType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "TriggerEffectItemType",
    "content": "'literal', 'value': 'script', 'description': ''}, {'complex_type': 'literal', 'value': 'set-tile', 'description': ''}, {'complex_type': 'literal', 'value': 'invoke-tile-trigger', 'description': ''}, {'complex_type': 'literal', 'value': 'destroy-decoratives', 'description': ''}, {'complex_type': 'literal', 'value': 'camera-effect', 'description': ''}, {'complex_type': 'literal', 'value': 'activate-impact', 'description': ''}], 'full_format': True}",
    "metadata": {
      "concept_name": "TriggerEffectItemType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "TriggerItem",
    "content": "Concept: TriggerItem\nDescription:",
    "metadata": {
      "concept_name": "TriggerItem",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TriggerItem",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'action_delivery', 'order': 1, 'description': '', 'type': {'complex_type': 'array', 'value': 'TriggerDelivery'}, 'optional': True}, {'name': 'collision_mask', 'order': 4, 'description': 'The trigger will only affect entities that would collide with given collision mask.', 'type': 'CollisionMask', 'optional': False}, {'name': 'entity_flags', 'order': 2, 'description': 'The trigger will only affect entities that contain any of these flags.',",
    "metadata": {
      "concept_name": "TriggerItem",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TriggerItem",
    "content": "will only affect entities that contain any of these flags.', 'type': 'EntityPrototypeFlags', 'optional': True}, {'name': 'force', 'order': 6, 'description': 'If `\"enemy\"`, the trigger will only affect entities whose force is different from the attacker\\'s and for which there is no cease-fire set. `\"ally\"` is the opposite of `\"enemy\"`.', 'type': 'ForceCondition', 'optional': False}, {'name': 'ignore_collision_condition', 'order': 3, 'description': '', 'type': 'boolean', 'optional': False}, {'name':",
    "metadata": {
      "concept_name": "TriggerItem",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TriggerItem",
    "content": "'', 'type': 'boolean', 'optional': False}, {'name': 'probability', 'order': 8, 'description': '', 'type': 'float', 'optional': False}, {'name': 'repeat_count', 'order': 7, 'description': '', 'type': 'uint', 'optional': False}, {'name': 'trigger_target_mask', 'order': 5, 'description': '', 'type': 'TriggerTargetMask', 'optional': False}, {'name': 'type', 'order': 0, 'description': '', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'direct'}, {'complex_type': 'literal',",
    "metadata": {
      "concept_name": "TriggerItem",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TriggerItem",
    "content": "'literal', 'value': 'direct'}, {'complex_type': 'literal', 'value': 'area'}, {'complex_type': 'literal', 'value': 'line'}, {'complex_type': 'literal', 'value': 'cluster'}], 'full_format': False}, 'optional': False}]}",
    "metadata": {
      "concept_name": "TriggerItem",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "TriggerTargetMask",
    "content": "Concept: TriggerTargetMask\nDescription: A set of trigger target masks.\nComplex_type: {'complex_type': 'dictionary', 'key': 'string', 'value': {'complex_type': 'literal', 'value': True}}",
    "metadata": {
      "concept_name": "TriggerTargetMask",
      "concept_type": "dictionary"
    }
  },
  {
    "type": "concept",
    "name": "TrivialSmokeID",
    "content": "Concept: TrivialSmokeID\nDescription: A trivial smoke prototype may be specified in one of two ways.\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'LuaTrivialSmokePrototype', 'description': 'The trivial smoke prototype.'}, {'complex_type': 'type', 'value': 'string', 'description': 'The prototype name.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "TrivialSmokeID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "UndoRedoAction",
    "content": "Concept: UndoRedoAction\nDescription:",
    "metadata": {
      "concept_name": "UndoRedoAction",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UndoRedoAction",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'tags', 'order': 1, 'description': 'The tags attached to the undo action, if any.', 'type': 'Tags', 'optional': True}, {'name': 'type', 'order': 0, 'description': 'The type of action that was undone or redone.', 'type': 'string', 'optional': False}], 'variant_parameter_groups': [{'name': 'built-entity', 'order': 0, 'description': '', 'parameters': [{'name': 'target', 'order': 0, 'description': 'The specification of the built entity.', 'type':",
    "metadata": {
      "concept_name": "UndoRedoAction",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UndoRedoAction",
    "content": "'The specification of the built entity.', 'type': 'BlueprintEntity', 'optional': False}]}, {'name': 'built-tile', 'order': 2, 'description': '', 'parameters': [{'name': 'new_tile', 'order': 3, 'description': 'The prototype name of the newly built tile.', 'type': 'string', 'optional': False}, {'name': 'position', 'order': 0, 'description': 'The position of the newly built tile.', 'type': 'TilePosition', 'optional': False}, {'name': 'previous_tile', 'order': 2, 'description': 'The prototype name of the",
    "metadata": {
      "concept_name": "UndoRedoAction",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UndoRedoAction",
    "content": "'order': 2, 'description': 'The prototype name of the replaced tile, if any was replaced.', 'type': 'string', 'optional': True}, {'name': 'surface_index', 'order': 1, 'description': 'The surface on which the tile was built.', 'type': 'uint', 'optional': False}]}, {'name': 'copy-entity-settings', 'order': 9, 'description': '', 'parameters': [{'name': 'entity_with_previous_settings', 'order': 1, 'description': '', 'type': 'BlueprintEntity', 'optional': True}, {'name': 'target', 'order': 0, 'description': '',",
    "metadata": {
      "concept_name": "UndoRedoAction",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UndoRedoAction",
    "content": "True}, {'name': 'target', 'order': 0, 'description': '', 'type': 'BlueprintEntity', 'optional': True}]}, {'name': 'removed-entity', 'order': 1, 'description': '', 'parameters': [{'name': 'insert_plan', 'order': 2, 'description': \"The items that the entity will request when revived, if there are any. It's a mapping of prototype names to amounts. Not present for entities the game can't restore, like trees or rocks.\", 'type': {'complex_type': 'array', 'value': 'BlueprintInsertPlan'}, 'optional': True},",
    "metadata": {
      "concept_name": "UndoRedoAction",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UndoRedoAction",
    "content": "'array', 'value': 'BlueprintInsertPlan'}, 'optional': True}, {'name': 'schedule', 'order': 3, 'description': \"The schedule of the entity, if it has one. Only relevant for locomotives. Not present for entities the game can't restore, like trees or rocks.\", 'type': 'BlueprintSchedule', 'optional': True}, {'name': 'surface_index', 'order': 1, 'description': \"The surface from which the entity was removed. Not present for entities the game can't restore, like trees or rocks.\", 'type': 'uint', 'optional': True},",
    "metadata": {
      "concept_name": "UndoRedoAction",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UndoRedoAction",
    "content": "like trees or rocks.\", 'type': 'uint', 'optional': True}, {'name': 'target', 'order': 0, 'description': 'The specification of the removed entity.', 'type': 'BlueprintEntity', 'optional': False}]}, {'name': 'removed-tile', 'order': 3, 'description': '', 'parameters': [{'name': 'position', 'order': 0, 'description': 'The position of the removed tile.', 'type': 'TilePosition', 'optional': False}, {'name': 'previous_tile', 'order': 2, 'description': 'The prototype name of the removed tile.', 'type': 'string',",
    "metadata": {
      "concept_name": "UndoRedoAction",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UndoRedoAction",
    "content": "'The prototype name of the removed tile.', 'type': 'string', 'optional': False}, {'name': 'surface_index', 'order': 1, 'description': 'The surface from which the tile was removed.', 'type': 'uint', 'optional': False}]}, {'name': 'rotated-entity', 'order': 8, 'description': '', 'parameters': [{'name': 'original_direction', 'order': 1, 'description': 'The direction of the entity before upgrading.', 'type': 'defines.direction', 'optional': False}, {'name': 'original_mirroring', 'order': 2, 'description': '',",
    "metadata": {
      "concept_name": "UndoRedoAction",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UndoRedoAction",
    "content": "{'name': 'original_mirroring', 'order': 2, 'description': '', 'type': 'boolean', 'optional': False}, {'name': 'target', 'order': 0, 'description': 'The specification of the rotated entity.', 'type': 'BlueprintEntity', 'optional': False}]}, {'name': 'upgraded-entity', 'order': 4, 'description': '', 'parameters': [{'name': 'original_name', 'order': 1, 'description': 'The prototype name of the upgraded entity.', 'type': 'string', 'optional': False}, {'name': 'original_quality_name', 'order': 2, 'description':",
    "metadata": {
      "concept_name": "UndoRedoAction",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UndoRedoAction",
    "content": "{'name': 'original_quality_name', 'order': 2, 'description': 'The quality prototype name of the entity before upgrading.', 'type': 'string', 'optional': False}, {'name': 'target', 'order': 0, 'description': 'The specification of the upgraded entity.', 'type': 'BlueprintEntity', 'optional': False}]}, {'name': 'upgraded-modules', 'order': 5, 'description': '', 'parameters': [{'name': 'modules_before', 'order': 1, 'description': 'The modules present in the target before the upgrade.', 'type':",
    "metadata": {
      "concept_name": "UndoRedoAction",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UndoRedoAction",
    "content": "modules present in the target before the upgrade.', 'type': 'BlueprintInsertPlan', 'optional': False}, {'name': 'target', 'order': 0, 'description': 'The specification of the upgraded entity.', 'type': 'BlueprintEntity', 'optional': False}]}, {'name': 'wire-added', 'order': 6, 'description': '', 'parameters': [{'name': 'a', 'order': 0, 'description': '', 'type': 'BlueprintWireEnd', 'optional': False}, {'name': 'b', 'order': 1, 'description': '', 'type': 'BlueprintWireEnd', 'optional': False}]}, {'name':",
    "metadata": {
      "concept_name": "UndoRedoAction",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UndoRedoAction",
    "content": "'', 'type': 'BlueprintWireEnd', 'optional': False}]}, {'name': 'wire-removed', 'order': 7, 'description': '', 'parameters': [{'name': 'a', 'order': 0, 'description': '', 'type': 'BlueprintWireEnd', 'optional': False}, {'name': 'b', 'order': 1, 'description': '', 'type': 'BlueprintWireEnd', 'optional': False}]}], 'variant_parameter_description': 'Other attributes may be specified depending on `type`:'}",
    "metadata": {
      "concept_name": "UndoRedoAction",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UnitGroupMapSettings",
    "content": "Concept: UnitGroupMapSettings\nDescription:",
    "metadata": {
      "concept_name": "UnitGroupMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UnitGroupMapSettings",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'max_gathering_unit_groups', 'order': 11, 'description': 'The maximum number of automatically created unit groups gathering for attack at any time. Defaults to `30`.', 'type': 'uint', 'optional': False}, {'name': 'max_group_gathering_time', 'order': 1, 'description': 'The maximum amount of time in ticks a group will spend gathering before setting off. The actual time is a random time between the minimum and maximum times. Defaults to `10*3",
    "metadata": {
      "concept_name": "UnitGroupMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UnitGroupMapSettings",
    "content": "time between the minimum and maximum times. Defaults to `10*3 600=36 000` ticks.', 'type': 'uint', 'optional': False}, {'name': 'max_group_member_fallback_factor', 'order': 8, 'description': 'When a member of a group falls back more than this factor times the group radius, the group will slow down to its `max_group_slowdown_factor` speed to let them catch up. Defaults to `3`.', 'type': 'double', 'optional': False}, {'name': 'max_group_radius', 'order': 4, 'description': 'The maximum group radius in tiles.",
    "metadata": {
      "concept_name": "UnitGroupMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UnitGroupMapSettings",
    "content": "'order': 4, 'description': 'The maximum group radius in tiles. The actual radius is adjusted based on the number of members. Defaults to `30.0`.', 'type': 'double', 'optional': False}, {'name': 'max_group_slowdown_factor', 'order': 7, 'description': 'The minimum speed as a percentage of its maximum speed that a group will slow down to so members that fell behind can catch up. Defaults to `0.3`, or 30%.', 'type': 'double', 'optional': False}, {'name': 'max_member_slowdown_when_ahead', 'order': 6,",
    "metadata": {
      "concept_name": "UnitGroupMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UnitGroupMapSettings",
    "content": "False}, {'name': 'max_member_slowdown_when_ahead', 'order': 6, 'description': 'The minimum speed a percentage of its regular speed that a group member can slow down to when ahead of the group. Defaults to `0.6`, or 60%.', 'type': 'double', 'optional': False}, {'name': 'max_member_speedup_when_behind', 'order': 5, 'description': 'The maximum speed a percentage of its regular speed that a group member can speed up to when catching up with the group. Defaults to `1.4`, or 140%.', 'type': 'double', 'optional':",
    "metadata": {
      "concept_name": "UnitGroupMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UnitGroupMapSettings",
    "content": "Defaults to `1.4`, or 140%.', 'type': 'double', 'optional': False}, {'name': 'max_unit_group_size', 'order': 12, 'description': 'The maximum number of members for an attack unit group. This only affects automatically created unit groups, manual groups created through the API are unaffected. Defaults to `200`.', 'type': 'uint', 'optional': False}, {'name': 'max_wait_time_for_late_members', 'order': 2, 'description': 'After gathering has finished, the group is allowed to wait this long in ticks for delayed",
    "metadata": {
      "concept_name": "UnitGroupMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UnitGroupMapSettings",
    "content": "the group is allowed to wait this long in ticks for delayed members. New members are not accepted anymore however. Defaults to `2*3 600=7 200` ticks.', 'type': 'uint', 'optional': False}, {'name': 'member_disown_distance', 'order': 9, 'description': 'When a member of a group falls back more than this factor times the group radius, it will be dropped from the group. Defaults to `10`.', 'type': 'double', 'optional': False}, {'name': 'min_group_gathering_time', 'order': 0, 'description': 'The minimum amount",
    "metadata": {
      "concept_name": "UnitGroupMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UnitGroupMapSettings",
    "content": "'order': 0, 'description': 'The minimum amount of time in ticks a group will spend gathering before setting off. The actual time is a random time between the minimum and maximum times. Defaults to `3 600` ticks.', 'type': 'uint', 'optional': False}, {'name': 'min_group_radius', 'order': 3, 'description': 'The minimum group radius in tiles. The actual radius is adjusted based on the number of members. Defaults to `5.0`.', 'type': 'double', 'optional': False}, {'name': 'tick_tolerance_when_member_arrives',",
    "metadata": {
      "concept_name": "UnitGroupMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UnitGroupMapSettings",
    "content": "False}, {'name': 'tick_tolerance_when_member_arrives', 'order': 10, 'description': '', 'type': 'uint', 'optional': False}]}",
    "metadata": {
      "concept_name": "UnitGroupMapSettings",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UnitSpawnDefinition",
    "content": "Concept: UnitSpawnDefinition\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'spawn_points', 'order': 1, 'description': 'The points at which to spawn the unit.', 'type': {'complex_type': 'array', 'value': 'SpawnPointDefinition'}, 'optional': False}, {'name': 'unit', 'order': 0, 'description': 'Prototype name of the unit that would be spawned.', 'type': 'string', 'optional': False}]}",
    "metadata": {
      "concept_name": "UnitSpawnDefinition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UpgradeMapperDestination",
    "content": "Concept: UpgradeMapperDestination\nDescription:",
    "metadata": {
      "concept_name": "UpgradeMapperDestination",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UpgradeMapperDestination",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'count', 'order': 3, 'description': 'when type is `\"item\"` and the mapper is configured to install modules the limit per machine. If `0` then no limit.', 'type': 'uint', 'optional': True}, {'name': 'name', 'order': 1, 'description': 'Name of the item, or entity.', 'type': 'string', 'optional': True}, {'name': 'quality', 'order': 2, 'description': 'Name of the quality.', 'type': 'string', 'optional': True}, {'name': 'type', 'order': 0,",
    "metadata": {
      "concept_name": "UpgradeMapperDestination",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UpgradeMapperDestination",
    "content": "'string', 'optional': True}, {'name': 'type', 'order': 0, 'description': '`\"item\"`, or `\"entity\"`.', 'type': 'string', 'optional': False}]}",
    "metadata": {
      "concept_name": "UpgradeMapperDestination",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UpgradeMapperSource",
    "content": "Concept: UpgradeMapperSource\nDescription:",
    "metadata": {
      "concept_name": "UpgradeMapperSource",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UpgradeMapperSource",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'comparator', 'order': 3, 'description': 'The quality comparison type.', 'type': 'ComparatorString', 'optional': True}, {'name': 'name', 'order': 1, 'description': 'Name of the item, or entity.', 'type': 'string', 'optional': True}, {'name': 'quality', 'order': 2, 'description': 'Name of the quality prototype.', 'type': 'string', 'optional': True}, {'name': 'type', 'order': 0, 'description': '', 'type': {'complex_type': 'union', 'options':",
    "metadata": {
      "concept_name": "UpgradeMapperSource",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "UpgradeMapperSource",
    "content": "'description': '', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'item'}, {'complex_type': 'literal', 'value': 'entity'}], 'full_format': False}, 'optional': False}]}",
    "metadata": {
      "concept_name": "UpgradeMapperSource",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "Vector",
    "content": "Concept: Vector\nDescription: A vector is a two-element array or dictionary containing the `x` and `y` components. The game will always provide the array format. Positive x goes east, positive y goes south.",
    "metadata": {
      "concept_name": "Vector",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "Vector",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'table', 'parameters': [{'name': 'x', 'order': 0, 'description': '', 'type': 'float', 'optional': False}, {'name': 'y', 'order': 1, 'description': '', 'type': 'float', 'optional': False}]}, {'complex_type': 'tuple', 'values': ['float', 'float']}], 'full_format': False}",
    "metadata": {
      "concept_name": "Vector",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "Vector3D",
    "content": "Concept: Vector3D\nDescription: Reading this always returns the table with the named keys.",
    "metadata": {
      "concept_name": "Vector3D",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "Vector3D",
    "content": "If this is specified as a three-element array then the array items are x, y and z, in that order.",
    "metadata": {
      "concept_name": "Vector3D",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "Vector3D",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'table', 'parameters': [{'name': 'x', 'order': 0, 'description': '', 'type': 'float', 'optional': False}, {'name': 'y', 'order': 1, 'description': '', 'type': 'float', 'optional': False}, {'name': 'z', 'order': 2, 'description': '', 'type': 'float', 'optional': False}]}, {'complex_type': 'tuple', 'values': ['float', 'float', 'float']}], 'full_format': False}",
    "metadata": {
      "concept_name": "Vector3D",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "VehicleAutomaticTargetingParameters",
    "content": "Concept: VehicleAutomaticTargetingParameters\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'auto_target_with_gunner', 'order': 1, 'description': '', 'type': 'boolean', 'optional': False}, {'name': 'auto_target_without_gunner', 'order': 0, 'description': '', 'type': 'boolean', 'optional': False}]}",
    "metadata": {
      "concept_name": "VehicleAutomaticTargetingParameters",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "VerticalTextAlign",
    "content": "Concept: VerticalTextAlign\nDescription: The text is aligned so that the target position is at the given side of the text.",
    "metadata": {
      "concept_name": "VerticalTextAlign",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "VerticalTextAlign",
    "content": "For example, `\"top\"` aligned text means the top of the text is at the target position. Or in other words, the target is at the top of the text.\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'top', 'description': ''}, {'complex_type': 'literal', 'value': 'middle', 'description': ''}, {'complex_type': 'literal', 'value': 'baseline', 'description': ''}, {'complex_type': 'literal', 'value': 'bottom', 'description': ''}], 'full_format': True}",
    "metadata": {
      "concept_name": "VerticalTextAlign",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "VirtualSignalID",
    "content": "Concept: VirtualSignalID\nDescription: A virtual signal prototype may be specified in one of two ways.\nComplex_type: {'complex_type': 'union', 'options': [{'complex_type': 'type', 'value': 'LuaVirtualSignalPrototype', 'description': 'The virtual signal prototype.'}, {'complex_type': 'type', 'value': 'string', 'description': 'The prototype name.'}], 'full_format': True}",
    "metadata": {
      "concept_name": "VirtualSignalID",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "WaitCondition",
    "content": "Concept: WaitCondition\nDescription:",
    "metadata": {
      "concept_name": "WaitCondition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "WaitCondition",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'compare_type', 'order': 1, 'description': 'Specifies how this condition is to be compared with the preceding conditions in the corresponding `wait_conditions` array. Always present when reading, defaults to `\"and\"` when writing.', 'type': {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'and'}, {'complex_type': 'literal', 'value': 'or'}], 'full_format': False}, 'optional': True}, {'name': 'condition', 'order': 3,",
    "metadata": {
      "concept_name": "WaitCondition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "WaitCondition",
    "content": "False}, 'optional': True}, {'name': 'condition', 'order': 3, 'description': 'This is a CircuitCondition and only present when `type` is `\"item_count\"`, `\"circuit\"`, `\"fluid_count\"`, `\"fuel_item_count_all\"`, or `\"fuel_item_count_any\"`, and a circuit condition is configured. This is a ItemIDAndQualityIDPair and only present when `type` is `\"request_satisfied\"` or `\"request_not_satisfied\"`', 'type': {'complex_type': 'union', 'options': ['CircuitCondition', 'ItemIDAndQualityIDPair'], 'full_format': False},",
    "metadata": {
      "concept_name": "WaitCondition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "WaitCondition",
    "content": "'ItemIDAndQualityIDPair'], 'full_format': False}, 'optional': True}, {'name': 'damage', 'order': 6, 'description': 'Amount of damage to take when `type` is `\"damage_taken\"`.', 'type': 'uint', 'optional': True}, {'name': 'planet', 'order': 4, 'description': 'Name of the space location. Only present when `type` is \"`any_planet_import_zero`\" and a planet is configured.', 'type': 'string', 'optional': True}, {'name': 'station', 'order': 5, 'description': 'Name of the station. Only present when `type` is",
    "metadata": {
      "concept_name": "WaitCondition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "WaitCondition",
    "content": "'Name of the station. Only present when `type` is \"`specific_destination_full`\", \"`specific_destination_not_full`\", \"`at_station`\", or \"`not_at_station`\", and a station is configured.', 'type': 'string', 'optional': True}, {'name': 'ticks', 'order': 2, 'description': 'Number of ticks to wait when `type` is `\"time\"`, or number of ticks of inactivity when `type` is `\"inactivity\"`.', 'type': 'uint', 'optional': True}, {'name': 'type', 'order': 0, 'description': '', 'type': 'WaitConditionType', 'optional':",
    "metadata": {
      "concept_name": "WaitCondition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "WaitCondition",
    "content": "0, 'description': '', 'type': 'WaitConditionType', 'optional': False}]}",
    "metadata": {
      "concept_name": "WaitCondition",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "WaitConditionType",
    "content": "Concept: WaitConditionType\nDescription: Type of a [WaitCondition](runtime:WaitCondition).",
    "metadata": {
      "concept_name": "WaitConditionType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "WaitConditionType",
    "content": "Complex_type: {'complex_type': 'union', 'options': [{'complex_type': 'literal', 'value': 'time', 'description': ''}, {'complex_type': 'literal', 'value': 'full', 'description': ''}, {'complex_type': 'literal', 'value': 'empty', 'description': ''}, {'complex_type': 'literal', 'value': 'not_empty', 'description': ''}, {'complex_type': 'literal', 'value': 'item_count', 'description': ''}, {'complex_type': 'literal', 'value': 'circuit', 'description': ''}, {'complex_type': 'literal', 'value': 'inactivity',",
    "metadata": {
      "concept_name": "WaitConditionType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "WaitConditionType",
    "content": "''}, {'complex_type': 'literal', 'value': 'inactivity', 'description': ''}, {'complex_type': 'literal', 'value': 'robots_inactive', 'description': ''}, {'complex_type': 'literal', 'value': 'fluid_count', 'description': ''}, {'complex_type': 'literal', 'value': 'passenger_present', 'description': ''}, {'complex_type': 'literal', 'value': 'passenger_not_present', 'description': ''}, {'complex_type': 'literal', 'value': 'fuel_item_count_all', 'description': ''}, {'complex_type': 'literal', 'value':",
    "metadata": {
      "concept_name": "WaitConditionType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "WaitConditionType",
    "content": "'description': ''}, {'complex_type': 'literal', 'value': 'fuel_item_count_any', 'description': ''}, {'complex_type': 'literal', 'value': 'fuel_full', 'description': ''}, {'complex_type': 'literal', 'value': 'destination_full_or_no_path', 'description': ''}, {'complex_type': 'literal', 'value': 'request_satisfied', 'description': ''}, {'complex_type': 'literal', 'value': 'request_not_satisfied', 'description': ''}, {'complex_type': 'literal', 'value': 'all_requests_satisfied', 'description': ''},",
    "metadata": {
      "concept_name": "WaitConditionType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "WaitConditionType",
    "content": "'value': 'all_requests_satisfied', 'description': ''}, {'complex_type': 'literal', 'value': 'any_request_not_satisfied', 'description': ''}, {'complex_type': 'literal', 'value': 'any_request_zero', 'description': ''}, {'complex_type': 'literal', 'value': 'any_planet_import_zero', 'description': ''}, {'complex_type': 'literal', 'value': 'specific_destination_full', 'description': ''}, {'complex_type': 'literal', 'value': 'specific_destination_not_full', 'description': ''}, {'complex_type': 'literal',",
    "metadata": {
      "concept_name": "WaitConditionType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "WaitConditionType",
    "content": "'description': ''}, {'complex_type': 'literal', 'value': 'at_station', 'description': ''}, {'complex_type': 'literal', 'value': 'not_at_station', 'description': ''}, {'complex_type': 'literal', 'value': 'damage_taken', 'description': ''}], 'full_format': True}",
    "metadata": {
      "concept_name": "WaitConditionType",
      "concept_type": "union"
    }
  },
  {
    "type": "concept",
    "name": "WireConnection",
    "content": "Concept: WireConnection\nDescription: \nComplex_type: {'complex_type': 'table', 'parameters': [{'name': 'origin', 'order': 1, 'description': 'Defaults to defines.wire_origin.player', 'type': 'defines.wire_origin', 'optional': True}, {'name': 'target', 'order': 0, 'description': '', 'type': 'LuaWireConnector', 'optional': False}]}",
    "metadata": {
      "concept_name": "WireConnection",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "WorkerRobotOrder",
    "content": "Concept: WorkerRobotOrder\nDescription:",
    "metadata": {
      "concept_name": "WorkerRobotOrder",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "WorkerRobotOrder",
    "content": "Complex_type: {'complex_type': 'table', 'parameters': [{'name': 'cliff_explosive_id', 'order': 4, 'description': 'The cliff explosive for the cliff explode job.', 'type': 'LuaItemPrototype', 'optional': True}, {'name': 'item_to_place', 'order': 2, 'description': 'The item to place if relevant.', 'type': 'SimpleItemStack', 'optional': True}, {'name': 'secondary_target', 'order': 3, 'description': 'The secondary target of the upgrade order.', 'type': 'LuaEntity', 'optional': True}, {'name': 'target',",
    "metadata": {
      "concept_name": "WorkerRobotOrder",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "WorkerRobotOrder",
    "content": "'type': 'LuaEntity', 'optional': True}, {'name': 'target', 'order': 1, 'description': 'The target of the order.', 'type': 'LuaEntity', 'optional': True}, {'name': 'target_count', 'order': 6, 'description': 'The target count of the pickup or deliver order.', 'type': 'ItemCountType', 'optional': True}, {'name': 'target_item', 'order': 5, 'description': 'The target item of the pickup or deliver order.', 'type': 'ItemIDAndQualityIDPair', 'optional': True}, {'name': 'type', 'order': 0, 'description': 'The type",
    "metadata": {
      "concept_name": "WorkerRobotOrder",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "WorkerRobotOrder",
    "content": "True}, {'name': 'type', 'order': 0, 'description': 'The type of the order.', 'type': 'defines.robot_order_type', 'optional': False}]}",
    "metadata": {
      "concept_name": "WorkerRobotOrder",
      "concept_type": "table"
    }
  },
  {
    "type": "concept",
    "name": "boolean",
    "content": "Concept: boolean\nDescription: Either `true` or `false`.\nComplex_type: {'complex_type': 'builtin'}",
    "metadata": {
      "concept_name": "boolean",
      "concept_type": "builtin"
    }
  },
  {
    "type": "concept",
    "name": "double",
    "content": "Concept: double\nDescription: A double-precision floating-point number. This is the same data type as all Lua numbers use.\nComplex_type: {'complex_type': 'builtin'}",
    "metadata": {
      "concept_name": "double",
      "concept_type": "builtin"
    }
  },
  {
    "type": "concept",
    "name": "float",
    "content": "Concept: float\nDescription: A floating-point number. This is a single-precision floating point number. Whilst Lua only uses double-precision numbers, when a function takes a float, the game engine will immediately convert the double-precision number to single-precision.\nComplex_type: {'complex_type': 'builtin'}",
    "metadata": {
      "concept_name": "float",
      "concept_type": "builtin"
    }
  },
  {
    "type": "concept",
    "name": "int",
    "content": "Concept: int\nDescription: 32-bit signed integer. Possible values are `-2 147 483 648` to `2 147 483 647`.\n\nSince Lua 5.2 only uses doubles, any API that asks for `int` will floor the given double.\nComplex_type: {'complex_type': 'builtin'}",
    "metadata": {
      "concept_name": "int",
      "concept_type": "builtin"
    }
  },
  {
    "type": "concept",
    "name": "int8",
    "content": "Concept: int8\nDescription: 8-bit signed integer. Possible values are `-128` to `127`.\n\nSince Lua 5.2 only uses doubles, any API that asks for `int8` will floor the given double.\nComplex_type: {'complex_type': 'builtin'}",
    "metadata": {
      "concept_name": "int8",
      "concept_type": "builtin"
    }
  },
  {
    "type": "concept",
    "name": "nil",
    "content": "Concept: nil\nDescription: Nil is the type of the value `nil`, whose main property is to be different from any other value. It usually represents the absence of a useful value.\nComplex_type: {'complex_type': 'builtin'}",
    "metadata": {
      "concept_name": "nil",
      "concept_type": "builtin"
    }
  },
  {
    "type": "concept",
    "name": "number",
    "content": "Concept: number\nDescription: Any kind of integer or floating point number.\nComplex_type: {'complex_type': 'builtin'}",
    "metadata": {
      "concept_name": "number",
      "concept_type": "builtin"
    }
  },
  {
    "type": "concept",
    "name": "string",
    "content": "Concept: string\nDescription: Strings are enclosed in double-quotes, like this `\"hi\"`.\nComplex_type: {'complex_type': 'builtin'}",
    "metadata": {
      "concept_name": "string",
      "concept_type": "builtin"
    }
  },
  {
    "type": "concept",
    "name": "table",
    "content": "Concept: table\nDescription: Tables are enclosed in curly brackets, like this `{}`.\n\nThroughout the API docs, the terms \"array\" and \"dictionary\" are used. These are fundamentally just [Lua tables](http://www.lua.org/pil/2.5.html), but have a limitation on which kind of table keys can be used. An array is a table that uses continuous integer keys starting at `1`, while a dictionary can use numeric or string keys in any order or combination.\nComplex_type: {'complex_type': 'builtin'}",
    "metadata": {
      "concept_name": "table",
      "concept_type": "builtin"
    }
  },
  {
    "type": "concept",
    "name": "uint",
    "content": "Concept: uint\nDescription: 32-bit unsigned integer. Possible values are `0` to `4 294 967 295`.\n\nSince Lua 5.2 only uses doubles, any API that asks for `uint` will floor the given double.\nComplex_type: {'complex_type': 'builtin'}",
    "metadata": {
      "concept_name": "uint",
      "concept_type": "builtin"
    }
  },
  {
    "type": "concept",
    "name": "uint16",
    "content": "Concept: uint16\nDescription: 16-bit unsigned integer. Possible values are `0` to `65 535`.\n\nSince Lua 5.2 only uses doubles, any API that asks for `uint16` will floor the given double.\nComplex_type: {'complex_type': 'builtin'}",
    "metadata": {
      "concept_name": "uint16",
      "concept_type": "builtin"
    }
  },
  {
    "type": "concept",
    "name": "uint64",
    "content": "Concept: uint64\nDescription: 64-bit unsigned integer. Possible values are `0` to `18 446 744 073 709 551 615`.\n\nSince Lua 5.2 only uses doubles, any API that asks for `uint64` will floor the given double.\nComplex_type: {'complex_type': 'builtin'}",
    "metadata": {
      "concept_name": "uint64",
      "concept_type": "builtin"
    }
  },
  {
    "type": "concept",
    "name": "uint8",
    "content": "Concept: uint8\nDescription: 8-bit unsigned integer. Possible values are `0` to `255`.\n\nSince Lua 5.2 only uses doubles, any API that asks for `uint8` will floor the given double.\nComplex_type: {'complex_type': 'builtin'}",
    "metadata": {
      "concept_name": "uint8",
      "concept_type": "builtin"
    }
  },
  {
    "type": "define",
    "name": "alert_type",
    "content": "Define: alert_type\nDescription: ",
    "metadata": {
      "define_name": "alert_type",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "collector_path_blocked",
    "content": "Value: collector_path_blocked\nDescription: ",
    "metadata": {
      "define_name": "alert_type",
      "value_name": "collector_path_blocked",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "custom",
    "content": "Value: custom\nDescription: ",
    "metadata": {
      "define_name": "alert_type",
      "value_name": "custom",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "entity_destroyed",
    "content": "Value: entity_destroyed\nDescription: ",
    "metadata": {
      "define_name": "alert_type",
      "value_name": "entity_destroyed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "entity_under_attack",
    "content": "Value: entity_under_attack\nDescription: ",
    "metadata": {
      "define_name": "alert_type",
      "value_name": "entity_under_attack",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "no_material_for_construction",
    "content": "Value: no_material_for_construction\nDescription: ",
    "metadata": {
      "define_name": "alert_type",
      "value_name": "no_material_for_construction",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "no_platform_storage",
    "content": "Value: no_platform_storage\nDescription: ",
    "metadata": {
      "define_name": "alert_type",
      "value_name": "no_platform_storage",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "no_roboport_storage",
    "content": "Value: no_roboport_storage\nDescription: ",
    "metadata": {
      "define_name": "alert_type",
      "value_name": "no_roboport_storage",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "no_storage",
    "content": "Value: no_storage\nDescription: ",
    "metadata": {
      "define_name": "alert_type",
      "value_name": "no_storage",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "not_enough_construction_robots",
    "content": "Value: not_enough_construction_robots\nDescription: ",
    "metadata": {
      "define_name": "alert_type",
      "value_name": "not_enough_construction_robots",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "not_enough_repair_packs",
    "content": "Value: not_enough_repair_packs\nDescription: ",
    "metadata": {
      "define_name": "alert_type",
      "value_name": "not_enough_repair_packs",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "pipeline_overextended",
    "content": "Value: pipeline_overextended\nDescription: ",
    "metadata": {
      "define_name": "alert_type",
      "value_name": "pipeline_overextended",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "platform_tile_building_blocked",
    "content": "Value: platform_tile_building_blocked\nDescription: ",
    "metadata": {
      "define_name": "alert_type",
      "value_name": "platform_tile_building_blocked",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "train_no_path",
    "content": "Value: train_no_path\nDescription: ",
    "metadata": {
      "define_name": "alert_type",
      "value_name": "train_no_path",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "train_out_of_fuel",
    "content": "Value: train_out_of_fuel\nDescription: ",
    "metadata": {
      "define_name": "alert_type",
      "value_name": "train_out_of_fuel",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "turret_fire",
    "content": "Value: turret_fire\nDescription: ",
    "metadata": {
      "define_name": "alert_type",
      "value_name": "turret_fire",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "turret_out_of_ammo",
    "content": "Value: turret_out_of_ammo\nDescription: ",
    "metadata": {
      "define_name": "alert_type",
      "value_name": "turret_out_of_ammo",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "unclaimed_cargo",
    "content": "Value: unclaimed_cargo\nDescription: ",
    "metadata": {
      "define_name": "alert_type",
      "value_name": "unclaimed_cargo",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "behavior_result",
    "content": "Define: behavior_result\nDescription: AI command exit status. See [LuaEntity::set_command](runtime:LuaEntity::set_command)",
    "metadata": {
      "define_name": "behavior_result",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "deleted",
    "content": "Value: deleted\nDescription: ",
    "metadata": {
      "define_name": "behavior_result",
      "value_name": "deleted",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "fail",
    "content": "Value: fail\nDescription: ",
    "metadata": {
      "define_name": "behavior_result",
      "value_name": "fail",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "in_progress",
    "content": "Value: in_progress\nDescription: ",
    "metadata": {
      "define_name": "behavior_result",
      "value_name": "in_progress",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "success",
    "content": "Value: success\nDescription: ",
    "metadata": {
      "define_name": "behavior_result",
      "value_name": "success",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "build_check_type",
    "content": "Define: build_check_type\nDescription: ",
    "metadata": {
      "define_name": "build_check_type",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "blueprint_ghost",
    "content": "Value: blueprint_ghost\nDescription: ",
    "metadata": {
      "define_name": "build_check_type",
      "value_name": "blueprint_ghost",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "ghost_revive",
    "content": "Value: ghost_revive\nDescription: ",
    "metadata": {
      "define_name": "build_check_type",
      "value_name": "ghost_revive",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "manual",
    "content": "Value: manual\nDescription: ",
    "metadata": {
      "define_name": "build_check_type",
      "value_name": "manual",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "manual_ghost",
    "content": "Value: manual_ghost\nDescription: ",
    "metadata": {
      "define_name": "build_check_type",
      "value_name": "manual_ghost",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "script",
    "content": "Value: script\nDescription: ",
    "metadata": {
      "define_name": "build_check_type",
      "value_name": "script",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "script_ghost",
    "content": "Value: script_ghost\nDescription: ",
    "metadata": {
      "define_name": "build_check_type",
      "value_name": "script_ghost",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "build_mode",
    "content": "Define: build_mode\nDescription: ",
    "metadata": {
      "define_name": "build_mode",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "forced",
    "content": "Value: forced\nDescription: ",
    "metadata": {
      "define_name": "build_mode",
      "value_name": "forced",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "normal",
    "content": "Value: normal\nDescription: ",
    "metadata": {
      "define_name": "build_mode",
      "value_name": "normal",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "superforced",
    "content": "Value: superforced\nDescription: ",
    "metadata": {
      "define_name": "build_mode",
      "value_name": "superforced",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "chain_signal_state",
    "content": "Define: chain_signal_state\nDescription: State of a chain signal.",
    "metadata": {
      "define_name": "chain_signal_state",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "all_open",
    "content": "Value: all_open\nDescription: ",
    "metadata": {
      "define_name": "chain_signal_state",
      "value_name": "all_open",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "none",
    "content": "Value: none\nDescription: ",
    "metadata": {
      "define_name": "chain_signal_state",
      "value_name": "none",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "none_open",
    "content": "Value: none_open\nDescription: ",
    "metadata": {
      "define_name": "chain_signal_state",
      "value_name": "none_open",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "partially_open",
    "content": "Value: partially_open\nDescription: ",
    "metadata": {
      "define_name": "chain_signal_state",
      "value_name": "partially_open",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "chunk_generated_status",
    "content": "Define: chunk_generated_status\nDescription: ",
    "metadata": {
      "define_name": "chunk_generated_status",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "basic_tiles",
    "content": "Value: basic_tiles\nDescription: ",
    "metadata": {
      "define_name": "chunk_generated_status",
      "value_name": "basic_tiles",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "corrected_tiles",
    "content": "Value: corrected_tiles\nDescription: ",
    "metadata": {
      "define_name": "chunk_generated_status",
      "value_name": "corrected_tiles",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "custom_tiles",
    "content": "Value: custom_tiles\nDescription: ",
    "metadata": {
      "define_name": "chunk_generated_status",
      "value_name": "custom_tiles",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "entities",
    "content": "Value: entities\nDescription: ",
    "metadata": {
      "define_name": "chunk_generated_status",
      "value_name": "entities",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "nothing",
    "content": "Value: nothing\nDescription: ",
    "metadata": {
      "define_name": "chunk_generated_status",
      "value_name": "nothing",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "tiles",
    "content": "Value: tiles\nDescription: ",
    "metadata": {
      "define_name": "chunk_generated_status",
      "value_name": "tiles",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "command",
    "content": "Define: command\nDescription: Command given to units describing what they should do.",
    "metadata": {
      "define_name": "command",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "attack",
    "content": "Value: attack\nDescription: Attack another entity.",
    "metadata": {
      "define_name": "command",
      "value_name": "attack",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "attack_area",
    "content": "Value: attack_area\nDescription: Go to a place and attack what you see.",
    "metadata": {
      "define_name": "command",
      "value_name": "attack_area",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "build_base",
    "content": "Value: build_base\nDescription: Go to a position and build a base there.",
    "metadata": {
      "define_name": "command",
      "value_name": "build_base",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "compound",
    "content": "Value: compound\nDescription: Chain commands together, see [defines.compound_command](runtime:defines.compound_command).",
    "metadata": {
      "define_name": "command",
      "value_name": "compound",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "flee",
    "content": "Value: flee\nDescription: Flee from another entity.",
    "metadata": {
      "define_name": "command",
      "value_name": "flee",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "go_to_location",
    "content": "Value: go_to_location\nDescription: Go to a specific position.",
    "metadata": {
      "define_name": "command",
      "value_name": "go_to_location",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "group",
    "content": "Value: group\nDescription: Do what your group wants you to do.",
    "metadata": {
      "define_name": "command",
      "value_name": "group",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "stop",
    "content": "Value: stop\nDescription: Stop moving and stay where you are.",
    "metadata": {
      "define_name": "command",
      "value_name": "stop",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "wander",
    "content": "Value: wander\nDescription: Chill.",
    "metadata": {
      "define_name": "command",
      "value_name": "wander",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "compound_command",
    "content": "Define: compound_command\nDescription: How commands are joined together in a compound command (see [defines.command.compound](runtime:defines.command.compound)).",
    "metadata": {
      "define_name": "compound_command",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "logical_and",
    "content": "Value: logical_and\nDescription: Fail on first failure. Only succeeds if all commands (executed one after another) succeed.",
    "metadata": {
      "define_name": "compound_command",
      "value_name": "logical_and",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "logical_or",
    "content": "Value: logical_or\nDescription: Succeed on first success. Only fails if all commands (executed one after another) fail.",
    "metadata": {
      "define_name": "compound_command",
      "value_name": "logical_or",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "return_last",
    "content": "Value: return_last\nDescription: Execute all commands in sequence and fail or succeed depending on the return status of the last command.",
    "metadata": {
      "define_name": "compound_command",
      "value_name": "return_last",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "control_behavior",
    "content": "Define: control_behavior\nDescription: ",
    "metadata": {
      "define_name": "control_behavior",
      "define_type": null
    }
  },
  {
    "type": "define",
    "name": "controllers",
    "content": "Define: controllers\nDescription: ",
    "metadata": {
      "define_name": "controllers",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "character",
    "content": "Value: character\nDescription: The controller controls a character. This is the default controller in freeplay.",
    "metadata": {
      "define_name": "controllers",
      "value_name": "character",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "cutscene",
    "content": "Value: cutscene\nDescription: The player can't interact with the world, and the camera pans around in a predefined manner.",
    "metadata": {
      "define_name": "controllers",
      "value_name": "cutscene",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "editor",
    "content": "Value: editor\nDescription: The Editor Controller near ultimate power to do almost anything in the game.",
    "metadata": {
      "define_name": "controllers",
      "value_name": "editor",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "ghost",
    "content": "Value: ghost\nDescription: Can't interact with the world, can only observe. Used in the multiplayer waiting-to-respawn screen.",
    "metadata": {
      "define_name": "controllers",
      "value_name": "ghost",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "god",
    "content": "Value: god\nDescription: The controller isn't tied to a character. This is the default controller in sandbox.",
    "metadata": {
      "define_name": "controllers",
      "value_name": "god",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "remote",
    "content": "Value: remote\nDescription: Can't move/change items but can build ghosts/change settings.",
    "metadata": {
      "define_name": "controllers",
      "value_name": "remote",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "spectator",
    "content": "Value: spectator\nDescription: Can't change anything in the world but can view anything.",
    "metadata": {
      "define_name": "controllers",
      "value_name": "spectator",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "deconstruction_item",
    "content": "Define: deconstruction_item\nDescription: ",
    "metadata": {
      "define_name": "deconstruction_item",
      "define_type": null
    }
  },
  {
    "type": "define",
    "name": "default_icon_size",
    "content": "Define: default_icon_size\nDescription: ",
    "metadata": {
      "define_name": "default_icon_size",
      "define_type": null
    }
  },
  {
    "type": "define",
    "name": "difficulty",
    "content": "Define: difficulty\nDescription: ",
    "metadata": {
      "define_name": "difficulty",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "easy",
    "content": "Value: easy\nDescription: ",
    "metadata": {
      "define_name": "difficulty",
      "value_name": "easy",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "hard",
    "content": "Value: hard\nDescription: ",
    "metadata": {
      "define_name": "difficulty",
      "value_name": "hard",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "normal",
    "content": "Value: normal\nDescription: ",
    "metadata": {
      "define_name": "difficulty",
      "value_name": "normal",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "direction",
    "content": "Define: direction\nDescription: ",
    "metadata": {
      "define_name": "direction",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "east",
    "content": "Value: east\nDescription: ",
    "metadata": {
      "define_name": "direction",
      "value_name": "east",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "eastnortheast",
    "content": "Value: eastnortheast\nDescription: ",
    "metadata": {
      "define_name": "direction",
      "value_name": "eastnortheast",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "eastsoutheast",
    "content": "Value: eastsoutheast\nDescription: ",
    "metadata": {
      "define_name": "direction",
      "value_name": "eastsoutheast",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "north",
    "content": "Value: north\nDescription: ",
    "metadata": {
      "define_name": "direction",
      "value_name": "north",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "northeast",
    "content": "Value: northeast\nDescription: ",
    "metadata": {
      "define_name": "direction",
      "value_name": "northeast",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "northnortheast",
    "content": "Value: northnortheast\nDescription: ",
    "metadata": {
      "define_name": "direction",
      "value_name": "northnortheast",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "northnorthwest",
    "content": "Value: northnorthwest\nDescription: ",
    "metadata": {
      "define_name": "direction",
      "value_name": "northnorthwest",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "northwest",
    "content": "Value: northwest\nDescription: ",
    "metadata": {
      "define_name": "direction",
      "value_name": "northwest",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "south",
    "content": "Value: south\nDescription: ",
    "metadata": {
      "define_name": "direction",
      "value_name": "south",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "southeast",
    "content": "Value: southeast\nDescription: ",
    "metadata": {
      "define_name": "direction",
      "value_name": "southeast",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "southsoutheast",
    "content": "Value: southsoutheast\nDescription: ",
    "metadata": {
      "define_name": "direction",
      "value_name": "southsoutheast",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "southsouthwest",
    "content": "Value: southsouthwest\nDescription: ",
    "metadata": {
      "define_name": "direction",
      "value_name": "southsouthwest",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "southwest",
    "content": "Value: southwest\nDescription: ",
    "metadata": {
      "define_name": "direction",
      "value_name": "southwest",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "west",
    "content": "Value: west\nDescription: ",
    "metadata": {
      "define_name": "direction",
      "value_name": "west",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "westnorthwest",
    "content": "Value: westnorthwest\nDescription: ",
    "metadata": {
      "define_name": "direction",
      "value_name": "westnorthwest",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "westsouthwest",
    "content": "Value: westsouthwest\nDescription: ",
    "metadata": {
      "define_name": "direction",
      "value_name": "westsouthwest",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "disconnect_reason",
    "content": "Define: disconnect_reason\nDescription: ",
    "metadata": {
      "define_name": "disconnect_reason",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "afk",
    "content": "Value: afk\nDescription: ",
    "metadata": {
      "define_name": "disconnect_reason",
      "value_name": "afk",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "banned",
    "content": "Value: banned\nDescription: ",
    "metadata": {
      "define_name": "disconnect_reason",
      "value_name": "banned",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "cannot_keep_up",
    "content": "Value: cannot_keep_up\nDescription: ",
    "metadata": {
      "define_name": "disconnect_reason",
      "value_name": "cannot_keep_up",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "desync_limit_reached",
    "content": "Value: desync_limit_reached\nDescription: ",
    "metadata": {
      "define_name": "disconnect_reason",
      "value_name": "desync_limit_reached",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "dropped",
    "content": "Value: dropped\nDescription: ",
    "metadata": {
      "define_name": "disconnect_reason",
      "value_name": "dropped",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "kicked",
    "content": "Value: kicked\nDescription: ",
    "metadata": {
      "define_name": "disconnect_reason",
      "value_name": "kicked",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "kicked_and_deleted",
    "content": "Value: kicked_and_deleted\nDescription: ",
    "metadata": {
      "define_name": "disconnect_reason",
      "value_name": "kicked_and_deleted",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "quit",
    "content": "Value: quit\nDescription: ",
    "metadata": {
      "define_name": "disconnect_reason",
      "value_name": "quit",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "reconnect",
    "content": "Value: reconnect\nDescription: ",
    "metadata": {
      "define_name": "disconnect_reason",
      "value_name": "reconnect",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "switching_servers",
    "content": "Value: switching_servers\nDescription: ",
    "metadata": {
      "define_name": "disconnect_reason",
      "value_name": "switching_servers",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "wrong_input",
    "content": "Value: wrong_input\nDescription: ",
    "metadata": {
      "define_name": "disconnect_reason",
      "value_name": "wrong_input",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "distraction",
    "content": "Define: distraction\nDescription: ",
    "metadata": {
      "define_name": "distraction",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "by_anything",
    "content": "Value: by_anything\nDescription: Attack closer enemy entities, including entities \"built\" by player (belts, inserters, chests).",
    "metadata": {
      "define_name": "distraction",
      "value_name": "by_anything",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "by_damage",
    "content": "Value: by_damage\nDescription: Attack when attacked.",
    "metadata": {
      "define_name": "distraction",
      "value_name": "by_damage",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "by_enemy",
    "content": "Value: by_enemy\nDescription: Attack closer enemy entities with force.",
    "metadata": {
      "define_name": "distraction",
      "value_name": "by_enemy",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "none",
    "content": "Value: none\nDescription: Perform command even if someone attacks the unit.",
    "metadata": {
      "define_name": "distraction",
      "value_name": "none",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "entity_status",
    "content": "Define: entity_status\nDescription: ",
    "metadata": {
      "define_name": "entity_status",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "broken",
    "content": "Value: broken\nDescription: Only used if set through [LuaEntity::status](runtime:LuaEntity::status) or [ContainerPrototype::default_status](prototype:ContainerPrototype::default_status).",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "broken",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "cant_divide_segments",
    "content": "Value: cant_divide_segments\nDescription: Used by rail signals.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "cant_divide_segments",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "charging",
    "content": "Value: charging\nDescription: Used by accumulators.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "charging",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "closed_by_circuit_network",
    "content": "Value: closed_by_circuit_network\nDescription: ",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "closed_by_circuit_network",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "computing_navigation",
    "content": "Value: computing_navigation\nDescription: Used by asteroid collectors.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "computing_navigation",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "destination_stop_full",
    "content": "Value: destination_stop_full\nDescription: Used by trains.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "destination_stop_full",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "disabled",
    "content": "Value: disabled\nDescription: Used by constant combinators: Combinator is turned off via switch in GUI.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "disabled",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "disabled_by_control_behavior",
    "content": "Value: disabled_by_control_behavior\nDescription: ",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "disabled_by_control_behavior",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "disabled_by_script",
    "content": "Value: disabled_by_script\nDescription: ",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "disabled_by_script",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "discharging",
    "content": "Value: discharging\nDescription: Used by accumulators.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "discharging",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "fluid_ingredient_shortage",
    "content": "Value: fluid_ingredient_shortage\nDescription: Used by crafting machines.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "fluid_ingredient_shortage",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "frozen",
    "content": "Value: frozen\nDescription: ",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "frozen",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "full_burnt_result_output",
    "content": "Value: full_burnt_result_output\nDescription: Used by burner energy sources.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "full_burnt_result_output",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "full_output",
    "content": "Value: full_output\nDescription: Used by crafting machines, boilers, burner energy sources and reactors: Reactor/burner has full burnt result inventory, boiler has full output fluidbox.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "full_output",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "fully_charged",
    "content": "Value: fully_charged\nDescription: Used by accumulators.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "fully_charged",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "ghost",
    "content": "Value: ghost\nDescription: Used by ghosts.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "ghost",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "item_ingredient_shortage",
    "content": "Value: item_ingredient_shortage\nDescription: Used by crafting machines.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "item_ingredient_shortage",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "launching_rocket",
    "content": "Value: launching_rocket\nDescription: Used by the rocket silo.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "launching_rocket",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "low_input_fluid",
    "content": "Value: low_input_fluid\nDescription: Used by boilers and fluid turrets: Boiler still has some fluid but is about to run out.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "low_input_fluid",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "low_power",
    "content": "Value: low_power\nDescription: ",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "low_power",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "low_temperature",
    "content": "Value: low_temperature\nDescription: Used by heat energy sources.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "low_temperature",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "marked_for_deconstruction",
    "content": "Value: marked_for_deconstruction\nDescription: ",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "marked_for_deconstruction",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "missing_required_fluid",
    "content": "Value: missing_required_fluid\nDescription: Used by mining drills when the mining fluid is missing.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "missing_required_fluid",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "missing_science_packs",
    "content": "Value: missing_science_packs\nDescription: Used by labs.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "missing_science_packs",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "networks_connected",
    "content": "Value: networks_connected\nDescription: Used by power switches.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "networks_connected",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "networks_disconnected",
    "content": "Value: networks_disconnected\nDescription: Used by power switches.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "networks_disconnected",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "no_ammo",
    "content": "Value: no_ammo\nDescription: Used by ammo turrets.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "no_ammo",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "no_filter",
    "content": "Value: no_filter\nDescription: Used by filter inserters.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "no_filter",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "no_fuel",
    "content": "Value: no_fuel\nDescription: ",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "no_fuel",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "no_ingredients",
    "content": "Value: no_ingredients\nDescription: Used by furnaces.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "no_ingredients",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "no_input_fluid",
    "content": "Value: no_input_fluid\nDescription: Used by boilers, fluid turrets and fluid energy sources: Boiler has no fluid to work with.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "no_input_fluid",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "no_minable_resources",
    "content": "Value: no_minable_resources\nDescription: Used by mining drills.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "no_minable_resources",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "no_modules_to_transmit",
    "content": "Value: no_modules_to_transmit\nDescription: Used by beacons.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "no_modules_to_transmit",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "no_path",
    "content": "Value: no_path\nDescription: Used by trains and space platform hubs.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "no_path",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "no_power",
    "content": "Value: no_power\nDescription: ",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "no_power",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "no_recipe",
    "content": "Value: no_recipe\nDescription: Used by assembling machines.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "no_recipe",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "no_research_in_progress",
    "content": "Value: no_research_in_progress\nDescription: Used by labs.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "no_research_in_progress",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "no_spot_seedable_by_inputs",
    "content": "Value: no_spot_seedable_by_inputs\nDescription: Used by agricultural towers.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "no_spot_seedable_by_inputs",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "normal",
    "content": "Value: normal\nDescription: ",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "normal",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "not_connected_to_hub_or_pad",
    "content": "Value: not_connected_to_hub_or_pad\nDescription: Used by cargo bays.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "not_connected_to_hub_or_pad",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "not_connected_to_rail",
    "content": "Value: not_connected_to_rail\nDescription: Used by rail signals.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "not_connected_to_rail",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "not_enough_space_in_output",
    "content": "Value: not_enough_space_in_output\nDescription: Used by agricultural towers.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "not_enough_space_in_output",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "not_enough_thrust",
    "content": "Value: not_enough_thrust\nDescription: Used by space platform hubs.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "not_enough_thrust",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "not_plugged_in_electric_network",
    "content": "Value: not_plugged_in_electric_network\nDescription: Used by generators and solar panels.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "not_plugged_in_electric_network",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_the_way",
    "content": "Value: on_the_way\nDescription: Used by space platform hubs.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "on_the_way",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "opened_by_circuit_network",
    "content": "Value: opened_by_circuit_network\nDescription: ",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "opened_by_circuit_network",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "out_of_logistic_network",
    "content": "Value: out_of_logistic_network\nDescription: Used by logistic containers.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "out_of_logistic_network",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "paused",
    "content": "Value: paused\nDescription: Used by space platform hubs.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "paused",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "pipeline_overextended",
    "content": "Value: pipeline_overextended\nDescription: Used by pipes, pipes to ground and storage tanks.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "pipeline_overextended",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "preparing_rocket_for_launch",
    "content": "Value: preparing_rocket_for_launch\nDescription: Used by the rocket silo.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "preparing_rocket_for_launch",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "recharging_after_power_outage",
    "content": "Value: recharging_after_power_outage\nDescription: Used by roboports.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "recharging_after_power_outage",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "recipe_not_researched",
    "content": "Value: recipe_not_researched\nDescription: Used by assembling machines.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "recipe_not_researched",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "thrust_not_required",
    "content": "Value: thrust_not_required\nDescription: Used by thrusters.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "thrust_not_required",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "turned_off_during_daytime",
    "content": "Value: turned_off_during_daytime\nDescription: Used by lamps.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "turned_off_during_daytime",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "waiting_at_stop",
    "content": "Value: waiting_at_stop\nDescription: Used by trains.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "waiting_at_stop",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "waiting_for_more_items",
    "content": "Value: waiting_for_more_items\nDescription: Used by inserters when wait_for_full_hand is set.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "waiting_for_more_items",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "waiting_for_plants_to_grow",
    "content": "Value: waiting_for_plants_to_grow\nDescription: Used by agricultural towers.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "waiting_for_plants_to_grow",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "waiting_for_rockets_to_arrive",
    "content": "Value: waiting_for_rockets_to_arrive\nDescription: Used by space platform hubs.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "waiting_for_rockets_to_arrive",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "waiting_for_source_items",
    "content": "Value: waiting_for_source_items\nDescription: Used by inserters.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "waiting_for_source_items",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "waiting_for_space_in_destination",
    "content": "Value: waiting_for_space_in_destination\nDescription: Used by inserters and mining drills.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "waiting_for_space_in_destination",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "waiting_for_space_in_platform_hub",
    "content": "Value: waiting_for_space_in_platform_hub\nDescription: Used by the rocket silo.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "waiting_for_space_in_platform_hub",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "waiting_for_target_to_be_built",
    "content": "Value: waiting_for_target_to_be_built\nDescription: Used by inserters targeting entity ghosts.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "waiting_for_target_to_be_built",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "waiting_for_train",
    "content": "Value: waiting_for_train\nDescription: Used by inserters targeting rails.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "waiting_for_train",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "waiting_in_orbit",
    "content": "Value: waiting_in_orbit\nDescription: Used by space platform hubs.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "waiting_in_orbit",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "waiting_to_launch_rocket",
    "content": "Value: waiting_to_launch_rocket\nDescription: Used by the rocket silo.",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "waiting_to_launch_rocket",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "working",
    "content": "Value: working\nDescription: ",
    "metadata": {
      "define_name": "entity_status",
      "value_name": "working",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "entity_status_diode",
    "content": "Define: entity_status_diode\nDescription: ",
    "metadata": {
      "define_name": "entity_status_diode",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "green",
    "content": "Value: green\nDescription: ",
    "metadata": {
      "define_name": "entity_status_diode",
      "value_name": "green",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "red",
    "content": "Value: red\nDescription: ",
    "metadata": {
      "define_name": "entity_status_diode",
      "value_name": "red",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "yellow",
    "content": "Value: yellow\nDescription: ",
    "metadata": {
      "define_name": "entity_status_diode",
      "value_name": "yellow",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "events",
    "content": "Define: events\nDescription: See the [events page](runtime:events) for more info on what events contain and when they get raised.",
    "metadata": {
      "define_name": "events",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "on_achievement_gained",
    "content": "Value: on_achievement_gained\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_achievement_gained",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_ai_command_completed",
    "content": "Value: on_ai_command_completed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_ai_command_completed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_area_cloned",
    "content": "Value: on_area_cloned\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_area_cloned",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_biter_base_built",
    "content": "Value: on_biter_base_built\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_biter_base_built",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_brush_cloned",
    "content": "Value: on_brush_cloned\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_brush_cloned",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_build_base_arrived",
    "content": "Value: on_build_base_arrived\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_build_base_arrived",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_built_entity",
    "content": "Value: on_built_entity\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_built_entity",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_cancelled_deconstruction",
    "content": "Value: on_cancelled_deconstruction\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_cancelled_deconstruction",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_cancelled_upgrade",
    "content": "Value: on_cancelled_upgrade\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_cancelled_upgrade",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_cargo_pod_finished_ascending",
    "content": "Value: on_cargo_pod_finished_ascending\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_cargo_pod_finished_ascending",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_character_corpse_expired",
    "content": "Value: on_character_corpse_expired\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_character_corpse_expired",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_chart_tag_added",
    "content": "Value: on_chart_tag_added\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_chart_tag_added",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_chart_tag_modified",
    "content": "Value: on_chart_tag_modified\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_chart_tag_modified",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_chart_tag_removed",
    "content": "Value: on_chart_tag_removed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_chart_tag_removed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_chunk_charted",
    "content": "Value: on_chunk_charted\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_chunk_charted",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_chunk_deleted",
    "content": "Value: on_chunk_deleted\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_chunk_deleted",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_chunk_generated",
    "content": "Value: on_chunk_generated\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_chunk_generated",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_combat_robot_expired",
    "content": "Value: on_combat_robot_expired\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_combat_robot_expired",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_console_chat",
    "content": "Value: on_console_chat\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_console_chat",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_console_command",
    "content": "Value: on_console_command\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_console_command",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_cutscene_cancelled",
    "content": "Value: on_cutscene_cancelled\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_cutscene_cancelled",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_cutscene_finished",
    "content": "Value: on_cutscene_finished\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_cutscene_finished",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_cutscene_started",
    "content": "Value: on_cutscene_started\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_cutscene_started",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_cutscene_waypoint_reached",
    "content": "Value: on_cutscene_waypoint_reached\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_cutscene_waypoint_reached",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_entity_cloned",
    "content": "Value: on_entity_cloned\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_entity_cloned",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_entity_color_changed",
    "content": "Value: on_entity_color_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_entity_color_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_entity_damaged",
    "content": "Value: on_entity_damaged\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_entity_damaged",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_entity_died",
    "content": "Value: on_entity_died\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_entity_died",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_entity_logistic_slot_changed",
    "content": "Value: on_entity_logistic_slot_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_entity_logistic_slot_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_entity_renamed",
    "content": "Value: on_entity_renamed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_entity_renamed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_entity_settings_pasted",
    "content": "Value: on_entity_settings_pasted\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_entity_settings_pasted",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_entity_spawned",
    "content": "Value: on_entity_spawned\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_entity_spawned",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_equipment_inserted",
    "content": "Value: on_equipment_inserted\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_equipment_inserted",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_equipment_removed",
    "content": "Value: on_equipment_removed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_equipment_removed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_force_cease_fire_changed",
    "content": "Value: on_force_cease_fire_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_force_cease_fire_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_force_created",
    "content": "Value: on_force_created\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_force_created",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_force_friends_changed",
    "content": "Value: on_force_friends_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_force_friends_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_force_reset",
    "content": "Value: on_force_reset\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_force_reset",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_forces_merged",
    "content": "Value: on_forces_merged\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_forces_merged",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_forces_merging",
    "content": "Value: on_forces_merging\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_forces_merging",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_game_created_from_scenario",
    "content": "Value: on_game_created_from_scenario\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_game_created_from_scenario",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_gui_checked_state_changed",
    "content": "Value: on_gui_checked_state_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_gui_checked_state_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_gui_click",
    "content": "Value: on_gui_click\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_gui_click",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_gui_closed",
    "content": "Value: on_gui_closed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_gui_closed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_gui_confirmed",
    "content": "Value: on_gui_confirmed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_gui_confirmed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_gui_elem_changed",
    "content": "Value: on_gui_elem_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_gui_elem_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_gui_hover",
    "content": "Value: on_gui_hover\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_gui_hover",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_gui_leave",
    "content": "Value: on_gui_leave\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_gui_leave",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_gui_location_changed",
    "content": "Value: on_gui_location_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_gui_location_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_gui_opened",
    "content": "Value: on_gui_opened\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_gui_opened",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_gui_selected_tab_changed",
    "content": "Value: on_gui_selected_tab_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_gui_selected_tab_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_gui_selection_state_changed",
    "content": "Value: on_gui_selection_state_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_gui_selection_state_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_gui_switch_state_changed",
    "content": "Value: on_gui_switch_state_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_gui_switch_state_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_gui_text_changed",
    "content": "Value: on_gui_text_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_gui_text_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_gui_value_changed",
    "content": "Value: on_gui_value_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_gui_value_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_land_mine_armed",
    "content": "Value: on_land_mine_armed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_land_mine_armed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_lua_shortcut",
    "content": "Value: on_lua_shortcut\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_lua_shortcut",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_marked_for_deconstruction",
    "content": "Value: on_marked_for_deconstruction\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_marked_for_deconstruction",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_marked_for_upgrade",
    "content": "Value: on_marked_for_upgrade\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_marked_for_upgrade",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_market_item_purchased",
    "content": "Value: on_market_item_purchased\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_market_item_purchased",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_mod_item_opened",
    "content": "Value: on_mod_item_opened\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_mod_item_opened",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_object_destroyed",
    "content": "Value: on_object_destroyed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_object_destroyed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_permission_group_added",
    "content": "Value: on_permission_group_added\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_permission_group_added",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_permission_group_deleted",
    "content": "Value: on_permission_group_deleted\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_permission_group_deleted",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_permission_group_edited",
    "content": "Value: on_permission_group_edited\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_permission_group_edited",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_permission_string_imported",
    "content": "Value: on_permission_string_imported\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_permission_string_imported",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_picked_up_item",
    "content": "Value: on_picked_up_item\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_picked_up_item",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_alt_reverse_selected_area",
    "content": "Value: on_player_alt_reverse_selected_area\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_alt_reverse_selected_area",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_alt_selected_area",
    "content": "Value: on_player_alt_selected_area\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_alt_selected_area",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_ammo_inventory_changed",
    "content": "Value: on_player_ammo_inventory_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_ammo_inventory_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_armor_inventory_changed",
    "content": "Value: on_player_armor_inventory_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_armor_inventory_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_banned",
    "content": "Value: on_player_banned\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_banned",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_built_tile",
    "content": "Value: on_player_built_tile\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_built_tile",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_cancelled_crafting",
    "content": "Value: on_player_cancelled_crafting\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_cancelled_crafting",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_changed_force",
    "content": "Value: on_player_changed_force\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_changed_force",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_changed_position",
    "content": "Value: on_player_changed_position\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_changed_position",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_changed_surface",
    "content": "Value: on_player_changed_surface\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_changed_surface",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_cheat_mode_disabled",
    "content": "Value: on_player_cheat_mode_disabled\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_cheat_mode_disabled",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_cheat_mode_enabled",
    "content": "Value: on_player_cheat_mode_enabled\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_cheat_mode_enabled",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_clicked_gps_tag",
    "content": "Value: on_player_clicked_gps_tag\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_clicked_gps_tag",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_configured_blueprint",
    "content": "Value: on_player_configured_blueprint\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_configured_blueprint",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_controller_changed",
    "content": "Value: on_player_controller_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_controller_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_crafted_item",
    "content": "Value: on_player_crafted_item\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_crafted_item",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_created",
    "content": "Value: on_player_created\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_created",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_cursor_stack_changed",
    "content": "Value: on_player_cursor_stack_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_cursor_stack_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_deconstructed_area",
    "content": "Value: on_player_deconstructed_area\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_deconstructed_area",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_demoted",
    "content": "Value: on_player_demoted\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_demoted",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_died",
    "content": "Value: on_player_died\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_died",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_display_density_scale_changed",
    "content": "Value: on_player_display_density_scale_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_display_density_scale_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_display_resolution_changed",
    "content": "Value: on_player_display_resolution_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_display_resolution_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_display_scale_changed",
    "content": "Value: on_player_display_scale_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_display_scale_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_driving_changed_state",
    "content": "Value: on_player_driving_changed_state\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_driving_changed_state",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_dropped_item",
    "content": "Value: on_player_dropped_item\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_dropped_item",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_fast_transferred",
    "content": "Value: on_player_fast_transferred\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_fast_transferred",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_flipped_entity",
    "content": "Value: on_player_flipped_entity\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_flipped_entity",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_flushed_fluid",
    "content": "Value: on_player_flushed_fluid\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_flushed_fluid",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_gun_inventory_changed",
    "content": "Value: on_player_gun_inventory_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_gun_inventory_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_input_method_changed",
    "content": "Value: on_player_input_method_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_input_method_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_joined_game",
    "content": "Value: on_player_joined_game\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_joined_game",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_kicked",
    "content": "Value: on_player_kicked\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_kicked",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_left_game",
    "content": "Value: on_player_left_game\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_left_game",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_locale_changed",
    "content": "Value: on_player_locale_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_locale_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_main_inventory_changed",
    "content": "Value: on_player_main_inventory_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_main_inventory_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_mined_entity",
    "content": "Value: on_player_mined_entity\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_mined_entity",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_mined_item",
    "content": "Value: on_player_mined_item\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_mined_item",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_mined_tile",
    "content": "Value: on_player_mined_tile\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_mined_tile",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_muted",
    "content": "Value: on_player_muted\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_muted",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_pipette",
    "content": "Value: on_player_pipette\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_pipette",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_placed_equipment",
    "content": "Value: on_player_placed_equipment\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_placed_equipment",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_promoted",
    "content": "Value: on_player_promoted\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_promoted",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_removed",
    "content": "Value: on_player_removed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_removed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_removed_equipment",
    "content": "Value: on_player_removed_equipment\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_removed_equipment",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_repaired_entity",
    "content": "Value: on_player_repaired_entity\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_repaired_entity",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_respawned",
    "content": "Value: on_player_respawned\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_respawned",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_reverse_selected_area",
    "content": "Value: on_player_reverse_selected_area\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_reverse_selected_area",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_rotated_entity",
    "content": "Value: on_player_rotated_entity\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_rotated_entity",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_selected_area",
    "content": "Value: on_player_selected_area\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_selected_area",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_set_quick_bar_slot",
    "content": "Value: on_player_set_quick_bar_slot\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_set_quick_bar_slot",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_setup_blueprint",
    "content": "Value: on_player_setup_blueprint\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_setup_blueprint",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_toggled_alt_mode",
    "content": "Value: on_player_toggled_alt_mode\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_toggled_alt_mode",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_toggled_map_editor",
    "content": "Value: on_player_toggled_map_editor\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_toggled_map_editor",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_trash_inventory_changed",
    "content": "Value: on_player_trash_inventory_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_trash_inventory_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_unbanned",
    "content": "Value: on_player_unbanned\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_unbanned",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_unmuted",
    "content": "Value: on_player_unmuted\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_unmuted",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_used_capsule",
    "content": "Value: on_player_used_capsule\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_used_capsule",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_player_used_spidertron_remote",
    "content": "Value: on_player_used_spidertron_remote\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_player_used_spidertron_remote",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_post_entity_died",
    "content": "Value: on_post_entity_died\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_post_entity_died",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_pre_build",
    "content": "Value: on_pre_build\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_pre_build",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_pre_chunk_deleted",
    "content": "Value: on_pre_chunk_deleted\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_pre_chunk_deleted",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_pre_entity_settings_pasted",
    "content": "Value: on_pre_entity_settings_pasted\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_pre_entity_settings_pasted",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_pre_ghost_deconstructed",
    "content": "Value: on_pre_ghost_deconstructed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_pre_ghost_deconstructed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_pre_ghost_upgraded",
    "content": "Value: on_pre_ghost_upgraded\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_pre_ghost_upgraded",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_pre_permission_group_deleted",
    "content": "Value: on_pre_permission_group_deleted\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_pre_permission_group_deleted",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_pre_permission_string_imported",
    "content": "Value: on_pre_permission_string_imported\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_pre_permission_string_imported",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_pre_player_crafted_item",
    "content": "Value: on_pre_player_crafted_item\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_pre_player_crafted_item",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_pre_player_died",
    "content": "Value: on_pre_player_died\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_pre_player_died",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_pre_player_left_game",
    "content": "Value: on_pre_player_left_game\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_pre_player_left_game",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_pre_player_mined_item",
    "content": "Value: on_pre_player_mined_item\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_pre_player_mined_item",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_pre_player_removed",
    "content": "Value: on_pre_player_removed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_pre_player_removed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_pre_player_toggled_map_editor",
    "content": "Value: on_pre_player_toggled_map_editor\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_pre_player_toggled_map_editor",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_pre_robot_exploded_cliff",
    "content": "Value: on_pre_robot_exploded_cliff\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_pre_robot_exploded_cliff",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_pre_scenario_finished",
    "content": "Value: on_pre_scenario_finished\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_pre_scenario_finished",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_pre_script_inventory_resized",
    "content": "Value: on_pre_script_inventory_resized\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_pre_script_inventory_resized",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_pre_surface_cleared",
    "content": "Value: on_pre_surface_cleared\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_pre_surface_cleared",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_pre_surface_deleted",
    "content": "Value: on_pre_surface_deleted\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_pre_surface_deleted",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_redo_applied",
    "content": "Value: on_redo_applied\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_redo_applied",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_research_cancelled",
    "content": "Value: on_research_cancelled\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_research_cancelled",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_research_finished",
    "content": "Value: on_research_finished\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_research_finished",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_research_moved",
    "content": "Value: on_research_moved\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_research_moved",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_research_reversed",
    "content": "Value: on_research_reversed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_research_reversed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_research_started",
    "content": "Value: on_research_started\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_research_started",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_resource_depleted",
    "content": "Value: on_resource_depleted\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_resource_depleted",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_robot_built_entity",
    "content": "Value: on_robot_built_entity\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_robot_built_entity",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_robot_built_tile",
    "content": "Value: on_robot_built_tile\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_robot_built_tile",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_robot_exploded_cliff",
    "content": "Value: on_robot_exploded_cliff\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_robot_exploded_cliff",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_robot_mined",
    "content": "Value: on_robot_mined\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_robot_mined",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_robot_mined_entity",
    "content": "Value: on_robot_mined_entity\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_robot_mined_entity",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_robot_mined_tile",
    "content": "Value: on_robot_mined_tile\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_robot_mined_tile",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_robot_pre_mined",
    "content": "Value: on_robot_pre_mined\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_robot_pre_mined",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_rocket_launch_ordered",
    "content": "Value: on_rocket_launch_ordered\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_rocket_launch_ordered",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_rocket_launched",
    "content": "Value: on_rocket_launched\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_rocket_launched",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_runtime_mod_setting_changed",
    "content": "Value: on_runtime_mod_setting_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_runtime_mod_setting_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_script_inventory_resized",
    "content": "Value: on_script_inventory_resized\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_script_inventory_resized",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_script_path_request_finished",
    "content": "Value: on_script_path_request_finished\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_script_path_request_finished",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_script_trigger_effect",
    "content": "Value: on_script_trigger_effect\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_script_trigger_effect",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_sector_scanned",
    "content": "Value: on_sector_scanned\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_sector_scanned",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_segment_entity_created",
    "content": "Value: on_segment_entity_created\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_segment_entity_created",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_selected_entity_changed",
    "content": "Value: on_selected_entity_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_selected_entity_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_space_platform_built_entity",
    "content": "Value: on_space_platform_built_entity\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_space_platform_built_entity",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_space_platform_built_tile",
    "content": "Value: on_space_platform_built_tile\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_space_platform_built_tile",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_space_platform_changed_state",
    "content": "Value: on_space_platform_changed_state\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_space_platform_changed_state",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_space_platform_mined_entity",
    "content": "Value: on_space_platform_mined_entity\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_space_platform_mined_entity",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_space_platform_mined_item",
    "content": "Value: on_space_platform_mined_item\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_space_platform_mined_item",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_space_platform_mined_tile",
    "content": "Value: on_space_platform_mined_tile\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_space_platform_mined_tile",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_space_platform_pre_mined",
    "content": "Value: on_space_platform_pre_mined\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_space_platform_pre_mined",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_spider_command_completed",
    "content": "Value: on_spider_command_completed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_spider_command_completed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_string_translated",
    "content": "Value: on_string_translated\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_string_translated",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_surface_cleared",
    "content": "Value: on_surface_cleared\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_surface_cleared",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_surface_created",
    "content": "Value: on_surface_created\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_surface_created",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_surface_deleted",
    "content": "Value: on_surface_deleted\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_surface_deleted",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_surface_imported",
    "content": "Value: on_surface_imported\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_surface_imported",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_surface_renamed",
    "content": "Value: on_surface_renamed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_surface_renamed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_technology_effects_reset",
    "content": "Value: on_technology_effects_reset\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_technology_effects_reset",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_tick",
    "content": "Value: on_tick\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_tick",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_train_changed_state",
    "content": "Value: on_train_changed_state\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_train_changed_state",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_train_created",
    "content": "Value: on_train_created\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_train_created",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_train_schedule_changed",
    "content": "Value: on_train_schedule_changed\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_train_schedule_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_trigger_created_entity",
    "content": "Value: on_trigger_created_entity\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_trigger_created_entity",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_trigger_fired_artillery",
    "content": "Value: on_trigger_fired_artillery\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_trigger_fired_artillery",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_undo_applied",
    "content": "Value: on_undo_applied\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_undo_applied",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_unit_added_to_group",
    "content": "Value: on_unit_added_to_group\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_unit_added_to_group",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_unit_group_created",
    "content": "Value: on_unit_group_created\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_unit_group_created",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_unit_group_finished_gathering",
    "content": "Value: on_unit_group_finished_gathering\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_unit_group_finished_gathering",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_unit_removed_from_group",
    "content": "Value: on_unit_removed_from_group\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_unit_removed_from_group",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_worker_robot_expired",
    "content": "Value: on_worker_robot_expired\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "on_worker_robot_expired",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "script_raised_built",
    "content": "Value: script_raised_built\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "script_raised_built",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "script_raised_destroy",
    "content": "Value: script_raised_destroy\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "script_raised_destroy",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "script_raised_revive",
    "content": "Value: script_raised_revive\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "script_raised_revive",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "script_raised_set_tiles",
    "content": "Value: script_raised_set_tiles\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "script_raised_set_tiles",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "script_raised_teleported",
    "content": "Value: script_raised_teleported\nDescription: ",
    "metadata": {
      "define_name": "events",
      "value_name": "script_raised_teleported",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "flow_precision_index",
    "content": "Define: flow_precision_index\nDescription: ",
    "metadata": {
      "define_name": "flow_precision_index",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "fifty_hours",
    "content": "Value: fifty_hours\nDescription: ",
    "metadata": {
      "define_name": "flow_precision_index",
      "value_name": "fifty_hours",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "five_seconds",
    "content": "Value: five_seconds\nDescription: ",
    "metadata": {
      "define_name": "flow_precision_index",
      "value_name": "five_seconds",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "one_hour",
    "content": "Value: one_hour\nDescription: ",
    "metadata": {
      "define_name": "flow_precision_index",
      "value_name": "one_hour",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "one_minute",
    "content": "Value: one_minute\nDescription: ",
    "metadata": {
      "define_name": "flow_precision_index",
      "value_name": "one_minute",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "one_thousand_hours",
    "content": "Value: one_thousand_hours\nDescription: ",
    "metadata": {
      "define_name": "flow_precision_index",
      "value_name": "one_thousand_hours",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "ten_hours",
    "content": "Value: ten_hours\nDescription: ",
    "metadata": {
      "define_name": "flow_precision_index",
      "value_name": "ten_hours",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "ten_minutes",
    "content": "Value: ten_minutes\nDescription: ",
    "metadata": {
      "define_name": "flow_precision_index",
      "value_name": "ten_minutes",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "two_hundred_fifty_hours",
    "content": "Value: two_hundred_fifty_hours\nDescription: ",
    "metadata": {
      "define_name": "flow_precision_index",
      "value_name": "two_hundred_fifty_hours",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "game_controller_interaction",
    "content": "Define: game_controller_interaction\nDescription: ",
    "metadata": {
      "define_name": "game_controller_interaction",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "always",
    "content": "Value: always\nDescription: Game controller will always hover this element regardless of type or state.",
    "metadata": {
      "define_name": "game_controller_interaction",
      "value_name": "always",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "never",
    "content": "Value: never\nDescription: Never hover this element with a game controller.",
    "metadata": {
      "define_name": "game_controller_interaction",
      "value_name": "never",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "normal",
    "content": "Value: normal\nDescription: Hover according to the element type and implementation.",
    "metadata": {
      "define_name": "game_controller_interaction",
      "value_name": "normal",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "group_state",
    "content": "Define: group_state\nDescription: ",
    "metadata": {
      "define_name": "group_state",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "attacking_distraction",
    "content": "Value: attacking_distraction\nDescription: ",
    "metadata": {
      "define_name": "group_state",
      "value_name": "attacking_distraction",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "attacking_target",
    "content": "Value: attacking_target\nDescription: ",
    "metadata": {
      "define_name": "group_state",
      "value_name": "attacking_target",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "finished",
    "content": "Value: finished\nDescription: ",
    "metadata": {
      "define_name": "group_state",
      "value_name": "finished",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "gathering",
    "content": "Value: gathering\nDescription: ",
    "metadata": {
      "define_name": "group_state",
      "value_name": "gathering",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "moving",
    "content": "Value: moving\nDescription: ",
    "metadata": {
      "define_name": "group_state",
      "value_name": "moving",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "pathfinding",
    "content": "Value: pathfinding\nDescription: ",
    "metadata": {
      "define_name": "group_state",
      "value_name": "pathfinding",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "wander_in_group",
    "content": "Value: wander_in_group\nDescription: ",
    "metadata": {
      "define_name": "group_state",
      "value_name": "wander_in_group",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "gui_type",
    "content": "Define: gui_type\nDescription: ",
    "metadata": {
      "define_name": "gui_type",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "achievement",
    "content": "Value: achievement\nDescription: ",
    "metadata": {
      "define_name": "gui_type",
      "value_name": "achievement",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "blueprint_library",
    "content": "Value: blueprint_library\nDescription: ",
    "metadata": {
      "define_name": "gui_type",
      "value_name": "blueprint_library",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "bonus",
    "content": "Value: bonus\nDescription: ",
    "metadata": {
      "define_name": "gui_type",
      "value_name": "bonus",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "controller",
    "content": "Value: controller\nDescription: ",
    "metadata": {
      "define_name": "gui_type",
      "value_name": "controller",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "custom",
    "content": "Value: custom\nDescription: ",
    "metadata": {
      "define_name": "gui_type",
      "value_name": "custom",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "entity",
    "content": "Value: entity\nDescription: ",
    "metadata": {
      "define_name": "gui_type",
      "value_name": "entity",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "equipment",
    "content": "Value: equipment\nDescription: ",
    "metadata": {
      "define_name": "gui_type",
      "value_name": "equipment",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "global_electric_network",
    "content": "Value: global_electric_network\nDescription: ",
    "metadata": {
      "define_name": "gui_type",
      "value_name": "global_electric_network",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "item",
    "content": "Value: item\nDescription: ",
    "metadata": {
      "define_name": "gui_type",
      "value_name": "item",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "logistic",
    "content": "Value: logistic\nDescription: ",
    "metadata": {
      "define_name": "gui_type",
      "value_name": "logistic",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "none",
    "content": "Value: none\nDescription: ",
    "metadata": {
      "define_name": "gui_type",
      "value_name": "none",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "opened_entity_grid",
    "content": "Value: opened_entity_grid\nDescription: ",
    "metadata": {
      "define_name": "gui_type",
      "value_name": "opened_entity_grid",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "other_player",
    "content": "Value: other_player\nDescription: ",
    "metadata": {
      "define_name": "gui_type",
      "value_name": "other_player",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "permissions",
    "content": "Value: permissions\nDescription: ",
    "metadata": {
      "define_name": "gui_type",
      "value_name": "permissions",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "player_management",
    "content": "Value: player_management\nDescription: ",
    "metadata": {
      "define_name": "gui_type",
      "value_name": "player_management",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "production",
    "content": "Value: production\nDescription: ",
    "metadata": {
      "define_name": "gui_type",
      "value_name": "production",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "script_inventory",
    "content": "Value: script_inventory\nDescription: ",
    "metadata": {
      "define_name": "gui_type",
      "value_name": "script_inventory",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "server_management",
    "content": "Value: server_management\nDescription: ",
    "metadata": {
      "define_name": "gui_type",
      "value_name": "server_management",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "tile",
    "content": "Value: tile\nDescription: ",
    "metadata": {
      "define_name": "gui_type",
      "value_name": "tile",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "trains",
    "content": "Value: trains\nDescription: ",
    "metadata": {
      "define_name": "gui_type",
      "value_name": "trains",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "input_action",
    "content": "Define: input_action\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "activate_interrupt",
    "content": "Value: activate_interrupt\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "activate_interrupt",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "activate_paste",
    "content": "Value: activate_paste\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "activate_paste",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "add_decider_combinator_condition",
    "content": "Value: add_decider_combinator_condition\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "add_decider_combinator_condition",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "add_decider_combinator_output",
    "content": "Value: add_decider_combinator_output\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "add_decider_combinator_output",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "add_logistic_section",
    "content": "Value: add_logistic_section\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "add_logistic_section",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "add_permission_group",
    "content": "Value: add_permission_group\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "add_permission_group",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "add_pin",
    "content": "Value: add_pin\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "add_pin",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "add_train_interrupt",
    "content": "Value: add_train_interrupt\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "add_train_interrupt",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "add_train_station",
    "content": "Value: add_train_station\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "add_train_station",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "adjust_blueprint_snapping",
    "content": "Value: adjust_blueprint_snapping\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "adjust_blueprint_snapping",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "admin_action",
    "content": "Value: admin_action\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "admin_action",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "alt_reverse_select_area",
    "content": "Value: alt_reverse_select_area\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "alt_reverse_select_area",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "alt_select_area",
    "content": "Value: alt_select_area\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "alt_select_area",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "alt_select_blueprint_entities",
    "content": "Value: alt_select_blueprint_entities\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "alt_select_blueprint_entities",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "alternative_copy",
    "content": "Value: alternative_copy\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "alternative_copy",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "begin_mining",
    "content": "Value: begin_mining\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "begin_mining",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "begin_mining_terrain",
    "content": "Value: begin_mining_terrain\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "begin_mining_terrain",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "build",
    "content": "Value: build\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "build",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "build_rail",
    "content": "Value: build_rail\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "build_rail",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "build_terrain",
    "content": "Value: build_terrain\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "build_terrain",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "cancel_craft",
    "content": "Value: cancel_craft\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "cancel_craft",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "cancel_deconstruct",
    "content": "Value: cancel_deconstruct\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "cancel_deconstruct",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "cancel_delete_space_platform",
    "content": "Value: cancel_delete_space_platform\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "cancel_delete_space_platform",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "cancel_new_blueprint",
    "content": "Value: cancel_new_blueprint\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "cancel_new_blueprint",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "cancel_research",
    "content": "Value: cancel_research\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "cancel_research",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "cancel_upgrade",
    "content": "Value: cancel_upgrade\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "cancel_upgrade",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "change_active_character_tab",
    "content": "Value: change_active_character_tab\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "change_active_character_tab",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "change_active_item_group_for_crafting",
    "content": "Value: change_active_item_group_for_crafting\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "change_active_item_group_for_crafting",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "change_active_item_group_for_filters",
    "content": "Value: change_active_item_group_for_filters\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "change_active_item_group_for_filters",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "change_active_quick_bar",
    "content": "Value: change_active_quick_bar\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "change_active_quick_bar",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "change_arithmetic_combinator_parameters",
    "content": "Value: change_arithmetic_combinator_parameters\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "change_arithmetic_combinator_parameters",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "change_entity_label",
    "content": "Value: change_entity_label\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "change_entity_label",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "change_item_label",
    "content": "Value: change_item_label\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "change_item_label",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "change_logistic_point_group",
    "content": "Value: change_logistic_point_group\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "change_logistic_point_group",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "change_multiplayer_config",
    "content": "Value: change_multiplayer_config\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "change_multiplayer_config",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "change_picking_state",
    "content": "Value: change_picking_state\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "change_picking_state",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "change_programmable_speaker_alert_parameters",
    "content": "Value: change_programmable_speaker_alert_parameters\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "change_programmable_speaker_alert_parameters",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "change_programmable_speaker_circuit_parameters",
    "content": "Value: change_programmable_speaker_circuit_parameters\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "change_programmable_speaker_circuit_parameters",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "change_programmable_speaker_parameters",
    "content": "Value: change_programmable_speaker_parameters\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "change_programmable_speaker_parameters",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "change_riding_state",
    "content": "Value: change_riding_state\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "change_riding_state",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "change_selector_combinator_parameters",
    "content": "Value: change_selector_combinator_parameters\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "change_selector_combinator_parameters",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "change_shooting_state",
    "content": "Value: change_shooting_state\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "change_shooting_state",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "change_train_name",
    "content": "Value: change_train_name\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "change_train_name",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "change_train_stop_station",
    "content": "Value: change_train_stop_station\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "change_train_stop_station",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "change_train_wait_condition",
    "content": "Value: change_train_wait_condition\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "change_train_wait_condition",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "change_train_wait_condition_data",
    "content": "Value: change_train_wait_condition_data\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "change_train_wait_condition_data",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "clear_cursor",
    "content": "Value: clear_cursor\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "clear_cursor",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "connect_rolling_stock",
    "content": "Value: connect_rolling_stock\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "connect_rolling_stock",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "copy",
    "content": "Value: copy\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "copy",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "copy_entity_settings",
    "content": "Value: copy_entity_settings\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "copy_entity_settings",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "copy_large_opened_blueprint",
    "content": "Value: copy_large_opened_blueprint\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "copy_large_opened_blueprint",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "copy_large_opened_item",
    "content": "Value: copy_large_opened_item\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "copy_large_opened_item",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "copy_opened_blueprint",
    "content": "Value: copy_opened_blueprint\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "copy_opened_blueprint",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "copy_opened_item",
    "content": "Value: copy_opened_item\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "copy_opened_item",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "craft",
    "content": "Value: craft\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "craft",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "create_space_platform",
    "content": "Value: create_space_platform\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "create_space_platform",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "cursor_split",
    "content": "Value: cursor_split\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "cursor_split",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "cursor_transfer",
    "content": "Value: cursor_transfer\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "cursor_transfer",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "custom_input",
    "content": "Value: custom_input\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "custom_input",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "cycle_blueprint_book_backwards",
    "content": "Value: cycle_blueprint_book_backwards\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "cycle_blueprint_book_backwards",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "cycle_blueprint_book_forwards",
    "content": "Value: cycle_blueprint_book_forwards\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "cycle_blueprint_book_forwards",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "cycle_quality_down",
    "content": "Value: cycle_quality_down\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "cycle_quality_down",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "cycle_quality_up",
    "content": "Value: cycle_quality_up\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "cycle_quality_up",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "deconstruct",
    "content": "Value: deconstruct\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "deconstruct",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "delete_blueprint_library",
    "content": "Value: delete_blueprint_library\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "delete_blueprint_library",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "delete_blueprint_record",
    "content": "Value: delete_blueprint_record\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "delete_blueprint_record",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "delete_custom_tag",
    "content": "Value: delete_custom_tag\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "delete_custom_tag",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "delete_logistic_group",
    "content": "Value: delete_logistic_group\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "delete_logistic_group",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "delete_permission_group",
    "content": "Value: delete_permission_group\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "delete_permission_group",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "delete_space_platform",
    "content": "Value: delete_space_platform\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "delete_space_platform",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "destroy_item",
    "content": "Value: destroy_item\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "destroy_item",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "destroy_opened_item",
    "content": "Value: destroy_opened_item\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "destroy_opened_item",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "disconnect_rolling_stock",
    "content": "Value: disconnect_rolling_stock\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "disconnect_rolling_stock",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "drag_decider_combinator_condition",
    "content": "Value: drag_decider_combinator_condition\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "drag_decider_combinator_condition",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "drag_decider_combinator_output",
    "content": "Value: drag_decider_combinator_output\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "drag_decider_combinator_output",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "drag_train_schedule",
    "content": "Value: drag_train_schedule\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "drag_train_schedule",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "drag_train_schedule_interrupt",
    "content": "Value: drag_train_schedule_interrupt\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "drag_train_schedule_interrupt",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "drag_train_wait_condition",
    "content": "Value: drag_train_wait_condition\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "drag_train_wait_condition",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "drop_blueprint_record",
    "content": "Value: drop_blueprint_record\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "drop_blueprint_record",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "drop_item",
    "content": "Value: drop_item\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "drop_item",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "edit_blueprint_tool_preview",
    "content": "Value: edit_blueprint_tool_preview\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "edit_blueprint_tool_preview",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "edit_custom_tag",
    "content": "Value: edit_custom_tag\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "edit_custom_tag",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "edit_display_panel",
    "content": "Value: edit_display_panel\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "edit_display_panel",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "edit_display_panel_always_show",
    "content": "Value: edit_display_panel_always_show\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "edit_display_panel_always_show",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "edit_display_panel_icon",
    "content": "Value: edit_display_panel_icon\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "edit_display_panel_icon",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "edit_display_panel_parameters",
    "content": "Value: edit_display_panel_parameters\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "edit_display_panel_parameters",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "edit_display_panel_show_in_chart",
    "content": "Value: edit_display_panel_show_in_chart\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "edit_display_panel_show_in_chart",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "edit_interrupt",
    "content": "Value: edit_interrupt\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "edit_interrupt",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "edit_permission_group",
    "content": "Value: edit_permission_group\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "edit_permission_group",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "edit_pin",
    "content": "Value: edit_pin\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "edit_pin",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "enable_transitional_requests",
    "content": "Value: enable_transitional_requests\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "enable_transitional_requests",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "export_blueprint",
    "content": "Value: export_blueprint\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "export_blueprint",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "fast_entity_split",
    "content": "Value: fast_entity_split\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "fast_entity_split",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "fast_entity_transfer",
    "content": "Value: fast_entity_transfer\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "fast_entity_transfer",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "flip_entity",
    "content": "Value: flip_entity\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "flip_entity",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "flush_opened_entity_fluid",
    "content": "Value: flush_opened_entity_fluid\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "flush_opened_entity_fluid",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "flush_opened_entity_specific_fluid",
    "content": "Value: flush_opened_entity_specific_fluid\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "flush_opened_entity_specific_fluid",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "go_to_train_station",
    "content": "Value: go_to_train_station\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "go_to_train_station",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "grab_blueprint_record",
    "content": "Value: grab_blueprint_record\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "grab_blueprint_record",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "gui_checked_state_changed",
    "content": "Value: gui_checked_state_changed\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "gui_checked_state_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "gui_click",
    "content": "Value: gui_click\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "gui_click",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "gui_confirmed",
    "content": "Value: gui_confirmed\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "gui_confirmed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "gui_elem_changed",
    "content": "Value: gui_elem_changed\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "gui_elem_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "gui_hover",
    "content": "Value: gui_hover\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "gui_hover",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "gui_leave",
    "content": "Value: gui_leave\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "gui_leave",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "gui_location_changed",
    "content": "Value: gui_location_changed\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "gui_location_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "gui_selected_tab_changed",
    "content": "Value: gui_selected_tab_changed\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "gui_selected_tab_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "gui_selection_state_changed",
    "content": "Value: gui_selection_state_changed\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "gui_selection_state_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "gui_switch_state_changed",
    "content": "Value: gui_switch_state_changed\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "gui_switch_state_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "gui_text_changed",
    "content": "Value: gui_text_changed\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "gui_text_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "gui_value_changed",
    "content": "Value: gui_value_changed\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "gui_value_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "import_blueprint",
    "content": "Value: import_blueprint\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "import_blueprint",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "import_blueprint_string",
    "content": "Value: import_blueprint_string\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "import_blueprint_string",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "import_blueprints_filtered",
    "content": "Value: import_blueprints_filtered\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "import_blueprints_filtered",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "import_permissions_string",
    "content": "Value: import_permissions_string\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "import_permissions_string",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "instantly_create_space_platform",
    "content": "Value: instantly_create_space_platform\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "instantly_create_space_platform",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "inventory_split",
    "content": "Value: inventory_split\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "inventory_split",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "inventory_transfer",
    "content": "Value: inventory_transfer\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "inventory_transfer",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "land_at_planet",
    "content": "Value: land_at_planet\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "land_at_planet",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "launch_rocket",
    "content": "Value: launch_rocket\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "launch_rocket",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "lua_shortcut",
    "content": "Value: lua_shortcut\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "lua_shortcut",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "map_editor_action",
    "content": "Value: map_editor_action\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "map_editor_action",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "market_offer",
    "content": "Value: market_offer\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "market_offer",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "mod_settings_changed",
    "content": "Value: mod_settings_changed\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "mod_settings_changed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "modify_decider_combinator_condition",
    "content": "Value: modify_decider_combinator_condition\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "modify_decider_combinator_condition",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "modify_decider_combinator_output",
    "content": "Value: modify_decider_combinator_output\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "modify_decider_combinator_output",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "move_research",
    "content": "Value: move_research\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "move_research",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "open_achievements_gui",
    "content": "Value: open_achievements_gui\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "open_achievements_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "open_blueprint_library_gui",
    "content": "Value: open_blueprint_library_gui\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "open_blueprint_library_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "open_blueprint_record",
    "content": "Value: open_blueprint_record\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "open_blueprint_record",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "open_bonus_gui",
    "content": "Value: open_bonus_gui\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "open_bonus_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "open_character_gui",
    "content": "Value: open_character_gui\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "open_character_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "open_current_vehicle_gui",
    "content": "Value: open_current_vehicle_gui\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "open_current_vehicle_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "open_equipment",
    "content": "Value: open_equipment\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "open_equipment",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "open_global_electric_network_gui",
    "content": "Value: open_global_electric_network_gui\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "open_global_electric_network_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "open_gui",
    "content": "Value: open_gui\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "open_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "open_item",
    "content": "Value: open_item\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "open_item",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "open_logistics_gui",
    "content": "Value: open_logistics_gui\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "open_logistics_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "open_mod_item",
    "content": "Value: open_mod_item\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "open_mod_item",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "open_new_platform_button_from_rocket_silo",
    "content": "Value: open_new_platform_button_from_rocket_silo\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "open_new_platform_button_from_rocket_silo",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "open_opened_entity_grid",
    "content": "Value: open_opened_entity_grid\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "open_opened_entity_grid",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "open_parent_of_opened_item",
    "content": "Value: open_parent_of_opened_item\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "open_parent_of_opened_item",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "open_production_gui",
    "content": "Value: open_production_gui\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "open_production_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "open_train_gui",
    "content": "Value: open_train_gui\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "open_train_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "open_train_station_gui",
    "content": "Value: open_train_station_gui\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "open_train_station_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "open_trains_gui",
    "content": "Value: open_trains_gui\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "open_trains_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "parametrise_blueprint",
    "content": "Value: parametrise_blueprint\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "parametrise_blueprint",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "paste_entity_settings",
    "content": "Value: paste_entity_settings\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "paste_entity_settings",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "pin_alert_group",
    "content": "Value: pin_alert_group\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "pin_alert_group",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "pin_custom_alert",
    "content": "Value: pin_custom_alert\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "pin_custom_alert",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "pin_search_result",
    "content": "Value: pin_search_result\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "pin_search_result",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "pipette",
    "content": "Value: pipette\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "pipette",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "place_equipment",
    "content": "Value: place_equipment\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "place_equipment",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "quick_bar_pick_slot",
    "content": "Value: quick_bar_pick_slot\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "quick_bar_pick_slot",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "quick_bar_set_selected_page",
    "content": "Value: quick_bar_set_selected_page\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "quick_bar_set_selected_page",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "quick_bar_set_slot",
    "content": "Value: quick_bar_set_slot\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "quick_bar_set_slot",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "reassign_blueprint",
    "content": "Value: reassign_blueprint\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "reassign_blueprint",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "redo",
    "content": "Value: redo\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "redo",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "remote_view_entity",
    "content": "Value: remote_view_entity\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "remote_view_entity",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "remote_view_surface",
    "content": "Value: remote_view_surface\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "remote_view_surface",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "remove_cables",
    "content": "Value: remove_cables\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "remove_cables",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "remove_decider_combinator_condition",
    "content": "Value: remove_decider_combinator_condition\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "remove_decider_combinator_condition",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "remove_decider_combinator_output",
    "content": "Value: remove_decider_combinator_output\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "remove_decider_combinator_output",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "remove_logistic_section",
    "content": "Value: remove_logistic_section\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "remove_logistic_section",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "remove_pin",
    "content": "Value: remove_pin\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "remove_pin",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "remove_train_interrupt",
    "content": "Value: remove_train_interrupt\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "remove_train_interrupt",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "remove_train_station",
    "content": "Value: remove_train_station\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "remove_train_station",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "rename_interrupt",
    "content": "Value: rename_interrupt\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "rename_interrupt",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "rename_space_platform",
    "content": "Value: rename_space_platform\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "rename_space_platform",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "reorder_logistic_section",
    "content": "Value: reorder_logistic_section\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "reorder_logistic_section",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "request_missing_construction_materials",
    "content": "Value: request_missing_construction_materials\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "request_missing_construction_materials",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "reset_assembling_machine",
    "content": "Value: reset_assembling_machine\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "reset_assembling_machine",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "reverse_select_area",
    "content": "Value: reverse_select_area\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "reverse_select_area",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "rotate_entity",
    "content": "Value: rotate_entity\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "rotate_entity",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "select_area",
    "content": "Value: select_area\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "select_area",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "select_asteroid_chunk_slot",
    "content": "Value: select_asteroid_chunk_slot\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "select_asteroid_chunk_slot",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "select_blueprint_entities",
    "content": "Value: select_blueprint_entities\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "select_blueprint_entities",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "select_entity_filter_slot",
    "content": "Value: select_entity_filter_slot\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "select_entity_filter_slot",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "select_entity_slot",
    "content": "Value: select_entity_slot\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "select_entity_slot",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "select_item_filter",
    "content": "Value: select_item_filter\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "select_item_filter",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "select_mapper_slot_from",
    "content": "Value: select_mapper_slot_from\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "select_mapper_slot_from",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "select_mapper_slot_to",
    "content": "Value: select_mapper_slot_to\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "select_mapper_slot_to",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "select_next_valid_gun",
    "content": "Value: select_next_valid_gun\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "select_next_valid_gun",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "select_tile_slot",
    "content": "Value: select_tile_slot\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "select_tile_slot",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "send_spidertron",
    "content": "Value: send_spidertron\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "send_spidertron",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "send_stack_to_trash",
    "content": "Value: send_stack_to_trash\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "send_stack_to_trash",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "send_stacks_to_trash",
    "content": "Value: send_stacks_to_trash\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "send_stacks_to_trash",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "send_train_to_pin_target",
    "content": "Value: send_train_to_pin_target\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "send_train_to_pin_target",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_behavior_mode",
    "content": "Value: set_behavior_mode\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_behavior_mode",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_car_weapons_control",
    "content": "Value: set_car_weapons_control\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_car_weapons_control",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_cheat_mode_quality",
    "content": "Value: set_cheat_mode_quality\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_cheat_mode_quality",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_circuit_condition",
    "content": "Value: set_circuit_condition\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_circuit_condition",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_circuit_mode_of_operation",
    "content": "Value: set_circuit_mode_of_operation\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_circuit_mode_of_operation",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_combinator_description",
    "content": "Value: set_combinator_description\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_combinator_description",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_copy_color_from_train_stop",
    "content": "Value: set_copy_color_from_train_stop\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_copy_color_from_train_stop",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_deconstruction_item_tile_selection_mode",
    "content": "Value: set_deconstruction_item_tile_selection_mode\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_deconstruction_item_tile_selection_mode",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_deconstruction_item_trees_and_rocks_only",
    "content": "Value: set_deconstruction_item_trees_and_rocks_only\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_deconstruction_item_trees_and_rocks_only",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_entity_color",
    "content": "Value: set_entity_color\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_entity_color",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_entity_energy_property",
    "content": "Value: set_entity_energy_property\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_entity_energy_property",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_filter",
    "content": "Value: set_filter\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_filter",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_ghost_cursor",
    "content": "Value: set_ghost_cursor\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_ghost_cursor",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_heat_interface_mode",
    "content": "Value: set_heat_interface_mode\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_heat_interface_mode",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_heat_interface_temperature",
    "content": "Value: set_heat_interface_temperature\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_heat_interface_temperature",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_infinity_container_filter_item",
    "content": "Value: set_infinity_container_filter_item\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_infinity_container_filter_item",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_infinity_container_remove_unfiltered_items",
    "content": "Value: set_infinity_container_remove_unfiltered_items\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_infinity_container_remove_unfiltered_items",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_infinity_pipe_filter",
    "content": "Value: set_infinity_pipe_filter\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_infinity_pipe_filter",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_inserter_max_stack_size",
    "content": "Value: set_inserter_max_stack_size\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_inserter_max_stack_size",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_inventory_bar",
    "content": "Value: set_inventory_bar\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_inventory_bar",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_lamp_always_on",
    "content": "Value: set_lamp_always_on\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_lamp_always_on",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_linked_container_link_i_d",
    "content": "Value: set_linked_container_link_i_d\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_linked_container_link_i_d",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_logistic_filter_item",
    "content": "Value: set_logistic_filter_item\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_logistic_filter_item",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_logistic_network_name",
    "content": "Value: set_logistic_network_name\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_logistic_network_name",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_logistic_section_active",
    "content": "Value: set_logistic_section_active\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_logistic_section_active",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_player_color",
    "content": "Value: set_player_color\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_player_color",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_pump_fluid_filter",
    "content": "Value: set_pump_fluid_filter\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_pump_fluid_filter",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_request_from_buffers",
    "content": "Value: set_request_from_buffers\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_request_from_buffers",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_research_finished_stops_game",
    "content": "Value: set_research_finished_stops_game\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_research_finished_stops_game",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_rocket_silo_send_to_orbit_automated_mode",
    "content": "Value: set_rocket_silo_send_to_orbit_automated_mode\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_rocket_silo_send_to_orbit_automated_mode",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_schedule_record_allow_unloading",
    "content": "Value: set_schedule_record_allow_unloading\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_schedule_record_allow_unloading",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_signal",
    "content": "Value: set_signal\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_signal",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_splitter_priority",
    "content": "Value: set_splitter_priority\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_splitter_priority",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_spoil_priority",
    "content": "Value: set_spoil_priority\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_spoil_priority",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_train_stop_priority",
    "content": "Value: set_train_stop_priority\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_train_stop_priority",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_train_stopped",
    "content": "Value: set_train_stopped\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_train_stopped",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_trains_limit",
    "content": "Value: set_trains_limit\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_trains_limit",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_turret_ignore_unlisted",
    "content": "Value: set_turret_ignore_unlisted\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_turret_ignore_unlisted",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_use_inserter_filters",
    "content": "Value: set_use_inserter_filters\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_use_inserter_filters",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "set_vehicle_automatic_targeting_parameters",
    "content": "Value: set_vehicle_automatic_targeting_parameters\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "set_vehicle_automatic_targeting_parameters",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "setup_assembling_machine",
    "content": "Value: setup_assembling_machine\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "setup_assembling_machine",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "setup_blueprint",
    "content": "Value: setup_blueprint\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "setup_blueprint",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "setup_single_blueprint_record",
    "content": "Value: setup_single_blueprint_record\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "setup_single_blueprint_record",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "spawn_item",
    "content": "Value: spawn_item\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "spawn_item",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "spectator_change_surface",
    "content": "Value: spectator_change_surface\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "spectator_change_surface",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "stack_split",
    "content": "Value: stack_split\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "stack_split",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "stack_transfer",
    "content": "Value: stack_transfer\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "stack_transfer",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "start_repair",
    "content": "Value: start_repair\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "start_repair",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "start_research",
    "content": "Value: start_research\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "start_research",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "start_walking",
    "content": "Value: start_walking\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "start_walking",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "stop_drag_build",
    "content": "Value: stop_drag_build\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "stop_drag_build",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "swap_logistic_filter_items",
    "content": "Value: swap_logistic_filter_items\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "swap_logistic_filter_items",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "switch_connect_to_logistic_network",
    "content": "Value: switch_connect_to_logistic_network\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "switch_connect_to_logistic_network",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "switch_constant_combinator_state",
    "content": "Value: switch_constant_combinator_state\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "switch_constant_combinator_state",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "switch_inserter_filter_mode_state",
    "content": "Value: switch_inserter_filter_mode_state\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "switch_inserter_filter_mode_state",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "switch_loader_filter_mode",
    "content": "Value: switch_loader_filter_mode\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "switch_loader_filter_mode",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "switch_mining_drill_filter_mode_state",
    "content": "Value: switch_mining_drill_filter_mode_state\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "switch_mining_drill_filter_mode_state",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "switch_power_switch_state",
    "content": "Value: switch_power_switch_state\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "switch_power_switch_state",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "take_equipment",
    "content": "Value: take_equipment\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "take_equipment",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "toggle_artillery_auto_targeting",
    "content": "Value: toggle_artillery_auto_targeting\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "toggle_artillery_auto_targeting",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "toggle_deconstruction_item_entity_filter_mode",
    "content": "Value: toggle_deconstruction_item_entity_filter_mode\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "toggle_deconstruction_item_entity_filter_mode",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "toggle_deconstruction_item_tile_filter_mode",
    "content": "Value: toggle_deconstruction_item_tile_filter_mode\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "toggle_deconstruction_item_tile_filter_mode",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "toggle_driving",
    "content": "Value: toggle_driving\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "toggle_driving",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "toggle_enable_vehicle_logistics_while_moving",
    "content": "Value: toggle_enable_vehicle_logistics_while_moving\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "toggle_enable_vehicle_logistics_while_moving",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "toggle_entity_logistic_requests",
    "content": "Value: toggle_entity_logistic_requests\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "toggle_entity_logistic_requests",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "toggle_equipment_movement_bonus",
    "content": "Value: toggle_equipment_movement_bonus\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "toggle_equipment_movement_bonus",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "toggle_map_editor",
    "content": "Value: toggle_map_editor\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "toggle_map_editor",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "toggle_personal_logistic_requests",
    "content": "Value: toggle_personal_logistic_requests\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "toggle_personal_logistic_requests",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "toggle_personal_roboport",
    "content": "Value: toggle_personal_roboport\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "toggle_personal_roboport",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "toggle_selected_entity",
    "content": "Value: toggle_selected_entity\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "toggle_selected_entity",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "toggle_show_entity_info",
    "content": "Value: toggle_show_entity_info\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "toggle_show_entity_info",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "translate_string",
    "content": "Value: translate_string\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "translate_string",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "trash_not_requested_items",
    "content": "Value: trash_not_requested_items\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "trash_not_requested_items",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "undo",
    "content": "Value: undo\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "undo",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "upgrade",
    "content": "Value: upgrade\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "upgrade",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "upgrade_opened_blueprint_by_item",
    "content": "Value: upgrade_opened_blueprint_by_item\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "upgrade_opened_blueprint_by_item",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "upgrade_opened_blueprint_by_record",
    "content": "Value: upgrade_opened_blueprint_by_record\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "upgrade_opened_blueprint_by_record",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "use_item",
    "content": "Value: use_item\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "use_item",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "wire_dragging",
    "content": "Value: wire_dragging\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "wire_dragging",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "write_to_console",
    "content": "Value: write_to_console\nDescription: ",
    "metadata": {
      "define_name": "input_action",
      "value_name": "write_to_console",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "input_method",
    "content": "Define: input_method\nDescription: ",
    "metadata": {
      "define_name": "input_method",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "game_controller",
    "content": "Value: game_controller\nDescription: ",
    "metadata": {
      "define_name": "input_method",
      "value_name": "game_controller",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "keyboard_and_mouse",
    "content": "Value: keyboard_and_mouse\nDescription: ",
    "metadata": {
      "define_name": "input_method",
      "value_name": "keyboard_and_mouse",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "inventory",
    "content": "Define: inventory\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "artillery_turret_ammo",
    "content": "Value: artillery_turret_ammo\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "artillery_turret_ammo",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "artillery_wagon_ammo",
    "content": "Value: artillery_wagon_ammo\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "artillery_wagon_ammo",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "assembling_machine_dump",
    "content": "Value: assembling_machine_dump\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "assembling_machine_dump",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "assembling_machine_input",
    "content": "Value: assembling_machine_input\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "assembling_machine_input",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "assembling_machine_modules",
    "content": "Value: assembling_machine_modules\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "assembling_machine_modules",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "assembling_machine_output",
    "content": "Value: assembling_machine_output\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "assembling_machine_output",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "beacon_modules",
    "content": "Value: beacon_modules\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "beacon_modules",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "burnt_result",
    "content": "Value: burnt_result\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "burnt_result",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "car_ammo",
    "content": "Value: car_ammo\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "car_ammo",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "car_trash",
    "content": "Value: car_trash\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "car_trash",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "car_trunk",
    "content": "Value: car_trunk\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "car_trunk",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "cargo_landing_pad_main",
    "content": "Value: cargo_landing_pad_main\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "cargo_landing_pad_main",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "cargo_landing_pad_trash",
    "content": "Value: cargo_landing_pad_trash\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "cargo_landing_pad_trash",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "cargo_unit",
    "content": "Value: cargo_unit\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "cargo_unit",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "cargo_wagon",
    "content": "Value: cargo_wagon\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "cargo_wagon",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "character_ammo",
    "content": "Value: character_ammo\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "character_ammo",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "character_armor",
    "content": "Value: character_armor\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "character_armor",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "character_corpse",
    "content": "Value: character_corpse\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "character_corpse",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "character_guns",
    "content": "Value: character_guns\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "character_guns",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "character_main",
    "content": "Value: character_main\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "character_main",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "character_trash",
    "content": "Value: character_trash\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "character_trash",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "character_vehicle",
    "content": "Value: character_vehicle\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "character_vehicle",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "chest",
    "content": "Value: chest\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "chest",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "editor_ammo",
    "content": "Value: editor_ammo\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "editor_ammo",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "editor_armor",
    "content": "Value: editor_armor\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "editor_armor",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "editor_guns",
    "content": "Value: editor_guns\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "editor_guns",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "editor_main",
    "content": "Value: editor_main\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "editor_main",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "fuel",
    "content": "Value: fuel\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "fuel",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "furnace_modules",
    "content": "Value: furnace_modules\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "furnace_modules",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "furnace_result",
    "content": "Value: furnace_result\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "furnace_result",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "furnace_source",
    "content": "Value: furnace_source\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "furnace_source",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "god_main",
    "content": "Value: god_main\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "god_main",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "hub_main",
    "content": "Value: hub_main\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "hub_main",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "hub_trash",
    "content": "Value: hub_trash\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "hub_trash",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "item_main",
    "content": "Value: item_main\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "item_main",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "lab_input",
    "content": "Value: lab_input\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "lab_input",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "lab_modules",
    "content": "Value: lab_modules\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "lab_modules",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "logistic_container_trash",
    "content": "Value: logistic_container_trash\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "logistic_container_trash",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "mining_drill_modules",
    "content": "Value: mining_drill_modules\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "mining_drill_modules",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "roboport_material",
    "content": "Value: roboport_material\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "roboport_material",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "roboport_robot",
    "content": "Value: roboport_robot\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "roboport_robot",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "robot_cargo",
    "content": "Value: robot_cargo\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "robot_cargo",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "robot_repair",
    "content": "Value: robot_repair\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "robot_repair",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "rocket_silo_input",
    "content": "Value: rocket_silo_input\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "rocket_silo_input",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "rocket_silo_modules",
    "content": "Value: rocket_silo_modules\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "rocket_silo_modules",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "rocket_silo_output",
    "content": "Value: rocket_silo_output\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "rocket_silo_output",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "rocket_silo_rocket",
    "content": "Value: rocket_silo_rocket\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "rocket_silo_rocket",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "rocket_silo_trash",
    "content": "Value: rocket_silo_trash\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "rocket_silo_trash",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "spider_ammo",
    "content": "Value: spider_ammo\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "spider_ammo",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "spider_trash",
    "content": "Value: spider_trash\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "spider_trash",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "spider_trunk",
    "content": "Value: spider_trunk\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "spider_trunk",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "turret_ammo",
    "content": "Value: turret_ammo\nDescription: ",
    "metadata": {
      "define_name": "inventory",
      "value_name": "turret_ammo",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "logistic_member_index",
    "content": "Define: logistic_member_index\nDescription: ",
    "metadata": {
      "define_name": "logistic_member_index",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "character_provider",
    "content": "Value: character_provider\nDescription: ",
    "metadata": {
      "define_name": "logistic_member_index",
      "value_name": "character_provider",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "character_requester",
    "content": "Value: character_requester\nDescription: ",
    "metadata": {
      "define_name": "logistic_member_index",
      "value_name": "character_requester",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "character_storage",
    "content": "Value: character_storage\nDescription: ",
    "metadata": {
      "define_name": "logistic_member_index",
      "value_name": "character_storage",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "generic_on_off_behavior",
    "content": "Value: generic_on_off_behavior\nDescription: ",
    "metadata": {
      "define_name": "logistic_member_index",
      "value_name": "generic_on_off_behavior",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "logistic_container",
    "content": "Value: logistic_container\nDescription: ",
    "metadata": {
      "define_name": "logistic_member_index",
      "value_name": "logistic_container",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "spidertron_requester",
    "content": "Value: spidertron_requester\nDescription: ",
    "metadata": {
      "define_name": "logistic_member_index",
      "value_name": "spidertron_requester",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "vehicle_storage",
    "content": "Value: vehicle_storage\nDescription: ",
    "metadata": {
      "define_name": "logistic_member_index",
      "value_name": "vehicle_storage",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "logistic_mode",
    "content": "Define: logistic_mode\nDescription: ",
    "metadata": {
      "define_name": "logistic_mode",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "active_provider",
    "content": "Value: active_provider\nDescription: ",
    "metadata": {
      "define_name": "logistic_mode",
      "value_name": "active_provider",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "buffer",
    "content": "Value: buffer\nDescription: ",
    "metadata": {
      "define_name": "logistic_mode",
      "value_name": "buffer",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "none",
    "content": "Value: none\nDescription: ",
    "metadata": {
      "define_name": "logistic_mode",
      "value_name": "none",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "passive_provider",
    "content": "Value: passive_provider\nDescription: ",
    "metadata": {
      "define_name": "logistic_mode",
      "value_name": "passive_provider",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "requester",
    "content": "Value: requester\nDescription: ",
    "metadata": {
      "define_name": "logistic_mode",
      "value_name": "requester",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "storage",
    "content": "Value: storage\nDescription: ",
    "metadata": {
      "define_name": "logistic_mode",
      "value_name": "storage",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "logistic_section_type",
    "content": "Define: logistic_section_type\nDescription: ",
    "metadata": {
      "define_name": "logistic_section_type",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "circuit_controlled",
    "content": "Value: circuit_controlled\nDescription: ",
    "metadata": {
      "define_name": "logistic_section_type",
      "value_name": "circuit_controlled",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "manual",
    "content": "Value: manual\nDescription: ",
    "metadata": {
      "define_name": "logistic_section_type",
      "value_name": "manual",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "request_missing_materials_controlled",
    "content": "Value: request_missing_materials_controlled\nDescription: Used by space platform hubs.",
    "metadata": {
      "define_name": "logistic_section_type",
      "value_name": "request_missing_materials_controlled",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "transitional_request_controlled",
    "content": "Value: transitional_request_controlled\nDescription: Used by rocket silos.",
    "metadata": {
      "define_name": "logistic_section_type",
      "value_name": "transitional_request_controlled",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "mouse_button_type",
    "content": "Define: mouse_button_type\nDescription: ",
    "metadata": {
      "define_name": "mouse_button_type",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "left",
    "content": "Value: left\nDescription: ",
    "metadata": {
      "define_name": "mouse_button_type",
      "value_name": "left",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "middle",
    "content": "Value: middle\nDescription: ",
    "metadata": {
      "define_name": "mouse_button_type",
      "value_name": "middle",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "none",
    "content": "Value: none\nDescription: ",
    "metadata": {
      "define_name": "mouse_button_type",
      "value_name": "none",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "right",
    "content": "Value: right\nDescription: ",
    "metadata": {
      "define_name": "mouse_button_type",
      "value_name": "right",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "moving_state",
    "content": "Define: moving_state\nDescription: ",
    "metadata": {
      "define_name": "moving_state",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "adaptive",
    "content": "Value: adaptive\nDescription: ",
    "metadata": {
      "define_name": "moving_state",
      "value_name": "adaptive",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "moving",
    "content": "Value: moving\nDescription: ",
    "metadata": {
      "define_name": "moving_state",
      "value_name": "moving",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "stale",
    "content": "Value: stale\nDescription: ",
    "metadata": {
      "define_name": "moving_state",
      "value_name": "stale",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "stuck",
    "content": "Value: stuck\nDescription: ",
    "metadata": {
      "define_name": "moving_state",
      "value_name": "stuck",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "print_skip",
    "content": "Define: print_skip\nDescription: ",
    "metadata": {
      "define_name": "print_skip",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "if_redundant",
    "content": "Value: if_redundant\nDescription: Print will be skipped if same text was recently printed (within last 60 ticks). Used by most game messages.",
    "metadata": {
      "define_name": "print_skip",
      "value_name": "if_redundant",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "if_visible",
    "content": "Value: if_visible\nDescription: Print will be skipped if same text is still visible (printed within last 1152 ticks). Used by some notifications.",
    "metadata": {
      "define_name": "print_skip",
      "value_name": "if_visible",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "never",
    "content": "Value: never\nDescription: Print will not be skipped.",
    "metadata": {
      "define_name": "print_skip",
      "value_name": "never",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "print_sound",
    "content": "Define: print_sound\nDescription: ",
    "metadata": {
      "define_name": "print_sound",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "always",
    "content": "Value: always\nDescription: ",
    "metadata": {
      "define_name": "print_sound",
      "value_name": "always",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "never",
    "content": "Value: never\nDescription: ",
    "metadata": {
      "define_name": "print_sound",
      "value_name": "never",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "use_player_settings",
    "content": "Value: use_player_settings\nDescription: ",
    "metadata": {
      "define_name": "print_sound",
      "value_name": "use_player_settings",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "prototypes",
    "content": "Define: prototypes\nDescription: This define describes all top-level prototypes and their associated subtypes. It is organized as a lookup table, meaning the values of all the defines is `0`. As an example, `defines.prototypes['entity']` looks like `{furnace=0, inserter=0, container=0, ...}`.",
    "metadata": {
      "define_name": "prototypes",
      "define_type": null
    }
  },
  {
    "type": "define",
    "name": "rail_connection_direction",
    "content": "Define: rail_connection_direction\nDescription: ",
    "metadata": {
      "define_name": "rail_connection_direction",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "left",
    "content": "Value: left\nDescription: ",
    "metadata": {
      "define_name": "rail_connection_direction",
      "value_name": "left",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "none",
    "content": "Value: none\nDescription: ",
    "metadata": {
      "define_name": "rail_connection_direction",
      "value_name": "none",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "right",
    "content": "Value: right\nDescription: ",
    "metadata": {
      "define_name": "rail_connection_direction",
      "value_name": "right",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "straight",
    "content": "Value: straight\nDescription: ",
    "metadata": {
      "define_name": "rail_connection_direction",
      "value_name": "straight",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "rail_direction",
    "content": "Define: rail_direction\nDescription: ",
    "metadata": {
      "define_name": "rail_direction",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "back",
    "content": "Value: back\nDescription: ",
    "metadata": {
      "define_name": "rail_direction",
      "value_name": "back",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "front",
    "content": "Value: front\nDescription: ",
    "metadata": {
      "define_name": "rail_direction",
      "value_name": "front",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "rail_layer",
    "content": "Define: rail_layer\nDescription: ",
    "metadata": {
      "define_name": "rail_layer",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "elevated",
    "content": "Value: elevated\nDescription: ",
    "metadata": {
      "define_name": "rail_layer",
      "value_name": "elevated",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "ground",
    "content": "Value: ground\nDescription: ",
    "metadata": {
      "define_name": "rail_layer",
      "value_name": "ground",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "relative_gui_position",
    "content": "Define: relative_gui_position\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_position",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "bottom",
    "content": "Value: bottom\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_position",
      "value_name": "bottom",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "left",
    "content": "Value: left\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_position",
      "value_name": "left",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "right",
    "content": "Value: right\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_position",
      "value_name": "right",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "top",
    "content": "Value: top\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_position",
      "value_name": "top",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "relative_gui_type",
    "content": "Define: relative_gui_type\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "accumulator_gui",
    "content": "Value: accumulator_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "accumulator_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "achievement_gui",
    "content": "Value: achievement_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "achievement_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "additional_entity_info_gui",
    "content": "Value: additional_entity_info_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "additional_entity_info_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "admin_gui",
    "content": "Value: admin_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "admin_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "agriculture_tower_gui",
    "content": "Value: agriculture_tower_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "agriculture_tower_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "arithmetic_combinator_gui",
    "content": "Value: arithmetic_combinator_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "arithmetic_combinator_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "armor_gui",
    "content": "Value: armor_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "armor_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "assembling_machine_gui",
    "content": "Value: assembling_machine_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "assembling_machine_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "assembling_machine_select_recipe_gui",
    "content": "Value: assembling_machine_select_recipe_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "assembling_machine_select_recipe_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "asteroid_collector_gui",
    "content": "Value: asteroid_collector_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "asteroid_collector_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "beacon_gui",
    "content": "Value: beacon_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "beacon_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "blueprint_book_gui",
    "content": "Value: blueprint_book_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "blueprint_book_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "blueprint_library_gui",
    "content": "Value: blueprint_library_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "blueprint_library_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "blueprint_setup_gui",
    "content": "Value: blueprint_setup_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "blueprint_setup_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "bonus_gui",
    "content": "Value: bonus_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "bonus_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "burner_equipment_gui",
    "content": "Value: burner_equipment_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "burner_equipment_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "car_gui",
    "content": "Value: car_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "car_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "cargo_landing_pad_gui",
    "content": "Value: cargo_landing_pad_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "cargo_landing_pad_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "constant_combinator_gui",
    "content": "Value: constant_combinator_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "constant_combinator_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "container_gui",
    "content": "Value: container_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "container_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "controller_gui",
    "content": "Value: controller_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "controller_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "decider_combinator_gui",
    "content": "Value: decider_combinator_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "decider_combinator_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "deconstruction_item_gui",
    "content": "Value: deconstruction_item_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "deconstruction_item_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "display_panel_gui",
    "content": "Value: display_panel_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "display_panel_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "electric_energy_interface_gui",
    "content": "Value: electric_energy_interface_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "electric_energy_interface_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "electric_network_gui",
    "content": "Value: electric_network_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "electric_network_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "entity_variations_gui",
    "content": "Value: entity_variations_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "entity_variations_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "entity_with_energy_source_gui",
    "content": "Value: entity_with_energy_source_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "entity_with_energy_source_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "equipment_grid_gui",
    "content": "Value: equipment_grid_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "equipment_grid_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "furnace_gui",
    "content": "Value: furnace_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "furnace_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "generic_on_off_entity_gui",
    "content": "Value: generic_on_off_entity_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "generic_on_off_entity_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "ghost_picker_gui",
    "content": "Value: ghost_picker_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "ghost_picker_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "global_electric_network_gui",
    "content": "Value: global_electric_network_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "global_electric_network_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "heat_interface_gui",
    "content": "Value: heat_interface_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "heat_interface_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "infinity_pipe_gui",
    "content": "Value: infinity_pipe_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "infinity_pipe_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "inserter_gui",
    "content": "Value: inserter_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "inserter_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "item_with_inventory_gui",
    "content": "Value: item_with_inventory_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "item_with_inventory_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "lab_gui",
    "content": "Value: lab_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "lab_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "lamp_gui",
    "content": "Value: lamp_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "lamp_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "linked_container_gui",
    "content": "Value: linked_container_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "linked_container_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "loader_gui",
    "content": "Value: loader_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "loader_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "logistic_gui",
    "content": "Value: logistic_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "logistic_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "market_gui",
    "content": "Value: market_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "market_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "mining_drill_gui",
    "content": "Value: mining_drill_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "mining_drill_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "other_player_gui",
    "content": "Value: other_player_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "other_player_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "permissions_gui",
    "content": "Value: permissions_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "permissions_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "pick_stop_gui",
    "content": "Value: pick_stop_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "pick_stop_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "pipe_gui",
    "content": "Value: pipe_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "pipe_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "power_switch_gui",
    "content": "Value: power_switch_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "power_switch_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "production_gui",
    "content": "Value: production_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "production_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "programmable_speaker_gui",
    "content": "Value: programmable_speaker_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "programmable_speaker_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "pump_gui",
    "content": "Value: pump_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "pump_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "rail_signal_base_gui",
    "content": "Value: rail_signal_base_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "rail_signal_base_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "reactor_gui",
    "content": "Value: reactor_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "reactor_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "resource_entity_gui",
    "content": "Value: resource_entity_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "resource_entity_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "roboport_gui",
    "content": "Value: roboport_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "roboport_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "rocket_silo_gui",
    "content": "Value: rocket_silo_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "rocket_silo_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "script_inventory_gui",
    "content": "Value: script_inventory_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "script_inventory_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "selector_combinator_gui",
    "content": "Value: selector_combinator_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "selector_combinator_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "server_config_gui",
    "content": "Value: server_config_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "server_config_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "space_platform_hub_gui",
    "content": "Value: space_platform_hub_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "space_platform_hub_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "spider_vehicle_gui",
    "content": "Value: spider_vehicle_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "spider_vehicle_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "splitter_gui",
    "content": "Value: splitter_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "splitter_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "standalone_character_gui",
    "content": "Value: standalone_character_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "standalone_character_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "storage_tank_gui",
    "content": "Value: storage_tank_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "storage_tank_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "tile_variations_gui",
    "content": "Value: tile_variations_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "tile_variations_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "tips_and_tricks_gui",
    "content": "Value: tips_and_tricks_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "tips_and_tricks_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "train_gui",
    "content": "Value: train_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "train_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "train_stop_gui",
    "content": "Value: train_stop_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "train_stop_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "trains_gui",
    "content": "Value: trains_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "trains_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "transport_belt_gui",
    "content": "Value: transport_belt_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "transport_belt_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "turret_gui",
    "content": "Value: turret_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "turret_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "upgrade_item_gui",
    "content": "Value: upgrade_item_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "upgrade_item_gui",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "wall_gui",
    "content": "Value: wall_gui\nDescription: ",
    "metadata": {
      "define_name": "relative_gui_type",
      "value_name": "wall_gui",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "render_mode",
    "content": "Define: render_mode\nDescription: ",
    "metadata": {
      "define_name": "render_mode",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "chart",
    "content": "Value: chart\nDescription: ",
    "metadata": {
      "define_name": "render_mode",
      "value_name": "chart",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "chart_zoomed_in",
    "content": "Value: chart_zoomed_in\nDescription: ",
    "metadata": {
      "define_name": "render_mode",
      "value_name": "chart_zoomed_in",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "game",
    "content": "Value: game\nDescription: ",
    "metadata": {
      "define_name": "render_mode",
      "value_name": "game",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "rich_text_setting",
    "content": "Define: rich_text_setting\nDescription: ",
    "metadata": {
      "define_name": "rich_text_setting",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "disabled",
    "content": "Value: disabled\nDescription: ",
    "metadata": {
      "define_name": "rich_text_setting",
      "value_name": "disabled",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "enabled",
    "content": "Value: enabled\nDescription: ",
    "metadata": {
      "define_name": "rich_text_setting",
      "value_name": "enabled",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "highlight",
    "content": "Value: highlight\nDescription: ",
    "metadata": {
      "define_name": "rich_text_setting",
      "value_name": "highlight",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "riding",
    "content": "Define: riding\nDescription: ",
    "metadata": {
      "define_name": "riding",
      "define_type": null
    }
  },
  {
    "type": "define",
    "name": "robot_order_type",
    "content": "Define: robot_order_type\nDescription: ",
    "metadata": {
      "define_name": "robot_order_type",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "construct",
    "content": "Value: construct\nDescription: Construct a ghost.",
    "metadata": {
      "define_name": "robot_order_type",
      "value_name": "construct",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "deconstruct",
    "content": "Value: deconstruct\nDescription: Deconstruct an entity.",
    "metadata": {
      "define_name": "robot_order_type",
      "value_name": "deconstruct",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "deliver",
    "content": "Value: deliver\nDescription: Deliver an item.",
    "metadata": {
      "define_name": "robot_order_type",
      "value_name": "deliver",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "deliver_items",
    "content": "Value: deliver_items\nDescription: Deliver specific items to an entity (item request proxy).",
    "metadata": {
      "define_name": "robot_order_type",
      "value_name": "deliver_items",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "explode_cliff",
    "content": "Value: explode_cliff\nDescription: Explode a cliff.",
    "metadata": {
      "define_name": "robot_order_type",
      "value_name": "explode_cliff",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "pickup",
    "content": "Value: pickup\nDescription: Pickup an item.",
    "metadata": {
      "define_name": "robot_order_type",
      "value_name": "pickup",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "pickup_items",
    "content": "Value: pickup_items\nDescription: Pickup items from an entity (item request proxy).",
    "metadata": {
      "define_name": "robot_order_type",
      "value_name": "pickup_items",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "repair",
    "content": "Value: repair\nDescription: Repair an entity.",
    "metadata": {
      "define_name": "robot_order_type",
      "value_name": "repair",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "upgrade",
    "content": "Value: upgrade\nDescription: Upgrade an entity.",
    "metadata": {
      "define_name": "robot_order_type",
      "value_name": "upgrade",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "rocket_silo_status",
    "content": "Define: rocket_silo_status\nDescription: The various parts of the launch sequence of the rocket silo.",
    "metadata": {
      "define_name": "rocket_silo_status",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "arms_advance",
    "content": "Value: arms_advance\nDescription: The next state is `rocket_ready` or if the rocket is destroyed in this state then the next state will be `lights_blinking_close`. The rocket is getting prepared for launch.",
    "metadata": {
      "define_name": "rocket_silo_status",
      "value_name": "arms_advance",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "arms_retract",
    "content": "Value: arms_retract\nDescription: The next state is `rocket_flying` or if the rocket is destroyed in this state then the next state will be `lights_blinking_close`. The rocket is getting launched.",
    "metadata": {
      "define_name": "rocket_silo_status",
      "value_name": "arms_retract",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "building_rocket",
    "content": "Value: building_rocket\nDescription: The rocket silo is crafting rocket parts. When there are enough rocket parts, the silo will switch into the `create_rocket` state.",
    "metadata": {
      "define_name": "rocket_silo_status",
      "value_name": "building_rocket",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "create_rocket",
    "content": "Value: create_rocket\nDescription: The next state is `lights_blinking_open`. The rocket silo rocket entity gets created.",
    "metadata": {
      "define_name": "rocket_silo_status",
      "value_name": "create_rocket",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "doors_closing",
    "content": "Value: doors_closing\nDescription: The next state is `building_rocket`.",
    "metadata": {
      "define_name": "rocket_silo_status",
      "value_name": "doors_closing",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "doors_opened",
    "content": "Value: doors_opened\nDescription: The next state is `rocket_rising` or if the rocket is destroyed in this state then the next state will be `lights_blinking_close`. The rocket is getting prepared for launch.",
    "metadata": {
      "define_name": "rocket_silo_status",
      "value_name": "doors_opened",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "doors_opening",
    "content": "Value: doors_opening\nDescription: The next state is `doors_opened`. The rocket is getting prepared for launch.",
    "metadata": {
      "define_name": "rocket_silo_status",
      "value_name": "doors_opening",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "engine_starting",
    "content": "Value: engine_starting\nDescription: The next state is `arms_retract` or if the rocket is destroyed in this state then the next state will be `lights_blinking_close`. The rocket is getting launched.",
    "metadata": {
      "define_name": "rocket_silo_status",
      "value_name": "engine_starting",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "launch_started",
    "content": "Value: launch_started\nDescription: The next state is `engine_starting` or if the rocket is destroyed in this state then the next state will be `lights_blinking_close`. The rocket is getting launched.",
    "metadata": {
      "define_name": "rocket_silo_status",
      "value_name": "launch_started",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "launch_starting",
    "content": "Value: launch_starting\nDescription: The next state is `launch_started`.",
    "metadata": {
      "define_name": "rocket_silo_status",
      "value_name": "launch_starting",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "lights_blinking_close",
    "content": "Value: lights_blinking_close\nDescription: The next state is `doors_closing`.",
    "metadata": {
      "define_name": "rocket_silo_status",
      "value_name": "lights_blinking_close",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "lights_blinking_open",
    "content": "Value: lights_blinking_open\nDescription: The next state is `doors_opening`. The rocket is getting prepared for launch.",
    "metadata": {
      "define_name": "rocket_silo_status",
      "value_name": "lights_blinking_open",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "rocket_flying",
    "content": "Value: rocket_flying\nDescription: The next state is `lights_blinking_close`. The rocket is getting launched.",
    "metadata": {
      "define_name": "rocket_silo_status",
      "value_name": "rocket_flying",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "rocket_ready",
    "content": "Value: rocket_ready\nDescription: The rocket launch can be started by the player. When the launch is started, the silo switches into the `launch_starting` state.",
    "metadata": {
      "define_name": "rocket_silo_status",
      "value_name": "rocket_ready",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "rocket_rising",
    "content": "Value: rocket_rising\nDescription: The next state is `arms_advance` or if the rocket is destroyed in this state then the next state will be `lights_blinking_close`. The rocket is getting prepared for launch.",
    "metadata": {
      "define_name": "rocket_silo_status",
      "value_name": "rocket_rising",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "selection_mode",
    "content": "Define: selection_mode\nDescription: ",
    "metadata": {
      "define_name": "selection_mode",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "alt_reverse_select",
    "content": "Value: alt_reverse_select\nDescription: ",
    "metadata": {
      "define_name": "selection_mode",
      "value_name": "alt_reverse_select",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "alt_select",
    "content": "Value: alt_select\nDescription: ",
    "metadata": {
      "define_name": "selection_mode",
      "value_name": "alt_select",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "reverse_select",
    "content": "Value: reverse_select\nDescription: ",
    "metadata": {
      "define_name": "selection_mode",
      "value_name": "reverse_select",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "select",
    "content": "Value: select\nDescription: ",
    "metadata": {
      "define_name": "selection_mode",
      "value_name": "select",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "shooting",
    "content": "Define: shooting\nDescription: ",
    "metadata": {
      "define_name": "shooting",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "not_shooting",
    "content": "Value: not_shooting\nDescription: ",
    "metadata": {
      "define_name": "shooting",
      "value_name": "not_shooting",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "shooting_enemies",
    "content": "Value: shooting_enemies\nDescription: ",
    "metadata": {
      "define_name": "shooting",
      "value_name": "shooting_enemies",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "shooting_selected",
    "content": "Value: shooting_selected\nDescription: ",
    "metadata": {
      "define_name": "shooting",
      "value_name": "shooting_selected",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "signal_state",
    "content": "Define: signal_state\nDescription: State of an ordinary rail signal.",
    "metadata": {
      "define_name": "signal_state",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "closed",
    "content": "Value: closed\nDescription: Red.",
    "metadata": {
      "define_name": "signal_state",
      "value_name": "closed",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "open",
    "content": "Value: open\nDescription: Green.",
    "metadata": {
      "define_name": "signal_state",
      "value_name": "open",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "reserved",
    "content": "Value: reserved\nDescription: Orange.",
    "metadata": {
      "define_name": "signal_state",
      "value_name": "reserved",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "reserved_by_circuit_network",
    "content": "Value: reserved_by_circuit_network\nDescription: Red - From circuit network.",
    "metadata": {
      "define_name": "signal_state",
      "value_name": "reserved_by_circuit_network",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "space_platform_state",
    "content": "Define: space_platform_state\nDescription: ",
    "metadata": {
      "define_name": "space_platform_state",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "no_path",
    "content": "Value: no_path\nDescription: Doesn't have anywhere to go.",
    "metadata": {
      "define_name": "space_platform_state",
      "value_name": "no_path",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "no_schedule",
    "content": "Value: no_schedule\nDescription: Doesn't have any stations in schedule.",
    "metadata": {
      "define_name": "space_platform_state",
      "value_name": "no_schedule",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_the_path",
    "content": "Value: on_the_path\nDescription: Following the path.",
    "metadata": {
      "define_name": "space_platform_state",
      "value_name": "on_the_path",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "paused",
    "content": "Value: paused\nDescription: Paused.",
    "metadata": {
      "define_name": "space_platform_state",
      "value_name": "paused",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "starter_pack_on_the_way",
    "content": "Value: starter_pack_on_the_way\nDescription: Starter pack is on the way.",
    "metadata": {
      "define_name": "space_platform_state",
      "value_name": "starter_pack_on_the_way",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "starter_pack_requested",
    "content": "Value: starter_pack_requested\nDescription: Starter pack was requested from the logistics system.",
    "metadata": {
      "define_name": "space_platform_state",
      "value_name": "starter_pack_requested",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "waiting_at_station",
    "content": "Value: waiting_at_station\nDescription: Waiting at a station.",
    "metadata": {
      "define_name": "space_platform_state",
      "value_name": "waiting_at_station",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "waiting_for_departure",
    "content": "Value: waiting_for_departure\nDescription: Platform is ready to leave this planet and does not accept deliveries.",
    "metadata": {
      "define_name": "space_platform_state",
      "value_name": "waiting_for_departure",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "waiting_for_starter_pack",
    "content": "Value: waiting_for_starter_pack\nDescription: Waiting for a starter pack.",
    "metadata": {
      "define_name": "space_platform_state",
      "value_name": "waiting_for_starter_pack",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "target_type",
    "content": "Define: target_type\nDescription: ",
    "metadata": {
      "define_name": "target_type",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "commandable",
    "content": "Value: commandable\nDescription: ",
    "metadata": {
      "define_name": "target_type",
      "value_name": "commandable",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "custom_chart_tag",
    "content": "Value: custom_chart_tag\nDescription: ",
    "metadata": {
      "define_name": "target_type",
      "value_name": "custom_chart_tag",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "entity",
    "content": "Value: entity\nDescription: ",
    "metadata": {
      "define_name": "target_type",
      "value_name": "entity",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "equipment",
    "content": "Value: equipment\nDescription: ",
    "metadata": {
      "define_name": "target_type",
      "value_name": "equipment",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "equipment_grid",
    "content": "Value: equipment_grid\nDescription: ",
    "metadata": {
      "define_name": "target_type",
      "value_name": "equipment_grid",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "gui_element",
    "content": "Value: gui_element\nDescription: ",
    "metadata": {
      "define_name": "target_type",
      "value_name": "gui_element",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "item",
    "content": "Value: item\nDescription: ",
    "metadata": {
      "define_name": "target_type",
      "value_name": "item",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "logistic_cell",
    "content": "Value: logistic_cell\nDescription: ",
    "metadata": {
      "define_name": "target_type",
      "value_name": "logistic_cell",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "logistic_network",
    "content": "Value: logistic_network\nDescription: ",
    "metadata": {
      "define_name": "target_type",
      "value_name": "logistic_network",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "logistic_section",
    "content": "Value: logistic_section\nDescription: ",
    "metadata": {
      "define_name": "target_type",
      "value_name": "logistic_section",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "permission_group",
    "content": "Value: permission_group\nDescription: ",
    "metadata": {
      "define_name": "target_type",
      "value_name": "permission_group",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "planet",
    "content": "Value: planet\nDescription: ",
    "metadata": {
      "define_name": "target_type",
      "value_name": "planet",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "player",
    "content": "Value: player\nDescription: ",
    "metadata": {
      "define_name": "target_type",
      "value_name": "player",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "rail_path",
    "content": "Value: rail_path\nDescription: ",
    "metadata": {
      "define_name": "target_type",
      "value_name": "rail_path",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "render_object",
    "content": "Value: render_object\nDescription: ",
    "metadata": {
      "define_name": "target_type",
      "value_name": "render_object",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "space_platform",
    "content": "Value: space_platform\nDescription: ",
    "metadata": {
      "define_name": "target_type",
      "value_name": "space_platform",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "surface",
    "content": "Value: surface\nDescription: ",
    "metadata": {
      "define_name": "target_type",
      "value_name": "surface",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "train",
    "content": "Value: train\nDescription: ",
    "metadata": {
      "define_name": "target_type",
      "value_name": "train",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "train_state",
    "content": "Define: train_state\nDescription: ",
    "metadata": {
      "define_name": "train_state",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "arrive_signal",
    "content": "Value: arrive_signal\nDescription: Braking before a rail signal.",
    "metadata": {
      "define_name": "train_state",
      "value_name": "arrive_signal",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "arrive_station",
    "content": "Value: arrive_station\nDescription: Braking before a station.",
    "metadata": {
      "define_name": "train_state",
      "value_name": "arrive_station",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "destination_full",
    "content": "Value: destination_full\nDescription: Same as no_path but all candidate train stops are full",
    "metadata": {
      "define_name": "train_state",
      "value_name": "destination_full",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "manual_control",
    "content": "Value: manual_control\nDescription: Can move if user explicitly sits in and rides the train.",
    "metadata": {
      "define_name": "train_state",
      "value_name": "manual_control",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "manual_control_stop",
    "content": "Value: manual_control_stop\nDescription: Switched to manual control and has to stop.",
    "metadata": {
      "define_name": "train_state",
      "value_name": "manual_control_stop",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "no_path",
    "content": "Value: no_path\nDescription: Has no path and is stopped.",
    "metadata": {
      "define_name": "train_state",
      "value_name": "no_path",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "no_schedule",
    "content": "Value: no_schedule\nDescription: Doesn't have anywhere to go.",
    "metadata": {
      "define_name": "train_state",
      "value_name": "no_schedule",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "on_the_path",
    "content": "Value: on_the_path\nDescription: Normal state -- following the path.",
    "metadata": {
      "define_name": "train_state",
      "value_name": "on_the_path",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "wait_signal",
    "content": "Value: wait_signal\nDescription: Waiting at a signal.",
    "metadata": {
      "define_name": "train_state",
      "value_name": "wait_signal",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "wait_station",
    "content": "Value: wait_station\nDescription: Waiting at a station.",
    "metadata": {
      "define_name": "train_state",
      "value_name": "wait_station",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "transport_line",
    "content": "Define: transport_line\nDescription: ",
    "metadata": {
      "define_name": "transport_line",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "left_line",
    "content": "Value: left_line\nDescription: ",
    "metadata": {
      "define_name": "transport_line",
      "value_name": "left_line",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "left_split_line",
    "content": "Value: left_split_line\nDescription: ",
    "metadata": {
      "define_name": "transport_line",
      "value_name": "left_split_line",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "left_underground_line",
    "content": "Value: left_underground_line\nDescription: ",
    "metadata": {
      "define_name": "transport_line",
      "value_name": "left_underground_line",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "right_line",
    "content": "Value: right_line\nDescription: ",
    "metadata": {
      "define_name": "transport_line",
      "value_name": "right_line",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "right_split_line",
    "content": "Value: right_split_line\nDescription: ",
    "metadata": {
      "define_name": "transport_line",
      "value_name": "right_split_line",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "right_underground_line",
    "content": "Value: right_underground_line\nDescription: ",
    "metadata": {
      "define_name": "transport_line",
      "value_name": "right_underground_line",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "secondary_left_line",
    "content": "Value: secondary_left_line\nDescription: ",
    "metadata": {
      "define_name": "transport_line",
      "value_name": "secondary_left_line",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "secondary_left_split_line",
    "content": "Value: secondary_left_split_line\nDescription: ",
    "metadata": {
      "define_name": "transport_line",
      "value_name": "secondary_left_split_line",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "secondary_right_line",
    "content": "Value: secondary_right_line\nDescription: ",
    "metadata": {
      "define_name": "transport_line",
      "value_name": "secondary_right_line",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "secondary_right_split_line",
    "content": "Value: secondary_right_split_line\nDescription: ",
    "metadata": {
      "define_name": "transport_line",
      "value_name": "secondary_right_split_line",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "wire_connector_id",
    "content": "Define: wire_connector_id\nDescription: ",
    "metadata": {
      "define_name": "wire_connector_id",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "circuit_green",
    "content": "Value: circuit_green\nDescription: ",
    "metadata": {
      "define_name": "wire_connector_id",
      "value_name": "circuit_green",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "circuit_red",
    "content": "Value: circuit_red\nDescription: ",
    "metadata": {
      "define_name": "wire_connector_id",
      "value_name": "circuit_red",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "combinator_input_green",
    "content": "Value: combinator_input_green\nDescription: ",
    "metadata": {
      "define_name": "wire_connector_id",
      "value_name": "combinator_input_green",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "combinator_input_red",
    "content": "Value: combinator_input_red\nDescription: ",
    "metadata": {
      "define_name": "wire_connector_id",
      "value_name": "combinator_input_red",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "combinator_output_green",
    "content": "Value: combinator_output_green\nDescription: ",
    "metadata": {
      "define_name": "wire_connector_id",
      "value_name": "combinator_output_green",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "combinator_output_red",
    "content": "Value: combinator_output_red\nDescription: ",
    "metadata": {
      "define_name": "wire_connector_id",
      "value_name": "combinator_output_red",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "pole_copper",
    "content": "Value: pole_copper\nDescription: ",
    "metadata": {
      "define_name": "wire_connector_id",
      "value_name": "pole_copper",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "power_switch_left_copper",
    "content": "Value: power_switch_left_copper\nDescription: ",
    "metadata": {
      "define_name": "wire_connector_id",
      "value_name": "power_switch_left_copper",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "power_switch_right_copper",
    "content": "Value: power_switch_right_copper\nDescription: ",
    "metadata": {
      "define_name": "wire_connector_id",
      "value_name": "power_switch_right_copper",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "wire_origin",
    "content": "Define: wire_origin\nDescription: ",
    "metadata": {
      "define_name": "wire_origin",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "player",
    "content": "Value: player\nDescription: ",
    "metadata": {
      "define_name": "wire_origin",
      "value_name": "player",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "radars",
    "content": "Value: radars\nDescription: ",
    "metadata": {
      "define_name": "wire_origin",
      "value_name": "radars",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "script",
    "content": "Value: script\nDescription: ",
    "metadata": {
      "define_name": "wire_origin",
      "value_name": "script",
      "value_type": null
    }
  },
  {
    "type": "define",
    "name": "wire_type",
    "content": "Define: wire_type\nDescription: ",
    "metadata": {
      "define_name": "wire_type",
      "define_type": null
    }
  },
  {
    "type": "value",
    "name": "copper",
    "content": "Value: copper\nDescription: ",
    "metadata": {
      "define_name": "wire_type",
      "value_name": "copper",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "green",
    "content": "Value: green\nDescription: ",
    "metadata": {
      "define_name": "wire_type",
      "value_name": "green",
      "value_type": null
    }
  },
  {
    "type": "value",
    "name": "red",
    "content": "Value: red\nDescription: ",
    "metadata": {
      "define_name": "wire_type",
      "value_name": "red",
      "value_type": null
    }
  },
  {
    "type": "wiki",
    "name": "Wooden chest",
    "content": "Recipe | Time 0.5+Wood 2 → Wooden_chest 1 | Total raw | Time 0.5+Wood 2 | Storage size Quality 16 Quality 20 Quality 25 Quality 30 Quality 40 Quality 16 Quality 20 Quality 25 Quality 30 Quality 40 | Stack size 50 | Dimensions 1×1 | Mining time 0.1 | Prototype type container | Internal name wooden-chest | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Wooden chests are the first type of chest available to the player at the start of the game. They are, like any other"
  },
  {
    "type": "wiki",
    "name": "Wooden chest",
    "content": "the player at the start of the game. They are, like any other means of storage, used for storing items at a fixed position and can be connected to the circuit network to provide their contents as a signal."
  },
  {
    "type": "wiki",
    "name": "Iron chest",
    "content": "Recipe | Time 0.5+Iron_plate 8 → Iron_chest 1 | Total raw | Time 0.5+Iron_plate 8 | Storage size Quality 32 Quality 41 Quality 51 Quality 60 Quality 80 Quality 32 Quality 41 Quality 51 Quality 60 Quality 80 | Resistances Fire: 0/80%Impact: 0/30% | Stack size 50 | Dimensions 1×1 | Mining time 0.2 | Prototype type container | Internal name iron-chest | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Space_AgeRecycling results | Iron_plate 2 | Iron chests are available"
  },
  {
    "type": "wiki",
    "name": "Iron chest",
    "content": "results | Iron_plate 2 | Iron chests are available to the player at the start of the game. They are, like any other means of storage, used for storing items at a fixed position. Though they cost iron plates to produce, they can store twice as many items as wooden chests , and they have twice the health. Iron chests, like other chests, can be connected to the circuit network to provide their contents as a signal."
  },
  {
    "type": "wiki",
    "name": "Steel chest",
    "content": "Recipe | Time 0.5+Steel_plate 8 → Steel_chest 1 | Total raw | Time 0.5+Steel_plate 8 | Storage size Quality 48 Quality 62 Quality 76 Quality 91 Quality 120 Quality 48 Quality 62 Quality 76 Quality 91 Quality 120 | Resistances Fire: 0/90%Impact: 0/60% | Stack size 50 | Dimensions 1×1 | Mining time 0.2 | Prototype type container | Internal name steel-chest | Required technologies | Steel_processing_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by"
  },
  {
    "type": "wiki",
    "name": "Steel chest",
    "content": "Assembling_machine_3 Crafting | Consumed by | Active_provider_chestBuffer_chestPassive_provider_chestRequester_chestStorage_chest | Steel chests are the largest of three types of chests used for basic item storage. Steel processing must be researched before they can be built. Steel chests, like other chests, can be connected to the circuit network to provide their contents as a signal. A steel chest can contain 48 stacks of items. This is 50% more than an iron chest and 3 times the capacity of a wooden"
  },
  {
    "type": "wiki",
    "name": "Steel chest",
    "content": "more than an iron chest and 3 times the capacity of a wooden chest . Steel chests are used to create all logistic chests, which all share the steel chest's 48-stack capacity."
  },
  {
    "type": "wiki",
    "name": "Storage tank",
    "content": "Recipe | Time 3+Iron_plate 20+Steel_plate 5 → Storage_tank 1 | Total raw | Time 3+Iron_plate 20+Steel_plate 5 | Fluid storage volume 25000 | Stack size 50 | Dimensions 3×3 | Mining time 0.5 | Prototype type storage-tank | Internal name storage-tank | Required technologies | Fluid_handling_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Fluid_wagon | This article is about the liquid storage container. For the armored combat vehicle, see Tank"
  },
  {
    "type": "wiki",
    "name": "Storage tank",
    "content": "storage container. For the armored combat vehicle, see Tank . The storage tank is a building that can store up to 25,000 units of a fluid . It is a passive storage — it has no input and no output, essentially acting as volume increase of the pipe segment it is connected to. Contents 1 Usage 2 Usage as \"Energy-tank\" 2.1 Calculations 3 Gallery 4 History 5 See also Usage The storage tank is often used to store raw materials and excess products from oil processing , allowing a refinery to run without"
  },
  {
    "type": "wiki",
    "name": "Storage tank",
    "content": "from oil processing , allowing a refinery to run without interruptions. It can be used as short term buffer to keep up throughput for high volume recipes such as acid neutralisation and steam condensation to avoid the machines getting full or empty. It can also be connected to the circuit network , sending the fluid contents as a signal to the network. Storage tanks are part of the fluid segment they are connected to, so they are always filled to the same percentage of capacity as the pipes that lead to"
  },
  {
    "type": "wiki",
    "name": "Storage tank",
    "content": "to the same percentage of capacity as the pipes that lead to it. As there is no real flow in the pipes, a storage tank is always filled evenly with the segment it is connected to, regardless of how far away an inflow is. If there are multiple storage tanks connected to the same pipe segment, they all have exactly the same fill state. The fluid inside the storage tank can be destroyed by flushing the storage tank or the whole fluid system in the GUI, or by mining and rebuilding the storage tank. The storage"
  },
  {
    "type": "wiki",
    "name": "Storage tank",
    "content": "GUI, or by mining and rebuilding the storage tank. The storage tank can be emptied without destroying the contained fluid by draining it with a pump . Mining a storage tank will send its contents to the next nearest storage tanks, if the fluids match. Usage as \"Energy-tank\" See also: Steam tanks as power storage Storage tanks can also be used as a replacement for accumulators . If steam consumption by steam engines or turbines changes a lot over a daily cycle (for example due to solar panels or laser"
  },
  {
    "type": "wiki",
    "name": "Storage tank",
    "content": "over a daily cycle (for example due to solar panels or laser turrets ), storage tanks can be filled with steam during low power usage and then emptied during heavy load. A storage tank filled with heat exchanger 500°C steam stores around 2.4GJ; a storage tank filled with boiler 165°C steam stores 750MJ. Calculations 1 Storage tank can store 25,000 units of 500ºC steam. 1 Steam turbine can output 5,820kW = 5,820kJ/s using 60 units of 500ºC steam/s. 1 Storage tank can keep 1 steam turbine working at full"
  },
  {
    "type": "wiki",
    "name": "Storage tank",
    "content": "1 Storage tank can keep 1 steam turbine working at full capacity for 25,000 ∕ 60 ≈ 416.6667s A Storage tank can store up to 25,000 ∕ 60 × 5,820 = 2,425,000kJ using 500ºC steam. 1 Storage tank can store 25,000 units of 165ºC steam. 1 Steam engine can output 900kW = 900kJ/s using 30 units of 165ºC steam/s. 1 Storage tank can keep 1 steam engine working for 25,000 ∕ 30 ≈ 833.3333s A Storage tank can store up to 25,000 ∕ 30 × 900 = 750,000kJ using 165ºC steam."
  },
  {
    "type": "wiki",
    "name": "Transport belt",
    "content": "Recipe | Time 0.5+Iron_gear_wheel 1+Iron_plate 1 → Transport_belt 2 | Total raw | Time 1+Iron_plate 3 | Resistances Fire: 0/90% | Stack size 100 | Dimensions 1×1 | Belt speed 15 Items/s | Mining time 0.1 | Prototype type transport-belt | Internal name transport-belt | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Fast_transport_beltLabLogistic_science_packSplitterUnderground_belt | The transport belt is the easiest and cheapest method of automatic item"
  },
  {
    "type": "wiki",
    "name": "Transport belt",
    "content": "belt is the easiest and cheapest method of automatic item transportation. It is the first tier of transport belts . No prior research is required and it is available from the beginning of the game. Other belt systems Underground belt Splitter Other Transport belts Fast transport belt Express transport belt Turbo transport belt Properties Type Max. throughput (Items per game-second for two lanes) Speed ( Tiles per game-second) Max. density (Items per tile) Required technologies Transport belt 15 1.875 8"
  },
  {
    "type": "wiki",
    "name": "Transport belt",
    "content": "per tile) Required technologies Transport belt 15 1.875 8 None See physics of transport belts for more detailed information."
  },
  {
    "type": "wiki",
    "name": "Fast transport belt",
    "content": "Recipe | Time 0.5+Iron_gear_wheel 5+Transport_belt 1 → Fast_transport_belt 1 | Total raw | Time 3.5+Iron_plate 11.5 | Resistances Fire: 0/50% | Stack size 100 | Dimensions 1×1 | Belt speed 30 Items/s | Mining time 0.1 | Prototype type transport-belt | Internal name fast-transport-belt | Required technologies | Logistics_2_(research)2 | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Express_transport_belt | Fast transport belts are a faster variant of"
  },
  {
    "type": "wiki",
    "name": "Fast transport belt",
    "content": "| Fast transport belts are a faster variant of the transport belt , operating at double speed. They are the second tier of transport belts . Other fast belt systems Fast underground belt Fast splitter Other Transport belts Transport belt Express transport belt Turbo transport belt Properties Type Max. throughput (Items per game-second ) Speed ( Tiles per game-second) Max. density (Items per tile) Required technologies Fast transport belt 30 3.75 8 Logistics 2 (research) See Physics of Transport Belts for"
  },
  {
    "type": "wiki",
    "name": "Fast transport belt",
    "content": "8 Logistics 2 (research) See Physics of Transport Belts for more detailed information."
  },
  {
    "type": "wiki",
    "name": "Express transport belt",
    "content": "Recipe | Time 0.5+Fast_transport_belt 1+Iron_gear_wheel 10+Lubricant 20 → Express_transport_belt 1 | Total raw | Time 9+Iron_plate 31.5+Lubricant 20 | Resistances Fire: 0/50% | Stack size 100 | Dimensions 1×1 | Belt speed 45 Items/s | Mining time 0.1 | Prototype type transport-belt | Internal name express-transport-belt | Required technologies | Logistics_3_(research)3 | Produced by | Assembling_machine_2 Assembling_machine_3 | Express transport belts are a faster variant of the transport belt , operating"
  },
  {
    "type": "wiki",
    "name": "Express transport belt",
    "content": "belts are a faster variant of the transport belt , operating at triple speed. In the base game, they are the third and final tier among the transport belts . Unlike previous tiers, express transport belts rely on oil processing for lubricant . Other express belt systems Express underground belt Express splitter Other Transport belts Transport belt Fast transport belt Turbo transport belt Properties Type Max. throughput (Items per game-second ) Speed ( Tiles per game-second) Max. density (Items per tile)"
  },
  {
    "type": "wiki",
    "name": "Express transport belt",
    "content": ") Speed ( Tiles per game-second) Max. density (Items per tile) Required technologies Express transport belt 45.0 5.625 8 Logistics 3 (research) See Physics of Transport Belts for more detailed information."
  },
  {
    "type": "wiki",
    "name": "Underground belt",
    "content": "Recipe | Time 1+Iron_plate 10+Transport_belt 5 → Underground_belt 2 | Total raw | Time 3.5+Iron_plate 17.5 | Resistances Fire: 0/60%Impact: 0/30% | Stack size 50 | Dimensions 1×1 | Belt speed 15 Items/s | Mining time 0.1 | Prototype type underground-belt | Internal name underground-belt | Required technologies | Logistics_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Fast_underground_belt | The underground belt is the first tier of"
  },
  {
    "type": "wiki",
    "name": "Underground belt",
    "content": "| The underground belt is the first tier of underground belts . This type of belt is generally used to allow a transport belt to cross another transport belt by going underneath it. The underground belt has a maximum underground distance of 4 squares. The speed of the underground belt is the same as the speed of the basic transport belt . Note that underground belts as well as underground pipes cannot transport items beneath lava and space void. Other belts Transport belt Splitter Other underground belts"
  },
  {
    "type": "wiki",
    "name": "Underground belt",
    "content": "Other belts Transport belt Splitter Other underground belts Fast underground belt Express underground belt Turbo underground belt"
  },
  {
    "type": "wiki",
    "name": "Fast underground belt",
    "content": "Recipe | Time 2+Iron_gear_wheel 40+Underground_belt 2 → Fast_underground_belt 2 | Total raw | Time 25.5+Iron_plate 97.5 | Resistances Fire: 0/60%Impact: 0/30% | Stack size 50 | Dimensions 1×1 | Belt speed 30 Items/s | Mining time 0.1 | Prototype type underground-belt | Internal name fast-underground-belt | Required technologies | Logistics_2_(research)2 | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Express_underground_belt | The fast underground belt"
  },
  {
    "type": "wiki",
    "name": "Fast underground belt",
    "content": "by | Express_underground_belt | The fast underground belt is the second tier of underground belts . It has a maximum underground distance of 6 tiles — 2 more than the basic underground belt. The speed of the fast underground belt is the same speed as the fast transport belt , which is twice as fast as a basic transport belt or underground belt. Note that underground belts as well as underground pipes cannot transport items beneath lava and space void. Other fast belts Fast transport belt Fast splitter"
  },
  {
    "type": "wiki",
    "name": "Fast underground belt",
    "content": "space void. Other fast belts Fast transport belt Fast splitter Other underground belts Underground belt Express underground belt Turbo underground belt"
  },
  {
    "type": "wiki",
    "name": "Express underground belt",
    "content": "Recipe | Time 2+Fast_underground_belt 2+Iron_gear_wheel 80+Lubricant 40 → Express_underground_belt 2 | Total raw | Time 67.5+Iron_plate 257.5+Lubricant 40 | Resistances Fire: 0/60%Impact: 0/30% | Stack size 50 | Dimensions 1×1 | Belt speed 45 Items/s | Mining time 0.1 | Prototype type underground-belt | Internal name express-underground-belt | Required technologies | Logistics_3_(research)3 | Produced by | Assembling_machine_2 Assembling_machine_3 | The Express underground belt is the third tier of"
  },
  {
    "type": "wiki",
    "name": "Express underground belt",
    "content": "| The Express underground belt is the third tier of underground belts . It has a maximum underground length of 8 tiles ‒ 2 more than a fast underground belt and 4 more than a basic underground belt. The speed of the express underground belt is the same speed as the express transport belt , which is three times as fast as a basic transport belt or underground belt. Note that underground belts as well as underground pipes cannot transport items beneath lava and space void. Other express belts Express"
  },
  {
    "type": "wiki",
    "name": "Express underground belt",
    "content": "items beneath lava and space void. Other express belts Express transport belt Express splitter Other Underground belts Underground belt Fast underground belt Turbo underground belt"
  },
  {
    "type": "wiki",
    "name": "Splitter",
    "content": "Recipe | Time 1+Electronic_circuit 5+Iron_plate 5+Transport_belt 4 → Splitter 1 | Total raw | Time 9.25+Copper_plate 7.5+Iron_plate 16 | Resistances Fire: 0/60% | Stack size 50 | Dimensions 1×2 | Belt speed 15 Items/s | Mining time 0.1 | Prototype type splitter | Internal name splitter | Required technologies | Logistics_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Fast_splitter | The splitter is used to divide a single belt, combine two"
  },
  {
    "type": "wiki",
    "name": "Splitter",
    "content": "| The splitter is used to divide a single belt, combine two belts into one, or equally balance two belts together. The items are placed in 1:1 relation on the outgoing belts. It is possible to set a filter and input and output priorities as described on belt transport system . Other basic belts Transport belt Underground belt Other Splitters Fast splitter Express splitter Turbo splitter"
  },
  {
    "type": "wiki",
    "name": "Fast splitter",
    "content": "Recipe | Time 2+Electronic_circuit 10+Iron_gear_wheel 10+Splitter 1 → Fast_splitter 1 | Total raw | Time 28.75+Copper_plate 22.5+Iron_plate 46 | Resistances Fire: 0/60% | Stack size 50 | Dimensions 1×2 | Belt speed 30 Items/s | Mining time 0.1 | Prototype type splitter | Internal name fast-splitter | Required technologies | Logistics_2_(research)2 | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Express_splitter | Fast splitters are splitters which are"
  },
  {
    "type": "wiki",
    "name": "Fast splitter",
    "content": "by | Express_splitter | Fast splitters are splitters which are twice as fast as normal splitters , but only 67% as fast as express splitters . The items are placed in 1:1 relation on the outgoing belts. It is possible to set a filter and input and output priorities as described on belt transport system . Other fast belts Fast transport belt Fast underground belt Other Splitters Splitter Express splitter Turbo splitter"
  },
  {
    "type": "wiki",
    "name": "Express splitter",
    "content": "Recipe | Time 2+Advanced_circuit 10+Fast_splitter 1+Iron_gear_wheel 10+Lubricant 80 → Express_splitter 1 | Total raw | Time 130.75+Copper_plate 72.5+Iron_plate 86+Lubricant 80+Plastic_bar 20 | Resistances Fire: 0/60% | Stack size 50 | Dimensions 1×2 | Belt speed 45 Items/s | Mining time 0.1 | Prototype type splitter | Internal name express-splitter | Required technologies | Logistics_3_(research)3 | Produced by | Assembling_machine_2 Assembling_machine_3 | Express splitters are splitters which are three"
  },
  {
    "type": "wiki",
    "name": "Express splitter",
    "content": "| Express splitters are splitters which are three times as fast as normal splitters and 50% faster than fast splitters . The items are placed in 1:1 relation on the outgoing belts. It is possible to set a filter and input and output priorities as described on belt transport system . Other express belts Express transport belt Express underground belt Other Splitters Splitter Fast splitter Turbo splitter"
  },
  {
    "type": "wiki",
    "name": "Burner inserter",
    "content": "Recipe | Time 0.5+Iron_gear_wheel 1+Iron_plate 1 → Burner_inserter 1 | Total raw | Time 1+Iron_plate 3 | Resistances Fire: 0/90% | Stack size 50 | Dimensions 1×1 | Energy consumption Quality 144 Quality 187 Quality 230 Quality 274 Quality 360 kW (Fuel) Quality 144 Quality 187 Quality 230 Quality 274 Quality 360 | Rotation speed Quality 281°/sQuality 365°/sQuality 449°/sQuality 534°/sQuality 702°/s Quality 281°/s Quality 365°/s Quality 449°/s Quality 534°/s Quality 702°/s | Mining time 0.1 | Prototype type"
  },
  {
    "type": "wiki",
    "name": "Burner inserter",
    "content": "534°/s Quality 702°/s | Mining time 0.1 | Prototype type inserter | Internal name burner-inserter | Boosting technologies | Inserter_capacity_bonus_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Valid fuel | WoodCoalSolid_fuelRocket_fuelNuclear_fuel | The burner inserter is the most basic and slowest type of inserters . It is powered by burning fuel , compared to the more advanced inserters which are powered by electricity . It will add fuel to its own"
  },
  {
    "type": "wiki",
    "name": "Burner inserter",
    "content": "which are powered by electricity . It will add fuel to its own supply if it picks any up, which makes it useful for filling boilers with coal . This has the advantage that it will continue working even if the power fails, as opposed to electrically-powered inserters which will be unable to function. It consumes no fuel while idle, though it consumes vastly more energy than most other inserters when active. Even though it doesn't use electricity, a burner inserter can be connected to and controlled by the"
  },
  {
    "type": "wiki",
    "name": "Burner inserter",
    "content": "a burner inserter can be connected to and controlled by the logistic and the circuit network . Fuel consumption A burner inserter consumes no power while idle and does not continuously consume the maximum amount of power when working. Burner Inserters spawn with an internal energy buffer of 500 kJ, represented as 25% the value of a piece of wood fuel (which is 2MJ). Aside from not having drain, all its other power characteristics are identical to the rest of the inserters. It simply pulls its joules from"
  },
  {
    "type": "wiki",
    "name": "Burner inserter",
    "content": "to the rest of the inserters. It simply pulls its joules from its fuel rather than your power grid. For more detailed information on inserter power characteristics you can reference the main page here . Burners also have a behavior known as \"leeching\" where they will pull fuel from their input and commandeer it for their own use. This leeching behavior is not exactly quantified, but it is triggered whenever the internal fuel inventory reaches zero, and performing the action also consumes fuel since motion"
  },
  {
    "type": "wiki",
    "name": "Burner inserter",
    "content": "zero, and performing the action also consumes fuel since motion is never free."
  },
  {
    "type": "wiki",
    "name": "Inserter",
    "content": "Recipe | Time 0.5+Electronic_circuit 1+Iron_gear_wheel 1+Iron_plate 1 → Inserter 1 | Total raw | Time 2.25+Copper_plate 1.5+Iron_plate 4 | Resistances Fire: 0/90% | Stack size 50 | Dimensions 1×1 | Energy consumption Quality 15.1 Quality 19.51 Quality 23.92 Quality 28.33 Quality 37.15 kW (Electric_system) Quality 15.1 Quality 19.51 Quality 23.92 Quality 28.33 Quality 37.15 | Drain 400 W (Electric_system) | Rotation speed Quality 302°/sQuality 393°/sQuality 484°/sQuality 575°/sQuality 756°/s Quality 302°/s"
  },
  {
    "type": "wiki",
    "name": "Inserter",
    "content": "393°/sQuality 484°/sQuality 575°/sQuality 756°/s Quality 302°/s Quality 393°/s Quality 484°/s Quality 575°/s Quality 756°/s | Mining time 0.1 | Prototype type inserter | Internal name inserter | Required technologies | Electronics_(research) | Boosting technologies | Inserter_capacity_bonus_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Fast_inserterLogistic_science_packLong-handed_inserter | For the article encompassing all inserter"
  },
  {
    "type": "wiki",
    "name": "Inserter",
    "content": "| For the article encompassing all inserter types, see Inserters . The inserter can be used to transfer items between entities such as transport belts and stone furnaces . It is the most basic electric inserter. Unlike the fast inserter , the inserter is not fast enough to pick up items moving on the far side of a curving express transport belts and turbo transport belts . The inserter is notable in that it is used in the creation of logistic science pack , so players must create an automated inserter"
  },
  {
    "type": "wiki",
    "name": "Inserter",
    "content": "science pack , so players must create an automated inserter assembly line. The basic inserter is also used in the creation of both the fast inserter and the long inserter, and serves as the base item for all electric inserters. For more information on mechanics and uses see inserters ."
  },
  {
    "type": "wiki",
    "name": "Long-handed inserter",
    "content": "Recipe | Time 0.5+Inserter 1+Iron_gear_wheel 1+Iron_plate 1 → Long-handed_inserter 1 | Total raw | Time 3.25+Copper_plate 1.5+Iron_plate 7 | Resistances Fire: 0/90% | Stack size 50 | Dimensions 1×1 | Energy consumption Quality 21.4 Quality 27.7 Quality 34 Quality 40.3 Quality 52.9 kW (Electric_system) Quality 21.4 Quality 27.7 Quality 34 Quality 40.3 Quality 52.9 | Drain 400 W (Electric_system) | Rotation speed Quality 432°/sQuality 562°/sQuality 691°/sQuality 821°/sQuality 1080°/s Quality 432°/s Quality"
  },
  {
    "type": "wiki",
    "name": "Long-handed inserter",
    "content": "691°/sQuality 821°/sQuality 1080°/s Quality 432°/s Quality 562°/s Quality 691°/s Quality 821°/s Quality 1080°/s | Mining time 0.1 | Prototype type inserter | Internal name long-handed-inserter | Required technologies | Automation_(research) | Boosting technologies | Inserter_capacity_bonus_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The Long-handed inserter is an electric inserter that picks up and places items two tiles from its location instead of"
  },
  {
    "type": "wiki",
    "name": "Long-handed inserter",
    "content": "up and places items two tiles from its location instead of the usual one. They are commonly used for placing items on a belt that is three tiles away from either an assembling machine or a furnace . Long-handed inserters may have trouble grabbing moving items from red/blue turning belts if the item is on the far side. They can also grab items past north facing cliffs that go straight across, though cliffs of any other kind are too thick for the inserter to reach across. For more information on mechanics"
  },
  {
    "type": "wiki",
    "name": "Long-handed inserter",
    "content": "the inserter to reach across. For more information on mechanics and uses see Inserters ."
  },
  {
    "type": "wiki",
    "name": "Fast inserter",
    "content": "Recipe | Time 0.5+Electronic_circuit 2+Inserter 1+Iron_plate 2 → Fast_inserter 1 | Total raw | Time 5.25+Copper_plate 4.5+Iron_plate 8 | Resistances Fire: 0/90% | Stack size 50 | Dimensions 1×1 | Energy consumption Quality 59.3 Quality 76.94 Quality 94.58 Quality 112 Quality 148 kW (Electric_system) Quality 59.3 Quality 76.94 Quality 94.58 Quality 112 Quality 148 | Drain 500 W (Electric_system) | Rotation speed Quality 864°/sQuality 1123°/sQuality 1382°/sQuality 1642°/sQuality 2160°/s Quality 864°/s Quality"
  },
  {
    "type": "wiki",
    "name": "Fast inserter",
    "content": "1382°/sQuality 1642°/sQuality 2160°/s Quality 864°/s Quality 1123°/s Quality 1382°/s Quality 1642°/s Quality 2160°/s | Mining time 0.1 | Prototype type inserter | Internal name fast-inserter | Required technologies | Fast_inserter_(research) | Boosting technologies | Inserter_capacity_bonus_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Bulk_inserter | The fast inserter is an electric inserter that is more than twice as fast as the regular"
  },
  {
    "type": "wiki",
    "name": "Fast inserter",
    "content": "inserter that is more than twice as fast as the regular inserter . For more information on mechanics and uses see inserters ."
  },
  {
    "type": "wiki",
    "name": "Bulk inserter",
    "content": "Recipe | Time 0.5+Advanced_circuit 1+Electronic_circuit 15+Fast_inserter 1+Iron_gear_wheel 15 → Bulk_inserter 1 | Total raw | Time 41.5+Copper_plate 32+Iron_plate 55+Plastic_bar 2 | Resistances Fire: 0/90% | Stack size 50 | Dimensions 1×1 | Energy consumption Quality 169 Quality 219 Quality 270 Quality 320 Quality 421 kW (Electric_system) Quality 169 Quality 219 Quality 270 Quality 320 Quality 421 | Drain 1 kW (Electric_system) | Rotation speed Quality 864°/sQuality 1123°/sQuality 1382°/sQuality"
  },
  {
    "type": "wiki",
    "name": "Bulk inserter",
    "content": "speed Quality 864°/sQuality 1123°/sQuality 1382°/sQuality 1642°/sQuality 2160°/s Quality 864°/s Quality 1123°/s Quality 1382°/s Quality 1642°/s Quality 2160°/s | Mining time 0.1 | Prototype type inserter | Internal name bulk-inserter | Required technologies | Bulk_inserter_(research) | Boosting technologies | Inserter_capacity_bonus_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The bulk inserter is an electric inserter that can move multiple items at"
  },
  {
    "type": "wiki",
    "name": "Bulk inserter",
    "content": "is an electric inserter that can move multiple items at the same time. Moving at the speed of the fast inserter , it transfers multiple items per cycle to give it a material flow advantage at the cost of additional power consumption. When transferring between chests or cargo wagons it picks up and drops off the entire stack of items instantly. When picking up from or dropping off items onto a transport belt a bulk inserter needs to grab or drop each item individually, increasing the time between arm swings"
  },
  {
    "type": "wiki",
    "name": "Bulk inserter",
    "content": "each item individually, increasing the time between arm swings and lowering its potential throughput. In these cases, however, the bulk inserter still has higher throughput than a fast inserter because it swings back and forth less often. The throughput from chest to chest for a fully upgraded bulk inserter is 27.69 items per second, but only 13.85 items/s from chest to express belt . A bulk inserter cannot carry more items than the item's stack size. Stack size The stack size is increased by the inserter"
  },
  {
    "type": "wiki",
    "name": "Bulk inserter",
    "content": "size. Stack size The stack size is increased by the inserter capacity bonus (research) technology. The stack size can be overridden to set how many items it picks up at one time, with the maximum being the highest research level currently unlocked. Inserter capacity bonus Stack size bonus Total stack size none 0 2 1 +1 3 2 +1 4 3 +1 5 4 +1 6 5 +2 8 6 +2 10 7 +2 12"
  },
  {
    "type": "wiki",
    "name": "Small electric pole",
    "content": "Recipe | Time 0.5+Copper_cable 2+Wood 1 → Small_electric_pole 2 | Total raw | Time 1+Copper_plate 1+Wood 1 | Stack size 50 | Dimensions 1×1 | Mining time 0.1 | Supply area Quality 5×5 Quality 7×7 Quality 9×9 Quality 11×11 Quality 15×15 tiles Quality 5×5 Quality 7×7 Quality 9×9 Quality 11×11 Quality 15×15 | Wire reach Quality 7.5 Quality 9.5 Quality 11.5 Quality 13.5 Quality 17.5 tiles Quality 7.5 Quality 9.5 Quality 11.5 Quality 13.5 Quality 17.5 | Prototype type electric-pole | Internal name"
  },
  {
    "type": "wiki",
    "name": "Small electric pole",
    "content": "Quality 17.5 | Prototype type electric-pole | Internal name small-electric-pole | Required technologies | Electronics_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The small electric pole is the basic electric pole . It has a short wire reach and small supply area, but it is also available from the beginning of the game. Typically, it is replaced in factories by medium electric poles later in the game. It can also carry signals for the circuit network"
  },
  {
    "type": "wiki",
    "name": "Small electric pole",
    "content": "in the game. It can also carry signals for the circuit network ."
  },
  {
    "type": "wiki",
    "name": "Medium electric pole",
    "content": "Recipe | Time 0.5+Copper_cable 2+Iron_stick 4+Steel_plate 2 → Medium_electric_pole 1 | Total raw | Time 2+Copper_plate 1+Iron_plate 2+Steel_plate 2 | Resistances Fire: 0/100% | Stack size 50 | Dimensions 1×1 | Mining time 0.1 | Supply area Quality 7×7 Quality 9×9 Quality 11×11 Quality 13×13 Quality 17×17 tiles Quality 7×7 Quality 9×9 Quality 11×11 Quality 13×13 Quality 17×17 | Wire reach Quality 9 Quality 11 Quality 13 Quality 15 Quality 19 tiles Quality 9 Quality 11 Quality 13 Quality 15 Quality 19 |"
  },
  {
    "type": "wiki",
    "name": "Medium electric pole",
    "content": "tiles Quality 9 Quality 11 Quality 13 Quality 15 Quality 19 | Prototype type electric-pole | Internal name medium-electric-pole | Required technologies | Electric_energy_distribution_1_(research)1 | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The medium electric pole is an improved electric pole that is superior to the small electric pole in all regards, requiring slightly more expensive resources to produce. Although it lacks benefits of more advanced,"
  },
  {
    "type": "wiki",
    "name": "Medium electric pole",
    "content": "to produce. Although it lacks benefits of more advanced, specialized variants, it is a consummate all-rounder with decent reach, supply area and size. It can also carry signals for the circuit network ."
  },
  {
    "type": "wiki",
    "name": "Big electric pole",
    "content": "Recipe | Time 0.5+Copper_cable 4+Iron_stick 8+Steel_plate 5 → Big_electric_pole 1 | Total raw | Time 3.5+Copper_plate 2+Iron_plate 4+Steel_plate 5 | Resistances Fire: 0/100% | Stack size 50 | Dimensions 2×2 | Mining time 0.1 | Supply area Quality 4×4 Quality 6×6 Quality 8×8 Quality 10×10 Quality 14×14 tiles Quality 4×4 Quality 6×6 Quality 8×8 Quality 10×10 Quality 14×14 | Wire reach Quality 32 Quality 34 Quality 36 Quality 38 Quality 42 tiles Quality 32 Quality 34 Quality 36 Quality 38 Quality 42 |"
  },
  {
    "type": "wiki",
    "name": "Big electric pole",
    "content": "tiles Quality 32 Quality 34 Quality 36 Quality 38 Quality 42 | Prototype type electric-pole | Internal name big-electric-pole | Required technologies | Electric_energy_distribution_1_(research)1 | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The big electric pole is an improved electric pole . It is a more specialized variant compared to the medium electric pole , offering the longest wire reach of all of the electric poles, with the trade-off of a very short"
  },
  {
    "type": "wiki",
    "name": "Big electric pole",
    "content": "all of the electric poles, with the trade-off of a very short supply area. Because of this, big electric poles are ideal for long-distance power lines, as they require the smallest number of entities to be placed to span a given distance, but generally unsuitable for providing local coverage to groups of structures. It can also carry signals for the circuit network ."
  },
  {
    "type": "wiki",
    "name": "Substation",
    "content": "Recipe | Time 0.5+Advanced_circuit 5+Copper_cable 6+Steel_plate 10 → Substation 1 | Total raw | Time 49.5+Copper_plate 28+Iron_plate 10+Plastic_bar 10+Steel_plate 10 | Resistances Fire: 0/90% | Stack size 50 | Dimensions 2×2 | Mining time 0.1 | Supply area Quality 18×18 Quality 20×20 Quality 22×22 Quality 24×24 Quality 28×28 tiles Quality 18×18 Quality 20×20 Quality 22×22 Quality 24×24 Quality 28×28 | Wire reach Quality 18 Quality 20 Quality 22 Quality 24 Quality 28 tiles Quality 18 Quality 20 Quality 22"
  },
  {
    "type": "wiki",
    "name": "Substation",
    "content": "22 Quality 24 Quality 28 tiles Quality 18 Quality 20 Quality 22 Quality 24 Quality 28 | Prototype type electric-pole | Internal name substation | Required technologies | Electric_energy_distribution_2_(research)2 | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The substation is an advanced electric pole . It offers a vast supply area with a wire reach long enough to accommodate efficient coverage of an area with very few dead spots, if handled properly. However,"
  },
  {
    "type": "wiki",
    "name": "Substation",
    "content": "an area with very few dead spots, if handled properly. However, this comes at a cost of larger dimensions of the substations, which may make them difficult to place, and their production involves relatively advanced components. It can also carry signals for the circuit network ."
  },
  {
    "type": "wiki",
    "name": "Pipe",
    "content": "Recipe | Time 0.5+Iron_plate 1 → Pipe 1 | Total raw | Time 0.5+Iron_plate 1 | Fluid storage volume 100 | Resistances Fire: 0/80%Impact: 0/30% | Stack size 100 | Dimensions 1×1 | Mining time 0.1 | Prototype type pipe | Internal name pipe | Required technologies | Steam_power_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by |"
  },
  {
    "type": "wiki",
    "name": "Pipe",
    "content": "Assembling_machine_3 Crafting | Consumed by | Artillery_wagonBoilerChemical_plantEngine_unitFlamethrower_turretFluid_wagonHeat_exchangerOffshore_pumpOil_refineryPipe_to_groundPumpPumpjackRocket_siloSteam_engineSteam_turbine | The pipe is the most basic method of distribution of fluids. It is commonly used to provide water from offshore pumps to boilers and steam to steam engines for power generation, and later on, crude oil and oil products . Unlike transport belts , players and enemies can't walk over"
  },
  {
    "type": "wiki",
    "name": "Pipe",
    "content": ". Unlike transport belts , players and enemies can't walk over them. Comprehensive information on fluid distribution can be found on the fluid system page. Attempting to build a pipe that would potentially mix two liquids will fail, as the pipe won't be placed. Undesired fluid can be flushed from the pipe system by opening the pipe GUI and clicking the trash button next to the fluid. Fluids that are flushed from pipes are deleted permanently. Contents 1 Alternative recipes 2 Gallery 3 History 4 See also"
  },
  {
    "type": "wiki",
    "name": "Pipe",
    "content": "Contents 1 Alternative recipes 2 Gallery 3 History 4 See also Alternative recipes Space Age expansion exclusive feature. Process Input Output Made in Required technology Casting pipe 1 + 10 1 Foundry (research)"
  },
  {
    "type": "wiki",
    "name": "Pipe to ground",
    "content": "Recipe | Time 0.5+Iron_plate 5+Pipe 10 → Pipe_to_ground 2 | Total raw | Time 5.5+Iron_plate 15 | Fluid storage volume 100 | Resistances Fire: 0/80%Impact: 0/40% | Stack size 50 | Dimensions 1×1 | Mining time 0.1 | Prototype type pipe-to-ground | Internal name pipe-to-ground | Required technologies | Steam_power_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The pipe to ground (or \"underground pipe\") is a distribution method for liquids and gases . Since"
  },
  {
    "type": "wiki",
    "name": "Pipe to ground",
    "content": "pipe\") is a distribution method for liquids and gases . Since a basic pipe is impassable, these are necessary to keep the factory open, as well as to cross belt lines or environmental features. Comprehensive information on fluid distribution can be found on the fluid system page. Contents 1 Alternative recipes 2 Notes 3 Gallery 4 History 5 See also Alternative recipes Space Age expansion exclusive feature. Process Input Output Made in Required technology Casting pipe to ground 1 + 10 + 50 2 Foundry"
  },
  {
    "type": "wiki",
    "name": "Pipe to ground",
    "content": "technology Casting pipe to ground 1 + 10 + 50 2 Foundry (research) Notes While pipe to ground is the developer name for the entity, the community has taken to simply referring to this entity as \"underground pipe\". This is the most common reference. The maximum distance at which an underground pipe can connect is 10 tiles, resulting in a gap of 9 tiles in between. The gap between underground pipes does not store any fluids; a pair of underground pipes only has the same volume as two regular pipes,"
  },
  {
    "type": "wiki",
    "name": "Pipe to ground",
    "content": "pipes only has the same volume as two regular pipes, regardless of distance bridged. Underground pipes as well as underground belts cannot transport items beneath lava and space void."
  },
  {
    "type": "wiki",
    "name": "Pump",
    "content": "Recipe | Time 2+Engine_unit 1+Pipe 1+Steel_plate 1 → Pump 1 | Total raw | Time 2.5+Engine_unit 1+Iron_plate 1+Steel_plate 1 | Fluid storage volume 400 | Resistances Fire: 0/80%Impact: 0/30% | Stack size 50 | Dimensions 1×2 | Energy consumption 30 kW (Electric_system) | Pumping speed Quality 1200/sQuality 1560/sQuality 1920/sQuality 2280/sQuality 3000/s Quality 1200/s Quality 1560/s Quality 1920/s Quality 2280/s Quality 3000/s | Mining time 0.2 | Prototype type pump | Internal name pump | Required"
  },
  {
    "type": "wiki",
    "name": "Pump",
    "content": "time 0.2 | Prototype type pump | Internal name pump | Required technologies | Fluid_handling_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | This article is about the pump. For the water extraction device, see offshore pump . For the oil extraction device, see pumpjack . Contents 1 Overview 2 Throughput 3 Loading/unloading fluid wagons 4 Use as a valve 5 Moving fluids over long distances 6 Animations and visuals 7 History 8 See also Overview A Pump is a"
  },
  {
    "type": "wiki",
    "name": "Pump",
    "content": "and visuals 7 History 8 See also Overview A Pump is a multipurpose fluid handling device which can be used to move fluids over long distances, perform flow control, prevent back-flow and load/unload trains. The pump can be seen as the inserter for fluids. When connected to pipes on both ends of the pump and powered, the pump will transfer fluid from the source side to the output side if it will fit. This will occur even if the input side has significantly lower fluid levels. Furthermore, unlike normal"
  },
  {
    "type": "wiki",
    "name": "Pump",
    "content": "significantly lower fluid levels. Furthermore, unlike normal pipes, pumps can connect to pipes only on the front and back of the pump instead of connecting to pipes from all sides. This can be useful for having tightly packed lines of pipes being parallel to each other, without the risk of fluids mixing, acting as a \"diode\" pipe. Parallel pumps preventing side connections. Throughput Pumps can move up to 20 units of fluid per tick, or 1200 per second. Whether this throughput is actually achieved depends on"
  },
  {
    "type": "wiki",
    "name": "Pump",
    "content": "second. Whether this throughput is actually achieved depends on the fluid level of the fluid segments upstream and downstream of the pump. If the level of the source segment is below 20%, 1200 units can no longer be achieved. The same applies if the level of the output segment is above 80%. Comprehensive information on the general behavior of fluids can be found on the page fluid system . Loading/unloading fluid wagons Pumps can load and unload fluid wagons at train stops . When a pump is placed with one"
  },
  {
    "type": "wiki",
    "name": "Pump",
    "content": "fluid wagons at train stops . When a pump is placed with one end facing a rail track and the other end connected to a pipe, it will visually change. When a fluid wagon is stopped adjacent, the pump head will connect to the top of the nearest tank and begin transferring fluids. It will not connect if a circuit condition is preventing it, or it is unpowered. Pump transferring fluids to a fluid wagon. Use as a valve The pump works as a controllable valve: When powered, the pump will let fluids through, but"
  },
  {
    "type": "wiki",
    "name": "Pump",
    "content": "valve: When powered, the pump will let fluids through, but only in its set direction. If unpowered, the pump doesn't let anything through. If the pump is powered but has a circuit condition, it will only let fluids through when the condition is met. This can be used to control some parts of a player's factory. For example, with a single wire from a lubricant tank to a pump pumping heavy oil , you can disable cracking heavy oil → light oil when lubricant is needed. Moving fluids over long distances When a"
  },
  {
    "type": "wiki",
    "name": "Pump",
    "content": "lubricant is needed. Moving fluids over long distances When a fluid is created, it can travel up to 320 tiles from it's existing location until it needs a pump. Pumps reset this value, allowing fluids to travel for another 320 tiles until another one is needed. If a pipe has been overextended, a warning will show on the map. Multiple pump effects don't stack. Animations and visuals"
  },
  {
    "type": "wiki",
    "name": "Rail",
    "content": "Recipe | Time 0.5+Iron_stick 1+Steel_plate 1+Stone 1 → Rail 2 | Total raw | Time 0.75+Iron_plate 0.5+Steel_plate 1+Stone 1 | Stack size 100 | Prototype type rail-planner | Internal name rail | Required technologies | Railway_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Production_science_pack | A Rail is used for building a railway track for trains . Unlike transport belts , rail tracks can also be curved and placed diagonally. Train"
  },
  {
    "type": "wiki",
    "name": "Rail",
    "content": ", rail tracks can also be curved and placed diagonally. Train stops , rail signals and rail chain signals can be placed on rails to better guide automated trains. Gates can also be placed on rails, making them rail gates. In Space Age , rails can be connected to rail ramps and rail supports to build elevated rails. Elevated rails allow trains to freely pass over obstacles. The minimum rail turning radius is 13, meaning the smallest possible 180° turn has 26 tiles between the centers of opposite rails."
  },
  {
    "type": "wiki",
    "name": "Rail",
    "content": "180° turn has 26 tiles between the centers of opposite rails. However, due to rails being two tiles wide, the actual footprint is 28 tiles wide. The rail planner can be used to automatically place rails. See the page for more info. Achievements Rails are directly related to the following achievements: Trans-Factorio express Have a train plan a path 1,000 tiles or longer."
  },
  {
    "type": "wiki",
    "name": "Train stop",
    "content": "Recipe | Time 0.5+Electronic_circuit 5+Iron_plate 6+Iron_stick 6+Steel_plate 3 → Train_stop 1 | Total raw | Time 8.25+Copper_plate 7.5+Iron_plate 14+Steel_plate 3 | Map icon | Stack size 10 | Dimensions 2×2 | Mining time 0.2 | Prototype type train-stop | Internal name train-stop | Required technologies | Automated_rail_transportation_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Train stops are used to automate item transportation by trains by providing"
  },
  {
    "type": "wiki",
    "name": "Train stop",
    "content": "are used to automate item transportation by trains by providing nameable locations for trains to travel to. Like locomotives , the color of the stops can be customized. Furthermore, the stop can be named, with rich text making it possible to further customize the name, such as by adding item icons. Contents 1 Mechanics 2 Circuit Network 3 Indicators 4 Gallery 5 History 6 See also Mechanics Train stops are used to denote a place for a train to stop. Every placed train stop will appear as a possible stop in"
  },
  {
    "type": "wiki",
    "name": "Train stop",
    "content": "stop. Every placed train stop will appear as a possible stop in the scheduling area of a train 's GUI. This can be used to create loading and unloading stations for trains. When there are multiple train stops with the same name, trains will always travel to the closest stop. \"Closest\" in this case does not mean rail distance, instead the pathfinding distance is used. This distance is influenced by trains on the track, in addition to rail distance, so empty train stops are preferred over occupied ones if"
  },
  {
    "type": "wiki",
    "name": "Train stop",
    "content": "so empty train stops are preferred over occupied ones if the empty stop is not too far away. Opening the GUI of a stop will show the information of every train connected to that stop, including its name, current activity and location on the map. Additionally, it is possible to set a train limit for train stops via their GUI or with the circuit network. Only the set amount of trains may reserve the train stop as their destination when trying to path to it. If the train limit is lowered below the amount of"
  },
  {
    "type": "wiki",
    "name": "Train stop",
    "content": "path to it. If the train limit is lowered below the amount of trains that currently have the stop reserved as their destination, those trains will continue to go to the stop. Trains will attempt to avoid routes that pass through stops that are not designated as the next destination. This is represented by a penalty to the pathfinding distance, which usually forces a train to pick a \"shorter\" path. Circuit Network Train stops can be enabled or disabled using the circuit network . When a train stop is"
  },
  {
    "type": "wiki",
    "name": "Train stop",
    "content": "or disabled using the circuit network . When a train stop is disabled, trains will not go to that station. If a train is scheduled to go to a stop that is disabled, it will select a stop with the same name which is enabled. If no such stops exist, the train will enter the \"destination full\" state and wait until a stop becomes enabled again. If a train is en-route or already parked at a stop when it becomes disabled, the train will continue to the stop and complete its wait conditions. When a train attempts"
  },
  {
    "type": "wiki",
    "name": "Train stop",
    "content": "stop and complete its wait conditions. When a train attempts to go to an enabled stop, it first checks to see if the stop has a \"train limit\" set. This limit specifies the maximum number of trains allowed to go to this station. If the number of trains headed to that stop (including one sitting at the stop) is greater than or equal to the stop's current train limit, then the train will not go to that stop. It will check other enabled stops with that name. If all stops with that name are full, the train will"
  },
  {
    "type": "wiki",
    "name": "Train stop",
    "content": "that name. If all stops with that name are full, the train will enter the \"destination full\" state. Once a stop with that name opens up to allow more trains, the train will proceed. Like disabling, if a train limit changes while a train is en-route to a stop, the train will continue to the stop and complete its wait conditions. A stop with a train limit of 0 behaves identically to a stop which has been disabled. When there are multiple valid stops with the same name, the train will next check each stop's"
  },
  {
    "type": "wiki",
    "name": "Train stop",
    "content": "stops with the same name, the train will next check each stop's \"priority\". Stop priority can be set manually or with the circuit network, and can be set between 0 and 255, defaulting to 50. The lowest priority is 0, and the highest priority is 255. Trains will prefer stops with a higher priority. If all valid stops have the same priority value, the train will select the closest stop. Priority values are only considered when a train is dispatched; if a train is en-route and priority values of its stop"
  },
  {
    "type": "wiki",
    "name": "Train stop",
    "content": "if a train is en-route and priority values of its stop change so that it is no longer going to the highest priority stop, the train will not re-path to the new highest priority stop and will continue on its original schedule. While a train is en-route, it may repath to a different train stop of the same name, provided the new train stop has not reached its capacity. When this happens, the train ceases to count toward the train limit of the original stop. Train stops can be used to pass circuit signals to"
  },
  {
    "type": "wiki",
    "name": "Train stop",
    "content": "stop. Train stops can be used to pass circuit signals to trains, read train contents, uniquely identify trains with an ID number, or count the amount of trains going to the train stop. When reading the content of a stopped train, fluid amounts are rounded down to the nearest integer, except when the fluid amount is < 1, then it is is rounded to 1. Indicators There are indicator lights on the top of the train stop. These show: Solid light – The train stop is unoccupied/available. Alternate blinking – A"
  },
  {
    "type": "wiki",
    "name": "Train stop",
    "content": "The train stop is unoccupied/available. Alternate blinking – A train is approaching or passing the train stop. Simultaneous blinking – A train is stopped/occupying the train stop. No lights – The train stop is invalid. Blinking red – The train stop is disabled via circuit network."
  },
  {
    "type": "wiki",
    "name": "Rail signal",
    "content": "Recipe | Time 0.5+Electronic_circuit 1+Iron_plate 5 → Rail_signal 1 | Total raw | Time 1.75+Copper_plate 1.5+Iron_plate 6 | Stack size 50 | Mining time 0.1 | Prototype type rail-signal | Internal name rail-signal | Required technologies | Automated_rail_transportation_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The rail signal divides rails into blocks and allows locomotives to react to other locomotives allowing multiple trains use the same rails"
  },
  {
    "type": "wiki",
    "name": "Rail signal",
    "content": "other locomotives allowing multiple trains use the same rails without colliding. Blocks span all connected rails regardless if a train can actually travel between them. Rail signals can also be used in with conjunction rail chain signals , which also separate rails into blocks. In addition to the explanation on this page, there is also the rail signal tutorial . Signals dividing rails into blocks. Each block is highlighted with a different color. Contents 1 Direction 2 States 3 Circuit network 4 History 5"
  },
  {
    "type": "wiki",
    "name": "Rail signal",
    "content": "Contents 1 Direction 2 States 3 Circuit network 4 History 5 See also Direction Which block a signal monitors depends on which side of a rail it is placed. When a signal is on the right-hand side of the track, it monitors and protects the rail block behind it, up to the next signal or the end of the track. When placing rail signals, the rail signal blocks will be visible, and the opposite signal position will be highlighted in white. A train in automatic mode will not drive on a track if it would pass a"
  },
  {
    "type": "wiki",
    "name": "Rail signal",
    "content": "in automatic mode will not drive on a track if it would pass a signal on the left side unless there is also a signal on the right side at that signal. States Rail signals have four states: Green - The monitored block is empty. Yellow - A train is not able to stop before the monitored block and will pass the signal. The debug option show-train-braking-distance can be used to see the distance locomotives need to stop. A yellow signal means that a train is approaching and already has the approval to enter the"
  },
  {
    "type": "wiki",
    "name": "Rail signal",
    "content": "train is approaching and already has the approval to enter the following block. The block is reserved for a train and all other entrance signals of that block turn red. Red - The monitored block is not empty or another signal monitoring it is yellow. Blinking - The signal is not on a rail, or the monitored block is also the block before the signal. When a signal is red, locomotives will stop before it. A rail chain signal can be used to make locomotives stop earlier, as they will always mimic the signal of"
  },
  {
    "type": "wiki",
    "name": "Rail signal",
    "content": "stop earlier, as they will always mimic the signal of what is in front of them. Circuit network The interface for configuring a circuit network connection for a rail signal. A circuit network condition can be configured that when true will make the rail signal red. A rail signal can also output three different signals depending on if it is in its green, yellow or red state. If a rail signal is red because of a circuit network condition the rail signal won't output a circuit network signal."
  },
  {
    "type": "wiki",
    "name": "Rail chain signal",
    "content": "Recipe | Time 0.5+Electronic_circuit 1+Iron_plate 5 → Rail_chain_signal 1 | Total raw | Time 1.75+Copper_plate 1.5+Iron_plate 6 | Stack size 50 | Mining time 0.1 | Prototype type rail-chain-signal | Internal name rail-chain-signal | Required technologies | Automated_rail_transportation_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Rail chain signals are used for automated transportation on a railway network . With rail chain signals, it is possible to"
  },
  {
    "type": "wiki",
    "name": "Rail chain signal",
    "content": "a railway network . With rail chain signals, it is possible to use multiple trains on a single track, or multiple rails that intertwine. Rail chain signals can be used to ensure that trains only enter a crossing if they can also leave it, which ensures that they do not block other traffic by waiting on the crossing. In addition to the explanation on this page, there is also the rail signal tutorial . Contents 1 Basic 2 Definition 3 Advanced 4 Usage examples 5 History 6 See also Basic The best prerequisite"
  },
  {
    "type": "wiki",
    "name": "Rail chain signal",
    "content": "Usage examples 5 History 6 See also Basic The best prerequisite to understand chain signals is to understand signal blocks . Rail chain signals are placed like regular signals at the right side of the railway track. If automated trains are required to drive in both directions on the same track segment, signals need to be added on both sides of the track, opposite each other. Definition Both normal signals and chain signals prevent a train from entering the next block if it is obstructed. However, a chain"
  },
  {
    "type": "wiki",
    "name": "Rail chain signal",
    "content": "entering the next block if it is obstructed. However, a chain signal also looks ahead to the next signal, and turns red if the next signal is red. In effect, this prevents a train from entering a block if it won't be able to leave. When more than one exits exist, the one where the train is pathing to is considered. Advanced If the chain signal has only one exit, it doesn't allow the train to enter its block, if the train would have to stop in said block. Since trains react to chain signals based on their"
  },
  {
    "type": "wiki",
    "name": "Rail chain signal",
    "content": "said block. Since trains react to chain signals based on their own path, chain signals before a crossing will not stop trains if the other track's exit is blocked. If there are several chain signals before a regular one, a train waits before the first chain signal if the block after the regular signal is occupied. If a chain signal switches to green , all exits are free. If it switches to yellow , the block is reserved for a train and all other entrance signals of that block turn red . If it switches to"
  },
  {
    "type": "wiki",
    "name": "Rail chain signal",
    "content": "entrance signals of that block turn red . If it switches to red , all exits are occupied. If it switches to blue , some but not all exits are free. In this case trains may or may not stop, depending on their path. If it is blinking , it is not on a rail, or unable to divide it into separate blocks. Usage examples Regular signal compared to a chain signal With a regular signal, the block after it is empty, so the train can go there. Chain signal with one exit doesn't allow the train to enter the block,"
  },
  {
    "type": "wiki",
    "name": "Rail chain signal",
    "content": "with one exit doesn't allow the train to enter the block, since it can't leave immediately. Simple example with practical usage The chain signal prevents the train from blocking the crossing route while waiting. Double crossing Double crossings are a common cause of train jams, as trains can stop in the middle of the crossing and block everything. It can even cause total deadlock, which require manual intervention to fix the problem. With chain signals, the rails that don't cross are still separated, but"
  },
  {
    "type": "wiki",
    "name": "Rail chain signal",
    "content": "signals, the rails that don't cross are still separated, but trains won't stop in the middle of the crossing. Deadlock prevention Another common cause of blockages are bidirectional single track lines with occasional bypasses. Here a train can't enter the line because another train is in it, but that train in turn can't leave the line. With chain signals, this problem can be totally avoided by preventing the train from going to the shared section unless it can exit it."
  },
  {
    "type": "wiki",
    "name": "Locomotive",
    "content": "Recipe | Time 4+Electronic_circuit 10+Engine_unit 20+Steel_plate 30 → Locomotive 1 | Total raw | Time 16.5+Copper_plate 15+Engine_unit 20+Iron_plate 10+Steel_plate 30 | Map icon | Storage size 3(fuel only) | Resistances Acid: 3/20%Explosion: 15/30%Fire: 15/50%Impact: 50/60%Physical: 15/30% | Stack size 5 | Dimensions 2×6 | Energy consumption 600 kW (Fuel) | Mining time 0.5 | Weight 2000 | Prototype type locomotive | Internal name locomotive | Required technologies | Railway_(research) | Boosting"
  },
  {
    "type": "wiki",
    "name": "Locomotive",
    "content": "| Required technologies | Railway_(research) | Boosting technologies | Braking_force_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Valid fuel | WoodCoalSolid_fuelRocket_fuelNuclear_fuel | The Locomotive is the engine for movement of trains over tracks . Trains are useful for moving large amounts of items over large distances. With the Space Age expansion, locomotives can also utilize elevated rails , which are rails built off of a rail ramp , allowing"
  },
  {
    "type": "wiki",
    "name": "Locomotive",
    "content": "rails , which are rails built off of a rail ramp , allowing trains to freely drive over obstacles on the ground. Locomotives are also good vehicles for the player to reach fixed destinations, as they are considerably faster than the car or tank . Naturally, they do not have the same freedom of movement, as they are confined to the track. They can be set up to travel automatically between train stops , or be controlled manually, even if the player is in a cargo wagon attached to the train instead of the"
  },
  {
    "type": "wiki",
    "name": "Locomotive",
    "content": "player is in a cargo wagon attached to the train instead of the locomotive itself. Automatic trains can also use rail signals and rail chain signals to designate different or changing paths on a railway, as well as manage multiple trains on multiple or intertwining tracks. Locomotives are burner devices and require fuel to run; the more powerful the fuel used, the faster the locomotive's acceleration and top speed will be. Solid fuel , rocket fuel and nuclear fuel will give +20%, +80% and +150%"
  },
  {
    "type": "wiki",
    "name": "Locomotive",
    "content": ", rocket fuel and nuclear fuel will give +20%, +80% and +150% acceleration respectively, and provide +5%, +15% and +15% for top speed respectively. Multiple locomotives can be used on a single train to increase its speed. If a locomotive has no fuel, it can still be moved manually, albeit very slowly. While locomotives can be assembled by hand, the engine unit for it requires automated construction to build, so it cannot be built from raw materials by hand. The color of the locomotive can be customized."
  },
  {
    "type": "wiki",
    "name": "Locomotive",
    "content": "by hand. The color of the locomotive can be customized. Contents 1 Connecting/Disconnecting a locomotive 2 Defense 3 Maximum speed 4 Fuel duration (in seconds) 5 Driving controls 6 Achievements 7 Gallery 8 History 9 See also Connecting/Disconnecting a locomotive Locomotive GUI To connect locomotives, cargo wagons, or fluid wagons to each other, either place the cars next to each other on the track (there will be an outlined green connection), or connect an already existing disconnected car by driving the"
  },
  {
    "type": "wiki",
    "name": "Locomotive",
    "content": "or connect an already existing disconnected car by driving the locomotive near the car and press G by default. To disconnect the last car in a train, press V by default. Defense Locomotives in transit can usually crash through everything in its way (including biters, other vehicles , and the player). However, if the locomotive is moving too slowly, or the target is too tough, it will stop the train instead. Once stopped, the train will continually do damage if trying to accelerate. If the locomotive hits"
  },
  {
    "type": "wiki",
    "name": "Locomotive",
    "content": "do damage if trying to accelerate. If the locomotive hits an enemy , the enemies will fight back and try to destroy the train and the rails. Construction robots are a good way to automatically repair damage at train stations. Train killing three big biters. Maximum speed The maximum speed that a locomotive can get to depends on the train that it is pulling. The speed of an accelerating, fully fueled, train is calculated every tick by the game with the following formula: train_speed = max(0,"
  },
  {
    "type": "wiki",
    "name": "Locomotive",
    "content": "by the game with the following formula: train_speed = max(0, abs(train_speed) - train_friction_force ÷ train_weight) train_speed = train_speed + (10 × number_of_locomotives_in_moving_direction × fuel_acceleration_bonus ÷ train_weight) train_speed = train_speed × (1 - air_resistance_of_front_rolling_stock ÷ (train_weight ÷ 1000)) where train_friction_force is the total friction of each wagon and locomotive (0.5 for any type of wagon including locomotives) and train_weight is the total weight of each wagon"
  },
  {
    "type": "wiki",
    "name": "Locomotive",
    "content": "locomotives) and train_weight is the total weight of each wagon and locomotive (see their individual pages for the weight values). The friction and air resistance of wagons and locomotives can be found in their prototypes. The calculated train_speed is capped to max_speed = 1.2 * fuel_top_speed_multiplier . Fuel duration (in seconds) 1 item of Burning time in seconds 3.33 6.67 20 166.67 2016.67 Driving controls These are the default bindings, they can be changed in the Settings menu. Command Keyboard and"
  },
  {
    "type": "wiki",
    "name": "Locomotive",
    "content": "they can be changed in the Settings menu. Command Keyboard and mouse Controller Enter/Exit ENTER ZR + X Accelerate W Use left joystick Decelerate/Reverse S Use left joystick Pick which fork to take at junction (left, right) A , D Use left joystick Connect/Disconnect train G , V Not set When using a controller, such as on the Nintendo Switch , the behaviour of the left joystick in vehicles can be switched between two modes: Relative vehicle driving mode (default): Moving the stick in a direction will make"
  },
  {
    "type": "wiki",
    "name": "Locomotive",
    "content": "mode (default): Moving the stick in a direction will make vehicles automatically turn and accelerate to that side of the screen. Absolute vehicle driving mode: Moving the stick up/down will make vehicles accelerate/brake. Moving the stick left/right will make vehicles turn in that direction. Achievements Locomotives are directly connected to the following achievements: Getting on track Build a locomotive . Getting on track like a pro Build a locomotive within the first 90 minutes of the game. Watch your"
  },
  {
    "type": "wiki",
    "name": "Locomotive",
    "content": "locomotive within the first 90 minutes of the game. Watch your step Get killed by a moving locomotive ."
  },
  {
    "type": "wiki",
    "name": "Cargo wagon",
    "content": "Recipe | Time 1+Iron_gear_wheel 10+Iron_plate 20+Steel_plate 20 → Cargo_wagon 1 | Total raw | Time 6+Iron_plate 40+Steel_plate 20 | Map icon | Storage size 40 | Resistances Acid: 3/20%Explosion: 15/30%Fire: 15/50%Impact: 50/60%Physical: 15/30% | Stack size 5 | Dimensions 2×6 | Mining time 0.5 | Weight 1000 | Prototype type cargo-wagon | Internal name cargo-wagon | Required technologies | Railway_(research) | Boosting technologies | Braking_force_(research) | Produced by | Assembling_machine_1"
  },
  {
    "type": "wiki",
    "name": "Cargo wagon",
    "content": "| Braking_force_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The Cargo wagon is used in conjunction with locomotives to form trains for the railway . A wagon is used to transport items and can be filled and emptied like a chest, but with many more inserters at the same time. Up to 12 inserters per wagon are possible (from both sides). The inserter item stack size is important to fill the wagon fast! In manual-mode cargo wagons can only be filled or"
  },
  {
    "type": "wiki",
    "name": "Cargo wagon",
    "content": "wagon fast! In manual-mode cargo wagons can only be filled or emptied when they are not moving. In automated-mode it is the same, but additionally they can only filled/empty, when stopped on a train-stop (not at a signal). A spot where inserters are positioned to transfer cargo for wagons is called a train station . Wagons have a stack limitation option the same way chests do, which can be used to limit the number of transported items. Each stack in the cargo wagon can be filtered. This works in the same"
  },
  {
    "type": "wiki",
    "name": "Cargo wagon",
    "content": "in the cargo wagon can be filtered. This works in the same way as the filtering slots in other vehicles; the default key to define or remove the filter is the Middle mouse button . Players can enter a cargo wagon and control any connected locomotives. Contents 1 Processing of items before transport 2 Use as a big chest 3 History 4 See also Processing of items before transport A cargo wagon can be filled with 2000 items of ores ( copper , iron , ...) or 4000 items of processed plates ( Copper plates , iron"
  },
  {
    "type": "wiki",
    "name": "Cargo wagon",
    "content": ", ...) or 4000 items of processed plates ( Copper plates , iron plates , ...). This can make preprocessing of ores into plates near the mines a useful strategy, because the transport of plates is more efficient. Stack size is not the only factor to consider when comparing train transport of preprocessed items to raw items. Some raw items craft into a smaller amount of processed items. One example are iron plates, 5 iron plates can be crafted into 1 steel plate which means that when transported by train,"
  },
  {
    "type": "wiki",
    "name": "Cargo wagon",
    "content": "into 1 steel plate which means that when transported by train, the throughput increases by 5 times. Use as a big chest It is possible to use the cargo wagon as a \"big chest\": Place rails, put an unmoving wagon on it and inserters around. The advantages of this construction are: Cargo can be transferred with many more inserters than with a chest, bypassing the limitations of the inserter stack size bonus . Items are transported instantly over the length of the wagon. Correctly configured, this is faster"
  },
  {
    "type": "wiki",
    "name": "Cargo wagon",
    "content": "the length of the wagon. Correctly configured, this is faster than a transport belt. The inventory slots can be filtered and the inventory size can be limited. Disadvantages include: It cannot be connected to the circuit network . Its contents can be read from a station if it is part of a train stopped at that station, but different wagons in the same train cannot be distinguished. It cannot be accessed by logistic robots . It has a smaller capacity than a steel chest (40 slots vs 48), which is not"
  },
  {
    "type": "wiki",
    "name": "Cargo wagon",
    "content": "capacity than a steel chest (40 slots vs 48), which is not affected by quality ."
  },
  {
    "type": "wiki",
    "name": "Fluid wagon",
    "content": "Recipe | Time 1.5+Iron_gear_wheel 10+Pipe 8+Steel_plate 16+Storage_tank 1 → Fluid_wagon 1 | Total raw | Time 13.5+Iron_plate 48+Steel_plate 21 | Map icon | Fluid storage volume 50000 | Resistances Acid: 3/20%Explosion: 15/30%Fire: 15/50%Impact: 50/60%Physical: 15/30% | Stack size 5 | Dimensions 2×6 | Mining time 0.5 | Weight 1000 | Prototype type fluid-wagon | Internal name fluid-wagon | Required technologies | Fluid_wagon_(research) | Boosting technologies | Braking_force_(research) | Produced by |"
  },
  {
    "type": "wiki",
    "name": "Fluid wagon",
    "content": "technologies | Braking_force_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The fluid wagon , also known as the rail tanker , is capable of transporting fluids by rail . Fluids can be pumped in and out of the wagon using a pump , each fluid wagon can have a maximum of 3 pumps attached at one time, 1 per tank section. Similar to cargo wagons , a locomotive is required to move the liquid wagon. The fluid wagon can carry 50,000 units of fluid. It weighs"
  },
  {
    "type": "wiki",
    "name": "Fluid wagon",
    "content": "The fluid wagon can carry 50,000 units of fluid. It weighs the same of the regular cargo wagon but holds more fluid; a cargo wagon filled with barrels can carry 20,000 units of fluid. Contents 1 Troubleshooting 2 Load and unload times 3 History 4 See also Troubleshooting To get fluid into the fluid wagon, you need a train station with pumps. The wagon needs to be aligned with the rail grid; do this by using a train stop as a train schedule destination, and a fueled locomotive. Also make sure that the rails"
  },
  {
    "type": "wiki",
    "name": "Fluid wagon",
    "content": "and a fueled locomotive. Also make sure that the rails under the Fluid wagon are straight rails and not curved rails . The pumps will only work if the wagon is perfectly orthogonal to the grid. Pump transferring fluids to a fluid wagon. Load and unload times Using more pumps per wagon reduces (un)loading time. Pump quality affects pumping speed. Time in seconds to empty a full fluid-wagon Pump quality 1 pump 2 pumps 3 pumps 42 29 14 33 17 11 27 14 9 22 11 8 17 9 6 Times given are rounded up."
  },
  {
    "type": "wiki",
    "name": "Artillery wagon",
    "content": "Recipe | Time 4+Advanced_circuit 20+Engine_unit 64+Iron_gear_wheel 10+Pipe 16+Steel_plate 40 → Artillery_wagon 1 | Total raw | Time 207+Copper_plate 100+Engine_unit 64+Iron_plate 76+Plastic_bar 40+Steel_plate 40 | Map icon | Resistances Acid: 3/20%Explosion: 15/30%Fire: 15/50%Impact: 50/50%Physical: 15/30% | Stack size 5 | Range Minimum: 32 Automatic:Quality 224 Quality 246.4 Quality 268.8 Quality 291.2 Quality 336 Manual:Quality 560 Quality 616 Quality 672 Quality 728 Quality 840 Quality 224 Quality 246.4"
  },
  {
    "type": "wiki",
    "name": "Artillery wagon",
    "content": "Quality 672 Quality 728 Quality 840 Quality 224 Quality 246.4 Quality 268.8 Quality 291.2 Quality 336 Quality 560 Quality 616 Quality 672 Quality 728 Quality 840 | Shooting speed 0.3/s | Ammunition Artillery_shell | Dimensions 2×6 | Mining time 0.5 | Weight 4000 | Prototype type artillery-wagon | Internal name artillery-wagon | Required technologies | Artillery_(research) | Boosting technologies | Artillery_shell_range_(research)Artillery_shell_shooting_speed_(research)Braking_force_(research) | Produced"
  },
  {
    "type": "wiki",
    "name": "Artillery wagon",
    "content": "| Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The artillery wagon is an end-game wagon mounting a rail cannon that can be added to a train. It fires artillery shells , relatively slow-moving projectiles that explore chunks of terrain they travel across. The wagon gun has both automatic and manual (even longer-ranged) firing modes. Projectiles have sufficient damage to destroy spawners and any type of worm with a single hit, and have a modest area of effect."
  },
  {
    "type": "wiki",
    "name": "Artillery wagon",
    "content": "of worm with a single hit, and have a modest area of effect. Infinitely-stacking research upgrades are available for range and firing speed, but not damage. The artillery turret is essentially the same weapon, but deployed as a static structure like other turrets . Contents 1 Mechanics 2 Limitations 3 Train properties 4 Logistics 5 Achievements 6 Trivia 7 History 8 See also Mechanics Artillery wagons, like Artillery turrets, have a massive range, outranging non-Artillery fixed fortifications by a factor of"
  },
  {
    "type": "wiki",
    "name": "Artillery wagon",
    "content": "outranging non-Artillery fixed fortifications by a factor of 10 or more. In automatic mode, when the train is stopped, the artillery wagon will automatically scan for enemy structures (spawners and worms) and shoot at them. Automatic mode cannot target mobile units (biters and spitters); shells do, however, damage mobile units in the vicinity of impact normally. In manual mode, an Artillery targeting remote is used to point-and-click anywhere in the world, map, or zoomed-in map; each click corresponds to"
  },
  {
    "type": "wiki",
    "name": "Artillery wagon",
    "content": "in the world, map, or zoomed-in map; each click corresponds to one shell delivered to that location, so long as any working artillery turrets and / or wagons are in range. Targeting remotes show the number of fire-ready (loaded and, for wagons, stationary) artillery pieces in range of cursor position when held. Manual fire can be ordered on unexplored areas; shells will explore all chunks they travel across (but no surrounding chunks). Range in automatic mode is 224 tiles (7 chunks); in manual mode, 560"
  },
  {
    "type": "wiki",
    "name": "Artillery wagon",
    "content": "in automatic mode is 224 tiles (7 chunks); in manual mode, 560 tiles (17.5 chunks). Infinite research is available to increase range, at +30% of base range per level, applied to both automatic and manual range. Limitations Aside from the considerable expense of research and assembly for both wagons and shells, there are certain considerations that make these wagons unwise as a full replacement for traditional base defenses, despite their phenomenal range and the advantage of mobility. Artillery shelling"
  },
  {
    "type": "wiki",
    "name": "Artillery wagon",
    "content": "range and the advantage of mobility. Artillery shelling will antagonize enemy mobile units in the vicinity of the impact into rushing the wagon's location at time of firing, regardless of their normal \"aggro radius\". Artillery wagons are relatively slow-firing, although infinite research is available to improve firing speed, at +100% per level, affecting both wagons and stationary turrets and applying to both automatic and manual mode. They also cannot target mobile units in automatic mode. Importantly,"
  },
  {
    "type": "wiki",
    "name": "Artillery wagon",
    "content": "also cannot target mobile units in automatic mode. Importantly, artillery has a minimum range as well, which is 32 tiles. Together, these limitations mean that an artillery wagon needs to be defended, or else moved around rapidly, in the latter case decreasing its value as base defense. For defense, any conventional approach such as walls, gun, laser, and / or flamethrower turrets, or the personal intervention of the player will do. However, players should keep in mind that extensive shelling of large"
  },
  {
    "type": "wiki",
    "name": "Artillery wagon",
    "content": "players should keep in mind that extensive shelling of large biter-infested areas will produce massive attack waves centered on the position of the artillery piece at time of firing, and should plan close-range defenses accordingly. Logistic considerations are also important, as artillery shells have a stack size of 1, meaning any-size container can only hold a modest supply and an inserter will only ever move a single shell at a time. Players may wish to consider assembling near artillery wagon stops if"
  },
  {
    "type": "wiki",
    "name": "Artillery wagon",
    "content": "may wish to consider assembling near artillery wagon stops if practical. The wagon itself can hold a supply of 100 shells (while artillery turrets only hold 15), providing a portable magazine of some size that can be towed around with the weapon without external storage. Train properties The artillery wagon can fire while stopped at a train stop, but not when stopped at a red signal or when moving. A train in automatic mode that is \"No-Path\"ing will not fire. When a train with an artillery wagon is stopped"
  },
  {
    "type": "wiki",
    "name": "Artillery wagon",
    "content": "will not fire. When a train with an artillery wagon is stopped at a train stop, aiming and shooting counts as activity for the purposes of \"X seconds of inactivity\" departure conditions in the train's schedule. This includes the time that the wagon spends scanning the area around it to find enemies, which is done at 1 chunk per tick. Only when it has scanned all chunks and did not find an enemy it will count as inactive. When part of a manual-mode (player-driven) train, artillery wagons will fire whenever"
  },
  {
    "type": "wiki",
    "name": "Artillery wagon",
    "content": "(player-driven) train, artillery wagons will fire whenever the train is stopped, regardless of where it was stopped. Artillery wagons weigh as much as 4 regular wagons (or 2 locomotives ) for the purposes of train acceleration calculations. Fortunately, nuclear fuel provides a massive 250% boost to acceleration (compared to 180% for rocket fuel, the next best type), making it an attractive fuel for artillery trains. Logistics In addition to firing them, artillery wagons can be used to transport shells from"
  },
  {
    "type": "wiki",
    "name": "Artillery wagon",
    "content": "them, artillery wagons can be used to transport shells from place to place. Inserters will both load and unload artillery wagons in the same manner as they would any other wagon, with the obvious difference that artillery wagons can only take artillery shells as cargo. However, each artillery wagon can hold 100 shells, while a regular cargo wagon only holds 40. Thus, artillery wagons are the most space-efficient method of transporting artillery shells by rail. They are not, however, the most mass-efficient"
  },
  {
    "type": "wiki",
    "name": "Artillery wagon",
    "content": "shells by rail. They are not, however, the most mass-efficient one, as an artillery wagon weighs 4 times as much as a regular wagon, but holds only 2.5 times as many shells. Thus, if train length is not a concern but acceleration and / or fuel efficiency is, regular wagons are superior for transporting shells. Achievements Art of siege Destroy an enemy structure using artillery . Keeping your hands clean Destroy your first enemy structure using artillery . Trivia Large rail-transported cannon were built in"
  },
  {
    "type": "wiki",
    "name": "Artillery wagon",
    "content": "artillery . Trivia Large rail-transported cannon were built in the late 19th and early 20th century, up until and including World War II. The larger models were heavy and very slow firing and took many hours to set up, but had a greater range and power per shot than any other weapon in existence at the time (considerably greater than battleship-size naval guns, for example). The advent of rocketry, as well as large bomber planes capable of deploying multi-ton bombs, eventually made these guns obsolete."
  },
  {
    "type": "wiki",
    "name": "Artillery wagon",
    "content": "deploying multi-ton bombs, eventually made these guns obsolete. Perhaps the best-known example is the Schwerer Gustav (Heavy Gustav), the largest gun ever fired."
  },
  {
    "type": "wiki",
    "name": "Car",
    "content": "Recipe | Time 2+Engine_unit 8+Iron_plate 20+Steel_plate 5 → Car 1 | Total raw | Time 2+Engine_unit 8+Iron_plate 20+Steel_plate 5 | Map icon | Storage size 80 | Resistances Acid: 0/20%Fire: 0/50%Impact: 50/30% | Stack size 1 | Range 20 | Shooting speed 15/s | Ammunition Firearm_magazinePiercing_rounds_magazineUranium_rounds_magazine | Energy consumption 150 kW (Fuel) | Mining time 0.4 | Weight 700 | Prototype type car | Internal name car | Required technologies | Automobilism_(research) | Produced by |"
  },
  {
    "type": "wiki",
    "name": "Car",
    "content": "Required technologies | Automobilism_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Valid fuel | WoodCoalSolid_fuelRocket_fuelNuclear_fuel | Two cars taking on the colors of their current drivers. The car is the earliest alternate form of transportation available to the player , and is one of three non-rail vehicles in Factorio; the others being the tank and the spidertron . Although it requires fuel, driving a car is much faster than running, letting"
  },
  {
    "type": "wiki",
    "name": "Car",
    "content": "fuel, driving a car is much faster than running, letting the player scout out areas or outmaneuver enemies . Cars have a vehicle machine gun that has a 50% higher rate of fire and can fire two tiles farther than the submachine gun , 80 slots of storage and 450 health, allowing the player to use hit-and-run tactics against small groups of enemies. Cars can collide with objects. Both the car and the object collided with may take damage. The damage is dependent on the speed of the car and the health of the"
  },
  {
    "type": "wiki",
    "name": "Car",
    "content": "is dependent on the speed of the car and the health of the target; small biters and trees can be safely rammed but colliding with big biters can easily destroy the vehicle and its contents. If the car is destroyed, its inventory is destroyed with it, though the player gets ejected and not killed. In multiplayer, it is possible for a player to enter a car alongside another player. The passenger can take control of the weapons of the car using a switch in the GUI of the car, but cannot steer the car. Cars"
  },
  {
    "type": "wiki",
    "name": "Car",
    "content": "a switch in the GUI of the car, but cannot steer the car. Cars will take on the color of the player who drove it last. Cars are moved by transport belts and inserters can interact with them. Because of that, cars may be used as large chests or as another mean of transportation besides belts, trains and robots . Controls Main article: Controls Accelerating opposite of the velocity of the car will cause it to brake. Held acceleration controls won't have any effect after a brake. The faster the car is going,"
  },
  {
    "type": "wiki",
    "name": "Car",
    "content": "have any effect after a brake. The faster the car is going, the longer distance it will take to brake. The more powerful the fuel used to power the car, the faster the car's acceleration: Solid fuel adds 20% acceleration, rocket fuel adds 80% while nuclear fuel adds 150%. Stone brick will reduce rolling resistance on cars, with concrete and refined concrete equally reducing resistance even further. When using a controller, such as on the Nintendo Switch , the behaviour of the left joystick in vehicles can"
  },
  {
    "type": "wiki",
    "name": "Car",
    "content": "Switch , the behaviour of the left joystick in vehicles can be switched between two modes: Relative vehicle driving mode (default): Moving the stick in a direction will make vehicles automatically turn and accelerate to that side of the screen. Absolute vehicle driving mode: Moving the stick up/down will make vehicles accelerate/brake. Moving the stick left/right will make vehicles turn in that direction. Cars cannot be remote controlled and have no equipment grid, unlike the tank and spidertron . Action"
  },
  {
    "type": "wiki",
    "name": "Car",
    "content": "have no equipment grid, unlike the tank and spidertron . Action Default keyboard binding Default controller binding Enter/leave vehicle ENTER (AKA carriage return, etc) ZR + X Accelerate forward W Use left joystick Accelerate backwards S Use left joystick Steer right D Use left joystick Steer left A Use left joystick Speeds Car top speed (km/h) Top speed with various fuels on different tiles Wood Coal Solid fuel Rocket fuel Nuclear fuel Sand 87.6 87.6 96.0 117.5 138.5 Grass 92.9 92.9 101.8 124.7 146.9 Red"
  },
  {
    "type": "wiki",
    "name": "Car",
    "content": "87.6 96.0 117.5 138.5 Grass 92.9 92.9 101.8 124.7 146.9 Red desert 92.9 92.9 101.8 124.7 146.9 Dirt 99.4 99.4 108.9 133.3 157.1 Stone path 112.2 112.2 122.9 150.5 177.4 Shallow water 117.7 117.7 128.9 157.9 186.0 Concrete * 131.6 131.6 144.1 176.5 208.1 Refined concrete * 131.6 131.6 144.1 176.5 208.1 * The same stats apply to the hazard version of these surfaces. Speed in reverse The top speed of the car in reverse is ~70.7% of the forward top speed. Achievements Steamrolled Destroy 10 spawners by impact."
  },
  {
    "type": "wiki",
    "name": "Car",
    "content": "speed. Achievements Steamrolled Destroy 10 spawners by impact. Run Forrest, run Destroy 100 trees by impact."
  },
  {
    "type": "wiki",
    "name": "Tank",
    "content": "Recipe | Time 5+Advanced_circuit 10+Engine_unit 32+Iron_gear_wheel 15+Steel_plate 50 → Tank 1 | Total raw | Time 107.5+Copper_plate 50+Engine_unit 32+Iron_plate 50+Plastic_bar 20+Steel_plate 50 | Map icon | Storage size 80 | Resistances Acid: 0/70%Explosion: 15/70%Fire: 15/60%Impact: 50/80%Physical: 15/60% | Equipment grid size Quality 6×8 Quality 7×9 Quality 8×10 Quality 9×11 Quality 11×13 Quality 6×8 Quality 7×9 Quality 8×10 Quality 9×11 Quality 11×13 | Stack size 1 | Range Tank cannon: 30 Vehicle machine"
  },
  {
    "type": "wiki",
    "name": "Tank",
    "content": "11×13 | Stack size 1 | Range Tank cannon: 30 Vehicle machine gun: 20 Vehicle flamethrower: 9 | Shooting speed Tank cannon: 0.67/sVehicle machine gun: 15/sVehicle flamethrower: 67.5/s | Ammunition Explosive_cannon_shellCannon_shellUranium_cannon_shellExplosive_uranium_cannon_shellFirearm_magazinePiercing_rounds_magazineUranium_rounds_magazineFlamethrower_ammo | Energy consumption 600 kW (Fuel) | Mining time 0.5 | Weight 20000 | Prototype type car | Internal name tank | Required technologies |"
  },
  {
    "type": "wiki",
    "name": "Tank",
    "content": "type car | Internal name tank | Required technologies | Tank_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Valid fuel | WoodCoalSolid_fuelRocket_fuelNuclear_fuel | This article is about the armored combat vehicle. For the liquid storage container, see Storage tank . Tanks, like cars, match the color of the player driving them. The tank is a heavy armored fighting vehicle . It is a mid-game vehicle with three weapons; an integrated submachine gun , a"
  },
  {
    "type": "wiki",
    "name": "Tank",
    "content": "vehicle with three weapons; an integrated submachine gun , a short range flamethrower and a powerful cannon that uses cannon shells . It, along with the car and spidertron , are the three non-rail vehicles in Factorio. In multiplayer , it is possible for a player to enter a tank alongside another player. The passenger can take control of the weapons of the tank using a switch in the GUI of the tank, but cannot steer the tank. Since engine units can only be built in assembling machines , tanks (like cars)"
  },
  {
    "type": "wiki",
    "name": "Tank",
    "content": "can only be built in assembling machines , tanks (like cars) cannot be built from scratch by hand from their raw materials. If the tank is destroyed, its inventory is destroyed with it, though the player gets ejected and not killed. Tanks will change color based on the color of the player who drove it last. Tanks can be driven remotely. Coupled with the tank's equipment grid, the player can remotely manipulate distant outposts without being there as well as to remotely expand the base by attacking enemy"
  },
  {
    "type": "wiki",
    "name": "Tank",
    "content": "there as well as to remotely expand the base by attacking enemy nests . However, unlike the spidertron, the tank lacks any map-revealing capabilities, and so is effectively confined to areas where the player has sufficient radar coverage. The tank and its weapons continue to operate normally if driven outside of visual range, but if the player \"exits\" the vehicle while in the fog of war then the tank will be stranded until visual contact can be re-established. Contents 1 Achievements 2 Combat 3 Movement 4"
  },
  {
    "type": "wiki",
    "name": "Tank",
    "content": "re-established. Contents 1 Achievements 2 Combat 3 Movement 4 Speeds 4.1 Tank top speed (km/h) 4.2 Speed in reverse 5 Capsules and Bots integration 6 Exclusive Weapons 6.1 Flamethrower 6.2 Cannon 7 History 8 Development data 9 See also Achievements Steamrolled Destroy 10 spawners by impact. Run Forrest, run Destroy 100 trees by impact. Combat The tank is a strong fighting vehicle due to its large health pool and the very high damage of its main weapon, the cannon. Construction robots can also repair the"
  },
  {
    "type": "wiki",
    "name": "Tank",
    "content": "weapon, the cannon. Construction robots can also repair the tank with repair packs , and the tank can even bring its own robots to do so using the personal roboport equipment. The tank's weaponry can be augmented by equipment modules like the personal laser defense . If the player is inside of the tank, the player can deploy thrown items such as grenades , poison capsules , and follower robots from within the tank. The tank particularly shines in battle against worms , as their high damage projectiles are"
  },
  {
    "type": "wiki",
    "name": "Tank",
    "content": "in battle against worms , as their high damage projectiles are much less of a problem for an entity with a high health pool. Defensive equipment or capsules/drones can be used to deal with mobile enemies. The tank has a lower base speed than the car and is less maneuverable than a player outside of a vehicle. As a result, it may not perform as well in combat against melee enemies or enemies with shorter range than the player, as it has more difficulty dodging enemies and avoiding cliffs . This may result"
  },
  {
    "type": "wiki",
    "name": "Tank",
    "content": "dodging enemies and avoiding cliffs . This may result in the tank being destroyed quickly, leaving the player in a tight spot. Movement The tank is very robust, and unlike the car can move through and destroy trees without taking damage. Even when not moving, simply driving into an entity is enough to damage it. This can also be employed as a weapon against enemies , although certain enemies and structures (nests in particular) will deal high damage to the tank in the process, requiring repair after"
  },
  {
    "type": "wiki",
    "name": "Tank",
    "content": "high damage to the tank in the process, requiring repair after skirmishes. The tank's default speed is slower than the car, and movement speed bonuses from terrain (e.g. concrete ) are substantially reduced. Unlike the car, the tank can be rotated in place without moving forwards or backwards. The speed and, in particular, responsiveness of the tank can be improved somewhat by burning better fuel . The tank, like all other vehicles, gains top speed and acceleration bonuses when running on solid fuel,"
  },
  {
    "type": "wiki",
    "name": "Tank",
    "content": "top speed and acceleration bonuses when running on solid fuel, rocket fuel and nuclear fuel, as opposed to wood or coal. The bonuses are +5% / +15% / +15% top speed and +20% / +80% / +150% acceleration for solid fuel, rocket fuel and nuclear fuel, respectively; wood and coal both yield the base level of top speed and acceleration. Exoskeletons can also be installed into the tank's equipment grid to increase its top speed as though the tank was the player. Equipping 3 exoskeletons allows the tank to outrun"
  },
  {
    "type": "wiki",
    "name": "Tank",
    "content": "the player. Equipping 3 exoskeletons allows the tank to outrun a car on any natural terrain, and with 5 exoskeletons the tank surpasses the car's maximum possible speed. Increasing the tank's speed with exoskeletons does not affect the tank's acceleration or deceleration, so it will take some time for the tank to accelerate to its top speed, as well as to stop from that speed. Given how destructive the tank can be to buildings, using many exoskeletons in a tank can make it dangerous to one's own base."
  },
  {
    "type": "wiki",
    "name": "Tank",
    "content": "exoskeletons in a tank can make it dangerous to one's own base. Speeds Tank top speed (km/h) Top speed with various fuels on different tiles Wood Coal Solid fuel Rocket fuel Nuclear fuel Sand 50.1 50.1 54.8 67.1 79.1 Grass 50.9 50.9 55.8 68.3 80.5 Red desert 50.9 50.9 55.8 68.3 80.5 Dirt 51.4 51.4 56.8 69.6 82.0 Stone path 53.4 53.4 58.5 71.6 84.4 Shallow water 53.9 53.9 59.1 72.3 85.3 Concrete * 55.0 55.0 60.3 73.8 87.0 Refined concrete * 55.0 55.0 60.3 73.8 87.0 * The same stats apply to the hazard"
  },
  {
    "type": "wiki",
    "name": "Tank",
    "content": "* 55.0 55.0 60.3 73.8 87.0 * The same stats apply to the hazard version of these surfaces. Speed in reverse The top speed of the tank in reverse is ~70.6% of the forward top speed. Capsules and Bots integration The player directly driving the tank cannot fire any weapons equipped on the player. However, the player still has access to their inventory. The player can use inventory items, such as capsules and combat robots . The player's equipment modules are also available, so the player's construction"
  },
  {
    "type": "wiki",
    "name": "Tank",
    "content": "modules are also available, so the player's construction robots run by a personal roboport can still be deployed from within the tank, which will use repair packs from the player to repair the tank. If the tank and the player both have personal laser defenses , both can be active at the same time. Upon researching logistic system , the tank can utilize the logistic network to make requests like a player. Exclusive Weapons Flamethrower A powerful short-ranged weapon that consumes flamethrower ammo . Unlike"
  },
  {
    "type": "wiki",
    "name": "Tank",
    "content": "short-ranged weapon that consumes flamethrower ammo . Unlike the hand-held flamethrower or the flamethrower turret , the tank version does not set entities on fire. Cannon The tank's cannon is one of the few weapons that damages anything in a line between the tank and the target. All cannon shells have the ability to pierce targets, which means that if the shell deals enough damage to kill what it hits, the shell can continue onward and deal damage to another target. Standard cannon shells deal significant"
  },
  {
    "type": "wiki",
    "name": "Tank",
    "content": "to another target. Standard cannon shells deal significant damage to a single target and have large piercing potential, while explosive cannon shells damage all targets in an area which makes them useful for dealing with large enemy groups. There are uranium versions of both shell types which deal even more damage. Development data Weekly blogs concerning the Tank: https://www.factorio.com/blog/post/fff-412 https://www.factorio.com/blog/post/fff-56 https://www.factorio.com/blog/post/fff-51"
  },
  {
    "type": "wiki",
    "name": "Tank",
    "content": "https://www.factorio.com/blog/post/fff-51 https://www.factorio.com/blog/post/fff-48 https://www.factorio.com/blog/post/fff-44"
  },
  {
    "type": "wiki",
    "name": "Spidertron",
    "content": "Recipe | Time 10+Efficiency_module_32+Exoskeleton 4+Portable_fission_reactor 2+Low_density_structure 150+Processing_unit 16+Radar 2+Raw_fish 1+Rocket_launcher 4 → Spidertron 1 | Total raw | Time 7 k+Copper_plate 6.3 k+Electric_engine_unit 120+Iron_plate 718+Plastic_bar 1.7 k+Processing_unit 506+Raw_fish 1+Steel_plate 580+Uranium-2350.8+Uranium-23815.2 | Map icon | Storage size Quality 80 Quality 104 Quality 128 Quality 152 Quality 200 Quality 80 Quality 104 Quality 128 Quality 152 Quality 200 | Resistances"
  },
  {
    "type": "wiki",
    "name": "Spidertron",
    "content": "Quality 104 Quality 128 Quality 152 Quality 200 | Resistances Acid: 0/70%Electric: 0/70%Explosion: 20/75%Fire: 15/60%Impact: 50/80%Laser: 0/70%Physical: 15/60% | Equipment grid size Quality 10×6 Quality 11 x 7 Quality 12 x 8 Quality 13 x 9 Quality 15 x 11 Quality 10×6 Quality 11 x 7 Quality 12 x 8 Quality 13 x 9 Quality 15 x 11 | Stack size 1 | Range Spidertron rocket launcher: 36 | Shooting speed Spidertron rocket launcher: 1/s | Ammunition RocketExplosive_rocketAtomic_bomb | Mining time 1 | Prototype"
  },
  {
    "type": "wiki",
    "name": "Spidertron",
    "content": "RocketExplosive_rocketAtomic_bomb | Mining time 1 | Prototype type spider-vehicle | Internal name spidertron | Accepted equipment | Portable_solar_panelPortable_fusion_reactorEnergy_shieldEnergy_shield_MK 2 Personal_batteryPersonal_battery_MK 2 Personal_battery_MK 3 Portable_fission_reactorPersonal_laser_defenseDischarge_defenseExoskeletonPersonal_roboportPersonal_roboport_MK 2 NightvisionBelt_immunity_equipmentToolbelt_equipment | Required technologies | Spidertron_(research) | Produced by |"
  },
  {
    "type": "wiki",
    "name": "Spidertron",
    "content": "| Required technologies | Spidertron_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The spidertron is a versatile lategame vehicle capable of traversing rough terrain. It, along with the car and tank , is one of three non-rail vehicles in Factorio. It's equipped with four fast-firing rocket launchers capable of manual or automatic targeting. It can be driven manually or remotely controlled using the spidertron remote . Furthermore, it has an equipment"
  },
  {
    "type": "wiki",
    "name": "Spidertron",
    "content": "using the spidertron remote . Furthermore, it has an equipment grid which accepts all equipment modules . Spidertron's legs can be moved by belts which can be prevented by inserting belt immunity equipment into its equipment grid. The vehicle can be renamed, and its color can be changed independently of the color of the player that is riding inside it. This color and name are shown in the tooltip of all connected spidertron remotes . Additionally, the spidertron's inventory can have logistics requests and"
  },
  {
    "type": "wiki",
    "name": "Spidertron",
    "content": "the spidertron's inventory can have logistics requests and auto-trash filters set up, similar to the player inventory, so the vehicle is automatically supplied by logistic robots . Picking up the vehicle keeps the modules inside its equipment grid, its name, its color and the logistics requests saved in the item, however any content from the spidertron's inventory is placed into the player's inventory and not saved in the item. Contents 1 Combat 2 Speed 3 Trivia 4 Gallery 5 Achievements 6 History 7 See"
  },
  {
    "type": "wiki",
    "name": "Spidertron",
    "content": "2 Speed 3 Trivia 4 Gallery 5 Achievements 6 History 7 See also Combat The four spidertron rocket launchers operate in \"chain mode\" which allows rapid firing of rockets at enemies. The spidertron can be set to automatically target enemies, both with or without any passengers inside the spidertron. The spidertron's combat capabilities are enhanced by its equipment grid, e.g. energy shields can be equipped to increase its protection or personal laser defenses can be used for higher killing power. The"
  },
  {
    "type": "wiki",
    "name": "Spidertron",
    "content": "laser defenses can be used for higher killing power. The spidertron's equipment modules are used additionally to any modules that the riding player may have equipped in their own power armor . Speed Unlike the car and tank, which are affected by the surfaces they travel on, the spidertron's speed does not change on different surfaces. Due to the way the spidertron travels, its speed slightly fluctuates and does not consistently stay at its top speed. The spidertron does not take any fuel , therefore its"
  },
  {
    "type": "wiki",
    "name": "Spidertron",
    "content": "speed. The spidertron does not take any fuel , therefore its speed can be only increased by equipping exoskeletons into its grid. Up to 5 exoskeletons can fit in the vehicle's grid. The top speeds (in km/h) are as follows: Equipment Top speed Default ~46 1 exoskeleton ~57 2 exoskeletons ~68 3 exoskeletons ~85 4 exoskeletons ~90 5 exoskeletons ~102 Trivia The spidertron was first mentioned in the Friday Facts #120 , however it was not introduced into the game and did not appear on the roadmap. After FFF"
  },
  {
    "type": "wiki",
    "name": "Spidertron",
    "content": "into the game and did not appear on the roadmap. After FFF #120 the spidertron was sometimes hidden in other Friday Facts such as FFF #200 , FFF #315 and FFF #330 . However, the spidertron was not developed further after its first mention: \"Than maybe he felt FFF was too short that week, so he made the gif, and it was not touched ever since\". It was then introduced in version 1.0.0 as a surprise feature, more than 4 years after it was first teased. The spidertron is the only item in the game to require raw"
  },
  {
    "type": "wiki",
    "name": "Spidertron",
    "content": "The spidertron is the only item in the game to require raw fish as a crafting ingredient. It is not known for certain why this is the case, although it could be to limit the automatability of spidertron production (since raw fish production is challenging to automate). In Space Age , the ingredients for a spidertron are shared between Nauvis and Gleba . Both raw fish and the uranium-235 needed for the portable fission reactor can only be obtained on Nauvis, while the carbon fiber needed for rocket turrets"
  },
  {
    "type": "wiki",
    "name": "Spidertron",
    "content": "on Nauvis, while the carbon fiber needed for rocket turrets can only be acquired on Gleba . As such, automating spidertron production requires regular transport between the two planets. A legendary spidertron with its equipment grid filled with 55 legendary toolbelt equipment modules has a total inventory size of 1575 slots. Achievements Arachnophilia Build a spidertron ."
  },
  {
    "type": "wiki",
    "name": "Spidertron remote",
    "content": "Allows sending simple move commands to the spidertron from the map or the world. Must be first connected to a spidertron by clicking it with the remote. | Stack size 1 | Prototype type spidertron-remote | Internal name spidertron-remote | The spidertron remote can be used to remotely control a spidertron . It can be created with ALT + A or by pressing the respective button on the shortcut bar after unlocking the spidertron research . First, the remote needs to be connected to spidertrons. This is done by,"
  },
  {
    "type": "wiki",
    "name": "Spidertron remote",
    "content": "remote needs to be connected to spidertrons. This is done by, when holding a remote, holding Left mouse button and dragging over one or more spidertrons. Once a group of spidertrons is selected with a remote, clicking Right mouse button with the remote in the world or map view will prompt the connected spidertron(s) to move to the selected location. They will move to that location in a straight line from their current position, not attempting to pathfind around obstacles. A sequence of move commands can be"
  },
  {
    "type": "wiki",
    "name": "Spidertron remote",
    "content": "pathfind around obstacles. A sequence of move commands can be queued by using SHIFT + Right mouse button with the remote in the world or map view. Queuing move commands allows creating complex paths for the spidertron. The queued goal positions and their connections are drawn in the spidertron's color both in the map view and in the world. Alternatively, SHIFT + Right mouse button with the remote can be used to command the spidertron(s) to follow a specific entity, such as a player or another vehicle ."
  },
  {
    "type": "wiki",
    "name": "Spidertron remote",
    "content": "follow a specific entity, such as a player or another vehicle . Once connected to spidertrons, the remote can be placed in the quickbar for easy access. Remotes placed here will remember its connected spidertron(s) and will remain in the quickbar even if the player dies. If playing in Space Age , a remote placed in the quickbar will remember its connected spidertron(s) even if the player is on another planet. It will also remember which planet those spidertrons are on. The remote's icon in the quickbar"
  },
  {
    "type": "wiki",
    "name": "Spidertron remote",
    "content": "those spidertrons are on. The remote's icon in the quickbar will gain a small overlay showing which planet the spidertron(s) are on, if that is not the same planet the player is currently viewing. Clicking the remote will instantly open the map and center the view on the connected spidertron(s), even if they are on a different planet."
  },
  {
    "type": "wiki",
    "name": "Logistic robot",
    "content": "Recipe | Time 0.5+Advanced_circuit 2+Flying_robot_frame 1 → Logistic_robot 1 | Total raw | Time 43.25+Battery 2+Copper_plate 14.5+Electric_engine_unit 1+Iron_plate 7+Plastic_bar 4+Steel_plate 1 | Resistances Fire: 0/85% | Stack size 50 | Energy consumption 63.75 kW (Electric_system) | Energy capacity Quality 1.5 MJQuality 3 MJQuality 4.5 MJQuality 6 MJQuality 9 MJ(Electric_system) Quality 1.5 MJ Quality 3 MJ Quality 4.5 MJ Quality 6 MJ Quality 9 MJ | Mining time 0.1 | Prototype type logistic-robot |"
  },
  {
    "type": "wiki",
    "name": "Logistic robot",
    "content": "9 MJ | Mining time 0.1 | Prototype type logistic-robot | Internal name logistic-robot | Required technologies | Logistic_robotics_(research) | Boosting technologies | Worker_robot_cargo_size_(research)Worker_robot_speed_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Logistic robots are autonomous floating devices capable of transporting resources in a logistic network . They are one of two types of floating robotic devices, the other being construction"
  },
  {
    "type": "wiki",
    "name": "Logistic robot",
    "content": "types of floating robotic devices, the other being construction robots . The basic movement speed of logistic robots is 0.05 tiles/tick (3 tiles per second) when they have enough power. When out of power, robots move at 20% of their current normal travel speed. This movement speed can be increased infinitely by the worker robot speed (research) . Logistic robots have no means of defending themselves and do not run when they encounter enemies. Despite being a floating entity, ground units using melee are"
  },
  {
    "type": "wiki",
    "name": "Logistic robot",
    "content": "Despite being a floating entity, ground units using melee are still capable of destroying them. By default, each robot can only carry one item. This limit can be increased up to four items by the worker robot cargo size (research) . Robots consume power per tile traveled, additionally to consuming power per second spent in the air. When they run out of power, they have to recharge at a roboport , or a personal roboport , depending on where the robots were originally placed. Alternatively, they can be mined"
  },
  {
    "type": "wiki",
    "name": "Logistic robot",
    "content": "robots were originally placed. Alternatively, they can be mined out of the air by the player which restores their internal power buffer, allowing the player to redeploy them immediately. Contents 1 Notes 2 Achievements 3 History 4 See also Notes Logistic robots will pick up items in the following priority: active provider chests > storage chests , buffer chests > passive provider chests Logistic robots will begin to fill storage chests from active provider chests if there are no other tasks available. The"
  },
  {
    "type": "wiki",
    "name": "Logistic robot",
    "content": "provider chests if there are no other tasks available. The filter that can be set on the storage chest is respected even if items that are actively being pushed to the network can not be stored anywhere else. If a logistic robot carrying an item is unable to deliver its cargo (e.g. if the player moves out of range), it will drop its cargo in a storage chest before moving to other tasks. Logistic bots are slightly slower than construction robots , and cost more advanced materials to craft Note that"
  },
  {
    "type": "wiki",
    "name": "Logistic robot",
    "content": "robots , and cost more advanced materials to craft Note that researching more robot speed will also increase the robots' energy consumption. Logistic robots moving iron plates from an active provider chest to a storage chest . Achievements You've got a package Supply the character by logistic robot . Delivery service Supply the character with 10k items delivered by logistic robots ."
  },
  {
    "type": "wiki",
    "name": "Construction robot",
    "content": "Recipe | Time 0.5+Electronic_circuit 2+Flying_robot_frame 1 → Construction_robot 1 | Total raw | Time 26.75+Battery 2+Copper_plate 7.5+Electric_engine_unit 1+Iron_plate 5+Steel_plate 1 | Resistances Electric: 0/50%Fire: 0/85% | Stack size 50 | Energy consumption 75.9 kW (Electric_system) | Energy capacity Quality 3 MJQuality 6 MJQuality 9 MJQuality 12 MJQuality 18 MJ(Electric_system) Quality 3 MJ Quality 6 MJ Quality 9 MJ Quality 12 MJ Quality 18 MJ | Mining time 0.1 | Prototype type construction-robot |"
  },
  {
    "type": "wiki",
    "name": "Construction robot",
    "content": "18 MJ | Mining time 0.1 | Prototype type construction-robot | Internal name construction-robot | Required technologies | Construction_robotics_(research) | Boosting technologies | Worker_robot_cargo_size_(research)Worker_robot_speed_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Construction robots are autonomous floating devices capable of repairing or building the player's structures. They are one of two type of floating robotic devices, the other"
  },
  {
    "type": "wiki",
    "name": "Construction robot",
    "content": "They are one of two type of floating robotic devices, the other being the logistic robots . They run on electricity from roboports , or a personal roboport . Contents 1 Mechanics 2 Achievements 3 History 4 See also Mechanics Construction robots accomplish various tasks, including: They repair damaged entities using repair packs . They replace destroyed entities as long as they are available in a provider chest or storage chest . They remove entities marked with the deconstruction planner . Removed entities"
  },
  {
    "type": "wiki",
    "name": "Construction robot",
    "content": "marked with the deconstruction planner . Removed entities are transported into storage chests; if a requester / buffer chest has an unfulfilled logistics request for the item being deconstructed then construction bots will prioritise placing items directly in to these chests. This includes environmental entities such as fish and trees ; cliffs can be \"deconstructed\" if a construction robot has access to cliff explosives in a provider or storage chest in their network, or in the player's inventory. They add"
  },
  {
    "type": "wiki",
    "name": "Construction robot",
    "content": "chest in their network, or in the player's inventory. They add entities marked with a blueprint or placed as ghosts as long as these entities are available. Entities are fetched from the closest logistic chest. They can carry up to four items at once, depending on the researched worker robot cargo size . They can use the items to build up to four tiles at once, but they can only build one entity at a time. Construction robots have no means of defending themselves and do not run when they encounter enemies."
  },
  {
    "type": "wiki",
    "name": "Construction robot",
    "content": "themselves and do not run when they encounter enemies. Because they often operate at the \"front\", they are in high danger to be destroyed. Despite being a floating entity, ground units using melee are still capable of destroying them, and any fire (such as ones from flamethrower turrets ) can also damage them. Researching more cargo or more speed for the logistic bots are also valid for the construction robots. Note that more speed will also increase the robots' energy consumption. Construction robots"
  },
  {
    "type": "wiki",
    "name": "Construction robot",
    "content": "increase the robots' energy consumption. Construction robots building on ghost entities. Achievements Automated cleanup Deconstruct 100 objects with the construction robots . Automated construction Construct 100 machines using robots . You are doing it right Construct more machines using robots than manually."
  },
  {
    "type": "wiki",
    "name": "Active provider chest",
    "content": "Recipe | Time 0.5+Advanced_circuit 1+Electronic_circuit 3+Steel_chest 1 → Active_provider_chest 1 | Total raw | Time 14.25+Copper_plate 9.5+Iron_plate 5+Plastic_bar 2+Steel_plate 8 | Storage size Quality 48 Quality 62 Quality 76 Quality 91 Quality 120 Quality 48 Quality 62 Quality 76 Quality 91 Quality 120 | Resistances Fire: 0/90%Impact: 0/60% | Stack size 50 | Dimensions 1×1 | Mining time 0.1 | Prototype type logistic-container | Internal name active-provider-chest | Required technologies |"
  },
  {
    "type": "wiki",
    "name": "Active provider chest",
    "content": "| Internal name active-provider-chest | Required technologies | Logistic_system_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The active provider chest is a large advanced storage item that is part of the logistic network . Logistic robots will pick up items from this chest to move them to requester chests , buffer chests , the player , or storage chests . Logistic robots will actively attempt to move all items within an active provider chest to"
  },
  {
    "type": "wiki",
    "name": "Active provider chest",
    "content": "attempt to move all items within an active provider chest to storage chests when there are no other tasks available. Active provider chests have the highest priority as pick-up points for logistic robots when fulfilling requests. The main use-case for active provider chests is to be the output for a production building or process that cannot afford to back up due to outputs not being consumed fast enough. One clear example is with nuclear reactors . A reactor will not start a new cycle if its output is not"
  },
  {
    "type": "wiki",
    "name": "Active provider chest",
    "content": ". A reactor will not start a new cycle if its output is not cleared of depleted uranium fuel cells . By putting them in an active provider chest, logistics robots will frequently remove such cells, ensuring that the chest will only fill up if there is insufficient logistics storage for such fuel cells. Active provider chests are designed to be emptied. If the player does not want the contained items to be moved until they are specifically requested, then the passive provider chest or buffer chest can be"
  },
  {
    "type": "wiki",
    "name": "Active provider chest",
    "content": "then the passive provider chest or buffer chest can be used instead. Achievements Logistic network embargo Finish research with space science pack for the base game or any planetary science pack for Space Age without building any active provider , buffer , or requester chests ."
  },
  {
    "type": "wiki",
    "name": "Passive provider chest",
    "content": "Recipe | Time 0.5+Advanced_circuit 1+Electronic_circuit 3+Steel_chest 1 → Passive_provider_chest 1 | Total raw | Time 14.25+Copper_plate 9.5+Iron_plate 5+Plastic_bar 2+Steel_plate 8 | Storage size Quality 48 Quality 62 Quality 76 Quality 91 Quality 120 Quality 48 Quality 62 Quality 76 Quality 91 Quality 120 | Resistances Fire: 0/90%Impact: 0/60% | Stack size 50 | Dimensions 1×1 | Mining time 0.1 | Prototype type logistic-container | Internal name passive-provider-chest | Required technologies |"
  },
  {
    "type": "wiki",
    "name": "Passive provider chest",
    "content": "Internal name passive-provider-chest | Required technologies | Construction_robotics_(research)Logistic_robotics_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The passive provider chest is a storage item that is part of the logistic network . Logistic robots will pick up items from this box to move them to the player or requester chests , but only in this direction. This makes them useful for storing items assembled in any particular area - useful as a"
  },
  {
    "type": "wiki",
    "name": "Passive provider chest",
    "content": "storing items assembled in any particular area - useful as a buffer between belts or at the end of a belt. If you want the contained items to later be consolidated in storage chests, then use the active provider chest instead. Construction robots will pick up items for construction, replacement of destroyed entities and repair packs from passive provider chests. Passive provider chests have the lowest priority as pick-up points for logistic robots. Logistic robots will not empty passive provider chests if"
  },
  {
    "type": "wiki",
    "name": "Passive provider chest",
    "content": "Logistic robots will not empty passive provider chests if the requested items are available in active provider chests and/or storage chests ."
  },
  {
    "type": "wiki",
    "name": "Storage chest",
    "content": "Recipe | Time 0.5+Advanced_circuit 1+Electronic_circuit 3+Steel_chest 1 → Storage_chest 1 | Total raw | Time 14.25+Copper_plate 9.5+Iron_plate 5+Plastic_bar 2+Steel_plate 8 | Storage size Quality 48 Quality 62 Quality 76 Quality 91 Quality 120 Quality 48 Quality 62 Quality 76 Quality 91 Quality 120 | Resistances Fire: 0/90%Impact: 0/60% | Stack size 50 | Dimensions 1×1 | Mining time 0.1 | Prototype type logistic-container | Internal name storage-chest | Required technologies |"
  },
  {
    "type": "wiki",
    "name": "Storage chest",
    "content": "| Internal name storage-chest | Required technologies | Construction_robotics_(research)Logistic_robotics_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The storage chest is a large advanced storage item that is part of the logistic network . Logistic robots store any items taken out of the player's logistic trash slots here, as well as items picked up from active provider chests . Construction robots will use stored items to repair damaged entities and"
  },
  {
    "type": "wiki",
    "name": "Storage chest",
    "content": "robots will use stored items to repair damaged entities and construct ghosts , as well as storing items picked up as a result of a deconstruction order ; this includes the wood / stone / coal from trees & rocks which were in the way of a ghost placement, and any items in other chests or on belts or inside buildings such as assembling machines when they are marked for deconstruction. Storage chests can be filtered to only accept one type of item from the logistic network. Contents 1 Notes 2 Gallery 3"
  },
  {
    "type": "wiki",
    "name": "Storage chest",
    "content": "of item from the logistic network. Contents 1 Notes 2 Gallery 3 History 4 See also Notes Logistic robots will pick up items in the following priority: active provider chests > storage chests, buffer chests > passive provider chests Logistic robots will begin to fill storage chests from active provider chests if there are no other tasks available. Logistic robots, and construction robots fulfilling deconstruction orders, will fill storage chests in the following priority: Storage chests with a matching"
  },
  {
    "type": "wiki",
    "name": "Storage chest",
    "content": "in the following priority: Storage chests with a matching logistics filter and which already contain the item Empty storage chests with a matching logistics filter Unfiltered storage chests which already contain the item Empty and unfiltered storage chests Unfiltered storage chests containing other items The filter that can be set on the storage chest is respected even if items that are actively being pushed to the network can not be stored anywhere else. If a logistic robot carrying an item is unable to"
  },
  {
    "type": "wiki",
    "name": "Storage chest",
    "content": "else. If a logistic robot carrying an item is unable to deliver its cargo (e.g. if the player moves out of range), it will drop its cargo in a storage chest before moving to other tasks. Logistic robots placing items in storage chests."
  },
  {
    "type": "wiki",
    "name": "Buffer chest",
    "content": "Recipe | Time 0.5+Advanced_circuit 1+Electronic_circuit 3+Steel_chest 1 → Buffer_chest 1 | Total raw | Time 14.25+Copper_plate 9.5+Iron_plate 5+Plastic_bar 2+Steel_plate 8 | Storage size Quality 48 Quality 62 Quality 76 Quality 91 Quality 120 Quality 48 Quality 62 Quality 76 Quality 91 Quality 120 | Resistances Fire: 0/90%Impact: 0/60% | Stack size 50 | Dimensions 1×1 | Mining time 0.1 | Prototype type logistic-container | Internal name buffer-chest | Required technologies | Logistic_system_(research) |"
  },
  {
    "type": "wiki",
    "name": "Buffer chest",
    "content": "| Required technologies | Logistic_system_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The buffer chest is a large advanced storage item that is part of the logistic network , and combines the functions of both a requester chest and a passive provider chest . The buffer chest's purpose is to be an \"in-between\" chest for ferrying items from provider chests to the player, construction robots , or requester chests. In Space Age , rocket silos are also"
  },
  {
    "type": "wiki",
    "name": "Buffer chest",
    "content": ", or requester chests. In Space Age , rocket silos are also served by buffer chests. Like requester chests, buffer chests can be configured to request a specified number of up to 1000 types of items from the logistic network. Logistic robots will then bring the specified items from provider chests or storage chests until the request is met. In addition, similar to a passive provider chest, any items contained in a buffer chest are made available to construction robots, logistic requests from the player,"
  },
  {
    "type": "wiki",
    "name": "Buffer chest",
    "content": "to construction robots, logistic requests from the player, and requester chests that have the \"Request from buffer chests\" checkbox checked. However, items in a buffer chest are not used to fulfill requests from other buffer chests. By using SHIFT + Right mouse button and SHIFT + Left mouse button to copy-paste a recipe from an assembling machine to a buffer chest , the buffer chest is automatically configured to request enough ingredients for 30 seconds of continuous crafting. Contents 1 Uses 2 Gallery 3"
  },
  {
    "type": "wiki",
    "name": "Buffer chest",
    "content": "30 seconds of continuous crafting. Contents 1 Uses 2 Gallery 3 Achievements 4 History 5 See also Uses The buffer chest can act as a central supply point to the player, ... or as a more localized supply for construction. Achievements Logistic network embargo Finish research with space science pack for the base game or any planetary science pack for Space Age without building any active provider , buffer , or requester chests ."
  },
  {
    "type": "wiki",
    "name": "Requester chest",
    "content": "Recipe | Time 0.5+Advanced_circuit 1+Electronic_circuit 3+Steel_chest 1 → Requester_chest 1 | Total raw | Time 14.25+Copper_plate 9.5+Iron_plate 5+Plastic_bar 2+Steel_plate 8 | Storage size Quality 48 Quality 62 Quality 76 Quality 91 Quality 120 Quality 48 Quality 62 Quality 76 Quality 91 Quality 120 | Resistances Fire: 0/90%Impact: 0/60% | Stack size 50 | Dimensions 1×1 | Mining time 0.1 | Prototype type logistic-container | Internal name requester-chest | Required technologies | Logistic_system_(research)"
  },
  {
    "type": "wiki",
    "name": "Requester chest",
    "content": "| Required technologies | Logistic_system_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The requester chest is a large advanced storage item that is part of the logistic network . Requester chests can be configured to request of a specified number of up to 1000 types of items from the network. Logistic robots will then bring the specified items from provider chests , storage chests , and buffer chests , if the \"Request from buffer chests\" checkbox is"
  },
  {
    "type": "wiki",
    "name": "Requester chest",
    "content": "buffer chests , if the \"Request from buffer chests\" checkbox is checked, until the request is met. When fulfilling requests from requester chests, logistic robots will first attempt to pick up the specified items from active provider chests , then from buffer chests if the \"Request from buffer chests\" checkbox is checked , then from storage chests, and lastly from passive provider chests . By using SHIFT + Right mouse button and SHIFT + Left mouse button to copy-paste a recipe from an assembling machine to"
  },
  {
    "type": "wiki",
    "name": "Requester chest",
    "content": "button to copy-paste a recipe from an assembling machine to a requester chest, the requester chest is automatically configured to request enough ingredients for 30 seconds of continuous crafting. Contents 1 Achievements 2 Gallery 3 History 4 See also Achievements Logistic network embargo Finish research with space science pack for the base game or any planetary science pack for Space Age without building any active provider , buffer , or requester chests ."
  },
  {
    "type": "wiki",
    "name": "Roboport",
    "content": "Recipe | Time 5+Advanced_circuit 45+Iron_gear_wheel 45+Steel_plate 45 → Roboport 1 | Total raw | Time 455+Copper_plate 225+Iron_plate 180+Plastic_bar 90+Steel_plate 45 | Resistances Fire: 0/60%Impact: 0/30% | Stack size 10 | Radar coverage distance 2 | Dimensions 4×4 | Drain 50 kW (Electric_system) | Robot recharge rate Quality 4×500 kWQuality 4×650 kWQuality 4×800 kWQuality 4×950 kWQuality 4×1.25 MW(Electric_system) Quality 4×500 kW Quality 4×650 kW Quality 4×800 kW Quality 4×950 kW Quality 4×1.25 MW |"
  },
  {
    "type": "wiki",
    "name": "Roboport",
    "content": "4×650 kW Quality 4×800 kW Quality 4×950 kW Quality 4×1.25 MW | Internal buffer recharge rate Quality 2.1 MWQuality 2.7 MWQuality 3.3 MWQuality 3.9 MWQuality 5.1 MW(Electric_system) Quality 2.1 MW Quality 2.7 MW Quality 3.3 MW Quality 3.9 MW Quality 5.1 MW | Mining time 0.1 | Supply area 50×50 tiles | Construction area 110×110 tiles | Prototype type roboport | Internal name roboport | Required technologies | Construction_robotics_(research)Logistic_robotics_(research) | Produced by | Assembling_machine_1"
  },
  {
    "type": "wiki",
    "name": "Roboport",
    "content": "| Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The roboport is the resting place for all construction robots and logistic robots . It emits an area of 50×50 tiles, in which logistic robots can interact with logistic network entities, such as storage chests , or requester chests . Additionally, a 110×110 tile area is created for construction robots to repair, construct or remove structures. This can be seen by hovering the mouse on a roboport, or logistics chest"
  },
  {
    "type": "wiki",
    "name": "Roboport",
    "content": "be seen by hovering the mouse on a roboport, or logistics chest which is inside the logistic zone. The smaller orange square represents the reach of the logistics network where both logistics and construction robots can move. The larger green square represents the extent of the construction network where only construction robots can move. Robots placed into the air from the player's inventory inside of a roboport's coverage will seek out the nearest roboport to charge and rest. Two or more roboports can"
  },
  {
    "type": "wiki",
    "name": "Roboport",
    "content": "nearest roboport to charge and rest. Two or more roboports can connect to form a logistic network , if the borders of the orange logistic areas touch. This is shown by a dotted line running between the two ports. An example of this can be seen on the bottom-right. Non-connected roboports will not share robots. Similar to the stationary radar 's nearby scanning, a roboport constantly reveals an area of 5×5 chunks, centered on the chunk the roboport occupies. Two roboports connecting to form a logistic"
  },
  {
    "type": "wiki",
    "name": "Roboport",
    "content": "roboport occupies. Two roboports connecting to form a logistic network. Notice the yellow dotted line indicating a successful bond. Contents 1 Storage 2 Power usage 3 Interaction with personal roboports 4 History 5 See also Storage A roboport contains 7 slots , each reserved for 50 robots of the same type, and another 7 for repair packs . Robots and repair packs can be inserted into the roboport with an inserter . Furthermore, robots (but not repair packs) can be removed from the roboport with an inserter."
  },
  {
    "type": "wiki",
    "name": "Roboport",
    "content": "packs) can be removed from the roboport with an inserter. Repair packs inside a roboport are available for all robots and requester chests inside the logistic zone of that roboport. Construction bots, when provided with repair packs, will automatically repair all damaged structures inside of a roboport's coverage area. If a roboport is full of robots, robots attempting to rest will find a different roboport, if one is available. It's possible to request idle robots from other roboports by configuring"
  },
  {
    "type": "wiki",
    "name": "Roboport",
    "content": "to request idle robots from other roboports by configuring corresponding requests in the roboport GUI. This way it's possible to request one type or quality of robot, then remove them from the roboport with a filtered inserter, to gradually clean a logistics network from this type of robot. Roboport GUI Power usage Roboports have 4 chargers, which are used to recharge the flying bots. More roboports in a small area will allow for greater charging throughput, if a lot of robots need charging. Robots waiting"
  },
  {
    "type": "wiki",
    "name": "Roboport",
    "content": "throughput, if a lot of robots need charging. Robots waiting to be charged will float in place near the roboport and wait their turn. Robots will not enter a roboport to rest unless they have full charge. Robots with low/no charge can still fly, but will move extremely slowly. Interaction with personal roboports An entity with an equipment grid (usually a character wearing armor that grants one, but also a tank or spidertron ) equipped with a personal roboport or personal roboport MK2 can act as a mobile"
  },
  {
    "type": "wiki",
    "name": "Roboport",
    "content": "personal roboport or personal roboport MK2 can act as a mobile roboport. This mobile roboport uses the associated entity's own inventory rather than the local logistic network for robot, item and repair pack storage. The network it creates is separate from the static network; it doesn't share robots or items with other networks. Since it only has one inventory, a personal robot network has no use for logistic robots. It has no associated logistic network ; the entity's logistic requests and trash slots"
  },
  {
    "type": "wiki",
    "name": "Roboport",
    "content": "network ; the entity's logistic requests and trash slots instead form part of whatever logistic network the entity is standing in, and are serviced by that network's robots. However, its construction robots will cooperate with other networks in getting construction tasks achieved as quickly as possible."
  },
  {
    "type": "wiki",
    "name": "Lamp",
    "content": "Recipe | Time 0.5+Copper_cable 3+Electronic_circuit 1+Iron_plate 1 → Lamp 1 | Total raw | Time 2.5+Copper_plate 3+Iron_plate 2 | Stack size 50 | Dimensions 1×1 | Energy consumption 5 kW (Electric_system) | Mining time 0.1 | Prototype type lamp | Internal name small-lamp | Required technologies | Lamp_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Radius of a single lamp. Many lamp colors. The lamp is a basic electric device providing light to a medium"
  },
  {
    "type": "wiki",
    "name": "Lamp",
    "content": "The lamp is a basic electric device providing light to a medium area (10 tile radius) at night. It can be used to increase visibility in a factory, so nightvision is not needed. Lamps can be toggled to always be on, regardless of time of day. Contents 1 Color 2 Trivia 3 History 4 See also Color Lamp colors can be changed by customizing the color with RGB values. This can also be done by sending a color signal to the lamp. When the condition inside the lamp passes, instead of lighting up white, it will use"
  },
  {
    "type": "wiki",
    "name": "Lamp",
    "content": "the lamp passes, instead of lighting up white, it will use that color. This can be used to create colored displays, or indicate status. If more than one color signal is received, precedence is given to them in the order below (i.e. if red and green are received, the lamp will light red). As of now, attempting to use grey or black signals will just dim the lamp's light range, making those signal colors somewhat useless. When attached to a circuit, and the \"Use colors\" option is selected, the lamp can be"
  },
  {
    "type": "wiki",
    "name": "Lamp",
    "content": "and the \"Use colors\" option is selected, the lamp can be configured to use color mapping, which controls the lamp's output based on color signals passed to it, or color components can be used, which are specified by red, blue and green signals separately. A packed RGB value can also be used, which uses an eight digit hex color for the color. The lamp can appear as black when the color components option is used while being turned off. Trivia Circuit-controlled lamps have a significantly reduced light range."
  },
  {
    "type": "wiki",
    "name": "Red wire",
    "content": "Stack size 1 | Prototype type item | Internal name red-wire | Red wire is an abstract item used to connect devices to a red circuit network . It can be created by using the hotkey ALT + R or clicking its button in the shortcut bar . To form connections, entities capable of using a circuit network can be left clicked while holding the wire. This also works on electric poles , so they can be used to connect the wire over longer distances. When the blueprint is filled out by construction robots or by hand, any"
  },
  {
    "type": "wiki",
    "name": "Red wire",
    "content": "blueprint is filled out by construction robots or by hand, any wire included in the blueprint is automatically placed. To remove connections, hold the red wire in-hand, then click the two entities you would like to remove the connection from. To remove all wire connections from a power pole (including copper wire), shift click the affected pole."
  },
  {
    "type": "wiki",
    "name": "Green wire",
    "content": "Stack size 1 | Prototype type item | Internal name green-wire | Green wire is an abstract item used to connect devices to a green circuit network . It can be created by using the hotkey ALT + G or clicking its button in the shortcut bar . To form connections, entities capable of using a circuit network can be left clicked while holding the wire. This also works on electric poles , so they can be used to connect the wire over longer distances. When the blueprint is filled out by construction robots or by"
  },
  {
    "type": "wiki",
    "name": "Green wire",
    "content": "When the blueprint is filled out by construction robots or by hand, any wire included in the blueprint is automatically placed. To remove connections, hold the green wire in-hand, then click the two entities you would like to remove the connection from. To remove all wire connections from a power pole (including copper wire), shift click the affected pole."
  },
  {
    "type": "wiki",
    "name": "Arithmetic combinator",
    "content": "Recipe | Time 0.5+Copper_cable 5+Electronic_circuit 5 → Arithmetic_combinator 1 | Total raw | Time 8+Copper_plate 10+Iron_plate 5 | Stack size 50 | Energy consumption 1 kw (Electric_system) | Mining time 0.1 | Prototype type arithmetic-combinator | Internal name arithmetic-combinator | Required technologies | Circuit_network_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The arithmetic combinator is part of the circuit network and one of four types of"
  },
  {
    "type": "wiki",
    "name": "Arithmetic combinator",
    "content": "is part of the circuit network and one of four types of combinators available in the game (along with the constant combinator , decider combinator , and selector combinator ). Each arithmetic combinator can perform any one of the following mathematical operations on signals, and will show the corresponding symbol on its top: addition ( + ) subtraction ( − ) multiplication ( * ) division ( / ) modulo ( % ) exponentiation ( ^ ) bit shift left ( << ) bit shift right ( >> ) bitwise AND ( & ) bitwise OR ( | )"
  },
  {
    "type": "wiki",
    "name": "Arithmetic combinator",
    "content": "<< ) bit shift right ( >> ) bitwise AND ( & ) bitwise OR ( | ) bitwise XOR ( ^ ) The arithmetic combinator accepts two input connections (red and green wires), and sends its output to both output connections. The input wires connect to the nubs on the left side of the sprite in the sidebar, while the outputs connect to the right side. Contents 1 Function 2 Notes on operations 3 History 4 See also Function The operands can be any single signal or a constant value. Up to one of the operands can be the each"
  },
  {
    "type": "wiki",
    "name": "Arithmetic combinator",
    "content": "or a constant value. Up to one of the operands can be the each virtual signal . For each signal operand, the input wires can be selected. If both wires are selected, the inputs are summed. If neither operand is the each signal, the output must be a single signal. The operation is performed on the values of the chosen left and right signals, and the result is sent to the output on the specified signal. If one operand is the each signal, then the output can be a single signal or the each signal. If the"
  },
  {
    "type": "wiki",
    "name": "Arithmetic combinator",
    "content": "the output can be a single signal or the each signal. If the output is the each signal, then the operation is performed individually on the value of each input signal along with the value of the other operand, and each result is sent to the output on the same signal. If the output is a single signal, the operation is done on each of the input signals, the individual results are all added together, and that result is sent to the output on the specified signal. Notes on operations When using division , the"
  },
  {
    "type": "wiki",
    "name": "Arithmetic combinator",
    "content": "specified signal. Notes on operations When using division , the result is truncated: 21 / 10 = 2 19 / 10 = 1 −21 / 10 = −2 −19 / 10 = −1 21 / −10 = −2 19 / −10 = −1 −21 / −10 = 2 −19 / −10 = 1 Modulo , indicated using % as it is in most programming languages, is the remainder after division. For example, 13 % 3 is 1 (13 = 4 * 3 + 1). This can, for example, be combined with truncated division as described above to separate out individual digits of a number for use in building visual indicators: (24321 /"
  },
  {
    "type": "wiki",
    "name": "Arithmetic combinator",
    "content": "of a number for use in building visual indicators: (24321 / 10000) % 10 = 2 (24321 / 1000) % 10 = 4 (24321 / 100) % 10 = 3 (24321 / 10) % 10 = 2 (24321 / 1) % 10 = 1 Negating the left operand of a modulo negates the result, while negating the right operand does nothing: 13 % 3 = 1 13 % −3 = 1 −13 % 3 = −1 −13 % −3 = −1 Bit shift right and Bit shift left deal with numbers in the binary representation. The 0's and 1's that make up a number are shifted in the specified direction which can result in a"
  },
  {
    "type": "wiki",
    "name": "Arithmetic combinator",
    "content": "are shifted in the specified direction which can result in a completely different number, due to the change in the binary value. The shift performed is called arithmetic shift, because it preserves the sign bit on bit shift right. If shifting left, a 0 is inserted into the least significant bit (LSB), and the bit in the most significant bit (MSB) is lost. If shifting right and the number is positive (MSB=0), a 0 is inserted into the MSB and the bit in the LSB is lost. If shifting right and the number is"
  },
  {
    "type": "wiki",
    "name": "Arithmetic combinator",
    "content": "the bit in the LSB is lost. If shifting right and the number is negative (MSB=1), a 1 is inserted into the MSB to keep the sign and the bit in the LSB is lost. Example of a 'bit shift left'. Example of a 'bit shift right (positive number)'. Example of a 'bit shift right (negative number)'."
  },
  {
    "type": "wiki",
    "name": "Decider combinator",
    "content": "Recipe | Time 0.5+Copper_cable 5+Electronic_circuit 5 → Decider_combinator 1 | Total raw | Time 8+Copper_plate 10+Iron_plate 5 | Stack size 50 | Energy consumption 1 kw (Electric_system) | Mining time 0.1 | Prototype type decider-combinator | Internal name decider-combinator | Required technologies | Circuit_network_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Selector_combinator | The decider combinator is part of the circuit network and"
  },
  {
    "type": "wiki",
    "name": "Decider combinator",
    "content": "| The decider combinator is part of the circuit network and one of four types of combinators available in the game (with the other three being the constant combinator , arithmetic combinator , and selector combinator ). It is used to make comparisons of signals on the network. Function The decider combinator allows specifying a list of conditions on the left side of the GUI and a list of outputs on the right side of the GUI. Generally whenever the conditions are satisfied the outputs are activated. A"
  },
  {
    "type": "wiki",
    "name": "Decider combinator",
    "content": "the conditions are satisfied the outputs are activated. A condition consists of a \"first\" input signal, a comparison (>, <, =, >=, <=, !=), and a \"second\" input signal or constant. Additionally, for each input signal the input wires to read the signal from can be specified. If both red and green are checked, the input values are summed. If more than one condition is added, it is possible to change the connection of those using the logical operators AND and OR. An AND condition will result in true if all"
  },
  {
    "type": "wiki",
    "name": "Decider combinator",
    "content": "AND and OR. An AND condition will result in true if all terms are true. An OR condition will return true if at least one of the terms is true. Each output has the option to specify a constant value, or to take the input count from specified wires. If both red and green are checked, the input values are summed. The decider combinator can handle logic signals . The following table shows how different combinations of logic signals can be used: Different output results when the conditions pass Input → No Each"
  },
  {
    "type": "wiki",
    "name": "Decider combinator",
    "content": "output results when the conditions pass Input → No Each condition Each condition present ↓ Output Everything Evaluated on every signal that has a non-zero sum on the selected wires - Anything Evaluated on one signal that has a non-zero sum on the selected wires Evaluated on one signal that passes the Each conditions Each - Evaluated on Each passing signal Specific signal Evaluated on the specified signal Evaluated on Each passing signal, but the results are output on the specified signal instead wires can"
  },
  {
    "type": "wiki",
    "name": "Decider combinator",
    "content": "results are output on the specified signal instead wires can be selected even if a constant value is specified With both the arithmetic and decider combinator, there is one tick (60th of a second) of latency before the output signal is ready to be used as an input into a circuit network."
  },
  {
    "type": "wiki",
    "name": "Selector combinator",
    "content": "Recipe | Time 0.5+Advanced_circuit 2+Decider_combinator 5 → Selector_combinator 1 | Total raw | Time 59.5+Copper_plate 60+Iron_plate 29+Plastic_bar 4 | Stack size 50 | Mining time 0.1 | Prototype type selector-combinator | Internal name selector-combinator | Required technologies | Advanced_combinators_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The selector combinator is part of the circuit network and one of four types of combinators available in"
  },
  {
    "type": "wiki",
    "name": "Selector combinator",
    "content": "network and one of four types of combinators available in the game (the other three being the constant combinator , arithmetic combinator and decider combinator ). It has four different modes of operation (or seven with Space Age enabled) to filter out various signals from an input wire. Function The selector combinator can select a signal to output from one of the following modes of operation: Select input In this mode, the combinator sorts its input signals by value and outputs one of them at the same"
  },
  {
    "type": "wiki",
    "name": "Selector combinator",
    "content": "its input signals by value and outputs one of them at the same value. Sort descending (default): The signal with the highest value is selected. Sort ascending : The signal with the lowest non-zero value is selected. Index : Determines which position among the sorted values is selected, starting at 0, i.e. first (0), second (1), third (2). If multiple signals are provided and index is out of bounds, then no signal is passed through. The valid bounds is 0 through 1 less the total quantity of input signals."
  },
  {
    "type": "wiki",
    "name": "Selector combinator",
    "content": "bounds is 0 through 1 less the total quantity of input signals. If a single input signal is provided, it is always passed through even if the index is out of bounds. Count inputs The combinator will count and output the number of unique inputs on the selected signal. The value of the input signals is not considered. Random input The combinator will pass through a random input signal every certain number of game ticks . By default, the combinator will update this every 1 tick, or 60 times per second. If"
  },
  {
    "type": "wiki",
    "name": "Selector combinator",
    "content": "will update this every 1 tick, or 60 times per second. If there is only one input signal, it will be output after this threshold is met. If the input is removed before that happens, nothing will be output. Stack size The combinator will output the stack sizes of the input items. The combinator will not output any fluid or virtual signals . The value of the input items is not considered. Rocket capacity The combinator will output the rocket capacity of the input signals. The combinator will not output any"
  },
  {
    "type": "wiki",
    "name": "Selector combinator",
    "content": "of the input signals. The combinator will not output any fluids, virtual signals, or items too heavy for a rocket (the atomic bomb and rocket silo .) The value of the input items is not considered. Quality filter The combinator will pass through any input signals that meet a conditional against a certain quality grade. The combinator can compare an input's quality that is greater than, less than, equal to, greater or equal to, less or equal to, or not equal to, any one quality grade. If comparing against"
  },
  {
    "type": "wiki",
    "name": "Selector combinator",
    "content": "or not equal to, any one quality grade. If comparing against any quality grade, the only valid comparison is equal to . Quality transfer The combinator will take the selected target signal from its inputs and output it with a particular quality grade. If direct selection is selected, the combinator will attach the specified quality grade to the target signal, but only if that target signal is among the inputs. If select from input is selected, the combinator will search for the selected item within its"
  },
  {
    "type": "wiki",
    "name": "Selector combinator",
    "content": "the combinator will search for the selected item within its inputs and apply the quality of selected input to the target signal, but only if both the selected input and the target signal are among the inputs."
  },
  {
    "type": "wiki",
    "name": "Constant combinator",
    "content": "Recipe | Time 0.5+Copper_cable 5+Electronic_circuit 2 → Constant_combinator 1 | Total raw | Time 4.25+Copper_plate 5.5+Iron_plate 2 | Stack size 50 | Mining time 0.1 | Prototype type constant-combinator | Internal name constant-combinator | Required technologies | Circuit_network_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The constant combinator is part of the circuit network and one of four types of combinators available in the game (the other three"
  },
  {
    "type": "wiki",
    "name": "Constant combinator",
    "content": "types of combinators available in the game (the other three being the arithmetic combinator , decider combinator , and selector combinator ). It constantly outputs the selected signal(s) to all connected wire networks without the need for a specific input, and can be turned on/off in the GUI manually. Most common uses include testing of composed circuitry or changing some user-defined settings by broadcasting a kind of a switching signal. If the output of a combinator is desired to be switched on/off"
  },
  {
    "type": "wiki",
    "name": "Constant combinator",
    "content": "If the output of a combinator is desired to be switched on/off remotely or automatically, it is recommended to channel its output through a decider combinator. Unlike the other two combinators, the constant combinator does not require electricity to function."
  },
  {
    "type": "wiki",
    "name": "Power switch",
    "content": "Recipe | Time 2+Copper_cable 5+Electronic_circuit 2+Iron_plate 5 → Power_switch 1 | Total raw | Time 5.75+Copper_plate 5.5+Iron_plate 7 | Stack size 10 | Mining time 0.2 | Wire reach 9 tiles | Prototype type power-switch | Internal name power-switch | Required technologies | Circuit_network_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The power switch is a machine used to toggle connections between copper cables. The machine can be controlled by"
  },
  {
    "type": "wiki",
    "name": "Power switch",
    "content": "between copper cables. The machine can be controlled by circuit and logistics networks. The machine does not require energy itself and does not limit the throughput of the electrical network. Contents 1 Mechanics 2 Gallery 3 History 4 See also Mechanics The power switch has two sides on which copper cables may be attached. The switch can be either on or off. Sparks are emitted from the machine while on and electricity may flow between the copper cables attached to it, in either direction. Copper cables can"
  },
  {
    "type": "wiki",
    "name": "Power switch",
    "content": "cables attached to it, in either direction. Copper cables can be attached to the sides of a power switch by holding them and using the left mouse button on the switch. The switch has no effect if other connections between the two sides exist. Cables may have to be isolated manually using methods such as clearing all cables on an electric pole by holding shift while using the left mouse button. Another method of isolating cables is to remove individual cables from electric poles by holding copper cable and"
  },
  {
    "type": "wiki",
    "name": "Power switch",
    "content": "cables from electric poles by holding copper cable and using the left mouse button on the poles it's connected to. The power switch may be opened in map view, which allows the player to toggle it on or off from a distance."
  },
  {
    "type": "wiki",
    "name": "Programmable speaker",
    "content": "Recipe | Time 2+Copper_cable 5+Electronic_circuit 4+Iron_plate 3+Iron_stick 4 → Programmable_speaker 1 | Total raw | Time 9.25+Copper_plate 8.5+Iron_plate 9 | Stack size 10 | Energy consumption 2 kw (Electric_system) | Mining time 0.1 | Prototype type programmable-speaker | Internal name programmable-speaker | Required technologies | Circuit_network_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The programmable speaker is a circuit network entity that"
  },
  {
    "type": "wiki",
    "name": "Programmable speaker",
    "content": "| The programmable speaker is a circuit network entity that is capable of producing alerts in the form of sound, and elements on nearby players' guis. It can be connected to the circuit network to produce an alert when a signal drops below a certain value, for example. GUI and configuration It can be toggled whether the sound plays globally so that it can be heard anywhere on the map, or locally so it will only be audible in the immediate vicinity of the speaker. As a courtesy, only enable global play on"
  },
  {
    "type": "wiki",
    "name": "Programmable speaker",
    "content": "of the speaker. As a courtesy, only enable global play on multiplayer when it is important that all players be notified. Only 50 sounds can be heard at once due to a game limitation. The volume of the programmable speaker can be controlled in the GUI. This determines the audio volume, and the carry distance if global playback is unticked. The range at full volume appears to be 64 tiles. As well as playing a sound, it can also be set to send a GUI text alert so the player can see what has caused the alarm."
  },
  {
    "type": "wiki",
    "name": "Programmable speaker",
    "content": "GUI text alert so the player can see what has caused the alarm. Both text and an icon can be specified, as seen in the check mark image above. In order to show an alert in players' GUIs, \"Show alert\" must be ticked. Additional options will be shown that allow the player to select an icon and text for the alert. The \"Allow polyphony\" check-box determines whether more than one sound may be played at once. Essentially, when hooking up a constant signal to a programmable speaker, with polyphony enabled, sounds"
  },
  {
    "type": "wiki",
    "name": "Programmable speaker",
    "content": "to a programmable speaker, with polyphony enabled, sounds will repeat extremely rapidly. (10 per second or so) Without polyphony, this is limited to about 1 per half second. Disabling polyphony is useful to avoid alerts being spammed and causing hearing damage. However, if producing music, polyphony may be needed. The \"Circuit value is pitch\" check-box allows dynamically changing the pitch of the sound created by changing the circuit value. This is useful for music production. If the player simply wants a"
  },
  {
    "type": "wiki",
    "name": "Programmable speaker",
    "content": "is useful for music production. If the player simply wants a sound to be created whenever the conditional is met, they should disable this check-box."
  },
  {
    "type": "wiki",
    "name": "Display panel",
    "content": "Recipe | Time 0.5+Electronic_circuit 1+Iron_plate 1 → Display_panel 1 | Total raw | Time 1.75+Copper_plate 1.5+Iron_plate 2 | Stack size 10 | Mining time 0.2 | Prototype type display-panel | Internal name display-panel | Required technologies | Circuit_network_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The display panel is a small monitor that can display icons and text above the entity. Almost every single icon in the game can be shown on a display"
  },
  {
    "type": "wiki",
    "name": "Display panel",
    "content": "Almost every single icon in the game can be shown on a display panel, including the quality of an item. Descriptions can also be added to these entities. If connected to the circuit network , the display panel can be set up to showcase different icons and messages depending on what conditional signals are being passed to it. If a description is included in a display panel, hovering the mouse over it will display all lines of text. There is an option that allows for the first line of a description to always"
  },
  {
    "type": "wiki",
    "name": "Display panel",
    "content": "that allows for the first line of a description to always be displayed above the entity even when not selected. If this option is unselected, no text will appear above the entity unless the player hovers their mouse over it. There is a second option that allows the chosen icon and first line of a description to be shown on the minimap and remote view. It is worth noting that, unlike lamps or speakers , display panels do not use any power, and do not require electric network coverage at all. Circuit network"
  },
  {
    "type": "wiki",
    "name": "Display panel",
    "content": "not require electric network coverage at all. Circuit network functionality Besides being able to show static icons and text, display panels can be connected to the circuit network. This allows the player to specify a list of simple conditions and display settings. Conditions are evaluated in order, from top to bottom, showing the icon and text of the first one that matches. If none match, the display turns off. Conditions and display settings also offer logic signals as an option. However, only the"
  },
  {
    "type": "wiki",
    "name": "Display panel",
    "content": "also offer logic signals as an option. However, only the Anything ( ) signal is meaningful as an output icon. Everything and Anything signals work as a left-side condition operand as expected, satisfying the condition same as a decider combinator would. When used as an output icon, however, Everything ( ) and Each ( ) always display the logic signal icon itself. When the Anything logic signal is used for both the condition and the output icon, it displays the first signal that passes the condition (first"
  },
  {
    "type": "wiki",
    "name": "Display panel",
    "content": "it displays the first signal that passes the condition (first based on default sorting order regardless of the signal's actual value). When Anything is used as the output icon with any other condition, it displays itself. At most there can be a maximum of 100 conditional messages, adding more is not possible. Trying to import a blueprint with more will give the error message \"Too many messages.\" and yields an empty blueprint."
  },
  {
    "type": "wiki",
    "name": "Stone brick",
    "content": "Recipe | Time 3.2+Stone 2 → Stone_brick 1 | Total raw | Time 3.2+Stone 2 | Walking speed 130% | Stack size 100 | Prototype type item | Internal name stone-brick | Produced by | Stone_furnaceSteel_furnaceElectric_furnace | Consumed by | ConcreteElectric_furnaceOil_refinerySteel_furnaceWall | Stone bricks are produced from stone in any furnace, and are used in multiple recipes as well as placing them to create stone paths. Recipes in which they are used include the two advanced types of furnace (meaning they"
  },
  {
    "type": "wiki",
    "name": "Stone brick",
    "content": "used include the two advanced types of furnace (meaning they are used in research), as well as more advanced stone products, notably concrete . It is more material efficient to use concrete for paths, as double the amount of tiles are produced from the same amount of stone. Stone path increases walking speed by 30% and reduces vehicle rolling resistance, allowing for improved acceleration and top speed. However, any type of path practically prevents pollution absorption by terrain, so extensive use of"
  },
  {
    "type": "wiki",
    "name": "Stone brick",
    "content": "prevents pollution absorption by terrain, so extensive use of paths may cause the factory's pollution to spread farther. Stone paths have no effect on the movement speed of enemies . Stone brick crafting can use productivity modules . Usage Holding them allows the player to mine any type of path , and placing them over another type of path automatically mines the previous path. Stone paths are placed using Left mouse button and can be removed by using Right mouse button while holding any kind of path. The"
  },
  {
    "type": "wiki",
    "name": "Stone brick",
    "content": "by using Right mouse button while holding any kind of path. The area in which stone bricks are placed can be increased and decreased by using Numpad + and Numpad - ."
  },
  {
    "type": "wiki",
    "name": "Concrete",
    "content": "Recipe | Time 10+Iron_ore 1+Stone_brick 5+Water 100 → Concrete 10 | Total raw | Time 10+Iron_ore 1+Stone_brick 5+Water 100 | Walking speed 140% | Stack size 100 | Prototype type tile | Internal name concrete | Required technologies | Concrete_(research) | Produced by | Assembling_machine_2 Assembling_machine_3 | Consumed by | Artillery_turretCargo_landing_padCentrifugeHazard_concreteNuclear_reactorRefined_concreteRocket_silo | Space_AgeRecycling results | Iron_ore 0.025 Stone_brick 0.125 | Concrete is an"
  },
  {
    "type": "wiki",
    "name": "Concrete",
    "content": "results | Iron_ore 0.025 Stone_brick 0.125 | Concrete is an ingredient utilized for rocket silos , refined concrete , artillery turrets and facilities relating to nuclear material ( reactors and centrifuges ). Concrete serves as path with more advanced bonuses compared with stone bricks . Concrete increases walking speed by 40% and decreases vehicle rolling resistance, allowing for extra acceleration and top speed, although each vehicle is affected differently; the tank is only affected by a 20% bonus, for"
  },
  {
    "type": "wiki",
    "name": "Concrete",
    "content": "differently; the tank is only affected by a 20% bonus, for example. Concrete has no effect on the movement speed of enemies . When placed, it reduces the pollution absorption of ground to zero. In Space Age , on the planet Aquilo , concrete is essential for construction. In order to place many buildings and structures on icy terrain, concrete (or one of its derivatives) must first be placed on top of the floating ice platform before the building can be placed. Contents 1 Placement 2 Alternative recipes 3"
  },
  {
    "type": "wiki",
    "name": "Concrete",
    "content": "can be placed. Contents 1 Placement 2 Alternative recipes 3 History 4 See also Placement Concrete is placed using Left mouse button and can be removed by using Right mouse button while holding any kind of path . The area in which concrete is placed can be increased and decreased by using Numpad + and Numpad - . Placing it over another type of path automatically mines the previous path. Alternative recipes Space Age expansion exclusive feature. Process Input Output Made in Required technology Concrete from"
  },
  {
    "type": "wiki",
    "name": "Concrete",
    "content": "Process Input Output Made in Required technology Concrete from molten iron 10 + 5 + 20 + 100 10 Foundry (research) Despite concrete not being an intermediate, the foundry recipe can use productivity modules , in addition to the 50% productivity of the foundry."
  },
  {
    "type": "wiki",
    "name": "Hazard concrete",
    "content": "Recipe | Time 0.25+Concrete 10 → Hazard_concrete 10 | Total raw | Time 0.25+Concrete 10 | Walking speed 140% | Stack size 100 | Prototype type item | Internal name hazard-concrete | Required technologies | Concrete_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Hazard concrete is identical to concrete except for its striped texture. Rotating the tile changes the direction of the stripes."
  },
  {
    "type": "wiki",
    "name": "Refined concrete",
    "content": "Recipe | Time 15+Concrete 20+Iron_stick 8+Steel_plate 1+Water 100 → Refined_concrete 10 | Total raw | Time 17+Concrete 20+Iron_plate 4+Steel_plate 1+Water 100 | Walking speed 150% | Stack size 100 | Prototype type tile | Internal name refined-concrete | Required technologies | Concrete_(research) | Produced by | Assembling_machine_2 Assembling_machine_3 | Consumed by | Refined_hazard_concrete | Refined concrete is used as pathing, similar to concrete , but it has a larger brick texture and 10% higher"
  },
  {
    "type": "wiki",
    "name": "Refined concrete",
    "content": "to concrete , but it has a larger brick texture and 10% higher walking speed. Refined concrete increases walking speed by 50% and decreases vehicle rolling resistance, allowing for extra acceleration and top speed, although each vehicle is affected differently; the tank is only affected by a 20% bonus, for example. Refined concrete has no effect on the movement speed of enemies . In Space Age , refined concrete is used as an ingredient in a number of recipes, in addition to being used for paths . Placement"
  },
  {
    "type": "wiki",
    "name": "Refined concrete",
    "content": "of recipes, in addition to being used for paths . Placement Refined concrete is placed using Left mouse button and can be removed by using Right mouse button while holding any kind of path . The area in which refined concrete is placed can be increased and decreased by using Numpad + and Numpad - . Placing it over another type of path automatically mines the previous path."
  },
  {
    "type": "wiki",
    "name": "Refined hazard concrete",
    "content": "Recipe | Time 0.25+Refined_concrete 10 → Refined_hazard_concrete 10 | Total raw | Time 0.25+Refined_concrete 10 | Walking speed 150% | Stack size 100 | Prototype type item | Internal name refined-hazard-concrete | Required technologies | Concrete_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Space_AgeRecycling results | Refined_concrete 0.25 | Refined hazard concrete is identical to refined concrete except for its striped texture. Rotating the tile"
  },
  {
    "type": "wiki",
    "name": "Refined hazard concrete",
    "content": "concrete except for its striped texture. Rotating the tile changes the direction of the stripes."
  },
  {
    "type": "wiki",
    "name": "Landfill",
    "content": "Recipe | Time 0.5+Stone 50 → Landfill 1 | Total raw | Time 0.5+Stone 50 | Used to build Grass | Stack size 100 | Prototype type tile | Internal name landfill | Required technologies | Landfill_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Space_AgeRecycling results | Landfill 0.25 | Landfill can be used to replace water with usable land, regardless of the type of surrounding terrain. Landfill is placed using Left mouse button and the area in which it is"
  },
  {
    "type": "wiki",
    "name": "Landfill",
    "content": "is placed using Left mouse button and the area in which it is placed can be increased and decreased by using Numpad + and Numpad - . Land-filled area is indistinguishable from normal terrain in terms of mechanics; it can be normally built and walked over. Once an area has been filled, the landfill can be removed by holding Right mouse button with landfill in the cursor. Construction robots will remove landfill marked for deconstruction with a deconstruction planner . With the use of construction robots ,"
  },
  {
    "type": "wiki",
    "name": "Landfill",
    "content": "deconstruction planner . With the use of construction robots , landfill can automatically be placed below ghost buildings planned on water. Note that placing a landfill where raw fish are swimming will \"destroy\" them without being collected."
  },
  {
    "type": "wiki",
    "name": "Cliff explosives",
    "content": "Recipe | Time 8+Barrel 1+Explosives 10+Grenade 1 → Cliff_explosives 1 | Total raw | Time 17+Coal 10+Explosives 10+Iron_plate 5+Steel_plate 1 | Destroys cliffs. | Stack size 20 | Range Quality 10 Quality 11 Quality 12 Quality 13 Quality 15 Quality 10 Quality 11 Quality 12 Quality 13 Quality 15 | Shooting speed 2/s | Area of effect size 1.5 | Prototype type projectile | Internal name cliff-explosives | Required technologies | Cliff_explosives_(research) | Produced by | Assembling_machine_1"
  },
  {
    "type": "wiki",
    "name": "Cliff explosives",
    "content": "| Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Cliff explosives are used to blow up cliffs . The cliffs will not drop any items when blown up. These explosives can only be used on cliffs, as they can't be used at all when clicking on anything else. Cliff explosives will not damage anything else nearby. Once cliff explosives have been researched, cliffs can be marked for deletion in the same way other environmental obstacles (rocks, trees, etc.) are. They will be"
  },
  {
    "type": "wiki",
    "name": "Cliff explosives",
    "content": "environmental obstacles (rocks, trees, etc.) are. They will be queued for destruction by any construction robots in range, provided they have access to cliff explosives via the logistic network ."
  },
  {
    "type": "wiki",
    "name": "Repair pack",
    "content": "Recipe | Time 0.5+Electronic_circuit 2+Iron_gear_wheel 2 → Repair_pack 1 | Total raw | Time 4+Copper_plate 3+Iron_plate 6 | Repair packs heal building damage for 600 health. | Stack size 100 | Durability Quality 300 Quality 600 Quality 900 Quality 1200 Quality 1800 Quality 300 Quality 600 Quality 900 Quality 1200 Quality 1800 | Prototype type repair-tool | Internal name repair-pack | Required technologies | Repair_pack_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3"
  },
  {
    "type": "wiki",
    "name": "Repair pack",
    "content": "Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Repair packs are used to repair items. They can be used by the player character with the Left mouse button or by construction robots . Each repair pack repairs 600 health to a building, 2 per tool durability. Repair packs can only be used on buildings already placed, and can't repair something in the player's inventory. Trivia Repairing walls and stone furnaces makes a rock-hammering sound, while repairing anything else makes a drill"
  },
  {
    "type": "wiki",
    "name": "Repair pack",
    "content": "sound, while repairing anything else makes a drill sound."
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "Stack size 1 | Prototype type blueprint | Internal name blueprint | Blueprints are items that contain building layouts. Blueprints are used to 'copy & paste' parts of a factory. Built areas can be selected for inclusion in a blueprint. When a blueprint is placed, a ghost of the layout appears on the ground. This can be used as a guide for manually placing factory pieces, or, more commonly, handed over to construction robots for automated completion. Blueprints can be stored in a blueprint book or blueprint"
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "Blueprints can be stored in a blueprint book or blueprint library to prevent them occupying inventory space or for organization or sharing purposes. Contents 1 Achievements 2 Usage 2.1 Create a blueprint 2.2 Blueprint icon setup 2.3 Placing the blueprint 2.4 Viewing and clearing a blueprint 2.5 Parameterisation 3 Importing/Exporting blueprints 4 Additional information 5 Trivia 6 History 7 See also Achievements Automated construction Construct 100 machines using robots . You are doing it right Construct"
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "100 machines using robots . You are doing it right Construct more machines using robots than manually. Usage Blank blueprints can be crafted by clicking the ( ) button in the shortcut bar . The blank blueprint can now be used to 'copy' a set of buildings. For example, copying this small gun turret defense setup: Create a blueprint To create a blueprint select the blueprint item out of the toolbar or the inventory. With the blueprint icon shown next to the mouse cursor, click and hold the left mouse button"
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "next to the mouse cursor, click and hold the left mouse button and drag a box as large as needed (which can be cancelled by pressing Q ). All player-placed entities which will be included in the blueprint will be highlighted with a green square. Once everything you intend to 'copy' is inside the drag box, release the mouse button and the 'Blueprint icon setup' menu will open. Blueprint icon setup On the top left of the \"Setup new blueprint\" menu there are four icon slots. These are displayed on the"
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "menu there are four icon slots. These are displayed on the blueprint's icon and can be used to quickly identify a blueprint. When creating a new blueprint, the game automatically selects some of the icons representing the entities in the blueprint. These default icons can be changed by simply clicking on the icons to choose the desired ones. On the left the 'Total' number of components included in the blueprint is shown. The purple \"Parameterise\" button in the top right is used to configure the settings of"
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "button in the top right is used to configure the settings of any buildings or circuit network entity within the blueprint. More on this feature below. The green \"Create blueprint\" button creates the blueprint. Additionally, blueprint creation can be cancelled by clicking the X in the top right corner. Canceling the blueprint does not consume the blueprint item. The created blueprint will replace the empty blueprint in the player's cursor. Placing the blueprint To use/place the created blueprint select it"
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "the blueprint To use/place the created blueprint select it from the tool belt or inventory. The process of placing a blueprint is very similar to that of using copy and paste functionality. When you select a blueprint, the whole building setup of the blueprint will be shown at your mouse cursor. In this case the Blueprint was renamed to \"Example blueprint\". The blueprint can be rotated using the R key. H will flip it horizontally; V will flip it vertically. Note that blueprints which contain rail signals ,"
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "vertically. Note that blueprints which contain rail signals , chain signals , or train stops cannot be flipped, only rotated. Placing a blueprint creates ghost entities. If these are within the green (or orange) 110×110 tiles area of a roboport , or within range of a personal roboport installed in modular armor or spidertron , construction robots may be able to build them using available materials. Holding Shift will activate \"Force Building\" mode. This will mark all trees and rocks underneath the"
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "mode. This will mark all trees and rocks underneath the blueprint for deconstruction, as well as place ghosts for landfill if building over water. If playing in Space Age , it will instead place ice platform or foundation , depending on what is appropriate for the current planet. Holding Control + Shift will activate \"Super Force Building\" mode. This acts the same as force building, but will also mark all other buildings for deconstruction. If building over transport belts , the game will attempt to place"
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "building over transport belts , the game will attempt to place ghosts for underground belts of the same tier, if possible. After the blueprint gets placed somewhere, the buildings are placed as ghost buildings. Construction robots will now start to pick up the needed items from the construction network/the player inventory (if using a personal roboport) and place them at the ghost buildings. The required items need to be in the network in an active provider chest , a passive provider chest , a buffer chest"
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "provider chest , a passive provider chest , a buffer chest or a storage chest . Blueprints can be placed from map view as long as the area has been explored. Viewing and clearing a blueprint Right clicking on a blueprint allows you to view, edit and clear it. By clearing it, it will become blank so it can be set again. Parameterisation Nearly everything in the game that can be configured can also be parameterised within a blueprint. Settings which would have had to be changed manually one at a time can be"
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "would have had to be changed manually one at a time can be set automatically with a single selection during blueprint construction. This allows for more generic blueprints which can be specifically configured for a particular need. Some settings which can be parameterised include, but are not limited to: Recipes in buildings Output control signals for the circuit network Icons, their values, and constants within combinators and their descriptions Rich text tags within the names of train stops , among other"
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "Rich text tags within the names of train stops , among other buildings The following example will demonstrate parameterisation with a constant combinator: In the above image, we have an iron plate signal with a value of 5, a copper plate signal with a value of 10, and a virtual signal \"A\" with a value of 1. By clicking the purple parameterisation button in the top right of the blueprint setup screen, we get the parameterisation GUI: There is a separate parameter for each unique signal and their values."
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "a separate parameter for each unique signal and their values. Hovering the mouse over each value will tell you the origin of each signal. The above image shows that the iron plate signal has a value of 5 in a constant combinator. This is very useful if the blueprint contains multiple buildings with many different parameters. If there are two different signals with the same value, or multiple sources of the same signal, that value or signal is treated as a single parameter. There are several ways we can"
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "is treated as a single parameter. There are several ways we can play with the values of the combinator. In order to be able to be modified, the \"Parameter\" checkbox next to a signal or value must be ticked. Further, these parameters can be reordered by clicking and dragging the bars on the far right. Reordering does play an important part in more advanced uses. In the above image, the iron and copper icons have been replaced with special parameter icons. These signals can be chosen upon building the"
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "parameter icons. These signals can be chosen upon building the blueprint. Whatever signals are chosen will inherit the original signal values of 5 and 10, respectively. Each parameter can be given a name, which will show up when building the blueprint. This is optional, but recommended. Clicking \"Ingredient of\" will allow us to select a parameter icon of an above parameter icon. This is why the order of the parameters is important. In our example, if Parameter 0 is set to, say, steel plate , Parameter 1"
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "if Parameter 0 is set to, say, steel plate , Parameter 1 will automatically set itself to whatever the ingredient of that item is: in this case, iron plate . It is important to have enough available parameters for the number of ingredients. If we were to set Parameter 0 to instead electronic circuit , Parameter 1 would do nothing, as there are two ingredients to that item. A parameter will always choose the default recipe of an item as listed in the Factoriopedia. Alternate recipes such as those added in"
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "in the Factoriopedia. Alternate recipes such as those added in Space Age will not be considered. A parameter that is a constant can set as a parameter, and given an optional variable. In the above image, the Iron Value of 5 has been set as a parameter, which will be set separately from the signal itself. Giving a constant an optional variable allows itself to be used in a formula for a later constant. In the above image, the Copper Value of 10 has been set as a parameter, and given the variable \"x\". The"
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "10 has been set as a parameter, and given the variable \"x\". The variable can be anything, but it's best to keep it as something simple. Further, our \"A Value\" value of 1 is selected as a parameter, and the formula box is checked. There are several formulas available. Hovering the mouse over the formula box will show a list of available formulas given the current blueprint. In this example, the \"A Value\" constant can be set based on the stack size or rocket capacity of whatever Parameter 0 or 1 comes out to"
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "or rocket capacity of whatever Parameter 0 or 1 comes out to be. We can also use our variable \"x\" from above. We can type in basic mathematical operators like +, -, *, and /. This example uses the formula \"x*2\", meaning the A Value constant will be set to double whatever variable \"x\" turns out to be. Once finished configuring it, we press the green button, which saves our settings. The blueprint can now be placed. With our example, doing so will bring up the following box. We are given options to configure"
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "bring up the following box. We are given options to configure both the original iron plate signal, and the value of the copper plate signal. The other signals are determined by what we input in these two boxes. This example goes with a steel plate and a value of 8. Building this will give the following result. Our original iron plate signal is now steel plate, with its original value of 5. Our original copper plate signal is now iron plate with a value of 8, as that is the sole ingredient of steel plates"
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "a value of 8, as that is the sole ingredient of steel plates Our \"A\" signal has stayed the same, but its value is now 16, which is double the variable \"x\", which we set to be 8 Normally, the purple parameter icons are only available in the parameterisation GUI. Alternatively, if the \"show parameters in selection lists\" option is enabled under game Setting > Interface > Interaction, parameters 0 through 9 become available as virtual signals under the \"Unsorted\" tab to expedite the process of setting up a"
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "the \"Unsorted\" tab to expedite the process of setting up a parameterised blueprint. Importing/Exporting blueprints It is possible to export blueprints as a text string and import said text string to create a new blueprint. This makes sharing blueprints between players very easy. Clicking the Export to string button ( ) in the top right of the blueprint edit window will pop up a window containing the Blueprint string . This string can be copied to the operating system clipboard, from where it could be saved"
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "to the operating system clipboard, from where it could be saved to a text file or uploaded to a website. To import a blueprint, the player can click the Import string icon on the shortcut bar ( ). A dialogue box will appear into which the string can be pasted. This will result in a blueprint appearing on the hand with the same setup as the one that was exported. The text string itself is a base64 encoded, compressed JSON string which contains all the information of the blueprint. It is therefore possible"
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "all the information of the blueprint. It is therefore possible to decode/decompress the text string, change attributes of the blueprint in the JSON text and finally re-encode/compress it back to the known text string format. This basically allows blueprint editing outside of the game itself. A complete explanation of the blueprint JSON can be found on the blueprint string format page. Additional information Once a blueprint is created, it can be used an unlimited amount of times. To place a blueprint that"
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "be used an unlimited amount of times. To place a blueprint that is blocked by existing buildings, you can hold Shift to place the objects that aren't blocked. The above trick will also mark rocks and trees for deconstruction. Buildings marked for destruction will not block placing a blueprint. The blueprinted building cannot be placed if there are any buildings in the way. This can cause an item outside the construction zone to block construction of a 2×2 building on the edge of the zone. The maximum of"
  },
  {
    "type": "wiki",
    "name": "Blueprint",
    "content": "of a 2×2 building on the edge of the zone. The maximum of size a blueprint is 10k by 10k tiles . Trivia In Space Age , it is possible to get a quality blueprint by recycling them with quality modules . Quality blueprints function identically to their normal counterparts"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "Using an unfiltered deconstruction planner to queue orders forConstruction_robot. | Stack size 1 | Prototype type deconstruction-item | Internal name deconstruction-planner | The deconstruction planner is an item which allows the player to mark tiles and entities, including trees , rocks , cliffs , fish and items on the ground, for removal. By default, tiles are only marked when no entities are found. Tiles or entities queued for deconstruction will be marked with a red 'X'. When within the range of"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "will be marked with a red 'X'. When within the range of construction robots they will be removed by the robots and the resulting items stored in logistic network chests or, when a personal roboport is used, the player's inventory. Ghosts will be removed immediately. Anything marked for deconstruction will immediately stop functioning. Deconstruction orders can be cancelled prior to the removal of the target. The deconstruction planner can be used unfiltered (blank) to remove all entities or tiles within"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "used unfiltered (blank) to remove all entities or tiles within its selection area, or it can be filtered to specific targets. Deconstruction planners, just like blueprints , can be stored in a blueprint book or blueprint library to prevent them occupying inventory space or for organization or sharing purposes. Contents 1 Usage 1.1 Getting a deconstruction planner 1.2 Accessing settings 1.3 Deleting a planner 1.4 Using the deconstruction planner 1.5 Effects of deconstruction 1.6 Cancelling deconstruction"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "1.5 Effects of deconstruction 1.6 Cancelling deconstruction orders 1.7 Undo 2 Valid targets 2.1 Tiles 2.2 Environmental entities 3 Configuration and filtering 3.1 Blank planner rules 3.2 Filter settings window 3.3 Principles of filtering 3.4 Setting and removing filters 3.5 Entities tab 3.5.1 Trees/rocks only toggle 3.5.2 Special items in the Unsorted section 3.6 Tiles tab 3.7 Exporting and importing with strings 4 Achievements 5 Trivia 6 History 7 See also Usage Getting a deconstruction planner A planner"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "7 See also Usage Getting a deconstruction planner A planner can be obtained by: Clicking the red deconstruction planner icon ( ) in the shortcut bar . (Available once construction robotics is researched in at least one game.) Pressing the keyboard shortcut assigned to Make new deconstruction planner ; default: ALT + D . Importing a deconstruction planner string . Once a new planner is in the hand it can be used immediately and then deleted by pressing Q to clear the hand. Alternatively, it can be dropped"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "pressing Q to clear the hand. Alternatively, it can be dropped into the player's inventory for later use. Once in the inventory it can be pinned to a quickbar slot. Accessing settings The planner must be in an inventory in order for its configuration to be changed. Settings can be accessed by clicking Right mouse button on a planner's icon, either in the inventory or on a quickbar link. A full description of available settings and filters can be found under configuration and filtering . Deleting a planner"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "be found under configuration and filtering . Deleting a planner A planner that has been stored in an inventory can be deleted by clicking the red trash-can icon labelled Destroy deconstruction planner ( ) in the top right of its settings window. Care should be taken when the planner has been configured as this operation is performed immediately without confirmation and cannot be undone. Using the deconstruction planner With a planner held in the hand the player can click-drag it ( Left mouse button is held"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "hand the player can click-drag it ( Left mouse button is held down while moving the mouse) over existing structures and ghosts to mark them for deconstruction. A tooltip appears indicating what will be removed. The planner can be used anywhere on the map where the player has radar coverage (map view). Once Left mouse button is released the deconstruction planner will take effect according to the rules listed below. Dragging a deconstruction planner. The tooltip shows what will be removed. Red Xs indicate"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "The tooltip shows what will be removed. Red Xs indicate queued deconstruction orders. Ghosts were immediately removed. Effects of deconstruction The following describes the possible results of using a deconstruction planner in the game world: Any selected entity ghosts and tile ghosts will be immediately removed. Any selected entities and tiles will be queued for deconstruction, indicated with a red X. Anything queued for deconstruction will stop functioning; for example transport belts will stop moving,"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "stop functioning; for example transport belts will stop moving, assembling machines will cease producing items, walls stop connecting to each other, and so on. Laser and gun turrets will continue functioning even when marked for deconstruction. If the deconstruction orders are within the construction area of construction robots the orders will be added to the bots' queue and will be removed in due course: Bots will fly in and remove all entities and tiles and place the resulting items in logistic network"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "and tiles and place the resulting items in logistic network chests, or the player's inventory when the bots flew from a personal roboport. Where there are items to be removed - for example being carried by transport belts or stored inside a chest or assembling machine - these will also be picked up by bots and placed in the appropriate storage. Items must be removed before the entities that carry or hold them. For example if a wooden chest holding 500 iron plates is marked for removal, the plates will be"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "500 iron plates is marked for removal, the plates will be picked up first and only when all have been removed will the bots deconstruct the chest itself. Environmental entities such as trees, rocks and fish are handled in the same way, except bots mine them and collect and store the resource items they leave behind. Cliffs are a special case: they are destroyed by bots carrying cliff explosives and do not yield any item to be stored. Cancelling deconstruction orders Queued deconstruction orders can be"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "deconstruction orders Queued deconstruction orders can be cancelled by holding SHIFT while click-dragging a deconstruction planner over the affected area. When SHIFT is held down the area selection border will change from red to blue to indicate cancellation mode is in effect. Undo The undo tool can be used to revert the actions of a deconstruction planner. This applies both to pending deconstruction orders and completed removals. Undo is triggered by pressing CTRL + Z (on macOS: Command + Z ) Performing"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "by pressing CTRL + Z (on macOS: Command + Z ) Performing an undo will cancel any queued removal orders (red Xs) that have not yet been actioned. Any ghosts that were removed will be immediately replaced. Where built entities and tiles have already been removed the undo will reinstate them in the form of new ghosts that can then be re-built by any construction robots in range. Items that were removed as part of the deconstruction - for example the inventory of chests or items carried by a transport belt -"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "the inventory of chests or items carried by a transport belt - will not be restored by an undo. This means that a deconstruction that consisted exclusively of items, for example picking up stone from the ground, cannot be undone. It is also not possible to undo the removal of trees, rocks, cliffs and fish. Cancelling deconstruction orders by dragging with Shift held down. The entities start working when the deconstruction is cancelled. Using then undoing a deconstruction planner. Deconstruction markers are"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "undoing a deconstruction planner. Deconstruction markers are cancelled, ghosts re-appear, and removed entities are reinstated as new ghosts for bot rebuilding. Valid targets Harvesting fish with a deconstruction planner. The deconstruction planner can remove player-built entities, entity ghosts , tiles, tile ghosts and loose items. In addition, it can remove trees , rocks , cliffs and fish . Tiles Tiles are treated differently to entities, entity ghosts and tile ghosts. By default a deconstruction planner"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "ghosts and tile ghosts. By default a deconstruction planner will not select any tiles unless the area selected contains only tiles; whenever one or more entities, entity ghosts or tile ghosts is included, tile selection is disabled. This is done to allow the player to use a deconstruction planner to remove entities that are placed on top of path tiles (such as concrete ) without the floor always being removed as well. When the user wishes to select tiles in areas where other objects also exist the"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "to select tiles in areas where other objects also exist the deconstruction planner configuration must be changed as described in the next section. Environmental entities These are handled in the same way as entities and tiles placed by the player: they are marked with a red X and construction robots will remove them. A difference with environmental entities is that bots will collect resources rather than the entity itself, such as wood from trees and stone from rocks. The removal of cliffs requires that"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "trees and stone from rocks. The removal of cliffs requires that the bots have access to cliff explosives. Cliffs do not leave behind any resource. The ability to use a deconstruction planner to remove and collect fish provides a convenient way for a player equipped with a personal roboport to replenish their stocks of healing items even in the middle of combat. Fish marked with a deconstruction planner will stop moving. Configuration and filtering An example of a filtered planner icon. A new deconstruction"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "An example of a filtered planner icon. A new deconstruction planner is blank, meaning it removes according to a pre-defined set of rules. The planner can optionally be edited to provide a custom list of removal rules which control which types of entities and tiles will - or won't - be removed. These rules are called filters. A filtered planner will show its filtered items on its icon. Up to the first four filters will be shown. Blank planner rules A blank planner will select: Any entities and entity"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "rules A blank planner will select: Any entities and entity ghosts, including trees, rocks, cliffs and fish; Tile ghosts; Or , if and only if no entities, entity ghosts and tile ghosts are found, it will instead select tiles. These rules are the base point from which a filtered planner can then be customized. Filter settings window The deconstruction planner interface is divided into two sections: entities and tiles . The entities tab. The tiles tab. A whitelist filter that removes only defensive"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "The tiles tab. A whitelist filter that removes only defensive structures. A blacklist filter that removes everything except roboports and power poles . Principles of filtering Each tab consists of 30 slots in which an entity or tile can be chosen. When one or more slots is filled the planner becomes filtered and will now act according to those filters. A set of filters is either a whitelist or blacklist, and this is set with a toggle at the top of each tab. The default is whitelist. In whitelist mode the"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "of each tab. The default is whitelist. In whitelist mode the planner will act only upon those items added to the filter slots - any entities and tiles not added as filters will be ignored by the planner. In blacklist mode the opposite applies: the planner will mark everything except the entities or tiles filtered on. Setting and removing filters Clicking any slot with Left mouse button will open the Set the filter window in which the desired item can be chosen. Alternatively, an item in the hand can be"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "item can be chosen. Alternatively, an item in the hand can be clicked into a slot to filter on that item. A filter is removed by clicking on a filled slot with Right mouse button . Entities tab In the entities tab the user can select items to filter from the follow categories: Environment Logistics Production Combat Unsorted The Environment tab lists all types of trees and rocks, plus cliffs and fish. Logistics, production and combat will be familiar to the player from the item selection window."
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "will be familiar to the player from the item selection window. Environment and unsorted are unique to the deconstruction planner. The environment tab lists cliffs, fish, and every individual kind of tree and rock. This facilitates filtering on specific environmental entities if desired. Trees/rocks only toggle At the top of the entities tab is the Trees/rocks only tick-box. With this enabled the deconstruction planner will filter on all kinds of trees and rocks from the Environment section, and the filter"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "of trees and rocks from the Environment section, and the filter slots will be disabled. The Whitelist/Blacklist toggle is still in effect and controls whether the planner selects only trees and rocks, or selects everything but them. Fish and cliffs are not included in this filter. Special items in the Unsorted section The unsorted section provides four special items, each using a red X icon. Entity ghost: To filter on any type of entity ghost, separate from constructed entities. Item on ground: Loose items"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "separate from constructed entities. Item on ground: Loose items on the ground, such as dropped by the player, spilled from removing armor , and stones dropped from destroyed rocks . Does not include items on transport belts . Item request slot: Filters on the pending addition of items such as modules to assembling machine 2 or electric furnace . This would also target fuel queued for addition to a locomotive . Does not target items already installed, only those waiting to be added following the placement"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "only those waiting to be added following the placement of a blueprint or as a result of an undo operation. Tile ghost: As with entity ghost, this will target tile ghosts separately from constructed tiles. If the user wants a deconstruction planner that only removes tile ghosts, they can place this item as an entity filter. If they want a filter that removes all types of tiles and tile ghosts, they should add Tile ghost under Entities and then set the Tiles tab drop-down to 'Always'. Tiles tab Clicking a"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "set the Tiles tab drop-down to 'Always'. Tiles tab Clicking a filter slot will bring up the Set the Filter window showing the available tiles. Landfill is included in the list but the only function is to exclusively select landfill ghosts, as landfill cannot be removed once placed. At the top of the Tiles tab is a drop-down that controls constructed tile removal behavior. It has four options: Normal: The default. Constructed tiles are removed only when no entities, entity ghosts or tiles ghosts are found"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "only when no entities, entity ghosts or tiles ghosts are found in the deconstruction area. Always: Constructed tiles are always removed, even if the deconstruction planner also selects entities or entity ghosts. Tile ghosts are not selected unless Tile ghost is added under the Entities tab. Never: Constructed tiles are never removed, even if they are the only object selected. Tile ghosts are not selected unless Tile ghost is added in the Entities tab. Only: Constructed tiles are always removed, and nothing"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "tab. Only: Constructed tiles are always removed, and nothing else will be. Entities, entity ghosts and tile ghosts will be ignored. The Entities tab is effectively disabled when this mode is selected. The deconstruction planner always follows the settings of this drop-down, regardless of any filters set in the Tiles tab. For example if a user wishes to configure a planner that removes both walls and concrete , they must first set those filters in the Entities and Tiles tabs, and then also set the Tiles"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "in the Entities and Tiles tabs, and then also set the Tiles drop-down to Always . Without changing the drop-down the planner would only select concrete in places where no entities, entity ghosts or tile ghosts were found, as per the rules described under Normal in the above list. Exporting and importing with strings The settings for a deconstruction planner can be exported in string form. Clicking the Export to string button ( ) in the top right of the planner edit window will pop up a window containing"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "of the planner edit window will pop up a window containing the Deconstruction item string . This string can be copied to the operating system clipboard, from where it could be saved to a text file or uploaded to a website. To import a deconstruction planner the player can click the Import String icon on the shortcut bar ( ). A dialogue box will appear into which the string can be pasted. This will result in a deconstruction planner appearing on the hand with the same configuration as the one that was"
  },
  {
    "type": "wiki",
    "name": "Deconstruction planner",
    "content": "on the hand with the same configuration as the one that was exported. The export/import process can be used to copy deconstruction planners between games and to other players. Achievements Automated cleanup Deconstruct 100 objects with the construction robots . Trivia In Space Age , it is possible to get a quality deconstruction planner by recycling them with quality modules . Quality planners function identically to their normal counterparts"
  },
  {
    "type": "wiki",
    "name": "Upgrade planner",
    "content": "Using an unfiltered upgrade planner. | Stack size 1 | Prototype type upgrade-item | Internal name upgrade-planner | The upgrade planner is a tool for mass updating entities to alternative entities of the same size and type. It can be used on both placed structures and ghosts . It can also modify the contents of a blueprint . While most commonly used to upgrade entities to their higher tier equivalents - for example to replace transport belts with fast transport belts or fast inserters with bulk inserters -"
  },
  {
    "type": "wiki",
    "name": "Upgrade planner",
    "content": "fast transport belts or fast inserters with bulk inserters - the upgrade planner is able to change a wide range of entities including transport belts , underground belts , splitters , inserters , assembling machines , chests , power poles , rail signals , modules , furnaces and more. Using an upgrade planner in the game world is similar to the operation of the deconstruction planner and blueprint, in that the player drags a rectangular area in which the upgrade planner will function and this results in"
  },
  {
    "type": "wiki",
    "name": "Upgrade planner",
    "content": "in which the upgrade planner will function and this results in orders being queued for construction robots . Upgrade planners can be used blank (unfiltered) to automatically apply a limited set of common upgrades. Alternatively they can be configured (filtered) to make specific replacements. This can include downgrading higher tier, later-game entities to lower tier equivalents. Upgrade planners, just like blueprints , can be stored in a blueprint book or blueprint library to prevent them occupying"
  },
  {
    "type": "wiki",
    "name": "Upgrade planner",
    "content": "a blueprint book or blueprint library to prevent them occupying inventory space or for organization or sharing purposes. Contents 1 Basic operation 1.1 Getting an upgrade planner 1.2 Using a planner in the game world 1.3 Cancelling updates 1.4 Updating blueprints 2 Upgrade planner filters 2.1 Using a blank upgrade planner (unfiltered) 2.2 Filtering an upgrade planner 2.2.1 The filter window 2.2.2 Editing the filters 3 Valid entities 3.1 Modded entities 4 Trivia 5 History 6 See also Basic operation Getting"
  },
  {
    "type": "wiki",
    "name": "Upgrade planner",
    "content": "entities 4 Trivia 5 History 6 See also Basic operation Getting an upgrade planner A blank planner can be obtained by clicking the green upgrade planner icon ( ) on the shortcut bar (available once construction robotics has been researched in at least one game.) This will result in a blank upgrade planner appearing in the hand. It can be used immediately or placed in the inventory. It must be placed in the inventory before a filter can be applied and before it can be pinned to a quickbar slot. Using a"
  },
  {
    "type": "wiki",
    "name": "Upgrade planner",
    "content": "applied and before it can be pinned to a quickbar slot. Using a planner in the game world With a planner held in the hand the player can click-drag it ( Left mouse button is held down while moving the mouse) over existing structures to mark them for upgrade. A tooltip appears indicating which entities will be changed and to what. Once Left mouse button is released yellow circles will appear over any existing structures that are now queued for update. These update operations will be performed by"
  },
  {
    "type": "wiki",
    "name": "Upgrade planner",
    "content": "queued for update. These update operations will be performed by construction robots . The planner can be used anywhere on the map where the player has radar coverage (map view). Upgrade planners can also affect ghost entities. Any ghost eligible for update will immediately change to the new entity. Dragging an upgrade planner. The tooltip shows which upgrades will occur. Yellow circles indicate pending update operations. Ghost entities update immediately. Cancelling updates Pending upgrade operations can"
  },
  {
    "type": "wiki",
    "name": "Upgrade planner",
    "content": "immediately. Cancelling updates Pending upgrade operations can be cancelled by holding SHIFT while click-dragging the upgrade planner over the affected area. Updating blueprints Upgrade planners can also be used to change the contents of a blueprint. This allows the player to keep using the same blueprints as they research progressively better entities. As upgrade planners can also downgrade entities this further provides a way for a player to adjust late-game blueprints to make them suitable for re-use in"
  },
  {
    "type": "wiki",
    "name": "Upgrade planner",
    "content": "adjust late-game blueprints to make them suitable for re-use in subsequent games. The blueprint to be updated must reside in an inventory. It is not currently possible to use an upgrade planner in the blueprint library. With a planner held in the hand, the edit window for a blueprint should be opened by clicking Right mouse button on it. The upgrade planner can be applied by clicking Left mouse button on the grey upgrade planner slot in the top right corner of the blueprint. The entities in the blueprint"
  },
  {
    "type": "wiki",
    "name": "Upgrade planner",
    "content": "right corner of the blueprint. The entities in the blueprint will immediately update according to the filters in the planner. If a blank planner is used an automatic set of common upgrades is applied, as described in the next section. The update is immediate and cannot be undone, except by applying another upgrade planner with filters set to change back the affected entities. Upgrade planner filters A new upgrade planner is blank, meaning it lacks any configuration and will operate on a pre-defined set of"
  },
  {
    "type": "wiki",
    "name": "Upgrade planner",
    "content": "any configuration and will operate on a pre-defined set of upgrade rules. The planner can optionally be edited to provide a custom list of update rules that control which entities will be updated and what to. Using a blank upgrade planner (unfiltered) When a blank upgrade planner is used it operates on a specific list of entities considered automatically upgradable to the next highest tier. The list of entity types that can be affected by a blank planner are as follows: Belts Underground belts Splitters"
  },
  {
    "type": "wiki",
    "name": "Upgrade planner",
    "content": "blank planner are as follows: Belts Underground belts Splitters Inserters Assembling machines Furnaces Entities of the above types will be upgraded to the next highest tier where one exists. A complete list of the entities eligible for upgrade by a blank planner is found in Valid entities . Filtering an upgrade planner The planner must be in an inventory in order for it to be editable. The filter window can be accessed by clicking Right mouse button on an upgrade planner, either in the inventory or on a"
  },
  {
    "type": "wiki",
    "name": "Upgrade planner",
    "content": "button on an upgrade planner, either in the inventory or on a quickbar link. The filter window The filter window consists of 24 entity slot pairs. In each pair the entity to be updated goes in the left slot and the entity it will be changed to goes in the right slot. A blank planner. A simple configuration example. Editing the filters A filter is applied by first clicking Left mouse button on the left-hand slot of any slot pair. This brings up the Select upgrade window. This is similar to the item"
  },
  {
    "type": "wiki",
    "name": "Upgrade planner",
    "content": "up the Select upgrade window. This is similar to the item selection window but is limited to displaying the entities an upgrade planner is able to change. The right-hand slot is then selected in the same way, choosing the target entity. The select upgrade window for the right slot will only show entities that are a valid update target for the entity in the left slot. When there is only one possible update target the right slot will be filled in automatically. Filters can be removed by clicking Right mouse"
  },
  {
    "type": "wiki",
    "name": "Upgrade planner",
    "content": "automatically. Filters can be removed by clicking Right mouse button on the slot. Valid entities An example of downgrading. This could be helpful to make a blueprint usable from the beginning of a game. The upgrade planner can operate on the entities listed below. It can swap any entity in a given category to any other entity in the same category. For example a transport belt can be changed to a fast or express transport belt and also to any kind of underground belt , but not to a splitter or a chest . The"
  },
  {
    "type": "wiki",
    "name": "Upgrade planner",
    "content": "of underground belt , but not to a splitter or a chest . The Blank upgrade planner column indicates which entities will be automatically upgraded when a blank (unfiltered) upgrade planner is used. These entities will upgrade to the entity following them in the table. Category Entity Blank upgrade planner Belts and undergrounds Transport belt Yes Belts and undergrounds Fast transport belt Yes Belts and undergrounds Express transport belt No/Yes Belts and undergrounds Turbo transport belt No Belts and"
  },
  {
    "type": "wiki",
    "name": "Upgrade planner",
    "content": "No/Yes Belts and undergrounds Turbo transport belt No Belts and undergrounds Underground belt Yes Belts and undergrounds Fast underground belt Yes Belts and undergrounds Express underground belt No/Yes Belts and undergrounds Turbo underground belt No Splitters Splitter Yes Splitters Fast splitter Yes Splitters Express splitter No/Yes Splitters Turbo splitter No Inserters Burner inserter No Inserters Inserter Yes Inserters Fast inserter Yes Inserters Bulk inserter No Chests Wooden chest No Chests Iron chest"
  },
  {
    "type": "wiki",
    "name": "Upgrade planner",
    "content": "Bulk inserter No Chests Wooden chest No Chests Iron chest No Chests Steel chest No Chests Active provider chest No Chests Passive provider chest No Chests Storage chest No Chests Buffer chest No Chests Requester chest No Power poles Small electric pole No Power poles Medium electric pole No Rail signals Rail signal No Rail signals Rail chain signal No Steam Engine/Turbine Steam engine No Steam Engine/Turbine Steam turbine No Furnaces Stone furnace Yes Furnaces Steel furnace No Assembling machines"
  },
  {
    "type": "wiki",
    "name": "Upgrade planner",
    "content": "Stone furnace Yes Furnaces Steel furnace No Assembling machines Assembling machine 1 Yes Assembling machines Assembling machine 2 Yes Assembling machines Assembling machine 3 No Modules Speed module No Modules Speed module 2 No Modules Speed module 3 No Modules Productivity module No Modules Productivity module 2 No Modules Productivity module 3 No Modules Efficiency module No Modules Efficiency module 2 No Modules Efficiency module 3 No Modules Quality module No Modules Quality module 2 No Modules Quality"
  },
  {
    "type": "wiki",
    "name": "Upgrade planner",
    "content": "Quality module No Modules Quality module 2 No Modules Quality module 3 No With the Space Age DLC and the quality mod enabled, upgrade planners can also be set to upgrade entities to different qualities of the same entity. Modded entities Modded entities can also be valid entities for an upgrade planner. The filter selection window will expand to automatically include any modded entities compatible with the above categories. This can also result in extra categories being available for update, beyond those"
  },
  {
    "type": "wiki",
    "name": "Upgrade planner",
    "content": "in extra categories being available for update, beyond those listed above. For example if a mod is installed that adds new types of lamp , it may become possible to update the vanilla lamp to one of the new modded lamps using an upgrade planner. Trivia In Space Age , it is possible to get a quality upgrade planner by recycling them with quality modules . Quality planners function identically to their normal counterparts"
  },
  {
    "type": "wiki",
    "name": "Blueprint book",
    "content": "Storage size 31 | Stack size 1 | Prototype type blueprint-book | Internal name blueprint-book | The blueprint book is an item that can be used to store, organize and share blueprints , deconstruction planners , upgrade planners and other blueprint books. Just like blueprints and planners, it occupies a single inventory slot, but can contain an unlimited amount of any of them. Also just like them, it can be stored in the blueprint library to prevent inventory space usage or for sharing purposes. Blueprints"
  },
  {
    "type": "wiki",
    "name": "Blueprint book",
    "content": "inventory space usage or for sharing purposes. Blueprints can be used directly from the book item, and the currently active blueprint can be changed with SHIFT + Mouse wheel up and SHIFT + Mouse wheel down . If books are nested, this works as if every nested book was replaced by its contents: Upon switching to a nested book, that book is switched to the first (last) item it contains, and scrolling further switches through that nested book's items until its end, at which point the item that goes after the"
  },
  {
    "type": "wiki",
    "name": "Blueprint book",
    "content": "until its end, at which point the item that goes after the nested book is selected. A blueprint book can be created by clicking the ( ) button in the shortcut bar . It can be stored in player's inventory, in another book, or in the blueprint library. Any book or blueprint, even nested one, can also be placed in the quickbar , but it is just a \"shortcut\", the item itself stays wherever it was. A book can also be placed in any normal container, like a chest, but keeping it there disables the quickbar entry"
  },
  {
    "type": "wiki",
    "name": "Blueprint book",
    "content": "like a chest, but keeping it there disables the quickbar entry (if it was created) and increases the chances of destruction (e.g. by biter attack or careless tank driving). Blueprint book GUI. Shown above is the full blueprint book GUI window (includes player inventory on the left), which can be opened by right clicking the book item in any inventory (includes other books and blueprint library) or quickbar. The name and the icon of the book can be set with the button next to the name. The two leftmost"
  },
  {
    "type": "wiki",
    "name": "Blueprint book",
    "content": "can be set with the button next to the name. The two leftmost buttons in the row below chose between the list view (shown in this screenshot) and the more compact grid view (shown in the screenshot at the top of this page). The \"plus\" button creates a copy of the book. The result is a completely separate book, editing or deleting either one or their contents does not affect the other. The green button allows applying an upgrade planner to all entities in all blueprints in the book. The button between the"
  },
  {
    "type": "wiki",
    "name": "Blueprint book",
    "content": "entities in all blueprints in the book. The button between the green and the red exports the book as a string that can be imported with the \"Import string\" button on the shortcut bar. The red trashcan button allows to delete the blueprint book and its contents. The deletion of the book has to be confirmed in another dialog. The currently selected book entry is highlighted with green."
  },
  {
    "type": "wiki",
    "name": "Boiler",
    "content": "Recipe | Time 0.5+Pipe 4+Stone_furnace 1 → Boiler 1 | Total raw | Time 3+Iron_plate 4+Stone 5 | Fluid storage volume Input: 200 Output: 200 | Resistances Explosion: 0/30%Fire: 0/90%Impact: 0/30% | Stack size 50 | Dimensions 2×3 | Energy consumption Quality 1.8 MWQuality 2.34 MWQuality 2.88 MWQuality 3.42 MWQuality 4.5 MW(Fuel) Quality 1.8 MW Quality 2.34 MW Quality 2.88 MW Quality 3.42 MW Quality 4.5 MW | Heat output Quality 60/sQuality 78/sQuality 96/sQuality 114/sQuality 150/ssteam Quality 60/s Quality"
  },
  {
    "type": "wiki",
    "name": "Boiler",
    "content": "96/sQuality 114/sQuality 150/ssteam Quality 60/s Quality 78/s Quality 96/s Quality 114/s Quality 150/s | Fluid consumption Quality 6/sQuality 7.8/sQuality 9.6/sQuality 11.4/sQuality 15/s Quality 6/s Quality 7.8/s Quality 9.6/s Quality 11.4/s Quality 15/s | Mining time 0.2 | Pollution 30/m | Prototype type boiler | Internal name boiler | Required technologies | Steam_power_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Valid fuel |"
  },
  {
    "type": "wiki",
    "name": "Boiler",
    "content": "Assembling_machine_3 Crafting | Valid fuel | WoodCoalSolid_fuelRocket_fuelNuclear_fuel | The boiler uses fuel to convert water into steam at 165°C suitable for use in a steam engine . It has two water connectors on opposite ends and passes water through to adjacent equipment such as other boilers. The boiler features a single output for the steam it produces. It only consumes fuel as it creates steam. Boilers used in conjunction with offshore pumps and steam engines are a vital part of early power"
  },
  {
    "type": "wiki",
    "name": "Boiler",
    "content": "pumps and steam engines are a vital part of early power generation . For each unit of water, 10 units of steam are produced. Inserting one coal (4 MJ) into a boiler then using the resulting steam in a steam engine will supply 4 MJ of energy to an electrical system. It costs 300 kJ to heat 1 unit of water to into 10 steam at 165°C, so one boiler will produce 60 steam per second. Inserters can insert fuel into boilers. However, using powered inserters to move fuel into a boiler can be problematic should fuel"
  },
  {
    "type": "wiki",
    "name": "Boiler",
    "content": "to move fuel into a boiler can be problematic should fuel become unavailable: if no power is being produced, then powered inserters fueling a boiler cannot operate. Using at least one burner inserter , which uses fuel and not electricity, ensures that at least one inserter is available to restart a single boiler. Inserters can also remove fuel from boilers, allowing inserters to move fuel down a chain of boilers."
  },
  {
    "type": "wiki",
    "name": "Steam engine",
    "content": "Recipe | Time 0.5+Iron_gear_wheel 8+Iron_plate 10+Pipe 5 → Steam_engine 1 | Total raw | Time 7+Iron_plate 31 | Fluid storage volume 200 | Resistances Fire: 0/70%Impact: 0/30% | Stack size 10 | Dimensions 3×5 | Power output Quality 900 kWQuality 1.17 MWQuality 1.44 MWQuality 1.71 MWQuality 2.25 MW Quality 900 kW Quality 1.17 MW Quality 1.44 MW Quality 1.71 MW Quality 2.25 MW | Maximum temperature 165 °C | Fluid consumption Quality 30/sQuality 39/sQuality 48/sQuality 57/sQuality 75/s Quality 30/s Quality 39/s"
  },
  {
    "type": "wiki",
    "name": "Steam engine",
    "content": "48/sQuality 57/sQuality 75/s Quality 30/s Quality 39/s Quality 48/s Quality 57/s Quality 75/s | Mining time 0.3 | Prototype type generator | Internal name steam-engine | Required technologies | Steam_power_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Steam engines are the most basic electricity generator, available to the player at the start of the game. They produce electricity by consuming steam , using water pumped from an offshore pump that was"
  },
  {
    "type": "wiki",
    "name": "Steam engine",
    "content": "steam , using water pumped from an offshore pump that was heated to 165°C steam with boilers or to 500°C steam with heat exchangers . Steam that has a higher temperature than the maximum temperature of the steam engine (165°C) is consumed at the normal rate (30 units/s), and does not yield more electricity. This means the energy that was put into the steam to heat it to a higher temperature is wasted. Steam engines will automatically adjust their power production and steam usage based on the current"
  },
  {
    "type": "wiki",
    "name": "Steam engine",
    "content": "their power production and steam usage based on the current demands of the electricity network. Hovering the mouse over a steam engine will display their current power production ( Performance ) and their possible power production ( Available Performance ), in a display on the right. Steam engines have two ports, allowing excess steam to flow through. This allows steam engines to be chained together. The current optimal ratio is 1 offshore pump to 200 boilers to 400 steam engines. For more information, see"
  },
  {
    "type": "wiki",
    "name": "Steam engine",
    "content": "to 200 boilers to 400 steam engines. For more information, see power production . Using steam engines for power does not produce pollution , however using boilers to heat up the water does. On Aquilo , steam engines need to be heated up to working temperature before they will start working, but will still pass steam through when frozen. When producing power, the steam engine will display a working animation:"
  },
  {
    "type": "wiki",
    "name": "Solar panel",
    "content": "Recipe | Time 10+Copper_plate 5+Electronic_circuit 15+Steel_plate 5 → Solar_panel 1 | Total raw | Time 28.75+Copper_plate 27.5+Iron_plate 15+Steel_plate 5 | Stack size 50 | Dimensions 3×3 | Power output 60 kW (full daylight)42 kW (average)Quality 100%Quality 130%Quality 160%Quality 190%Quality 250% Quality 100% Quality 130% Quality 160% Quality 190% Quality 250% | Mining time 0.1 | Prototype type solar-panel | Internal name solar-panel | Required technologies | Solar_energy_(research) | Produced by |"
  },
  {
    "type": "wiki",
    "name": "Solar panel",
    "content": "Required technologies | Solar_energy_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | SatellitePortable_solar_panel | Solar panels are an unlimited source of free energy that produce no pollution . On a planet, the power output varies based on the time of day . During the day (half of a day/night cycle), all panels provide a constant, maximum power level. Generated power will increase/decrease linearly during dawn and dusk, and no power is"
  },
  {
    "type": "wiki",
    "name": "Solar panel",
    "content": "linearly during dawn and dusk, and no power is produced at night. The baseline power generated by a panel is 60 kW; this represents 100% power production. On Nauvis , one solar panel produces an average of 42 kW over a day/night cycle. In Space Age , different planets provide a bonus or penalty to panel output. These modifiers are based on 60 kW as the baseline 100% power of a panel. Planets also have their own day/night cycle lengths, so the average power produced by panels over a day/night cycle can"
  },
  {
    "type": "wiki",
    "name": "Solar panel",
    "content": "the average power produced by panels over a day/night cycle can change. Space platforms do not have day/night cycles; panels produce a constant amount of power while at a location in space. If a platform is moving between locations, the power output will raise or lower based on how far it is between the source location and destination. If the source location offers 200% solar power, and the destination has 300%, then a platform halfway between will have its solar panels offer 250% power. Quality panels"
  },
  {
    "type": "wiki",
    "name": "Solar panel",
    "content": "will have its solar panels offer 250% power. Quality panels also provide higher than 100% power output. Contents 1 Energy management 2 Notes 3 Space Age 4 Optimal ratios 5 Achievements 6 Gallery 7 History 8 See also Energy management As already stated, solar panels produce energy only during the day, but you likely want your factory to run at night as well. Accumulators can be charged up with solar panels during the day to power the base at night. Accumulators are not the only way to work with solar"
  },
  {
    "type": "wiki",
    "name": "Solar panel",
    "content": "at night. Accumulators are not the only way to work with solar energy. Sometimes it is more economical to just avoid consuming energy at night. For example, if you power a bunch of electric mining drills and electric furnaces to produce iron and copper plates , you could build more drills and furnaces than you actually need, and store the excess metal production during the day. At night you can shut down the drills and furnaces, and let your factory run with the stored plates. Instead of storing energy,"
  },
  {
    "type": "wiki",
    "name": "Solar panel",
    "content": "factory run with the stored plates. Instead of storing energy, you would be storing what the energy is used for. The easiest way to achieve this is by connecting all your extractors and furnaces to an electric network with exactly enough solar panels to make them work during the day, and keeping this network away from your factory's main electric network. Notes A single (normal quality) solar panel outputs an average of 42 kW over a day on Nauvis and requires 0.84672 accumulators to sustain a constant"
  },
  {
    "type": "wiki",
    "name": "Solar panel",
    "content": "Nauvis and requires 0.84672 accumulators to sustain a constant power output through the night. It takes approximately 23.8 solar panels to operate 1 MW of factory and charge 20.2 accumulators to sustain that 1 MW through the night. The optimal ratio for normal quality solar panels to charge enough normal quality accumulators on Nauvis is 2646 accumulators for 3125 solar panels (supplying 42 kW per solar panel). Solar efficiency graph over time. (click to enlarge) Space Age Space Age expansion exclusive"
  },
  {
    "type": "wiki",
    "name": "Solar panel",
    "content": "(click to enlarge) Space Age Space Age expansion exclusive feature. In Space Age, the closer a planet is to the sun, the more power a solar panel on its surface produces. Additionally, as there is no nighttime in space, solar panels on space platforms will generate energy constantly, and at a higher rate than on a planet's surface. Location In atmosphere In space Vulcanus 400% 600% Nauvis 100% 300% Gleba 50% 200% Fulgora 20% 120% Aquilo 1% 60% Solar system edge N/A 1% Shattered planet N/A 1% Optimal ratios"
  },
  {
    "type": "wiki",
    "name": "Solar panel",
    "content": "Solar system edge N/A 1% Shattered planet N/A 1% Optimal ratios The optimal ratio of solar panels to accumulators varies depending on the qualities of both the solar panels and accumulators, as well as the planets they're constructed on. Location Accumulators per solar panel Nauvis 0.8467200 1.1007360 1.3547520 1.6087680 2.1168000 Vulcanus 0.7257600 0.9434880 1.1612160 1.3789440 1.8144000 Gleba 0.6048000 0.7862400 0.9676800 1.1491200 1.5120000 Fulgora 0.0725760 0.0943880 0.1161216 0.1378944 0.1814400"
  },
  {
    "type": "wiki",
    "name": "Solar panel",
    "content": "Fulgora 0.0725760 0.0943880 0.1161216 0.1378944 0.1814400 Aquilo 0.0241920 0.0314496 0.0387072 0.0459648 0.0604800 Note that the quality shown in the table is the quality of the solar panels only, and assumes normal accumulator quality. When using accumulators of other qualities, divide the ratio shown by 2/3/4/6 for uncommon/rare/epic/legendary, respectively. All ratios are exact numbers with no rounding. Achievements Solar power Start producing electric power by solar panels . Solaris Produce more than"
  },
  {
    "type": "wiki",
    "name": "Solar panel",
    "content": "electric power by solar panels . Solaris Produce more than 10 GJ per hour using only solar panels . Steam all the way Launch a rocket to space without building any solar panels ."
  },
  {
    "type": "wiki",
    "name": "Accumulator",
    "content": "Recipe | Time 10+Battery 5+Iron_plate 2 → Accumulator 1 | Total raw | Time 10+Battery 5+Iron_plate 2 | Stack size 50 | Dimensions 2×2 | Energy capacity Quality 5.0 MJQuality 10 MJQuality 15 MJQuality 20 MJQuality 30 MJ(Electric_system) Quality 5.0 MJ Quality 10 MJ Quality 15 MJ Quality 20 MJ Quality 30 MJ | Power input Quality 300 kWQuality 390 kWQuality 480 kWQuality 570 kWQuality 750 kW Quality 300 kW Quality 390 kW Quality 480 kW Quality 570 kW Quality 750 kW | Power output Quality 300 kWQuality 390"
  },
  {
    "type": "wiki",
    "name": "Accumulator",
    "content": "570 kW Quality 750 kW | Power output Quality 300 kWQuality 390 kWQuality 480 kWQuality 570 kWQuality 750 kW Quality 300 kW Quality 390 kW Quality 480 kW Quality 570 kW Quality 750 kW | Mining time 0.1 | Prototype type accumulator | Internal name accumulator | Required technologies | Electric_energy_accumulators_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Satellite | The Accumulator stores a limited amount of energy when available"
  },
  {
    "type": "wiki",
    "name": "Accumulator",
    "content": "Accumulator stores a limited amount of energy when available production exceeds demand, and releases it in the opposite case. The accumulator can store up to 5 MJ of energy. Its maximum charge/discharge rate is 300 kW. If connected to a circuit network , an accumulator will output its level of charge, rounded to the nearest integer from 0 to 100, to a specified signal. Contents 1 Notes 2 Other uses 2.1 Isolation of Power Networks 2.1.1 Reduction of Energy Consumption in Critical Situations 3 History 4 See"
  },
  {
    "type": "wiki",
    "name": "Accumulator",
    "content": "of Energy Consumption in Critical Situations 3 History 4 See also Notes 5MJ of stored energy takes approximately 17s to fully charge/discharge at the maximum rate of 300kW. Read Time#Seconds for further time related calculations. It takes 20 accumulators (100MJ) to maintain 1MW through the night, because the accumulators don't immediately start discharging at the beginning of dusk, see the graph in this post. For balanced solar power, every 21 accumulators need to have 25 solar panels supporting them (at"
  },
  {
    "type": "wiki",
    "name": "Accumulator",
    "content": "accumulators need to have 25 solar panels supporting them (at 50kW per accumulator) When discharged above maximum speed by multiple unconnected poles, energy will not be distributed equally (some loads may get 100% demand, others 0%) May be used to provide a limited amount of power (multiples of maximum charge rate) to a section of the grid. Produces light when charging and discharging. Can act as an emergency backup for the factory in case of blackout, until main power supply is restored. Can be used to"
  },
  {
    "type": "wiki",
    "name": "Accumulator",
    "content": "blackout, until main power supply is restored. Can be used to power the base at night if it relies on solar panels . Can act to satisfy surging demands of certain loads. If the power usage of one device exceeds production for a few seconds or so, the accumulator can provide power to the grid until said device shuts down or requires a lesser power requirement. Other uses Note that if throughput should not be limited, a power switch can be used instead. Isolation of Power Networks Accumulators can be used to"
  },
  {
    "type": "wiki",
    "name": "Accumulator",
    "content": "Isolation of Power Networks Accumulators can be used to isolate two separate power networks, which has a number of uses. Since accumulators have a lower delivery priority than any other entity, this guarantees that they only receive energy when you have enough left over after powering all other entities in a network. At the same time, accumulators can also be used to deliver energy in another electrical network, and can charge and discharge at the same time. Consider the following example: Example of"
  },
  {
    "type": "wiki",
    "name": "Accumulator",
    "content": "at the same time. Consider the following example: Example of accumulators sharing two separate networks. (Click to enlarge) The two power networks A and B are not directly connected to each other: They are connected only through the accumulators, which are shared by both networks. This is accomplished by setting up electric poles for each network connected to the accumulators, then ensuring the sets of poles are not connected to each other (which can be done with the copper wire tool from the shortcut bar"
  },
  {
    "type": "wiki",
    "name": "Accumulator",
    "content": "can be done with the copper wire tool from the shortcut bar , by dragging it between two connected poles to sever the connection, exactly as is done for disconnecting circuit wires). In the above example: The accumulators will only charge if extra power is being produced by network A or B. The accumulators will discharge as needed into either network if one is not producing enough power. Since the maximum input/output rate of an accumulator is 300 kW, power flow between the two networks will be limited to"
  },
  {
    "type": "wiki",
    "name": "Accumulator",
    "content": "300 kW, power flow between the two networks will be limited to 300 kW times the number of accumulators (1.5 MW in the example). Note that this isolation is bidirectional: Either network can charge the accumulators, and the accumulators can discharge into either network. This technique can be used whenever this type of isolation is desired. Reduction of Energy Consumption in Critical Situations In particular, one good use for the above technique is to limit electricity consumption in low power situations by"
  },
  {
    "type": "wiki",
    "name": "Accumulator",
    "content": "is to limit electricity consumption in low power situations by isolating non-critical parts of your factory (such as Radar , Labs , Electric furnaces , electric miners , Beacons , etc.) from critical parts (such as lasers, ammo production, or whatever your priorities are). To do this, place your main generators and critical components on one network and place your non-critical components on another network, isolating the two as above. Now, two things will happen: Power will only flow to the non-critical"
  },
  {
    "type": "wiki",
    "name": "Accumulator",
    "content": "things will happen: Power will only flow to the non-critical network when you are generating a surplus on the main network, and The rate will always be limited to 300 kW per accumulator. Because the accumulators will only receive power if you have a surplus on the main network, this will in effect deactivate the low-priority network when electricity is in short supply. This will also limit power consumption of the low priority network if its usage becomes high, for example if you have two factories on a"
  },
  {
    "type": "wiki",
    "name": "Accumulator",
    "content": "usage becomes high, for example if you have two factories on a low priority network and usually only one of them runs at a time, if both happen to run they won't consume more than the total limit, they'll just slow down. Essentially you are saying \"only deliver power to these systems if I have enough to spare, and even then don't exceed this delivery rate\". In general this is a technique which works well when you've just researched accumulators and solar panels, but don't have enough resources to build big"
  },
  {
    "type": "wiki",
    "name": "Accumulator",
    "content": "and solar panels, but don't have enough resources to build big solar farms and accumulator farms yet."
  },
  {
    "type": "wiki",
    "name": "Nuclear reactor",
    "content": "Recipe | Time 8+Advanced_circuit 500+Concrete 500+Copper_plate 500+Steel_plate 500 → Nuclear_reactor 1 | Total raw | Time 4.8 k+Concrete 500+Copper_plate 3 k+Iron_plate 1 k+Plastic_bar 1 k+Steel_plate 500 | Stack size 10 | Dimensions 5×5 | Energy consumption Quality 40 Quality 52 Quality 64 Quality 76 Quality 100 MW (Fuel) Quality 40 Quality 52 Quality 64 Quality 76 Quality 100 | Heat output Quality 40 Quality 52 Quality 64 Quality 76 Quality 100 MW Quality 40 Quality 52 Quality 64 Quality 76 Quality 100 |"
  },
  {
    "type": "wiki",
    "name": "Nuclear reactor",
    "content": "MW Quality 40 Quality 52 Quality 64 Quality 76 Quality 100 | Maximum temperature 1000 °C | Mining time 0.5 | Prototype type reactor | Internal name nuclear-reactor | Required technologies | Nuclear_power_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Valid fuel | Uranium_fuel_cell | The nuclear reactor generates heat by burning uranium fuel cells . The heat can be used in a heat exchanger to produce steam which can be used to generate power. Unlike"
  },
  {
    "type": "wiki",
    "name": "Nuclear reactor",
    "content": "to produce steam which can be used to generate power. Unlike other forms of power generation, it is load-independent – each fuel cell will always be used completely in 200 seconds, regardless of load or the temperature of the reactor. To prevent wasting fuel, the inserters feeding fuel to the reactors can read the heat level of a reactor via the circuit network , permitting them to only insert when the heat in the reactor is relatively low. Alternatively, excess power can be stored in accumulators or as"
  },
  {
    "type": "wiki",
    "name": "Nuclear reactor",
    "content": "Alternatively, excess power can be stored in accumulators or as steam in storage tanks . Instead of completely consuming the fuel, burning fuel in a nuclear reactor results in depleted uranium fuel cells . These used up cells can be reprocessed in a centrifuge to get back some of the uranium used to create the fuel cells. The reactor will not burn more fuel if it has too many depleted fuel cells, so they must be removed. Nuclear reactors have a heat capacity of 10 MJ/°C. Thus, they can buffer 5 GJ of heat"
  },
  {
    "type": "wiki",
    "name": "Nuclear reactor",
    "content": "a heat capacity of 10 MJ/°C. Thus, they can buffer 5 GJ of heat energy across their working range of 500°C to 1000°C, and require 4.85 GJ of energy to warm up from 15°C to 500°C when initially placed. Contents 1 Neighbour bonus 1.1 Double-row layout 1.2 Square layout 2 Explosion 3 History 4 See also Neighbour bonus Reactors receive a bonus for adjacent operating reactors, which increases their effective thermal output by 100% per each such link. For example, two reactors operating next to each other will"
  },
  {
    "type": "wiki",
    "name": "Nuclear reactor",
    "content": "For example, two reactors operating next to each other will output a total of 160 MW of thermal energy, with each reactor producing 40 MW base and receiving 40 MW of neighbour bonus. The Neighbour bonus only applies if: 2 reactors are directly adjacent to each other with all 3 heat connections directly connecting the two. Both reactors are fueled. Double-row layout The most efficient practical layout is an aligned double row of arbitrary length (number of reactors as needed). For even numbers of reactors,"
  },
  {
    "type": "wiki",
    "name": "Nuclear reactor",
    "content": "(number of reactors as needed). For even numbers of reactors, the total output of the array is 160n − 160 MW (where n = total number of reactors, and assuming all are fueled). Splitting the row, while possibly logistically beneficial, reduces total power output by 160 MW per split. Odd numbers of reactors are inefficient in maximizing the bonus, but, if needed, the odd reactor should be aligned with one of the rows. Offsetting the longer row instead would not gain the extra reactor any bonus, while the"
  },
  {
    "type": "wiki",
    "name": "Nuclear reactor",
    "content": "instead would not gain the extra reactor any bonus, while the reactor on the other end of the same row would lose its bonus as well. Placing the odd reactor between the ends of aligned rows would also lead to one fewer bonus, and also make the design un-tileable. In any case however, such concerns are unlikely to arise until one has a very large base, as the individual output of reactors is massive, particularly with neighbour bonuses. As an example, a 5×2 reactor grid would produce 1,440 MW (1.44 GW), the"
  },
  {
    "type": "wiki",
    "name": "Nuclear reactor",
    "content": "a 5×2 reactor grid would produce 1,440 MW (1.44 GW), the equivalent of 1,600 steam engines, or 24,000 solar panels. Square layout Theoretically, a perfectly square grid of reactors with no spaces between would provide maximum bonus, as it minimizes the number of reactors with unlinked sides. This setup produces 200n − 160×sqrt(n) MW (where sqrt(n) is the square root of the number of reactors). However, while the heat pipe links will allow energy flow from reactors within the square, with no room around"
  },
  {
    "type": "wiki",
    "name": "Nuclear reactor",
    "content": "flow from reactors within the square, with no room around inner reactors, there will be no way to insert and remove fuel cells except manually (heat pipes are traversable by the player), which makes this setup impractical. Furthermore, the gains compared to the double-row design are not large. After some calculation, one arrives at the expression for the ratio of the two (double-row design in denominator) as (1.25n − sqrt(n)) ÷ (n − 1) which evaluates to, for example, 1 for 4 reactors, 1.07 for 16"
  },
  {
    "type": "wiki",
    "name": "Nuclear reactor",
    "content": "which evaluates to, for example, 1 for 4 reactors, 1.07 for 16 reactors, 1.16 for 100 reactors (considering only numbers that both an equal-length double row and a square can be built from), and so on. In the limit (infinite number of reactors), the ratio approaches 1.25 as the edge corrections become insignificant. Explosion If a reactor is destroyed (by damage) while it is above 900°C, it will explode just like an atomic bomb . This explosion has enough power to destroy other reactors, so one explosion"
  },
  {
    "type": "wiki",
    "name": "Nuclear reactor",
    "content": "has enough power to destroy other reactors, so one explosion can lead to a chain reaction of exploding reactors. [1]"
  },
  {
    "type": "wiki",
    "name": "Heat pipe",
    "content": "Recipe | Time 1+Copper_plate 20+Steel_plate 10 → Heat_pipe 1 | Total raw | Time 1+Copper_plate 20+Steel_plate 10 | Resistances Explosion: 0/30%Fire: 0/90%Impact: 0/30% | Stack size 50 | Dimensions 1×1 | Maximum temperature 1000 °C | Mining time 0.1 | Prototype type heat-pipe | Internal name heat-pipe | Required technologies | Nuclear_power_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The heat pipe can transport heat over longer distances and connect"
  },
  {
    "type": "wiki",
    "name": "Heat pipe",
    "content": "heat pipe can transport heat over longer distances and connect devices which produce and use heat. Currently, this is limited to heat exchangers , nuclear reactors , and heating towers . Heat pipes have a heat capacity of 1 MJ/°C. Thus, they can theoretically buffer 500 MJ of heat energy across their working range of 500°C to 1000°C, making them a space-efficient energy store. However, because temperature needs a drop of greater than 1 degree before it will \"flow,\" you can't raise them all the way to"
  },
  {
    "type": "wiki",
    "name": "Heat pipe",
    "content": "before it will \"flow,\" you can't raise them all the way to 1000°C or drain them all the way to 500°C, so the practical energy capacity will depend on the layout. As heat pipes rise in temperature, they will give off a very low-distance glow. On the planet Aquilo , heat pipes are a necessity due to the freezing temperatures. If buildings are not adjacent to heat pipes (or similar objects) with a temperature of at least 30°C, the building will freeze and stop working. Heat pipe throughput Each heat pipe"
  },
  {
    "type": "wiki",
    "name": "Heat pipe",
    "content": "freeze and stop working. Heat pipe throughput Each heat pipe holds an amount of heat energy, and there is a limit to how much energy can go through each of them for a given duration. For any heat pipe entity with one input connection on one side and one output connection on another, this entity will lower the temperature by 1 + (P / 15) °C with P being the power going through this entity expressed in MW. A heat exchanger must heat up to 500°C before it can generate steam. And the maximum temperature of a"
  },
  {
    "type": "wiki",
    "name": "Heat pipe",
    "content": "before it can generate steam. And the maximum temperature of a heat generator (such as a nuclear reactor) is 1000°C. As such, the temperature difference between a heat source and the heat exchanger is at most 500°C. We can thus express the maximum length of a straight line of heat pipe as 500 / (1 + P/15) . For example let's take a single nuclear reactor outputting 40MW of heat power to a single line of heat pipes. The furthest that line can go is 500 / (1 + 40/15) which is around 136 heat pipes long. A"
  },
  {
    "type": "wiki",
    "name": "Heat pipe",
    "content": "go is 500 / (1 + 40/15) which is around 136 heat pipes long. A nuclear reactor can also be used to transfer heat in a similar manner as a heat pipe, whether or not it is fueled. In this case, the reactor will drop the temperature by 1 + (P / 387) °C , with P again being the power in MW going through the entity. Note that this is an approximation, the actual value measured is supposed to be 200000/517 or about 386.847. That being said, the nuclear reactor entity is also much bigger, meaning that we must"
  },
  {
    "type": "wiki",
    "name": "Heat pipe",
    "content": "reactor entity is also much bigger, meaning that we must compare it to 5 lines of 5 heat pipes instead of just a single one. The nuclear reactor will thus lower the temperature 5 times less with near-zero power going through it, and nearly 26 times less when approaching infinite power, compared to those lines of heat pipes. As an example, a single line of 100 nuclear reactors (or 500 tiles) will only lower the temperature by about 360°C while carrying 1GW. In Space Age , on Aquilo , heat pipes are used to"
  },
  {
    "type": "wiki",
    "name": "Heat pipe",
    "content": "carrying 1GW. In Space Age , on Aquilo , heat pipes are used to prevent entities from freezing . They automatically transfer heat into neighboring entities. Different entities consume different amounts of heat to prevent freezing, but they do not have the temperature requirements of a heat exchanger. Heat pipes only need to be at least 30°C to keep an entity warm. Also, heat pipes do not lose heat to the environment; they only lose heat to entities that need to be kept warm."
  },
  {
    "type": "wiki",
    "name": "Heat exchanger",
    "content": "Recipe | Time 3+Copper_plate 100+Pipe 10+Steel_plate 10 → Heat_exchanger 1 | Total raw | Time 8+Copper_plate 100+Iron_plate 10+Steel_plate 10 | Fluid storage volume Input: 200 Output: 200 | Resistances Explosion: 0/30%Fire: 0/90%Impact: 0/30% | Stack size 50 | Dimensions 2×3 | Energy consumption Quality 10 Quality 13 Quality 16 Quality 19 Quality 25 MW (Fuel) Quality 10 Quality 13 Quality 16 Quality 19 Quality 25 | Heat output Quality 103/sQuality 134/sQuality 165/sQuality 196/sQuality 258/ssteam Quality"
  },
  {
    "type": "wiki",
    "name": "Heat exchanger",
    "content": "134/sQuality 165/sQuality 196/sQuality 258/ssteam Quality 103/s Quality 134/s Quality 165/s Quality 196/s Quality 258/s | Maximum temperature 1000 °C | Fluid consumption Quality 10.3/sQuality 13.4/sQuality 16.5/sQuality 19.6/sQuality 25.8/swater Quality 10.3/s Quality 13.4/s Quality 16.5/s Quality 19.6/s Quality 25.8/s | Mining time 0.1 | Prototype type boiler | Internal name heat-exchanger | Required technologies | Nuclear_power_(research) | Produced by | Assembling_machine_1 Assembling_machine_2"
  },
  {
    "type": "wiki",
    "name": "Heat exchanger",
    "content": "| Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The heat exchanger exchanges heat between a heat connection (normally from a heat pipe leading to a nuclear reactor or heating tower ) and water to produce steam . Heat exchangers produce ~103 steam with a temperature of 500°C every second. Heat exchangers will not produce steam until they reach 500°C. The steam produced is exactly 500°C hot, even if the exchanger is hotter. Heat exchangers have a heat capacity of 1"
  },
  {
    "type": "wiki",
    "name": "Heat exchanger",
    "content": "exchanger is hotter. Heat exchangers have a heat capacity of 1 MJ/°C. Thus, they can buffer 500 MJ of heat energy across their working range of 500°C to 1000°C, and require 485 MJ of energy to warm up from 15°C to 500°C when initially placed. Calculating steam production rate Heat exchangers produce 103 steam/second. This can be calculated by relying on steam turbine data: A steam turbine consumes 60 steam/second and produces 5.82MW (assuming 500°C steam). This means a single unit of 500°C steam has 5.82MW"
  },
  {
    "type": "wiki",
    "name": "Heat exchanger",
    "content": "steam). This means a single unit of 500°C steam has 5.82MW / (60/s) = 0.097 MJ of energy. A heat exchanger produces 10 MJ a second, therefore it produces 10MJ / 0.097MJ = 103.0927835 steam per second. The steam production rate can also be calculated using the energy consumption: 1 heat exchanger consumes 10MW, so it's putting 10MJ of energy into heating water/steam per second. To heat up 1 unit of steam 1 degree, 200 joules are needed, so the heat exchanger is heating up water by 50,000 unit-°C in total."
  },
  {
    "type": "wiki",
    "name": "Heat exchanger",
    "content": "heat exchanger is heating up water by 50,000 unit-°C in total. We observe that this heating results in a temperature increase from 15°C to 500°C, so an increase of 485°C. So the 50,000 unit-°C is divided among 103 units of steam per second, since 50,000 / 485 = 103.09 . Since steam is produced from water in a 10:1 ratio, this also means that 10.3 units of water are consumed per second."
  },
  {
    "type": "wiki",
    "name": "Steam turbine",
    "content": "Recipe | Time 3+Copper_plate 50+Iron_gear_wheel 50+Pipe 20 → Steam_turbine 1 | Total raw | Time 38+Copper_plate 50+Iron_plate 120 | Fluid storage volume 200 | Resistances Fire: 0/70% | Stack size 10 | Dimensions 3×5 | Power output Quality 5.82 Quality 7.57 Quality 9.31 Quality 11.06 Quality 14.55 MW Quality 5.82 Quality 7.57 Quality 9.31 Quality 11.06 Quality 14.55 | Maximum temperature 500 °C | Fluid consumption Quality 60/sQuality 78/sQuality 96/sQuality 114/sQuality 150/ssteam Quality 60/s Quality 78/s"
  },
  {
    "type": "wiki",
    "name": "Steam turbine",
    "content": "96/sQuality 114/sQuality 150/ssteam Quality 60/s Quality 78/s Quality 96/s Quality 114/s Quality 150/s | Mining time 0.3 | Prototype type generator | Internal name steam-turbine | Required technologies | Nuclear_power_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The steam turbine consumes steam to create electric energy. It is usually used together with heat exchangers and a nuclear reactor or heating tower . While designed for the 500°C steam of a"
  },
  {
    "type": "wiki",
    "name": "Steam turbine",
    "content": "or heating tower . While designed for the 500°C steam of a nuclear reactor, turbines can still be connected to boilers for use in conventional 165°C steam power. At this mode, the steam turbine acts equal to two separate steam engines , producing 1800 kW and consuming 60 steam/sec. However, actual power production is based on the temperature of the steam, not the building itself. This means that using a steam turbine is no more fuel-efficient than using two steam engines. Unless saving space within a large"
  },
  {
    "type": "wiki",
    "name": "Steam turbine",
    "content": "using two steam engines. Unless saving space within a large build, it is not necessary to use the more costly turbines for boiler steam. Power output Each steam turbine takes a maximum input of 60 units of 500°C steam per second and outputs 5.82MW of electricity; the 5.8MW listed on the tooltip is rounded. Heat exchanger converts water to steam at a 1:10 ratio, and heats it from 15°C to 500°C; It takes 0.2 kJ of heat energy to raise 1 steam 1°C; Steam is consumed by steam turbines at a rate of 60 units per"
  },
  {
    "type": "wiki",
    "name": "Steam turbine",
    "content": "Steam is consumed by steam turbines at a rate of 60 units per second; (500°C - 15°C) × 0.2 kJ × 60 units/s = 5820 kJ/s, or 5.82 MW. On the other hand, the calculation for the Boiler-generated steam is: (165°C - 15°C) × 0.2 kJ × 60 units/s = 1800 kJ/s, or 1.8 MW."
  },
  {
    "type": "wiki",
    "name": "Burner mining drill",
    "content": "Recipe | Time 2+Iron_gear_wheel 3+Iron_plate 3+Stone_furnace 1 → Burner_mining_drill 1 | Total raw | Time 4+Iron_plate 9+Stone 5 | Stack size 50 | Dimensions 2×2 | Energy consumption 150 kW (Fuel) | Mining time 0.3 | Mining speed 0.25 | Mining area 2×2 tiles | Resource drain Quality 100%Quality 83%Quality 66%Quality 50%Quality 16% Quality 100% Quality 83% Quality 66% Quality 50% Quality 16% | Pollution 12/m | Prototype type mining-drill | Internal name burner-mining-drill | Boosting technologies |"
  },
  {
    "type": "wiki",
    "name": "Burner mining drill",
    "content": "| Internal name burner-mining-drill | Boosting technologies | Mining_productivity_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Valid fuel | WoodCoalSolid_fuelRocket_fuelNuclear_fuel | The burner mining drill is the first type of drill accessible to the player. It burns fuel to mine the ore underneath the 2×2 area it is placed on. It mines about 7 items per single unit of coal used to fuel it, producing 0.25 items/s for copper ore , coal , iron ore or"
  },
  {
    "type": "wiki",
    "name": "Burner mining drill",
    "content": "it, producing 0.25 items/s for copper ore , coal , iron ore or stone . Burner miners create a lot of pollution per item. Burner drills are usually used until the player has built an electrical network , at which point the larger and faster electric mining drill becomes more useful, though they can still provide some use as extra drills that take up less space. Contents 1 Interface 2 Self-Sustaining Coal Mines 2.1 Method 1 2.2 Method 2 3 History 4 See also Interface Amount of fuel in the mining drill"
  },
  {
    "type": "wiki",
    "name": "Burner mining drill",
    "content": "History 4 See also Interface Amount of fuel in the mining drill Depletion of 1 unit of fuel Progress of mining Product Self-Sustaining Coal Mines Both methods require no electricity. Method 1 Two burner mining drills can refuel each other when placed next to each other on a coal deposit as long as they're facing each other. Each drill fuels the other and coal gradually accumulates in their stacks , so you have effectively a storage of 100 coal (2 stacks, 50 coal, one in each burner miner, together 100)."
  },
  {
    "type": "wiki",
    "name": "Burner mining drill",
    "content": "(2 stacks, 50 coal, one in each burner miner, together 100). You can do this also for 4 or any other even number of miners. Note that it takes slightly less than 3 minutes for the mining drills to completely fill each other's fuel inventory. Once full, the drills will sit idle until the accumulated coal is removed. It's possible to extend that time by having the drills output their coal into a buffer chest rather than directly into another drill's fuel stack. Method 2 This method can be used for any number"
  },
  {
    "type": "wiki",
    "name": "Burner mining drill",
    "content": "fuel stack. Method 2 This method can be used for any number of burner mining drills in a coal deposit. Place a burner mining drill, then place at least three transport belts from the output in a mirrored \"L\" like shape so that the third belt has a gap between it and the miner. Fill the gap with a burner inserter in a way that the inserter can insert coal to the miner. When placing this array of entities opposite of each other, ensure that no two burner inserters are trying to take coal from the same piece"
  },
  {
    "type": "wiki",
    "name": "Burner mining drill",
    "content": "burner inserters are trying to take coal from the same piece of belt or one of them might run out of fuel."
  },
  {
    "type": "wiki",
    "name": "Electric mining drill",
    "content": "Recipe | Time 2+Electronic_circuit 3+Iron_gear_wheel 5+Iron_plate 10 → Electric_mining_drill 1 | Total raw | Time 8.25+Copper_plate 4.5+Iron_plate 23 | Fluid storage volume 200 | Stack size 50 | Dimensions 3×3 | Energy consumption 90 kW (Electric_system) | Mining time 0.3 | Mining speed 0.5 | Mining area 5×5 tiles | Resource drain Quality 100%Quality 83%Quality 66%Quality 50%Quality 16% Quality 100% Quality 83% Quality 66% Quality 50% Quality 16% | Pollution 10/m | Module slots 3 slots | Prototype type"
  },
  {
    "type": "wiki",
    "name": "Electric mining drill",
    "content": "16% | Pollution 10/m | Module slots 3 slots | Prototype type mining-drill | Internal name electric-mining-drill | Required technologies | Electric_mining_drill_(research) | Boosting technologies | Mining_productivity_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The electric mining drill mines out iron ore , copper ore , uranium ore , stone and coal , and places it in front of the output tile, on a belt or in a machine or chest that covers the output"
  },
  {
    "type": "wiki",
    "name": "Electric mining drill",
    "content": "tile, on a belt or in a machine or chest that covers the output tile. The machine is 3×3, but mines in a 5×5 area, extending 1 tile away on each side. Mines copper ore, iron ore, coal, or stone at a rate of 0.5/s and uranium ore at a rate of 0.25/s. When placed over uranium ore, which requires sulfuric acid to mine, three fluid connectors will appear on the mining drill. The mining drills will pass excess sulfuric acid to each other when these connectors are aligned, allowing multiple drills to be placed"
  },
  {
    "type": "wiki",
    "name": "Electric mining drill",
    "content": "connectors are aligned, allowing multiple drills to be placed right next to each other with only one pipe input necessary to feed all of them. Contents 1 Indicators 2 Achievement 3 History 4 Trivia 5 See also Indicators There is a light attached to the front of the mining drill that will change colors depending on its status: Green light = The drill is currently functioning without issues. Yellow light = The drill's ability to dispense resources is blocked, it is low on power, it is disabled by the circuit"
  },
  {
    "type": "wiki",
    "name": "Electric mining drill",
    "content": "is blocked, it is low on power, it is disabled by the circuit network or it is missing the fluid required to mine the current resource. Red light = The drill has completely run out of resources to mine. Achievement Mining with determination Completely deplete a resource patch. Trivia From 0.15.7 to 0.17.0, it was a component of the chemical science pack ."
  },
  {
    "type": "wiki",
    "name": "Offshore pump",
    "content": "Recipe | Time 0.5+Iron_gear_wheel 2+Pipe 3 → Offshore_pump 1 | Total raw | Time 3+Iron_plate 7 | Fluid storage volume 100 | Resistances Fire: 0/70%Impact: 0/30% | Stack size 20 | Dimensions 2×1 | Pumping speed Quality 1200/sQuality 1560/sQuality 1920/sQuality 2280/sQuality 3000/s Quality 1200/s Quality 1560/s Quality 1920/s Quality 2280/s Quality 3000/s | Mining time 0.1 | Prototype type offshore-pump | Internal name offshore-pump | Required technologies | Steam_power_(research) | Produced by |"
  },
  {
    "type": "wiki",
    "name": "Offshore pump",
    "content": "Required technologies | Steam_power_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The offshore pump produces fluids from lakes and oceans; the fluid generated is based on the contents of the lake it is placed alongside. It must be placed on a shoreline of a body of fluid lake or ocean on the map, and connected to a pipe or other object that accepts liquids . It produces 1200 units of fluid per second. It does not require electricity or fuel to operate."
  },
  {
    "type": "wiki",
    "name": "Offshore pump",
    "content": "per second. It does not require electricity or fuel to operate. Offshore pumps are frequently used to provide water for steam engines , though several crafting recipes also require water. One offshore pump can generate enough water to support 200 boilers, which in turn can support 400 steam engines. For more information, see power production . Placements On Nauvis , when placed in lakes, it collects water . On Gleba , when placed in marshes or lakes, it collects water . On Vulcanus , when placed in lava,"
  },
  {
    "type": "wiki",
    "name": "Offshore pump",
    "content": "lakes, it collects water . On Vulcanus , when placed in lava, it collects lava . On Fulgora , when placed in oil oceans, it collects heavy oil . On Aquilo , when placed in the ammoniacal sea, it collects ammoniacal solution . The fluid supply from an offshore pump is endless; it will not dry up the body of fluid it is attached to. Additionally, the size of the body of fluid the pump is connected to does not affect the rate of fluid generation. Filling in the water around a pump by using landfill will"
  },
  {
    "type": "wiki",
    "name": "Offshore pump",
    "content": "Filling in the water around a pump by using landfill will rename the pump to \"Water well pump\" and it will keep producing fluid."
  },
  {
    "type": "wiki",
    "name": "Pumpjack",
    "content": "Recipe | Time 5+Electronic_circuit 5+Iron_gear_wheel 10+Pipe 10+Steel_plate 5 → Pumpjack 1 | Total raw | Time 21.25+Copper_plate 7.5+Iron_plate 35+Steel_plate 5 | Fluid storage volume 1000 | Stack size 20 | Dimensions 3×3 | Energy consumption 90 kW (Electric_system) | Mining time 0.5 | Mining speed 1 | Mining area 1 tiles | Resource drain Quality 100%Quality 83%Quality 66%Quality 50%Quality 16% Quality 100% Quality 83% Quality 66% Quality 50% Quality 16% | Pollution 10/m | Module slots 2 slots | Prototype"
  },
  {
    "type": "wiki",
    "name": "Pumpjack",
    "content": "Quality 16% | Pollution 10/m | Module slots 2 slots | Prototype type mining-drill | Internal name pumpjack | Required technologies | Oil_gathering_(research) | Boosting technologies | Mining_productivity_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Pumpjacks extract fluids from resource fields. Each field can be covered by only one pumpjack at a fixed spot. The pumpjack will then output an amount of fluid equal to 10 multiplied by the field's yield"
  },
  {
    "type": "wiki",
    "name": "Pumpjack",
    "content": "an amount of fluid equal to 10 multiplied by the field's yield per second. For example, a field with 538% yield will generate 54 fluid per second. Without speed modules , one pumpjack cycle takes one second to complete. Extracting fluid lowers the field's yield by 1% per 300 pumpjack cycles, to a minimum of 20% of the initial yield or 2 fluid per second, whichever is larger. They are limited to a maximum output of 1000 fluid per cycle, achieved by a field with more than 9999% yield. However, such a high"
  },
  {
    "type": "wiki",
    "name": "Pumpjack",
    "content": "by a field with more than 9999% yield. However, such a high yield is rare with standard map generator settings. Pumpjacks can only be placed on fluid resource field tiles. Furthermore, the output pipe location is fixed relative to the pumpjack's orientation. In the base game, the only kind of resource field yields crude oil . In Space Age , the pumpjack can also extract sulfuric acid from Vulcanus , as well as fluorine and lithium brine from Aquilo . Lithium brine resource fields are special; unlike the"
  },
  {
    "type": "wiki",
    "name": "Pumpjack",
    "content": "Aquilo . Lithium brine resource fields are special; unlike the other resource fields, these can run out. These patches do not display a percentage; they instead report the total amount of fluid in the field. They also do not produce less fluid over time. A pumpjack will always produce the same amount of fluid per second on any lithium brine field until it is exhausted: 60 fluid per cycle. Contents 1 Tips 2 Gallery 3 History 4 See also Tips A resource field that has depleted (to the minimum of 20%) can"
  },
  {
    "type": "wiki",
    "name": "Pumpjack",
    "content": "A resource field that has depleted (to the minimum of 20%) can still make use of speed modules , which are thus a good option for raising the pumpjack's output. With two speed module 3s , the output doubles from 2 to 4 fluid per second. With two legendary speed module 3s, the output increases by a factor of 3.5 from 2 to 7 fluid per second. The formula to determine the modified output is: Output of unmodified pumpjack x (1 + number of modules in pumpjack x average module bonus + transmission strength x"
  },
  {
    "type": "wiki",
    "name": "Pumpjack",
    "content": "in pumpjack x average module bonus + transmission strength x number of modules in each beacon x average module bonus) Example: For a pumpjack on a depleted resource field with two level 3 speed modules and 4 beacons with each two level 3 speed modules: 2 x (1 + 2 x 0.5 + √4 x 1.5 x 2 x 0.5) = 10 fluid per second. Assuming that there will be always two speed 3 modules equipped in the pumpjack and beacons, the formula for 4 beacons can be shortened: 2 x (2 + √4 x 1.5) = 10 fluid per second."
  },
  {
    "type": "wiki",
    "name": "Stone furnace",
    "content": "Recipe | Time 0.5+Stone 5 → Stone_furnace 1 | Total raw | Time 0.5+Stone 5 | Resistances Explosion: 0/30%Fire: 0/90%Impact: 0/30% | Stack size 50 | Dimensions 2×2 | Energy consumption 90 kW (Fuel) | Crafting speed Quality 1 Quality 1.3 Quality 1.6 Quality 1.9 Quality 2.5 Quality 1 Quality 1.3 Quality 1.6 Quality 1.9 Quality 2.5 | Mining time 0.2 | Pollution 2/m | Prototype type furnace | Internal name stone-furnace | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting |"
  },
  {
    "type": "wiki",
    "name": "Stone furnace",
    "content": "Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | BoilerBurner_mining_drill | Valid fuel | WoodCoalSolid_fuelRocket_fuelNuclear_fuel | The stone furnace is the most basic smelting machinery, providing a cheap and reliable source of basic products like iron plates and copper plates . Contents 1 Output 2 Gallery 3 History 4 See also Output Resource Stone furnace Steel furnace Electric furnace Coal consumption : 0.0225/sec Coal consumption : 0.0225/sec Iron 0.3125 0.3125/sec 0.625 0.625/sec"
  },
  {
    "type": "wiki",
    "name": "Stone furnace",
    "content": "consumption : 0.0225/sec Iron 0.3125 0.3125/sec 0.625 0.625/sec 0.625 0.625/sec Copper 0.3125 0.3125/sec 0.625 0.625/sec 0.625 0.625/sec Stone brick 0.3125 0.3125/sec 0.625 0.625/sec 0.625 0.625/sec Steel plate 0.0625 0.0625/sec 0.125 0.125/sec 0.125 0.125/sec"
  },
  {
    "type": "wiki",
    "name": "Steel furnace",
    "content": "Recipe | Time 3+Steel_plate 6+Stone_brick 10 → Steel_furnace 1 | Total raw | Time 3+Steel_plate 6+Stone_brick 10 | Resistances Fire: 0/100% | Stack size 50 | Dimensions 2×2 | Energy consumption 90 kW (Fuel) | Crafting speed Quality 2 Quality 2.6 Quality 3.2 Quality 3.8 Quality 5 Quality 2 Quality 2.6 Quality 3.2 Quality 3.8 Quality 5 | Mining time 0.2 | Pollution 4/m | Prototype type furnace | Internal name steel-furnace | Required technologies | Advanced_material_processing_(research) | Produced by |"
  },
  {
    "type": "wiki",
    "name": "Steel furnace",
    "content": "| Advanced_material_processing_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Valid fuel | WoodCoalSolid_fuelRocket_fuelNuclear_fuel | The steel furnace is the second-tier of furnaces. Compared to the stone furnace , it smelts at double the speed and therefore is a more efficient use of the given fuel. Steel furnace is comparable to electric furnace in terms of smelt speed, however the latter can make use of modules (as well as electricity ) to further"
  },
  {
    "type": "wiki",
    "name": "Steel furnace",
    "content": "can make use of modules (as well as electricity ) to further enhance the furnace's capabilities. Placement A steel furnace can replace a stone furnace without mining the stone furnace first. This can be done by clicking on the stone furnace with the steel furnace in the players hand. This will also move all items in the stone furnace to the new furnace. Output Resource Stone furnace Steel furnace Electric furnace Coal consumption : 0.0225/sec Coal consumption : 0.0225/sec Iron 0.3125 0.3125/sec 0.625"
  },
  {
    "type": "wiki",
    "name": "Steel furnace",
    "content": "Coal consumption : 0.0225/sec Iron 0.3125 0.3125/sec 0.625 0.625/sec 0.625 0.625/sec Copper 0.3125 0.3125/sec 0.625 0.625/sec 0.625 0.625/sec Stone brick 0.3125 0.3125/sec 0.625 0.625/sec 0.625 0.625/sec Steel plate 0.0625 0.0625/sec 0.125 0.125/sec 0.125 0.125/sec"
  },
  {
    "type": "wiki",
    "name": "Electric furnace",
    "content": "Recipe | Time 5+Advanced_circuit 5+Steel_plate 10+Stone_brick 10 → Electric_furnace 1 | Total raw | Time 52.5+Copper_plate 25+Iron_plate 10+Plastic_bar 10+Steel_plate 10+Stone_brick 10 | Resistances Fire: 0/80% | Stack size 50 | Dimensions 3×3 | Energy consumption 180 kW (Electric_system) | Drain 6 kW (Electric_system) | Crafting speed Quality 2 Quality 2.6 Quality 3.2 Quality 3.8 Quality 5 Quality 2 Quality 2.6 Quality 3.2 Quality 3.8 Quality 5 | Mining time 0.2 | Pollution 1/m | Module slots 2 slots |"
  },
  {
    "type": "wiki",
    "name": "Electric furnace",
    "content": "5 | Mining time 0.2 | Pollution 1/m | Module slots 2 slots | Prototype type furnace | Internal name electric-furnace | Required technologies | Advanced_material_processing_2_(research)2 | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Production_science_pack | The electric furnace is the third and last tier of furnace. As its name implies, it uses electricity rather than fuel to operate, removing the need for a fuel belt. The electric furnace smelts"
  },
  {
    "type": "wiki",
    "name": "Electric furnace",
    "content": "removing the need for a fuel belt. The electric furnace smelts items at the same speed as a steel furnace , and also has two slots for modules . However, it is slightly larger than the other two tiers of furnaces; it occupies a 3×3 area instead of a 2×2 area. Output Resource Stone furnace Steel furnace Electric furnace Coal consumption : 0.0225/sec Coal consumption : 0.0225/sec Iron 0.3125 0.3125/sec 0.625 0.625/sec 0.625 0.625/sec Copper 0.3125 0.3125/sec 0.625 0.625/sec 0.625 0.625/sec Stone brick 0.3125"
  },
  {
    "type": "wiki",
    "name": "Electric furnace",
    "content": "0.3125/sec 0.625 0.625/sec 0.625 0.625/sec Stone brick 0.3125 0.3125/sec 0.625 0.625/sec 0.625 0.625/sec Lithium plate 0.156 0.15625/sec 0.3125 0.3125/sec 0.3125 0.3125/sec Steel plate 0.0625 0.0625/sec 0.125 0.125/sec 0.125 0.125/sec"
  },
  {
    "type": "wiki",
    "name": "Assembling machine 1",
    "content": "Recipe | Time 0.5+Electronic_circuit 3+Iron_gear_wheel 5+Iron_plate 9 → Assembling_machine_11 | Total raw | Time 6.75+Copper_plate 4.5+Iron_plate 22 | Cannot craft with liquids. | Resistances Fire: 0/70% | Stack size 50 | Dimensions 3×3 | Energy consumption 75 kW (Electric_system) | Drain 2.5 kW (Electric_system) | Crafting speed Quality 0.5 Quality 0.65 Quality 0.8 Quality 0.95 Quality 1.25 Quality 0.5 Quality 0.65 Quality 0.8 Quality 0.95 Quality 1.25 | Mining time 0.2 | Pollution 4/m | Module slots 0"
  },
  {
    "type": "wiki",
    "name": "Assembling machine 1",
    "content": "Quality 1.25 | Mining time 0.2 | Pollution 4/m | Module slots 0 slots | Prototype type assembling-machine | Internal name assembling-machine-1 | Required technologies | Automation_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Assembling_machine_2 | Assembling machine 1 is the most basic assembling machine. As Automation is the first technology available, this is the first available crafting machine. It is capable of crafting most recipes,"
  },
  {
    "type": "wiki",
    "name": "Assembling machine 1",
    "content": "crafting machine. It is capable of crafting most recipes, including its own recipe. However, unlike higher tier assembling machines, it cannot use fluids for crafting. Trivia Between 0.15.0 and 0.15.7, it was an ingredient in the chemical science pack . Between 0.15.7 and 0.16.0, it was an ingredient in the production science pack ."
  },
  {
    "type": "wiki",
    "name": "Assembling machine 2",
    "content": "Recipe | Time 0.5+Assembling_machine_11+Electronic_circuit 3+Iron_gear_wheel 5+Steel_plate 2 → Assembling_machine_21 | Total raw | Time 13.5+Copper_plate 9+Iron_plate 35+Steel_plate 2 | Resistances Fire: 0/70% | Stack size 50 | Dimensions 3×3 | Energy consumption 150 kW (Electric_system) | Drain 5.0 kW (Electric_system) | Crafting speed Quality 0.75 Quality 0.975 Quality 1.2 Quality 1.425 Quality 1.875 Quality 0.75 Quality 0.975 Quality 1.2 Quality 1.425 Quality 1.875 | Mining time 0.2 | Pollution 3/m |"
  },
  {
    "type": "wiki",
    "name": "Assembling machine 2",
    "content": "Quality 1.425 Quality 1.875 | Mining time 0.2 | Pollution 3/m | Module slots 2 slots | Prototype type assembling-machine | Internal name assembling-machine-2 | Required technologies | Automation_2_(research)2 | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Assembling_machine_3 | The assembling machine 2 is an upgraded version of the assembling machine. It has a faster crafting speed and higher power consumption than the assembling machine 1 . Unlike"
  },
  {
    "type": "wiki",
    "name": "Assembling machine 2",
    "content": "higher power consumption than the assembling machine 1 . Unlike the first assembling machine, the assembling machine 2 supports crafting with fluids and using modules to increase the speed or efficiency of production. It can make recipes that include liquids as one of their ingredients (e.g. processing unit ) or products (e.g. empty crude oil barrel ). The input pipe/output pipe connects to the centre of a side. The pipe will only connect when a recipe that requires or produces a liquid is selected. The"
  },
  {
    "type": "wiki",
    "name": "Assembling machine 2",
    "content": "a recipe that requires or produces a liquid is selected. The pipe starts at the top by default, but its location can be rotated by hovering over the machine and pressing R . Notes An assembling machine 2 with two efficiency module needs less energy than one assembling machine 1 ."
  },
  {
    "type": "wiki",
    "name": "Assembling machine 3",
    "content": "Recipe | Time 0.5+Assembling_machine_22+Speed_module 4 → Assembling_machine_31 | Total raw | Time 302.5+Copper_plate 148+Iron_plate 130+Plastic_bar 40+Steel_plate 4 | Resistances Fire: 0/70% | Stack size 50 | Dimensions 3×3 | Energy consumption 375 kW (Electric_system) | Drain 12.5 kW (Electric_system) | Crafting speed Quality 1.25 Quality 1.625 Quality 2 Quality 2.375 Quality 3.125 Quality 1.25 Quality 1.625 Quality 2 Quality 2.375 Quality 3.125 | Mining time 0.2 | Pollution 2/m | Module slots 4 slots |"
  },
  {
    "type": "wiki",
    "name": "Assembling machine 3",
    "content": "| Mining time 0.2 | Pollution 2/m | Module slots 4 slots | Prototype type assembling-machine | Internal name assembling-machine-3 | Required technologies | Automation_3_(research)3 | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The assembling machine 3 is the third and final tier of assembly machines, having the fastest crafting speed of all three. Like the assembling machine 2 , it can use liquids in crafting. Trivia An assembling machine 3 with max energy"
  },
  {
    "type": "wiki",
    "name": "Assembling machine 3",
    "content": "in crafting. Trivia An assembling machine 3 with max energy reduction (80%) only needs as much energy as an assembling machine 1 . It is the only assembling machine capable of crafting faster than the player (crafting speed 1), without the use of modules or quality. In the base game, the assembler's maximum possible crafting speed is 11.25, using 12 beacons filled with speed module 3s . This uses 2.5MW on the assembler alone, and requires 8.3MW in total to run. In Space Age , using 12 legendary beacons"
  },
  {
    "type": "wiki",
    "name": "Assembling machine 3",
    "content": "in total to run. In Space Age , using 12 legendary beacons with legendary speed module 3s results in the machine having 78.6 crafting speed"
  },
  {
    "type": "wiki",
    "name": "Oil refinery",
    "content": "Recipe | Time 8+Electronic_circuit 10+Iron_gear_wheel 10+Pipe 10+Steel_plate 15+Stone_brick 10 → Oil_refinery 1 | Total raw | Time 30.5+Copper_plate 15+Iron_plate 40+Steel_plate 15+Stone_brick 10 | Stack size 10 | Dimensions 5×5 | Energy consumption 420 kW (Electric_system) | Drain 14 kW (Electric_system) | Crafting speed Quality 1 Quality 1.3 Quality 1.6 Quality 1.9 Quality 2.5 Quality 1 Quality 1.3 Quality 1.6 Quality 1.9 Quality 2.5 | Mining time 0.2 | Pollution 6/m | Module slots 3 slots | Prototype"
  },
  {
    "type": "wiki",
    "name": "Oil refinery",
    "content": "time 0.2 | Pollution 6/m | Module slots 3 slots | Prototype type assembling-machine | Internal name oil-refinery | Required technologies | Oil_processing_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The Oil Refinery processes crude oil or coal into 3 different fluids: heavy oil , light oil and petroleum gas . Oil products have many uses. Although they can be turned into solid fuel to fuel boilers and furnaces, they are usually used to create plastic"
  },
  {
    "type": "wiki",
    "name": "Oil refinery",
    "content": "boilers and furnaces, they are usually used to create plastic bars , which are used in advanced circuits , and sulfur , which is used in more advanced items. They are also used as ammunition for flamethrower turrets . Contents 1 Recipes 2 Troubleshooting 3 History 4 See also Recipes The refinery has three/four available recipes, out of which one must be set before it can begin processing. Process Input Output Required technology Basic oil processing 5 100 45 Oil processing (research) Advanced oil"
  },
  {
    "type": "wiki",
    "name": "Oil refinery",
    "content": "oil processing 5 100 45 Oil processing (research) Advanced oil processing 5 100 50 25 45 55 Advanced oil processing (research) Coal liquefaction 5 10 25 50 90 20 10 Coal liquefaction (research) Simple coal liquefaction 5 + 10 + 2 + 25 50 Calcite processing (research) Troubleshooting When the refinery is working, a flame comes out of the chimney. You need to choose the recipe, otherwise it won't work. It will stop working if any of the products are not properly drained from it (that is, 100.0 heavy oil at"
  },
  {
    "type": "wiki",
    "name": "Oil refinery",
    "content": "are not properly drained from it (that is, 100.0 heavy oil at output will prevent production of the 2 other fluids)."
  },
  {
    "type": "wiki",
    "name": "Chemical plant",
    "content": "Recipe | Time 5+Electronic_circuit 5+Iron_gear_wheel 5+Pipe 5+Steel_plate 5 → Chemical_plant 1 | Total raw | Time 16.25+Copper_plate 7.5+Iron_plate 20+Steel_plate 5 | Stack size 10 | Dimensions 3×3 | Energy consumption 210 kW (Electric_system) | Drain 7.0 kW (Electric_system) | Crafting speed Quality 1 Quality 1.3 Quality 1.6 Quality 1.9 Quality 2.5 Quality 1 Quality 1.3 Quality 1.6 Quality 1.9 Quality 2.5 | Mining time 0.1 | Pollution 4/m | Module slots 3 slots | Prototype type assembling-machine |"
  },
  {
    "type": "wiki",
    "name": "Chemical plant",
    "content": "| Module slots 3 slots | Prototype type assembling-machine | Internal name chemical-plant | Required technologies | Oil_processing_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The chemical plant is a building for processing fluids and solids, usually through chemical processes. Many recipes that either require or provide a fluid other than crude oil are produced here. The chemical plant has 2 inputs and 2 outputs in fixed positions (their positions"
  },
  {
    "type": "wiki",
    "name": "Chemical plant",
    "content": "has 2 inputs and 2 outputs in fixed positions (their positions can be flipped). Solid items can be both inserted and removed by inserters from any point (no need to target fluid input/output connections). When chemical plants are in the process of crafting an item, they will billow out smoke that matches the color of their input ingredients. Contents 1 Base Game Recipes 2 Space Age Recipes 3 Fluid inputs 4 History 5 See also Base Game Recipes The chemical plant has twelve available recipes in the base"
  },
  {
    "type": "wiki",
    "name": "Chemical plant",
    "content": "The chemical plant has twelve available recipes in the base game, one of which must be set before it can begin processing. Recipe Input Output Technology required Sulfuric acid 1 1 5 100 50 Sulfur processing (research) Heavy oil cracking 2 30 40 30 Advanced oil processing (research) Light oil cracking 2 30 30 20 Advanced oil processing (research) Solid fuel 2 10 1 Advanced oil processing (research) Solid fuel 2 20 1 Oil processing (research) Solid fuel 2 20 1 Advanced oil processing (research) Lubricant 1"
  },
  {
    "type": "wiki",
    "name": "Chemical plant",
    "content": "fuel 2 20 1 Advanced oil processing (research) Lubricant 1 10 10 Lubricant (research) Plastic bar 1 1 20 2 Plastics (research) Sulfur 1 30 30 2 Sulfur processing (research) Battery 4 1 1 20 1 Battery (research) Explosives 4 1 1 10 2 Explosives (research) Flamethrower ammo 6 5 100 1 Flamethrower (research) Space Age Recipes Space Age expansion exclusive feature. The Space Age Expansion adds 15 new recipes, some of which must be crafted on a specific planet. Several recipes are not exclusive to the chemical"
  },
  {
    "type": "wiki",
    "name": "Chemical plant",
    "content": "planet. Several recipes are not exclusive to the chemical plant and can be crafted with other buildings, usually the cryogenic plant . Recipe Input Output Technology Required Crafted on Also crafted in Ice melting 1 1 20 Space platform thruster (research) Thruster fuel 2 2 10 75 Space platform thruster (research) Thruster oxidizer 2 2 10 75 Space platform thruster (research) Advanced thruster fuel 10 2 1 100 1500 Advanced asteroid processing (research) Advanced thruster oxidizer 10 2 1 100 1500 Advanced"
  },
  {
    "type": "wiki",
    "name": "Chemical plant",
    "content": "(research) Advanced thruster oxidizer 10 2 1 100 1500 Advanced asteroid processing (research) Carbon 1 2 20 1 Tungsten carbide (research) Acid neutralisation 5 1 1000 10000 Calcite processing (research) Steam condensation 1 1000 90 Calcite processing (research) Holmium solution 10 1 2 10 100 Holmium processing (research) Coal synthesis 2 1 5 5 1 Rocket turret (research) Fish breeding 6 2 100 100 3 Fish breeding (research) Ammoniacal solution separation 1 50 5 50 Planet discovery Aquilo (research) Solid"
  },
  {
    "type": "wiki",
    "name": "Chemical plant",
    "content": "separation 1 50 5 50 Planet discovery Aquilo (research) Solid fuel from ammonia 1 50 20 1 Planet discovery Aquilo (research) Ammonia rocket fuel 10 3 50 500 1 Planet discovery Aquilo (research) Lithium 20 1 50 50 5 Lithium processing (research) Aquilo's recipes can be selected while on other planets, but because they require liquids that are exclusive to Aquilo and cannot be shipped off-planet, those recipes are effectively locked to the planet. Fluid inputs Unlike solid ingredients, which can be inserted"
  },
  {
    "type": "wiki",
    "name": "Chemical plant",
    "content": "Fluid inputs Unlike solid ingredients, which can be inserted anywhere, the fluid ingredients can only be added at the two fixed inputs. Furthermore, recipes which requires two fluid ingredients, will only accept each ingredient on a specific input. When the recipe that requires fluid ingredients is selected, the chemical plant will display icons on the inputs to show which ingredient goes to which input. These fluid inputs can be flipped with H or V . Colored smoke billowing from the plants."
  },
  {
    "type": "wiki",
    "name": "Centrifuge",
    "content": "Recipe | Time 4+Advanced_circuit 100+Concrete 100+Iron_gear_wheel 100+Steel_plate 50 → Centrifuge 1 | Total raw | Time 1 k+Concrete 100+Copper_plate 500+Iron_plate 400+Plastic_bar 200+Steel_plate 50 | Resistances Fire: 0/70% | Stack size 50 | Dimensions 3×3 | Energy consumption 350 kW (Electric_system) | Drain 11.6 kW (Electric_system) | Crafting speed Quality 1 Quality 1.3 Quality 1.6 Quality 1.9 Quality 2.5 Quality 1 Quality 1.3 Quality 1.6 Quality 1.9 Quality 2.5 | Mining time 0.1 | Pollution 4/m |"
  },
  {
    "type": "wiki",
    "name": "Centrifuge",
    "content": "1.6 Quality 1.9 Quality 2.5 | Mining time 0.1 | Pollution 4/m | Module slots 2 slots | Prototype type assembling-machine | Internal name centrifuge | Required technologies | Uranium_processing_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The Centrifuge processes uranium ore and splits it into uranium-235 and uranium-238 . Centrifuges can also be used to reprocess used nuclear fuel or enrich extra uranium-235 to get more out of the available uranium."
  },
  {
    "type": "wiki",
    "name": "Centrifuge",
    "content": "extra uranium-235 to get more out of the available uranium. Contents 1 Recipes 2 Gallery 3 History 4 See also Recipes Process Technology required Input Output Uranium processing Uranium processing 12 10 0.007 0.993 Kovarex enrichment process Kovarex enrichment process 60 40 5 41 2 Nuclear fuel Kovarex enrichment process 90 1 1 1 Nuclear fuel reprocessing Nuclear fuel reprocessing 60 5 3"
  },
  {
    "type": "wiki",
    "name": "Lab",
    "content": "Recipe | Time 2+Electronic_circuit 10+Iron_gear_wheel 10+Transport_belt 4 → Lab 1 | Total raw | Time 21.5+Copper_plate 15+Iron_plate 36 | Stack size 10 | Dimensions 3×3 | Energy consumption 60 kW (Electric_system) | Research speed Quality 1 Quality 1.3 Quality 1.6 Quality 1.9 Quality 2.5 Quality 1 Quality 1.3 Quality 1.6 Quality 1.9 Quality 2.5 | Mining time 0.2 | Module slots 2 slots | Prototype type lab | Internal name lab | Required technologies | Electronics_(research) | Boosting technologies |"
  },
  {
    "type": "wiki",
    "name": "Lab",
    "content": "technologies | Electronics_(research) | Boosting technologies | Lab_research_speed_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Science packs put into the front lab will be passed to labs behind it. Labs are buildings that perform research for technologies by consuming science packs . Use of a lab is required to progress in Factorio. When productivity modules are used in labs, the productivity bonus is directly calculated and applied each tick so the"
  },
  {
    "type": "wiki",
    "name": "Lab",
    "content": "bonus is directly calculated and applied each tick so the productivity bar is simply cosmetic. This means that it does not matter that the productivity bar resets when the research is changed, no productivity bonus is lost. [1] The player can only research one technology at a time, but can use multiple labs for faster results. The speed bonus of labs when lab research speed is researched and modules are present can be calculated using this formula: research_bonus × module_bonus = speed_bonus ; the"
  },
  {
    "type": "wiki",
    "name": "Lab",
    "content": "this formula: research_bonus × module_bonus = speed_bonus ; the percentage bonuses have to be converted to decimals (e.g. +140% = 2.4) before the formula is used. Inserters can insert and remove science packs from labs. This allows chaining multiple labs together with inserters, each inserter taking science packs, as needed, from one lab and placing it into the next. Contents 1 Production requirements 1.1 Equation simplification 2 History 3 See also Production requirements Calculating the number of science"
  },
  {
    "type": "wiki",
    "name": "Lab",
    "content": "also Production requirements Calculating the number of science packs needed per second is straightforward: E R S = ( 1 + B [ r ] 1 0 0 ) × ( 1 + M [ r ] 1 0 0 ) × B L S A C T = T [ r ] E R S P P S = N A C T Where: ERS is \"effective lab research speed\" B[r] is the speed bonus from the Lab research speed (research) , in percent M[r] is the sum of all module speed effects ( speed modules - positive; productivity modules - negative), in percent BLS is the base lab speed, which is adjusted by the quality of the"
  },
  {
    "type": "wiki",
    "name": "Lab",
    "content": "is the base lab speed, which is adjusted by the quality of the lab and/or using a biolab ACT is \"adjusted cycle time\" T[r] is the research cycle time as displayed in the research screen PPS is \"packs per second\" N is the number of labs available. Thus, with 10 base quality standard labs, researching Nuclear Power (30 second cycle time) with Lab Research Speed 4 (140% bonus) and no module effects, the calculation is: E R S = 1 + 1 4 0 1 0 0 = 2 . 4 A C T = 3 0 2 . 4 = 1 2 . 5 s P P S = 1 0 1 2 . 5 = 0 . 8"
  },
  {
    "type": "wiki",
    "name": "Lab",
    "content": "2 . 4 A C T = 3 0 2 . 4 = 1 2 . 5 s P P S = 1 0 1 2 . 5 = 0 . 8 This means 0.8 science packs per second, of each type, would need to be produced to continuously supply the labs. Equation simplification Assuming all labs have the same B[r] and BLS ), the above calculations can be combined into one equation: P P S = N T [ r ] × ( 1 + B [ r ] 1 0 0 ) × ( 1 + M [ r ] 1 0 0 ) × B L S Thus for the numerical example: P P S = 1 0 × ( 1 + 1 4 0 1 0 0 ) × 1 3 0 = 1 0 3 0 × ( 1 + 1 . 4 ) = 1 3 × 2 . 4 = 2 . 4 3 = 0 ."
  },
  {
    "type": "wiki",
    "name": "Lab",
    "content": "× 1 3 0 = 1 0 3 0 × ( 1 + 1 . 4 ) = 1 3 × 2 . 4 = 2 . 4 3 = 0 . 8 packs per second If trying to find the amount of labs needed to consume a given amount of packs per second, use the following rearrangement: N = [ ( 1 + B [ r ] 1 0 0 ) × ( 1 + M [ r ] 1 0 0 ) × B L S × 1 T [ r ] × P P S ] − 1"
  },
  {
    "type": "wiki",
    "name": "Beacon",
    "content": "Recipe | Time 15+Advanced_circuit 20+Copper_cable 10+Electronic_circuit 20+Steel_plate 10 → Beacon 1 | Total raw | Time 232.5+Copper_plate 135+Iron_plate 60+Plastic_bar 40+Steel_plate 10 | Stack size 20 | Efficiency Quality 1.5 Quality 1.7 Quality 1.9 Quality 2.1 Quality 2.5 Quality 1.5 Quality 1.7 Quality 1.9 Quality 2.1 Quality 2.5 | Dimensions 3×3 | Energy consumption Quality 480 kWQuality 400 kWQuality 320 kWQuality 240 kWQuality 80 kW(Electric_system) Quality 480 kW Quality 400 kW Quality 320 kW"
  },
  {
    "type": "wiki",
    "name": "Beacon",
    "content": "Quality 480 kW Quality 400 kW Quality 320 kW Quality 240 kW Quality 80 kW | Mining time 0.2 | Supply area 9 x 9 tiles | Module slots 2 slots | Prototype type beacon | Internal name beacon | Required technologies | Effect_transmission_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Overall effect stacks with multiple beacons covering the same machine. | A beacon is a device that transmits module effects to nearby non-burner machines, in a 9×9 square,"
  },
  {
    "type": "wiki",
    "name": "Beacon",
    "content": "module effects to nearby non-burner machines, in a 9×9 square, while also boosting the effects of said modules. A beacon allows transmitting the effect of a module to multiple machines, and multiple beacons can affect the same machine, albeit with diminishing returns. Additionally, beacons can provide boosts beyond the normal limits of internal module slots. The beacon emanates an electrical charge at a steady interval, the color changes depending on which modules are placed into the beacon, or if it"
  },
  {
    "type": "wiki",
    "name": "Beacon",
    "content": "depending on which modules are placed into the beacon, or if it contains none at all. Contents 1 Usage 2 Limitations 3 Transmission strength 4 Maximum number per building 5 Beacon arrays 5.1 Multi-row arrays 5.2 Optimal arrays 6 History 7 See also Usage Beacons are best in these scenarios: There are many compatible machines in a dense area This allows the beacon's effect to reach multiple machines, allowing the player to save materials from crafting modules. There is one machine that must have an extreme"
  },
  {
    "type": "wiki",
    "name": "Beacon",
    "content": "modules. There is one machine that must have an extreme speed of operation Mining drills present an example of this usefulness. When an ore patch is small but rich, more speed per drill is necessary to meet demand, since adding more drills isn't possible. So, multiple speed module beacons around a mining drill (with modules in the drill itself) can be used to increase the speed of the individual drill several times, to make up for the low quantity of drills. Beacons should not be used in these scenarios:"
  },
  {
    "type": "wiki",
    "name": "Beacon",
    "content": "of drills. Beacons should not be used in these scenarios: The machine(s) being boosted operate infrequently This leads to power waste as beacons will always consume power, even when the machines they're boosting are halted. This however can be circumvented with some planning, and using a power switch . Attempting to boost non-module-compatible machines Only machines that have module slots will be affected by a beacon. Limitations Only buildings with module slots can benefit from beacon effects (i.e. laser"
  },
  {
    "type": "wiki",
    "name": "Beacon",
    "content": "with module slots can benefit from beacon effects (i.e. laser turret doesn't benefit). The only exceptions to this rule are beacons themselves which don't benefit from the modules inserted in themselves (or other beacons), so their energy cost can't be reduced. Currently, only speed and efficiency modules can be used in beacons, and productivity and quality modules cannot. Multiple beacons overlapping the same machine will have diminishing returns, so it's more efficient to surround buildings around"
  },
  {
    "type": "wiki",
    "name": "Beacon",
    "content": "returns, so it's more efficient to surround buildings around beacons than surround beacons around buildings. Transmission strength The effect of modules placed in beacons is not equal to those placed in the machines themselves. Rather, it is multiplied by a factor called \"transmission strength\". This factor is applied to all stats affected by the module, both good and bad. The transmission strength itself depends on two factors. One is the distribution efficiency stat of the beacon; For normal beacons,"
  },
  {
    "type": "wiki",
    "name": "Beacon",
    "content": "distribution efficiency stat of the beacon; For normal beacons, this is always 1.5, but quality can increase it up to 2.5 for legendary beacons. The second factor is the reciprocal square root of the number of beacons affecting each machine. Therefore, in total, n normal quality beacons affecting the same machine will have a combined transmission strength of 1.5 x n^0.5 . In practical terms, this means that there are diminishing returns on increasing the number of beacons affecting the same machine, as the"
  },
  {
    "type": "wiki",
    "name": "Beacon",
    "content": "the number of beacons affecting the same machine, as the effect per beacon decreases when more are added. Maximum number per building The maximum number of beacons that can be built in range of a building depend on that building's footprint: Buildings from 2×2 to 4×4 size: 12 beacons , with an effect of 3.46 times that of a single beacon. Buildings from 5×5 to 7x7 size: 16 beacons , with an effect of 4 times that of a single beacon. Buildings from 8x8 to 10x10 size: 20 beacons , with an effect of 4.47"
  },
  {
    "type": "wiki",
    "name": "Beacon",
    "content": "from 8x8 to 10x10 size: 20 beacons , with an effect of 4.47 times that of a single beacon. It should be noted that, because the space between a beacon and a machine can not be greater than two tiles without putting the machine outside of the beacon's range, belt routing can become a challenge. In some situations, use of the logistic network may be required in order to supply the machines. The maximum number of beacons that can be built in range of a row of buildings: Row of 3×3 buidings: 8 beacons , with"
  },
  {
    "type": "wiki",
    "name": "Beacon",
    "content": "of a row of buildings: Row of 3×3 buidings: 8 beacons , with an effect of 2.83 times that of a single beacon. Row of 5×5 buidings: 10 beacons , with an effect of 3.16 times that of a single beacon. Note that when buildings and beacons are arranged in parallel rows like this, the offset between buildings and beacons along the direction of the rows is important. For example, imagine placing a row of assembling machine 3s between two rows of beacons. If the sides of the beacons and the assembling machines"
  },
  {
    "type": "wiki",
    "name": "Beacon",
    "content": "If the sides of the beacons and the assembling machines line up, every assembling machine is affected by six beacons in total. Howevever, if either the beacons or the assembling machines are shifted by one tile relative to the other, then each assembling machine is affected by eight beacons in total. In general, depending on the width of the machines modulo 3: If the width of the machines is divisible by three, then the arrangement is optimal when the sides of a machine do not align with the sides of a"
  },
  {
    "type": "wiki",
    "name": "Beacon",
    "content": "when the sides of a machine do not align with the sides of a beacon on the axis perpendicular to the direction of the rows. If the width of the machines modulo 3 is 1 (such as a width of 4), then any offset leads to an optimal layout. If the width of the machines modulo 3 is 2 (such as a width of 5), then the arrangement is optimal when the center of a machine aligns with the center of a beacon on the axis perpendicular to the direction of the rows. Note that this requires a one-tile gap between the"
  },
  {
    "type": "wiki",
    "name": "Beacon",
    "content": "of the rows. Note that this requires a one-tile gap between the machines. Beacon arrays Beacons can boost the overall capabilities of a factory quite significantly. However, they consume a considerable amount of power (480 kW apiece), take up nontrivial space, complicate logistics, and also are relatively expensive to craft. Therefore, when building an entire production line with a high beacon boost, it is significantly more economical to build a row of production buildings surrounded by row(s) of beacons,"
  },
  {
    "type": "wiki",
    "name": "Beacon",
    "content": "a row of production buildings surrounded by row(s) of beacons, rather than single buildings surrounded by the maximum number of beacons theoretically possible. This also simplifies logistics and makes the design more tiling-friendly. The maximum possible benefits are reduced somewhat in row-array configuration (for 3×3 buildings, 8 beacons per building are possible instead of 12; for 5×5 buildings, 10 instead of 16), but the number of beacons required to achieve this boost level is considerably lower. For"
  },
  {
    "type": "wiki",
    "name": "Beacon",
    "content": "required to achieve this boost level is considerably lower. For example, for a single row of 3×3 buildings surrounded by a double row of beacons so that each production building is in range of 8 beacons, the total number of beacons required is 2n + 6 , where n is the number of production buildings. The average number of beacons per building is then 2 + (6 ÷ n) , which tends toward 2 (i.e., a 75% reduction in the number of beacons needed compared to isolated buildings with 8 distinct beacons each) when n"
  },
  {
    "type": "wiki",
    "name": "Beacon",
    "content": "to isolated buildings with 8 distinct beacons each) when n goes to infinity. For e.g. n = 10 the formula evaluates to 2.6, which is still a reduction of 67.5% in beacons needed. Multi-row arrays For large numbers of buildings to be boosted, efficiency can be further improved by separating production buildings into multiple rows. In this case, the beacons in all but the edge rows of the array can be shared by the two rows of production buildings on either side. (Note that it does not matter if these are"
  },
  {
    "type": "wiki",
    "name": "Beacon",
    "content": "on either side. (Note that it does not matter if these are producing different recipes and / or are different buildings altogether.) The total number of beacons required, assuming 3×3 sized production buildings and rows of equal length, is B(r,c) = (r + 1)(c + 3) = rc + 3r + c + 3 , where r is the number of rows of production buildings and c is the number of production buildings in a single row. The number of beacons per boosted building is then (3 ÷ rc) + (1 ÷ r) + (3 ÷ c) + 1 , which tends to 1 as both r"
  },
  {
    "type": "wiki",
    "name": "Beacon",
    "content": "(3 ÷ rc) + (1 ÷ r) + (3 ÷ c) + 1 , which tends to 1 as both r and c go to infinity. For finite arrays, the optimum number of rows is given by r = -0.5 + sqrt[(n ÷ 3) + 0.25] , where n is the total number of buildings to be boosted. The formula above does not generally return integer results. If the r thus found is non-integer, iterate around it, i.e., calculate the number of beacons needed with floor(r) (the next lower integer) and ceiling(r) (the next higher integer) rows and compare the results. For each"
  },
  {
    "type": "wiki",
    "name": "Beacon",
    "content": "next higher integer) rows and compare the results. For each such integer r , calculate c as floor(n ÷ r) , then calculate the number of beacons as B(r,c) + mod(n,r) + 1, where B(r,c) is given above and mod(n,r) is n modulo r , i.e., the remainder of ( n ÷ r ), equal to n - ( r × c ). There will in either case be mod(n,r) buildings \"left over\"; these should be appended one per row to the ends of a contiguous block of neighboring rows for the total beacon count calculation above to be valid. Other"
  },
  {
    "type": "wiki",
    "name": "Beacon",
    "content": "for the total beacon count calculation above to be valid. Other configurations for the leftovers (e.g. all appended to the end of a single row, one each at the end of every second row, etc.) require a higher number of beacons to cover. Optimal arrays For 3×3 structures, arrays satisfying c = 3r are optimal, in the sense that they minimize the number of beacons required to cover the total number of structures ( rc ), therefore allowing the most use out of an individual beacon. Since structures may only be"
  },
  {
    "type": "wiki",
    "name": "Beacon",
    "content": "use out of an individual beacon. Since structures may only be built in integer amounts, there are, below a reasonable cutoff on total array size, only a finite number of integer structure counts rc with which an optimal array such that c = 3r and c and r are integer may be built. The first few counts, along with associated array sizes and beacons-to-structures ratios, are summarized in the table below. Structures Rows Columns Beacons Beacons per structure Dimensions (tiles)* 3 1 3 12 4.00 18×11 12 2 6 27"
  },
  {
    "type": "wiki",
    "name": "Beacon",
    "content": "per structure Dimensions (tiles)* 3 1 3 12 4.00 18×11 12 2 6 27 2.25 27×19 27 3 9 48 1.78 36×27 48 4 12 75 1.56 45×35 75 5 15 108 1.44 54×43 108 6 18 147 1.36 63×51 147 7 21 192 1.31 72×59 ... ... ... ... ... ... 3r^2 r 3r (r + 1) (3r + 3) 1 + 2/r + 1/r^2 (9r + 9) × (8r + 3) Notes to table: Array dimension in tiles (last table column) assumes 2 tiles' space (e.g. inserter + chest) is left either above or below each row of structures, while no extra space is left anywhere else. The 5-row array (75"
  },
  {
    "type": "wiki",
    "name": "Beacon",
    "content": "while no extra space is left anywhere else. The 5-row array (75 structures) is the largest that can be covered by a logistic network generated from roboports located outside its footprint. For larger arrays, at least a minimal number of roboports would need to be strategically placed in the interior to provide coverage, thereby worsening the beacons-to-structures proportion somewhat."
  },
  {
    "type": "wiki",
    "name": "Speed module",
    "content": "Recipe | Time 15+Advanced_circuit 5+Electronic_circuit 5 → Speed_module 1 | Total raw | Time 68.75+Copper_plate 32.5+Iron_plate 15+Plastic_bar 10 | Stack size 50 | Energy consumption +50% (Electric_system) | Speed Quality+20%Quality+26%Quality+32%Quality+38%Quality+50% Quality +20% Quality +26% Quality +32% Quality +38% Quality +50% | Space_AgeQuality -1% | Prototype type module | Internal name speed-module | Required technologies | Speed_module_(research) | Produced by | Assembling_machine_1"
  },
  {
    "type": "wiki",
    "name": "Speed module",
    "content": "| Speed_module_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Assembling_machine_3 Destroyer_capsuleSpeed_module_2 | Speed module increases a machine's speed by 20%, its energy consumption by 50%, and decreases its ability to produce quality products by 1%. This means that, at the cost of energy, the machine produces more items per minute. The machine will consume more energy per second, but will also work more quickly. Because energy"
  },
  {
    "type": "wiki",
    "name": "Speed module",
    "content": "per second, but will also work more quickly. Because energy costs are based on time rather than number of operations, some of the increased energy cost is offset by the reduced time per operation. A speed module 1 requires a significant power increase for very little (less than half the standard rate) throughput increase, the worst amongst its group. By contrast a speed module 3 will produce a much better proportion of throughput, for a similar power requirement downside compared to this tier 1 speed"
  },
  {
    "type": "wiki",
    "name": "Speed module",
    "content": "power requirement downside compared to this tier 1 speed module. The quality bonus of any machine can never fall below 0, meaning speed modules cannot reduce the quality of a machine's output. The quality penalty only counteracts the effect of quality modules. Speed modules also increase pollution, because it is directly proportional to the machine's power consumption, see pollution ."
  },
  {
    "type": "wiki",
    "name": "Speed module 2",
    "content": "Recipe | Time 30+Advanced_circuit 5+Processing_unit 5+Speed_module 4 → Speed_module_21 | Total raw | Time 352.5+Copper_plate 155+Iron_plate 70+Plastic_bar 50+Processing_unit 5 | Stack size 50 | Energy consumption +60% (Electric_system) | Speed Quality+30%Quality+39%Quality+48%Quality+57%Quality+75% Quality +30% Quality +39% Quality +48% Quality +57% Quality +75% | Space_AgeQuality -1.5% | Prototype type module | Internal name speed-module-2 | Required technologies | Speed_module_2_(research)2 | Produced by"
  },
  {
    "type": "wiki",
    "name": "Speed module 2",
    "content": "technologies | Speed_module_2_(research)2 | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Power_armor_MK 2 Speed_module_3 | Speed module 2 increases a machine's speed by 30%, its energy consumption by 60%, and decreases its ability to produce quality products by 1.5%. This means that, at the cost of energy, the machine produces more items per minute. The machine will consume more energy per second, but will also work more quickly. Because energy costs"
  },
  {
    "type": "wiki",
    "name": "Speed module 2",
    "content": "second, but will also work more quickly. Because energy costs are based on time rather than number of operations, some of the increased energy cost is offset by the reduced time per operation. Machine speed and energy consumption are increased by 10% compared to tier 1 modules. The quality bonus of any machine can never fall below 0, meaning speed modules cannot reduce the quality of a machine's output. The quality penalty only counteracts the effect of quality modules. Speed modules also increase"
  },
  {
    "type": "wiki",
    "name": "Speed module 2",
    "content": "the effect of quality modules. Speed modules also increase pollution, because it is directly proportional to the machine's power consumption, see pollution ."
  },
  {
    "type": "wiki",
    "name": "Speed module 3",
    "content": "Recipe | Time 60+Advanced_circuit 5+Processing_unit 5+Speed_module_24 → Speed_module_31 | Total raw | Time 1.5 k+Copper_plate 645+Iron_plate 290+Plastic_bar 210+Processing_unit 25 | Stack size 50 | Energy consumption +70% (Electric_system) | Speed Quality+50%Quality+65%Quality+80%Quality+95%Quality+125% Quality +50% Quality +65% Quality +80% Quality +95% Quality +125% | Space_AgeQuality -2.5% | Prototype type module | Internal name speed-module-3 | Required technologies | Speed_module_3_(research)3 |"
  },
  {
    "type": "wiki",
    "name": "Speed module 3",
    "content": "| Required technologies | Speed_module_3_(research)3 | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Speed module 3 increases a machine's speed by 50%, its energy consumption by 70%, and decreases its ability to produce quality products by 2.5%. This means that, at the cost of energy, the machine produces more items per minute. The machine will consume more energy per second, but will also work more quickly. Because energy costs are based on time rather than number"
  },
  {
    "type": "wiki",
    "name": "Speed module 3",
    "content": "Because energy costs are based on time rather than number of operations, some of the increased energy cost is offset by the reduced time per operation. Machine speed and energy consumption are increased by 30% compared to tier 1 modules and by 20% percent compared with tier 2 modules. The quality bonus of any machine can never fall below 0, meaning speed modules cannot reduce the quality of a machine's output. The quality penalty only counteracts the effect of quality modules. Speed modules also increase"
  },
  {
    "type": "wiki",
    "name": "Speed module 3",
    "content": "the effect of quality modules. Speed modules also increase pollution, because it is directly proportional to the machine's power consumption, see pollution . Achievement Crafting with speed Craft a speed module 3 ."
  },
  {
    "type": "wiki",
    "name": "Efficiency module",
    "content": "Recipe | Time 15+Advanced_circuit 5+Electronic_circuit 5 → Efficiency_module 1 | Total raw | Time 68.75+Copper_plate 32.5+Iron_plate 15+Plastic_bar 10 | Stack size 50 | Energy consumption Quality-30%Quality-39%Quality-48%Quality-57%Quality-75%(Electric_system) Quality -30% Quality -39% Quality -48% Quality -57% Quality -75% | Prototype type module | Internal name efficiency-module | Required technologies | Efficiency_module_(research) | Produced by | Assembling_machine_1 Assembling_machine_2"
  },
  {
    "type": "wiki",
    "name": "Efficiency module",
    "content": "| Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Efficiency_module_2 | Efficiency module reduces the electricity cost to run the machine by 30% of its base energy usage. Efficiency modules also reduce the nutrient consumption of the biochamber . Note that minimal energy usage is 20% of base energy usage, but using more than 80% worth of efficiency modules makes sense if other modules are used, as they increase power usage and that effect is additive"
  },
  {
    "type": "wiki",
    "name": "Efficiency module",
    "content": "used, as they increase power usage and that effect is additive with the decrease from efficiency modules. Efficiency modules also reduce pollution, because it is directly proportional to the machine's power consumption, see pollution ."
  },
  {
    "type": "wiki",
    "name": "Efficiency module 2",
    "content": "Recipe | Time 30+Advanced_circuit 5+Efficiency_module 4+Processing_unit 5 → Efficiency_module_21 | Total raw | Time 352.5+Copper_plate 155+Iron_plate 70+Plastic_bar 50+Processing_unit 5 | Stack size 50 | Energy consumption Quality-40%Quality-52%Quality-64%Quality-76%Quality-100%(Electric_system) Quality -40% Quality -52% Quality -64% Quality -76% Quality -100% | Prototype type module | Internal name efficiency-module-2 | Required technologies | Efficiency_module_2_(research)2 | Produced by |"
  },
  {
    "type": "wiki",
    "name": "Efficiency module 2",
    "content": "technologies | Efficiency_module_2_(research)2 | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Efficiency_module_3 Power_armor_MK 2 | Efficiency module 2 reduces the electricity cost to run the machine by 40% of its base energy usage. Efficiency modules also reduce the nutrient consumption of the biochamber . Note that minimal energy usage is 20% of base energy usage, but using more than 80% worth of efficiency modules makes sense if other modules are"
  },
  {
    "type": "wiki",
    "name": "Efficiency module 2",
    "content": "worth of efficiency modules makes sense if other modules are used, as they increase power usage and that effect is additive with the decrease from efficiency modules. Efficiency modules also reduce pollution, because it is directly proportional to the machine's power consumption, see pollution ."
  },
  {
    "type": "wiki",
    "name": "Efficiency module 3",
    "content": "Recipe | Time 60+Advanced_circuit 5+Efficiency_module_24+Processing_unit 5 → Efficiency_module_31 | Total raw | Time 1.5 k+Copper_plate 645+Iron_plate 290+Plastic_bar 210+Processing_unit 25 | Stack size 50 | Energy consumption Quality-50%Quality-65%Quality-80%Quality-95%Quality-125%(Electric_system) Quality -50% Quality -65% Quality -80% Quality -95% Quality -125% | Prototype type module | Internal name efficiency-module-3 | Required technologies | Efficiency_module_3_(research)3 | Produced by |"
  },
  {
    "type": "wiki",
    "name": "Efficiency module 3",
    "content": "technologies | Efficiency_module_3_(research)3 | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Spidertron | Efficiency module 3 reduces the electricity cost to run the machine by 50% of its base energy usage. Efficiency modules also reduce the nutrient consumption of the biochamber . Note that minimal energy usage is 20% of base energy usage, but using more than 80% worth of efficiency modules makes sense if other modules are used, as they increase"
  },
  {
    "type": "wiki",
    "name": "Efficiency module 3",
    "content": "modules makes sense if other modules are used, as they increase power usage and that effect is additive with the decrease from efficiency modules. Efficiency modules also reduce pollution, because it is directly proportional to the machine's power consumption, see pollution . Achievement Crafting with efficiency Craft an efficiency module 3 ."
  },
  {
    "type": "wiki",
    "name": "Productivity module",
    "content": "Recipe | Time 15+Advanced_circuit 5+Electronic_circuit 5 → Productivity_module 1 | Total raw | Time 68.75+Copper_plate 32.5+Iron_plate 15+Plastic_bar 10 | Stack size 50 | Energy consumption +40% (Electric_system) | Speed −5% | Productivity Quality+4%Quality+5%Quality+6%Quality+7%Quality+10% Quality +4% Quality +5% Quality +6% Quality +7% Quality +10% | Pollution +5% | Prototype type module | Internal name productivity-module | Required technologies | Productivity_module_(research) | Produced by |"
  },
  {
    "type": "wiki",
    "name": "Productivity module",
    "content": "technologies | Productivity_module_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Production_science_packProductivity_module_2 | Productivity modules applies a productivity bonus to items produced in a machine, allowing the machine to produce more items for the same inputs. It adds 4% productivity to the affected machine. Productivity modules can generally only be used to make intermediate products . These are items that are used in other"
  },
  {
    "type": "wiki",
    "name": "Productivity module",
    "content": "intermediate products . These are items that are used in other recipes and cannot directly be placed. For more information, see Module#Productivity_module . There are quite a few exceptions to this general rule. The second purple bar."
  },
  {
    "type": "wiki",
    "name": "Productivity module 2",
    "content": "Recipe | Time 30+Advanced_circuit 5+Processing_unit 5+Productivity_module 4 → Productivity_module_21 | Total raw | Time 352.5+Copper_plate 155+Iron_plate 70+Plastic_bar 50+Processing_unit 5 | Stack size 50 | Energy consumption +60% (Electric_system) | Speed −10% | Productivity Quality+6%Quality+7%Quality+9%Quality+11%Quality+15% Quality +6% Quality +7% Quality +9% Quality +11% Quality +15% | Pollution +7% | Prototype type module | Internal name productivity-module-2 | Required technologies |"
  },
  {
    "type": "wiki",
    "name": "Productivity module 2",
    "content": "| Internal name productivity-module-2 | Required technologies | Productivity_module_2_(research)2 | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Productivity_module_3 | Productivity module 2 applies a productivity bonus to items produced in a machine, allowing the machine to produce more items for the same inputs. It adds 6% productivity to the affected machine. Productivity modules can generally only be used to make intermediate products . These are"
  },
  {
    "type": "wiki",
    "name": "Productivity module 2",
    "content": "only be used to make intermediate products . These are items that are used in other recipes and cannot directly be placed. For more information, see Module#Productivity_module . There are quite a few exceptions to this general rule. The second purple bar."
  },
  {
    "type": "wiki",
    "name": "Productivity module 3",
    "content": "Recipe | Time 60+Advanced_circuit 5+Processing_unit 5+Productivity_module_24 → Productivity_module_31 | Total raw | Time 1.5 k+Copper_plate 645+Iron_plate 290+Plastic_bar 210+Processing_unit 25 | Stack size 50 | Energy consumption +80% (Electric_system) | Speed −15% | Productivity Quality+10%Quality+13%Quality+16%Quality+19%Quality+25% Quality +10% Quality +13% Quality +16% Quality +19% Quality +25% | Pollution +10% | Prototype type module | Internal name productivity-module-3 | Required technologies |"
  },
  {
    "type": "wiki",
    "name": "Productivity module 3",
    "content": "| Internal name productivity-module-3 | Required technologies | Productivity_module_3_(research)3 | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Productivity module 3 applies a productivity bonus to items produced in a machine, allowing the machine to produce more items for the same inputs. It adds 10% productivity to the affected machine. Productivity modules can generally only be used to make intermediate products . These are items that are used in other recipes"
  },
  {
    "type": "wiki",
    "name": "Productivity module 3",
    "content": "products . These are items that are used in other recipes and cannot directly be placed. For more information, see Module#Productivity_module . There are quite a few exceptions to this general rule. The second purple bar. Achievement Crafting with productivity Craft a productivity module 3 ."
  },
  {
    "type": "wiki",
    "name": "Water",
    "content": "Prototype type fluid | Internal name water | Produced by | Offshore_pump | Consumed by | ConcreteRefined_concreteHeavy_oil_crackingLight_oil_crackingSulfuric_acidSulfurExplosivesAdvanced_oil_processingFill_water_barrel | Water is a liquid which can be infinitely extracted from water tiles using an offshore pump . In Space Age , water can also be produced by a chemical plant by condensing steam or melting ice . After being pumped or produced it is distributed via pipes . Water can be used to generate"
  },
  {
    "type": "wiki",
    "name": "Water",
    "content": "it is distributed via pipes . Water can be used to generate electricity by converting it to steam via boilers or heat exchangers . The specific heat capacity of water is 2kJ / Δ°C / unit . However, one unit of water converts to ten units of steam, which has a heat capacity of 200J / Δ°C / unit . That is, it takes 200 joules to heat one unit of steam by one degree Celsius. Water is also used as an ingredient in various recipes. Surface water acts as an obstacle that cannot normally be traveled over. A"
  },
  {
    "type": "wiki",
    "name": "Water",
    "content": "acts as an obstacle that cannot normally be traveled over. A spidertron can reach across water if another bit of land is sufficiently close, and wearing mech armor allows the player to fly over water. Raw fish are spawned in water tiles during world generation only, and do not reproduce naturally. Water tiles can be removed completely by placing landfill over them. Pollution will turn nearby water green, which is a visual-only effect (the effect can be turned off by disabling animated water in the graphics"
  },
  {
    "type": "wiki",
    "name": "Water",
    "content": "can be turned off by disabling animated water in the graphics settings). The color changes relative to the current amount of pollution around it, so decreasing pollution purifies the water. Contents 1 Shallow water 2 Alternative recipes 3 Gallery 4 History 5 See also Shallow water Shallow water can appear alongside (or in place of) normal water. Shallow water can be walked on, but buildings can't be built in it directly. Shallow water can still have landfill placed upon it. Shallow water will reduce the"
  },
  {
    "type": "wiki",
    "name": "Water",
    "content": "have landfill placed upon it. Shallow water will reduce the speed of the player as well as wheeled vehicles . The speed reduction does not affect enemies or the spidertron . Offshore pumps can be used where shallow water meets land (including landfill). Shallow water appears as one of two shades of blue lighter than that of standard water, with the mildly lighter blue and moderately lighter blue reducing the player's walking speed by 30% or 20% respectively. In the base game, shallow water is not generated"
  },
  {
    "type": "wiki",
    "name": "Water",
    "content": "respectively. In the base game, shallow water is not generated by the default map generator , so it can only be found in the tutorial . In Space Age , Gleba is the only planet with naturally generated shallow water, and it is found there in abundance. Alternative recipes Space Age expansion exclusive feature. Process Input Output Made in Required technology Ice melting 1 + 1 20 Space platform thruster (research) Steam condensation 1 + 1000 90 Calcite processing (research)"
  },
  {
    "type": "wiki",
    "name": "Steam",
    "content": "Prototype type fluid | Internal name steam | Produced by | BoilerHeat_exchanger | Consumed by | Coal_liquefaction | Steam is a gas created by heating water in a boiler or heat exchanger , or through acid neutralisation . After being distributed via pipes , steam can be used to generate electricity via steam engines and steam turbines . Steam is also used in coal liquefaction in oil refineries . Since steam is a fluid, it can be stored in a storage tank . Contents 1 Power generation 2 Trivia 3 History 4 See"
  },
  {
    "type": "wiki",
    "name": "Steam",
    "content": "tank . Contents 1 Power generation 2 Trivia 3 History 4 See also Power generation The amount of energy contained in steam is linearly proportional to its temperature (minus 15°C ambient temperature). The energy storage of steam is exactly 200 joule / unit / degree Celsius , so every degree increase in temperature of a single unit of fluid requires exactly 200 joules. In all cases, steam produced in boilers is 165°C and steam from heat exchangers or acid neutralisation is 500°C. Higher temperature steam"
  },
  {
    "type": "wiki",
    "name": "Steam",
    "content": "or acid neutralisation is 500°C. Higher temperature steam equates to a higher energy density of the same number of units of steam. Steam suffers no thermal losses sitting or flowing through pipes or storage tanks ; the energy put into water to create steam is the same amount of energy you get back out from it since both steam engines and turbines are 100% efficient. For example, a storage tank that holds 25000 units of Steam at 165°C contains: (200 J / unit / °C) * 25000 units * (165°C − 15°C) = 750 000"
  },
  {
    "type": "wiki",
    "name": "Steam",
    "content": "(200 J / unit / °C) * 25000 units * (165°C − 15°C) = 750 000 000 joules = 750 MJ A storage tank holding 25000 units of Steam at 500°C thus contains 2.425 giga joules of energy, a surprisingly large amount equal to 485 fully charged accumulators ! (200 J / unit / °C) * 25000 units * (500°C − 15°C) = 2 425 000 000 joules = 2.425 GJ If the temperature of the steam is lower than the steam engine or steam turbine can handle, then the power output will be lower than optimal, but no energy will be wasted."
  },
  {
    "type": "wiki",
    "name": "Steam",
    "content": "will be lower than optimal, but no energy will be wasted. However, if the temperature of the steam exceeds the maximum temperature of the steam engine or turbine, then the power output is capped at maximum, and the extra energy in the steam is wasted. Other than this difference, either steam engines or turbines can be used to generate power off of steam from any source. Trivia The fill meter on steam storage tanks fills from the top instead of from the bottom. Steam is the only pre- Space Age fluid that"
  },
  {
    "type": "wiki",
    "name": "Steam",
    "content": "of from the bottom. Steam is the only pre- Space Age fluid that cannot be stored in barrels . Assuming perfect efficiency of boilers and heat exchangers, the thermal energy content of steam implies that one unit represents 47.9g of water, meaning a full tank contains 1195 kg of steam. Because burner devices are not permitted on space platforms , and acid neutralization is Vulcanus -exclusive, the only way to get steam on platforms (either for power or liquefaction) is with heat exchangers powered by"
  },
  {
    "type": "wiki",
    "name": "Steam",
    "content": "for power or liquefaction) is with heat exchangers powered by nuclear reactors 500°C steam in a pipe will still freeze on Aquilo ."
  },
  {
    "type": "wiki",
    "name": "Crude oil",
    "content": "Used as ammunition by | Flamethrower_turret | Mining time 1 | Prototype type fluid | Internal name crude-oil | Required technologies | Oil_processing_(research) | Produced by | Pumpjack | Consumed by | Basic_oil_processingAdvanced_oil_processingFill_crude_oil_barrelFlamethrower_ammo | Main article: Oil processing Crude oil is a liquid extracted by pumpjacks from oil fields and can be converted to petroleum gas , light oil , and heavy oil by an oil refinery . It can be transported either in pipes , barrels"
  },
  {
    "type": "wiki",
    "name": "Crude oil",
    "content": "oil refinery . It can be transported either in pipes , barrels or fluid wagons . Crude oil is also found on Aquilo . It can also be used as ammo in flamethrower turrets . Oil fields Oil fields can be used indefinitely, but the amount they yield will reduce over time. Each oil field has a yield displayed as x%. Each percent is equal to 300 pumpjack cycles. Without speed modules one pumpjack cycle takes one second to complete. An oil field with 80% has between 24000 and 24299 cycles left, as yield does not"
  },
  {
    "type": "wiki",
    "name": "Crude oil",
    "content": "80% has between 24000 and 24299 cycles left, as yield does not display decimal places. While cycles left is greater than 6000 (20% yield) and greater than 20% of the initially available cycles, each pumpjack cycle reduces the number of cycles left by one. So unless an oil field with less than 20% yield is created by map editor, yield will never drop below 6000 cycles. The amount of oil a pumpjack extracts per cycle is yield multiplied by 10 (e.g. 115% yield = 1.15, multiplied by 10 = 11.5), and cannot be"
  },
  {
    "type": "wiki",
    "name": "Crude oil",
    "content": "115% yield = 1.15, multiplied by 10 = 11.5), and cannot be higher than 1000."
  },
  {
    "type": "wiki",
    "name": "Heavy oil",
    "content": "Used as ammunition by | Flamethrower_turret | Prototype type fluid | Internal name heavy-oil | Required technologies | Oil_processing_(research) | Produced by | Oil_refinery | Consumed by | Coal_liquefactionHeavy_oil_cracking_to_light_oilLubricantSolid_fuel_from_heavy_oilFill_heavy_oil_barrel | Heavy oil is a liquid produced by refining crude oil in an oil refinery or extracted on Fulgora using an offshore pump . It can be processed into light oil , solid fuel and lubricant . It is more efficient to process"
  },
  {
    "type": "wiki",
    "name": "Heavy oil",
    "content": ", solid fuel and lubricant . It is more efficient to process heavy oil into light oil before creating solid fuel from it. It can also be used as ammo in flamethrower turrets . Heavy oil can be obtained on Vulcanus using simple coal liquefaction . This can be upgraded to coal liquefaction once some initial heavy oil has been obtained. Building Process Results Oil refinery Advanced oil processing 5 + 100 + 50 → 25 + ( 45 + 55 ) Oil refinery Coal liquefaction 5 + 10 + 25 + 50 → 90 + ( 20 + 10 ) Oil refinery"
  },
  {
    "type": "wiki",
    "name": "Heavy oil",
    "content": "liquefaction 5 + 10 + 25 + 50 → 90 + ( 20 + 10 ) Oil refinery Simple coal liquefaction 5 + 10 + 2 + 25 → 50"
  },
  {
    "type": "wiki",
    "name": "Light oil",
    "content": "Used as ammunition by | Flamethrower_turret | Prototype type fluid | Internal name light-oil | Required technologies | Oil_processing_(research) | Produced by | Oil_refineryChemical_plant | Consumed by | Light_oil_crackingRocket_fuelSolid_fuel_from_light_oilFill_light_oil_barrel | Light oil is a liquid converted from crude oil (in a oil refinery ) or heavy oil (in a chemical plant ). Light oil can be converted to petroleum gas , or used to create solid fuel and rocket fuel . It can also be used as ammo in"
  },
  {
    "type": "wiki",
    "name": "Light oil",
    "content": "solid fuel and rocket fuel . It can also be used as ammo in flamethrower turrets . Process Input Output Made in Advanced oil processing 5 + 100 + 50 45 + ( 25 + 55 ) Heavy oil cracking 2 + 40 + 30 30 + Coal liquefaction 5 + 10 + 25 + 50 20 + ( 90 + 10 )"
  },
  {
    "type": "wiki",
    "name": "Lubricant",
    "content": "Recipe | Time 1+Heavy_oil 10 → Lubricant 10 | Total raw | Time 1+Heavy_oil 10 | Prototype type fluid | Internal name lubricant | Required technologies | Lubricant_(research) | Produced by | Chemical_plant | Consumed by | Express_transport_beltExpress_underground_beltExpress_splitterElectric_engine_unitFill_lubricant_barrel | Lubricant is a fluid converted from heavy oil in a chemical plant . Like other fluids, it may be barreled . It is used in the production of express transport belts (blue belts) and"
  },
  {
    "type": "wiki",
    "name": "Lubricant",
    "content": "in the production of express transport belts (blue belts) and their counterpart underground belts and splitters . It is also used to create electric engine units . Alternative recipes Space Age expansion exclusive feature. Process Input Output Made in Required technology Biolubricant 3 + 60 20 Bioflux processing (research)"
  },
  {
    "type": "wiki",
    "name": "Petroleum gas",
    "content": "Prototype type fluid | Internal name petroleum-gas | Required technologies | Oil_processing_(research) | Produced by | Oil_refineryChemical_plant | Consumed by | SulfurPlastic_barSolid_fuel_from_petroleum_gasFill_petroleum_gas_barrel | Petroleum gas is a fluid created in an oil refinery from crude oil or coal , or in a chemical plant or Biochamber from light oil . Petroleum gas is used to create plastic bars and sulfur , important ingredients for mid-to-high-level recipes. Petroleum gas can also be used to"
  },
  {
    "type": "wiki",
    "name": "Petroleum gas",
    "content": "mid-to-high-level recipes. Petroleum gas can also be used to create solid fuel , but the ratio of fuel created is not as efficient as that of light oil, and petroleum gas is usually too valuable to waste. Process Input Output Made in Basic oil processing 5 + 100 45 Advanced oil processing 5 + 100 + 50 55 + ( 25 + 45 ) Light oil cracking 2 + 30 + 30 20 Coal liquefaction 5 + 10 + 25 + 50 10 + ( 90 + 20 ) Trivia The icon used for petroleum gas is the chemical Ethylene ."
  },
  {
    "type": "wiki",
    "name": "Sulfuric acid",
    "content": "Recipe | Time 1+Iron_plate 1+Sulfur 5+Water 100 → Sulfuric_acid 50 | Total raw | Time 1+Iron_plate 1+Sulfur 5+Water 100 | Prototype type fluid | Internal name sulfuric-acid | Required technologies | Sulfur_processing_(research) | Produced by | Chemical_plant | Consumed by | Processing_unitBatteryUranium_oreFill_sulfuric_acid_barrel | Sulfuric acid is a liquid that is used to create batteries and processing units . It must also be piped into electric mining drills to mine uranium ore . It is produced in a"
  },
  {
    "type": "wiki",
    "name": "Sulfuric acid",
    "content": "mining drills to mine uranium ore . It is produced in a chemical plant from sulfur , water , and iron plates . In Space Age , on the planet Vulcanus , sulfuric acid can also be pumped out of a sulfuric acid geyser with a pumpjack , and is additionally used for simple coal liquefaction and carbon processing. Optimal ratios The optimal ratio for sulfuric acid production is two chemical plants producing sulfuric acid for every five chemical plants producing sulfur. Two chemical plants producing sulfuric acid"
  },
  {
    "type": "wiki",
    "name": "Sulfuric acid",
    "content": "producing sulfur. Two chemical plants producing sulfuric acid can supply 20 chemical plants producing batteries, or 150 assembling machine 3s producing processing units."
  },
  {
    "type": "wiki",
    "name": "Wood",
    "content": "Stack size 100 | Mining time 0.5(dead tree)0.55(tree) | Fuel value 2 MJ (Fuel) | Vehicle acceleration 100% | Prototype type item | Internal name wood | Consumed by | Combat_shotgunShotgunSmall_electric_poleWooden_chest | Used as fuel by | Burner_inserterBurner_mining_drillBoilerStone_furnaceSteel_furnaceLocomotiveCarTankHeating_tower | Wood is a basic resource that can be collected by harvesting trees , water cane , boompuff , cuttlepop and stingfrond . Wood can be used in crafting recipes but can also be"
  },
  {
    "type": "wiki",
    "name": "Wood",
    "content": ". Wood can be used in crafting recipes but can also be used as fuel in all burner devices as well as in cars , tanks and locomotives . The player starts with 1 wood when starting a freeplay game. Dead trees will give 2 wood. Big trees will give 4 wood. Trivia In the base game, wood is the only crafting material that cannot be harvested or produced using automation. Using the starter wood, it is possible to win the game without enabling trees"
  },
  {
    "type": "wiki",
    "name": "Coal",
    "content": "Stack size 50 | Mining time 1 | Fuel value 4 MJ (Fuel) | Vehicle acceleration 100% | Prototype type resource | Internal name coal | Produced by | CraftingBurner_mining_drillElectric_mining_drill | Consumed by | Coal_liquefactionPlastic_barExplosivesGrenadePoison_capsuleSlowdown_capsule | Used as fuel by | Burner_inserterBurner_mining_drillBoilerStone_furnaceSteel_furnaceLocomotiveCarTankHeating_tower | Coal is a resource found on Nauvis and Vulcanus . It can also be found inside huge rocks on Nauvis. It is"
  },
  {
    "type": "wiki",
    "name": "Coal",
    "content": ". It can also be found inside huge rocks on Nauvis. It is used as fuel in burner devices . It is also a component in several weapons (such as grenades ) and plastic bars . Coal can be manufactured from native resources on Gleba and space platforms via coal synthesis . Coal cannot be obtained on Fulgora or Aquilo and must be imported from other planets. Alternative recipes Space Age expansion exclusive feature. Process Input Output Made in Required technology Coal Synthesis 2 + 1 + 5 + 10 1 Rocket turret"
  },
  {
    "type": "wiki",
    "name": "Coal",
    "content": "technology Coal Synthesis 2 + 1 + 5 + 10 1 Rocket turret (research) This recipe is needed for making explosives on Gleba and space platforms , where coal cannot be directly acquired. Note that even with the highest quality productivity module 3s possible, converting coal into carbon and back results in a net decrease in carbon or coal (besides consuming sulfur and sulfuric acid)."
  },
  {
    "type": "wiki",
    "name": "Stone",
    "content": "Stack size 50 | Mining time 1 | Prototype type resource | Internal name stone | Produced by | CraftingBurner_mining_drillElectric_mining_drill | Consumed by | LandfillRailStone_brickStone_furnace | Stone is a resource found on the map on Nauvis and Gleba , recycled from scrap on Fulgora , and produced from lava as a byproduct of metal production on Vulcanus . It is used for crafting stone furnaces , rails , landfill , and can be smelted into stone bricks in a furnace . In addition to stone resource patches,"
  },
  {
    "type": "wiki",
    "name": "Stone",
    "content": "bricks in a furnace . In addition to stone resource patches, stone can be mined from rocks on Nauvis and Vulcanus . On Gleba , stone can also be collected from stromatolites and slipstacks . On Fulgora , fulgorites and the various Fulgoran ruins yield stone when mined. There are no sources of stone on space platforms or Aquilo ; it or products made from it must be imported. Alternative recipes Space Age expansion exclusive feature. Process Input Output Made in Required technology Molten iron from lava 16 +"
  },
  {
    "type": "wiki",
    "name": "Stone",
    "content": "Output Made in Required technology Molten iron from lava 16 + 500 + 1 250 + 10 Foundry (research) Molten copper from lava 16 + 500 + 1 250 + 15 Foundry (research) Scrap recycling 1 + 1 0.03 + 0.04 + 0.06 + 0.03 + 0.01 + 0.05 + 0.2 + 0.01 + 0.02 + 0.07 + 0.04 + 0.04 Recycling (research)"
  },
  {
    "type": "wiki",
    "name": "Iron ore",
    "content": "Stack size 50 | Mining time 1 | Prototype type resource | Internal name iron-ore | Produced by | CraftingBurner_mining_drillElectric_mining_drill | Consumed by | ConcreteIron_plate | Iron ore is a resource found on the map. It can be smelted into iron plates in a furnace , and is also a component in concrete . Alternative gathering In the Space Age expansion, each surface has its own way of obtaining iron ore. On Nauvis , it appears in patches that can be mined with drills, as in the base game. On space"
  },
  {
    "type": "wiki",
    "name": "Iron ore",
    "content": "that can be mined with drills, as in the base game. On space platforms , metallic asteroid chunks gathered with asteroid collectors can be processed into iron ore in crushers . On Gleba , iron ore can be obtained by allowing iron bacteria to spoil , which can be obtained sustainably in biochambers first from jelly and then by cultivating them with bioflux . On Vulcanus , iron ore can be found in rocks on the planet's surface. Most iron products, including concrete, are produced in foundries from molten"
  },
  {
    "type": "wiki",
    "name": "Iron ore",
    "content": "including concrete, are produced in foundries from molten iron extracted from inexhaustible lava with calcite . On Fulgora , it can be obtained by recycling concrete , itself obtained from recycling scrap . It has little use as iron plate, steel plates and concrete can also all be recycled from scrap. Iron ore is not available on Aquilo ; iron and iron products must be imported. Intermediate products Fluids Water Steam Crude oil Heavy oil Light oil Lubricant Petroleum gas Sulfuric acid Thruster fuel ( )"
  },
  {
    "type": "wiki",
    "name": "Iron ore",
    "content": "oil Lubricant Petroleum gas Sulfuric acid Thruster fuel ( ) Thruster oxidizer ( ) Lava ( ) Molten iron ( ) Molten copper ( ) Holmium solution ( ) Electrolyte ( ) Ammoniacal solution ( ) Ammonia ( ) Fluorine ( ) Fluoroketone (hot) ( ) Fluoroketone (cold) ( ) Lithium brine ( ) Plasma ( ) Resources Wood Coal Stone Iron ore Copper ore Uranium ore Raw fish Ice ( ) Materials Iron plate Copper plate Steel plate Solid fuel Plastic bar Sulfur Battery Explosives Carbon ( ) Coal synthesis ( ) Crafting components Iron"
  },
  {
    "type": "wiki",
    "name": "Iron ore",
    "content": "Carbon ( ) Coal synthesis ( ) Crafting components Iron gear wheel Iron stick Copper cable Barrel Electronic circuit Advanced circuit Processing unit Engine unit Electric engine unit Flying robot frame Low density structure Rocket fuel Rocket part Uranium processing Uranium-235 Uranium-238 Uranium fuel cell Depleted uranium fuel cell Nuclear fuel Uranium processing Nuclear fuel reprocessing Kovarex enrichment process Vulcanus Calcite Tungsten ore Tungsten carbide Tungsten plate Fulgora Scrap Holmium ore"
  },
  {
    "type": "wiki",
    "name": "Iron ore",
    "content": "ore Tungsten carbide Tungsten plate Fulgora Scrap Holmium ore Holmium plate Superconductor Supercapacitor Gleba Yumako seed Jellynut seed Tree seed Yumako Jellynut Iron bacteria Copper bacteria Spoilage Nutrients Bioflux Yumako mash Jelly Carbon fiber Biter egg Pentapod egg Aquilo Lithium Lithium plate Quantum processor Fusion power cell Science packs Automation science pack Logistic science pack Military science pack Chemical science pack Production science pack Utility science pack Space science pack"
  },
  {
    "type": "wiki",
    "name": "Iron ore",
    "content": "Production science pack Utility science pack Space science pack Metallurgic science pack ( ) Electromagnetic science pack ( ) Agricultural science pack ( ) Cryogenic science pack ( ) Promethium science pack ( ) Navigation Logistics Production Space ( ) Combat Technology Environment"
  },
  {
    "type": "wiki",
    "name": "Copper ore",
    "content": "Stack size 50 | Mining time 1 | Prototype type resource | Internal name copper-ore | Produced by | CraftingBurner_mining_drillElectric_mining_drill | Consumed by | Copper_plate | Copper ore is a basic resource found in resource patches throughout the world. It can be smelted into copper plates in a furnace . Copper ore is the main source of copper plates, which are one of the two principal raw materials (along with iron plates , made from iron ore ) for crafting the vast majority of items in the game. In"
  },
  {
    "type": "wiki",
    "name": "Copper ore",
    "content": "ore ) for crafting the vast majority of items in the game. In the early game, copper is needed in smaller quantities than iron, with some early-game products not requiring it at all. Demand for copper increases considerably in the mid- and late-game, where it (mostly in the form of copper cables ) is required mainly for the assembly of electronic circuits and the myriad products those are required in, and for low density structures . The size, density, and richness of copper patches can, as for all other"
  },
  {
    "type": "wiki",
    "name": "Copper ore",
    "content": "density, and richness of copper patches can, as for all other resources, be adjusted upon map generation at the start of a new game. Like all resource patches, copper patches increase in richness with increasing distance from the starting area. Volcanic rock from Vulcanus provides starting copper before crafting foundries which can directly produce copper plates. Alternative gathering In the Space Age expansion, each surface has its own way of obtaining copper ore. On Nauvis , it appears in patches that"
  },
  {
    "type": "wiki",
    "name": "Copper ore",
    "content": "of obtaining copper ore. On Nauvis , it appears in patches that can be mined with drills, as in the base game. On space platforms , metallic asteroid chunks gathered with asteroid collectors can be processed into copper ore in crushers with the advanced metallic asteroid crushing recipe. On Gleba , copper ore can be obtained by allowing copper bacteria to spoil , which can be obtained sustainably in biochambers first from yumako mash and then by cultivating them with bioflux . On Vulcanus , copper ore can"
  },
  {
    "type": "wiki",
    "name": "Copper ore",
    "content": "by cultivating them with bioflux . On Vulcanus , copper ore can be found in rocks on the planet's surface. Most copper products, including low density structures, are produced in foundries from molten copper extracted from inexhaustible lava with calcite . Copper ore is not available on Fulgora , but copper plates can be obtained by recycling low density structure , copper cable and batteries , each of which can be obtained from recycling scrap . Demand is low since the highest volume items that require"
  },
  {
    "type": "wiki",
    "name": "Copper ore",
    "content": ". Demand is low since the highest volume items that require copper (low density structures, cables and circuits) can be obtained from scrap. Copper ore is not available on Aquilo ; copper and copper products must be imported. Intermediate products Fluids Water Steam Crude oil Heavy oil Light oil Lubricant Petroleum gas Sulfuric acid Thruster fuel ( ) Thruster oxidizer ( ) Lava ( ) Molten iron ( ) Molten copper ( ) Holmium solution ( ) Electrolyte ( ) Ammoniacal solution ( ) Ammonia ( ) Fluorine ( )"
  },
  {
    "type": "wiki",
    "name": "Copper ore",
    "content": "( ) Ammoniacal solution ( ) Ammonia ( ) Fluorine ( ) Fluoroketone (hot) ( ) Fluoroketone (cold) ( ) Lithium brine ( ) Plasma ( ) Resources Wood Coal Stone Iron ore Copper ore Uranium ore Raw fish Ice ( ) Materials Iron plate Copper plate Steel plate Solid fuel Plastic bar Sulfur Battery Explosives Carbon ( ) Coal synthesis ( ) Crafting components Iron gear wheel Iron stick Copper cable Barrel Electronic circuit Advanced circuit Processing unit Engine unit Electric engine unit Flying robot frame Low density"
  },
  {
    "type": "wiki",
    "name": "Copper ore",
    "content": "Engine unit Electric engine unit Flying robot frame Low density structure Rocket fuel Rocket part Uranium processing Uranium-235 Uranium-238 Uranium fuel cell Depleted uranium fuel cell Nuclear fuel Uranium processing Nuclear fuel reprocessing Kovarex enrichment process Vulcanus Calcite Tungsten ore Tungsten carbide Tungsten plate Fulgora Scrap Holmium ore Holmium plate Superconductor Supercapacitor Gleba Yumako seed Jellynut seed Tree seed Yumako Jellynut Iron bacteria Copper bacteria Spoilage Nutrients"
  },
  {
    "type": "wiki",
    "name": "Copper ore",
    "content": "Jellynut Iron bacteria Copper bacteria Spoilage Nutrients Bioflux Yumako mash Jelly Carbon fiber Biter egg Pentapod egg Aquilo Lithium Lithium plate Quantum processor Fusion power cell Science packs Automation science pack Logistic science pack Military science pack Chemical science pack Production science pack Utility science pack Space science pack Metallurgic science pack ( ) Electromagnetic science pack ( ) Agricultural science pack ( ) Cryogenic science pack ( ) Promethium science pack ( ) Navigation"
  },
  {
    "type": "wiki",
    "name": "Copper ore",
    "content": "science pack ( ) Promethium science pack ( ) Navigation Logistics Production Space ( ) Combat Technology Environment"
  },
  {
    "type": "wiki",
    "name": "Uranium ore",
    "content": "Stack size 50 | Mining time 2 | Prototype type resource | Internal name uranium-ore | Produced by | Electric_mining_drill | Consumed by | Uranium_processing | Uranium ore is a resource found on the map. Instead of being smelted in a furnace , uranium ore must be processed in a centrifuge to produce uranium-235 and uranium-238 , which is used to craft fuel for the nuclear reactor and in various types of ammunition . Uranium ore is different from the other ores, as it requires sulfuric acid to be fed into the"
  },
  {
    "type": "wiki",
    "name": "Uranium ore",
    "content": "the other ores, as it requires sulfuric acid to be fed into the electric mining drill to mine it, at a rate of 10 sulfuric acid per 10 ore mined. Because of this, uranium ore cannot be mined by hand or by a burner mining drill , as it lacks fluid inputs. No additional sulfuric acid is consumed when additional products are created due to a productivity bonus from productivity modules or mining productivity . For example, with a 20% productivity bonus, 12 ore will be mined for every 10 sulfuric acid"
  },
  {
    "type": "wiki",
    "name": "Uranium ore",
    "content": "bonus, 12 ore will be mined for every 10 sulfuric acid consumed. The ore has a green glow, making it easily seen at night. Assuming no productivity or reactor neighbor bonuses are involved, and if Kovarex enrichment process is used to convert excess uranium-238 into uranium-235, one uranium ore has a total energy value of 368.73 MJ when made into uranium fuel cells , about 92 times the energy of coal . Nauvis is the only planet that contains uranium in Space Age ."
  },
  {
    "type": "wiki",
    "name": "Raw fish",
    "content": "Restores Quality 80 Quality 104 Quality 128 Quality 152 Quality 200 health Quality 80 Quality 104 Quality 128 Quality 152 Quality 200 | Stack size 100 | Mining time 0.4 | Space_AgeSpoil time Quality 2 h 5 m 50 sQuality 2 h 43 m 34 sQuality 3 h 21 m 20 sQuality 3 h 59 m 5 sQuality 5 h 14 m 35 s Quality 2 h 5 m 50 s Quality 2 h 43 m 34 s Quality 3 h 21 m 20 s Quality 3 h 59 m 5 s Quality 5 h 14 m 35 s | Space_AgeSpoil result Spoilage | Prototype type capsule | Internal name raw-fish | Consumed by | Spidertron"
  },
  {
    "type": "wiki",
    "name": "Raw fish",
    "content": "capsule | Internal name raw-fish | Consumed by | Spidertron | Raw fish can be harvested from water . They can be used to refill a small amount of health instantly. In order to catch raw fish, mine one of the dark spots that can be found moving around in water bodies. Each dark spot yields 5 fish when mined. Fish can be also collected via construction robots , by marking a water area that contains fish with a deconstruction planner . Raw fish is used to heal by clicking on the character or anywhere else in"
  },
  {
    "type": "wiki",
    "name": "Raw fish",
    "content": "used to heal by clicking on the character or anywhere else in the world with the fish in the cursor. They heal 80 HP each and have a short cooldown for reuse, limiting the amount of incoming DPS that fish healing can absorb. Using a fish produces a munching sound. Using landfill on water where a fish is swimming will \"destroy\" the fish. Fish can be shot and killed via pistol or submachine gun , and also by explosions, but are immune to any kind of shotgun fire. Shooting fish does not grant any fish items."
  },
  {
    "type": "wiki",
    "name": "Raw fish",
    "content": "of shotgun fire. Shooting fish does not grant any fish items. Fish are created in water when the world is generated and do not despawn or respawn. While inserters can remove fish from the water, they cannot put them back. The player can manually return fish to the water in stacks of 5, which resets both the quality and freshness of the fish. Contents 1 Alternative recipes 2 Achievements 3 Gallery 4 Trivia 5 History Alternative recipes In Space Age , fish can be automated by breeding them in a biochamber"
  },
  {
    "type": "wiki",
    "name": "Raw fish",
    "content": "Age , fish can be automated by breeding them in a biochamber after unlocking the fish breeding recipe with agricultural science packs . Fish breeding can only be conducted on Nauvis . Fish also are given a spoilage time of just over 2 hours. Process Input Output Made in Required technology Crafted only on Fish breeding 6 + 2 + 100 + 100 3 Fish breeding (research) Note that the fish produced by this recipe always have 100% freshness. Neither quality modules nor productivity modules can be used in this"
  },
  {
    "type": "wiki",
    "name": "Raw fish",
    "content": "quality modules nor productivity modules can be used in this recipe. Achievements So long and thanks for all the fish Today's fish is trout a la creme Eat a legendary fish. Trivia The fish item icon is meant to represent a European perch , a freshwater fish widespread in Europe and elsewhere. This was chosen because a perch is the favorite plushie of the artist's daughter, see the Reddit comment by V453000 Prior to version 2.0 it was possible to automate fish by launching space science packs with a rocket"
  },
  {
    "type": "wiki",
    "name": "Raw fish",
    "content": "to automate fish by launching space science packs with a rocket silo , which would return fish at a 1:1 ratio, to a maximum of 100 fish per launch. In Space Age, a base quality fish has a spoilage time of 2 hours, 5 minutes, and 50 seconds. This equates to 7,550 seconds, or 453,000 game ticks , which is a reference to developer V453000, the artist behind the fish icon."
  },
  {
    "type": "wiki",
    "name": "Iron plate",
    "content": "Recipe | Time 3.2+Iron_ore 1 → Iron_plate 1 | Total raw | Time 3.2+Iron_ore 1 | Stack size 100 | Prototype type item | Internal name iron-plate | Produced by | Stone_furnaceSteel_furnaceElectric_furnace | Consumed by | AccumulatorAssembling_machine_1"
  },
  {
    "type": "wiki",
    "name": "Iron plate",
    "content": "BatteryBurner_inserterBurner_mining_drillCarCargo_wagonDisplay_panelElectric_mining_drillElectronic_circuitFast_inserterFirearm_magazineGrenadeGun_turretInserterIron_chestIron_gear_wheelIron_stickLight_armorLong-handed_inserterPipePipe_to_groundPower_switchProgrammable_speakerRadarRail_chain_signalRail_signalRocketRocket_launcherShotgunShotgun_shellsLampSplitterSteam_engineSteel_plateStorage_tankSubmachine_gunSulfuric_acidTrain_stopTransport_beltUnderground_beltUranium_fuel_cell | Space_AgeRecycling"
  },
  {
    "type": "wiki",
    "name": "Iron plate",
    "content": "| Space_AgeRecycling results | Iron_plate 0.25 | The iron plate is a material that can be made by smelting iron ore in a furnace , or cast by a foundry . It is a component or subcomponent of almost every item in Factorio, and it is recommended to create a large stockpile when possible. When smelted in a furnace for a second time, iron plates will transform into steel plates , with a ratio of 5 iron plates per 1 steel plate. When starting a new freeplay game, the player starts out with 8 iron plates, along"
  },
  {
    "type": "wiki",
    "name": "Iron plate",
    "content": "freeplay game, the player starts out with 8 iron plates, along with 1 burner mining drill and 1 stone furnace . Contents 1 Alternative recipes 2 Achievements 3 History 4 See also Alternative recipes Space Age expansion exclusive feature. Process Input Output Made in Required technology Casting iron 3.2 + 20 2 Foundry (research) Achievements Iron throne 1 Produce 20k iron plates per hour. Iron throne 2 Produce 200k iron plates per hour. Iron throne 3 Produce 400k iron plates per hour."
  },
  {
    "type": "wiki",
    "name": "Copper plate",
    "content": "Recipe | Time 3.2+Copper_ore 1 → Copper_plate 1 | Total raw | Time 3.2+Copper_ore 1 | Stack size 100 | Prototype type item | Internal name copper-plate | Produced by | Stone_furnaceSteel_furnaceElectric_furnace | Consumed by | Automation_science_packBatteryCombat_shotgunCopper_cableGun_turretHeat_exchangerHeat_pipeHeavy_armorLow_density_structureNuclear_reactorPiercing_rounds_magazinePiercing_shotgun_shellsShotgunShotgun_shellsSolar_panelSteam_turbineSubmachine_gun | Copper plate is a material that can be"
  },
  {
    "type": "wiki",
    "name": "Copper plate",
    "content": "| Copper plate is a material that can be made by smelting copper ore in a furnace , or cast by a foundry . The copper plate's use is small in early game, so many players underestimate how much production capacity they will need. In the later game, copper use picks up heavily with the mass production of electronic circuits , and other resources that consume copper. However, copper use will usually still be less than iron plate use, throughout the game. Alternative recipes Space Age expansion exclusive"
  },
  {
    "type": "wiki",
    "name": "Copper plate",
    "content": "the game. Alternative recipes Space Age expansion exclusive feature. Process Input Output Made in Required technology Casting copper 3.2 + 20 2 Foundry (research)"
  },
  {
    "type": "wiki",
    "name": "Steel plate",
    "content": "Recipe | Time 16+Iron_plate 5 → Steel_plate 1 | Total raw | Time 16+Iron_plate 5 | Stack size 100 | Prototype type item | Internal name steel-plate | Required technologies | Steel_processing_(research) | Produced by | Stone_furnaceSteel_furnaceElectric_furnace | Consumed by | Artillery_turretArtillery_wagonAssembling_machine_2"
  },
  {
    "type": "wiki",
    "name": "Steel plate",
    "content": "BarrelPersonal_batteryBeaconBelt_immunity_equipmentBig_electric_poleCannon_shellCarCargo_landing_padCargo_wagonCentrifugeChemical_plantCluster_grenadeCombat_shotgunDischarge_defenseElectric_furnaceEnergy_shieldEngine_unitExoskeletonExplosive_cannon_shellFlamethrowerFlamethrower_ammoFlamethrower_turretFluid_wagonFlying_robot_frameGateHeat_exchangerHeat_pipeHeavy_armorLand_mineLaser_turretLocomotiveLow_density_structureMedium_electric_poleModular_armorNightvisionNuclear_reactorOil_refineryPersonal_roboportPi"
  },
  {
    "type": "wiki",
    "name": "Steel plate",
    "content": "r_armorNightvisionNuclear_reactorOil_refineryPersonal_roboportPiercing_rounds_magazinePiercing_shotgun_shellsPoison_capsulePower_armorPumpPumpjackRailRefined_concreteRoboportRocket_siloSlowdown_capsuleSolar_panelPortable_solar_panelSteel_chestSteel_furnaceStorage_tankSubstationTankTrain_stop"
  },
  {
    "type": "wiki",
    "name": "Steel plate",
    "content": "| The steel plate is an advanced material made by smelting iron plates again. It is used in many advanced recipes, including electrical distribution logistics, military items, and upgraded production machines. Some of these products in turn are used in the production science pack , which requires a total of 25 steel plates. Because the recipe for steel contains a ratio of 5 iron : 1 steel, it requires less space to transport once processed. Because of this, it is easier to transport the finished steel"
  },
  {
    "type": "wiki",
    "name": "Steel plate",
    "content": "Because of this, it is easier to transport the finished steel instead of smelting the steel where it needs to be used. Alternative recipes Space Age expansion exclusive feature. Process Input Output Made in Required technology Casting steel 3.2 + 30 1 Foundry (research)"
  },
  {
    "type": "wiki",
    "name": "Solid fuel",
    "content": "Stack size 50 | Fuel value 12 MJ (Fuel) | Vehicle acceleration Quality 120%Quality 126%Quality 132%Quality 138%Quality 150% Quality 120% Quality 126% Quality 132% Quality 138% Quality 150% | Vehicle top speed Quality 105%Quality 106.5%Quality 108%Quality 109.5%Quality 112.5% Quality 105% Quality 106.5% Quality 108% Quality 109.5% Quality 112.5% | Prototype type item | Internal name solid-fuel | Required technologies | Advanced_oil_processing_(research)Oil_processing_(research) | Produced by | Chemical_plant"
  },
  {
    "type": "wiki",
    "name": "Solid fuel",
    "content": "| Produced by | Chemical_plant | Consumed by | Rocket_fuel | Used as fuel by | Burner_inserterBoilerStone_furnaceSteel_furnaceBurner_mining_drillLocomotiveTankCarHeating_tower | Solid fuel is a kind of fuel and is processed in a chemical plant . One unit of solid fuel contains 12MJ of energy, three times the energy value of coal. Besides being useful as fuel in all burner devices , solid fuel is also used to produce rocket fuel , which is a component of rocket parts built in the rocket silo . Recipes Solid"
  },
  {
    "type": "wiki",
    "name": "Solid fuel",
    "content": "of rocket parts built in the rocket silo . Recipes Solid Fuel can be created from heavy oil , light oil or petroleum gas . Light oil has the best oil to solid fuel ratio (10:1). Cracking heavy oil to light oil first changes the ratio for heavy oil to 13:1 (from 20:1). On Aquilo , the ammonia recipe is by far the most efficient. With no productivity bonus, optimally converting the products of advanced oil processing to solid fuel will result in needing approximately 10.55 crude oil per solid fuel, whereas"
  },
  {
    "type": "wiki",
    "name": "Solid fuel",
    "content": "needing approximately 10.55 crude oil per solid fuel, whereas solid fuel from ammonia needs only 6 crude oil per solid fuel. Process Input Output Produced by 10 + 1 1 20 + 1 1 20 + 1 1 6 + 15 + 0.5 1 + Solid fuel is also obtained from recycling scrap , which can be mined on Fulgora ."
  },
  {
    "type": "wiki",
    "name": "Plastic bar",
    "content": "Recipe | Time 1+Coal 1+Petroleum_gas 20 → Plastic_bar 2 | Total raw | Time 1+Coal 1+Petroleum_gas 20 | Stack size 100 | Prototype type item | Internal name plastic-bar | Required technologies | Plastics_(research) | Boosting technologies | Plastic_bar_productivity_(research) | Produced by | Chemical_plant | Consumed by | Advanced_circuitCannon_shellExplosive_cannon_shellLow_density_structure | Space_AgeRecycling results | Plastic_bar 0.25 | Plastic bars are a requirement for the production of advanced"
  },
  {
    "type": "wiki",
    "name": "Plastic bar",
    "content": "| Plastic bars are a requirement for the production of advanced circuits which are highly used towards the mid to late game. Plastic is also needed in large quantities to launch a rocket and win the game due to its use in crafting low density structures . Alternative recipes Space Age expansion exclusive feature. Process Input Output Made in Required technology Bioplastic 2 + 4 + 1 3 Bioflux processing (research)"
  },
  {
    "type": "wiki",
    "name": "Sulfur",
    "content": "Recipe | Time 1+Petroleum_gas 30+Water 30 → Sulfur 2 | Total raw | Time 1+Petroleum_gas 30+Water 30 | Stack size 50 | Prototype type item | Internal name sulfur | Required technologies | Sulfur_processing_(research) | Produced by | Chemical_plant | Consumed by | Chemical_science_packExplosivesSulfuric_acid | Sulfur is a component in the production of Chemical science pack , Sulfuric acid and Explosives , with the latter two also being intermediate products used in higher-level recipes. Sulfur is a solid"
  },
  {
    "type": "wiki",
    "name": "Sulfur",
    "content": "products used in higher-level recipes. Sulfur is a solid item in a chain of otherwise fluid-based manufacturing: Crude oil → Petroleum gas → Sulfur → Sulfuric acid . Alternative recipes Space Age expansion exclusive feature. Process Input Output Made in Required technology Biosulfur 2 + 5 + 1 2 Bioflux processing (research) Advanced carbonic asteroid crushing 5 + 1 5 + 2 + 0.05 Advanced asteroid processing (research) See Also Batteries Intermediate products Fluids Water Steam Crude oil Heavy oil Light oil"
  },
  {
    "type": "wiki",
    "name": "Sulfur",
    "content": "products Fluids Water Steam Crude oil Heavy oil Light oil Lubricant Petroleum gas Sulfuric acid Thruster fuel ( ) Thruster oxidizer ( ) Lava ( ) Molten iron ( ) Molten copper ( ) Holmium solution ( ) Electrolyte ( ) Ammoniacal solution ( ) Ammonia ( ) Fluorine ( ) Fluoroketone (hot) ( ) Fluoroketone (cold) ( ) Lithium brine ( ) Plasma ( ) Resources Wood Coal Stone Iron ore Copper ore Uranium ore Raw fish Ice ( ) Materials Iron plate Copper plate Steel plate Solid fuel Plastic bar Sulfur Battery Explosives"
  },
  {
    "type": "wiki",
    "name": "Sulfur",
    "content": "Steel plate Solid fuel Plastic bar Sulfur Battery Explosives Carbon ( ) Coal synthesis ( ) Crafting components Iron gear wheel Iron stick Copper cable Barrel Electronic circuit Advanced circuit Processing unit Engine unit Electric engine unit Flying robot frame Low density structure Rocket fuel Rocket part Uranium processing Uranium-235 Uranium-238 Uranium fuel cell Depleted uranium fuel cell Nuclear fuel Uranium processing Nuclear fuel reprocessing Kovarex enrichment process Vulcanus Calcite Tungsten ore"
  },
  {
    "type": "wiki",
    "name": "Sulfur",
    "content": "Kovarex enrichment process Vulcanus Calcite Tungsten ore Tungsten carbide Tungsten plate Fulgora Scrap Holmium ore Holmium plate Superconductor Supercapacitor Gleba Yumako seed Jellynut seed Tree seed Yumako Jellynut Iron bacteria Copper bacteria Spoilage Nutrients Bioflux Yumako mash Jelly Carbon fiber Biter egg Pentapod egg Aquilo Lithium Lithium plate Quantum processor Fusion power cell Science packs Automation science pack Logistic science pack Military science pack Chemical science pack Production"
  },
  {
    "type": "wiki",
    "name": "Sulfur",
    "content": "pack Military science pack Chemical science pack Production science pack Utility science pack Space science pack Metallurgic science pack ( ) Electromagnetic science pack ( ) Agricultural science pack ( ) Cryogenic science pack ( ) Promethium science pack ( ) Navigation Logistics Production Space ( ) Combat Technology Environment"
  },
  {
    "type": "wiki",
    "name": "Battery",
    "content": "Recipe | Time 4+Copper_plate 1+Iron_plate 1+Sulfuric_acid 20 → Battery 1 | Total raw | Time 4+Copper_plate 1+Iron_plate 1+Sulfuric_acid 20 | Stack size 200 | Prototype type item | Internal name battery | Required technologies | Battery_(research) | Produced by | Chemical_plant | Consumed by | AccumulatorPersonal_batteryFlying_robot_frameLaser_turretPersonal_roboport | This article is about the intermediate product. For the modular armor equipment, see personal battery . For the technology, see battery"
  },
  {
    "type": "wiki",
    "name": "Battery",
    "content": "see personal battery . For the technology, see battery (research) . The battery is an intermediate product used in several key recipes, including the flying robot frame , which is required to build logistic and construction robots , as well as the utility science pack used for later-game research. Furthermore, batteries are a crucial component of powering a factory using solar power or Fulgora lightning because of their use in crafting accumulators . Batteries are also used for defense, as they are needed"
  },
  {
    "type": "wiki",
    "name": "Battery",
    "content": ". Batteries are also used for defense, as they are needed to make laser turrets , which uses electricity instead of ammunition in item or fluid form."
  },
  {
    "type": "wiki",
    "name": "Explosives",
    "content": "Recipe | Time 4+Coal 1+Sulfur 1+Water 10 → Explosives 2 | Total raw | Time 4+Coal 1+Sulfur 1+Water 10 | Stack size 50 | Prototype type item | Internal name explosives | Required technologies | Explosives_(research) | Produced by | Chemical_plant | Consumed by | Artillery_shellAtomic_bombCannon_shellCliff_explosivesCluster_grenadeExplosive_cannon_shellExplosive_rocketLand_mineRocket | Explosives are used in crafting of cliff explosives and explosive weapons and ammunition. Explosives cannot be used by"
  },
  {
    "type": "wiki",
    "name": "Explosives",
    "content": "explosive weapons and ammunition. Explosives cannot be used by themselves."
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "Barrels can be used to store and transport 50 units of various fluids. Since they are solid objects, they can be used as an alternative to pipes, once fluid handling is researched. The barrels themselves are reusable once the fluids are drained. Barrels stack in groups of 10. A single cargo wagon can hold 400 barrels, which gives a capacity of 20,000 units per cargo wagon – 30,000 fewer units than the capacity of a fluid wagon . Empty barrels have a rocket capacity of 200. Full barrels, regardless of fluid,"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "a rocket capacity of 200. Full barrels, regardless of fluid, have a rocket capacity of 100. As such, a single rocket can carry 5000 units of any fluid which can be barrelled. Contents 1 Empty barrels 2 Fill barrels 3 Example of use 4 Notes 5 History 6 See also Empty barrels Empty barrels can be crafted. When barrels are emptied, the (required) assembling machine will also return an empty barrel. Recipe: 1 + 1 → 1 Req. technology: Fluid handling Process Input Machine Output Empty crude oil barrel 1 0.2 or 1"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "Process Input Machine Output Empty crude oil barrel 1 0.2 or 1 + 50 Empty heavy oil barrel 1 0.2 or 1 + 50 Empty light oil barrel 1 0.2 or 1 + 50 Empty lubricant barrel 1 0.2 or 1 + 50 Empty petroleum gas barrel 1 0.2 or 1 + 50 Empty sulfuric acid barrel 1 0.2 or 1 + 50 Empty water barrel 1 0.2 or 1 + 50 Empty fluoroketone (hot) barrel 1 0.2 or 1 + 50 Empty fluoroketone (cold) barrel 1 0.2 or 1 + 50 Fill barrels Filled barrels cannot be crafted. They are filled using the respective fluids 's Fill barrel"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "They are filled using the respective fluids 's Fill barrel process which consumes empty barrels. Process Input Machine Output Fill crude oil barrel 1 50 0.2 or 1 Fill heavy oil barrel 1 50 0.2 or 1 Fill light oil barrel 1 50 0.2 or 1 Fill lubricant barrel 1 50 0.2 or 1 Fill petroleum gas barrel 1 50 0.2 or 1 Fill sulfuric acid barrel 1 50 0.2 or 1 Fill water barrel 1 50 0.2 or 1 Fill fluoroketone (hot) barrel 1 50 0.2 or 1 Fill fluoroketone (cold) barrel 1 50 0.2 or 1 Example of use Barrels are useful in"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "barrel 1 50 0.2 or 1 Example of use Barrels are useful in situations where pipes are not available or a bad option, such as oil production far away from your main factory, or when transporting fluids to another planet in Space Age . Barrels can be transported with a belt transport system or railway , by logistic robots , via car or tank , or in the player 's inventory. A simple example with transport belts : Notes Barrel filling and emptying recipes cannot accept productivity modules or quality modules ."
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "Barrels can be used to store and transport 50 units of various fluids. Since they are solid objects, they can be used as an alternative to pipes, once fluid handling is researched. The barrels themselves are reusable once the fluids are drained. Barrels stack in groups of 10. A single cargo wagon can hold 400 barrels, which gives a capacity of 20,000 units per cargo wagon – 30,000 fewer units than the capacity of a fluid wagon . Empty barrels have a rocket capacity of 200. Full barrels, regardless of fluid,"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "a rocket capacity of 200. Full barrels, regardless of fluid, have a rocket capacity of 100. As such, a single rocket can carry 5000 units of any fluid which can be barrelled. Contents 1 Empty barrels 2 Fill barrels 3 Example of use 4 Notes 5 History 6 See also Empty barrels Empty barrels can be crafted. When barrels are emptied, the (required) assembling machine will also return an empty barrel. Recipe: 1 + 1 → 1 Req. technology: Fluid handling Process Input Machine Output Empty crude oil barrel 1 0.2 or 1"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "Process Input Machine Output Empty crude oil barrel 1 0.2 or 1 + 50 Empty heavy oil barrel 1 0.2 or 1 + 50 Empty light oil barrel 1 0.2 or 1 + 50 Empty lubricant barrel 1 0.2 or 1 + 50 Empty petroleum gas barrel 1 0.2 or 1 + 50 Empty sulfuric acid barrel 1 0.2 or 1 + 50 Empty water barrel 1 0.2 or 1 + 50 Empty fluoroketone (hot) barrel 1 0.2 or 1 + 50 Empty fluoroketone (cold) barrel 1 0.2 or 1 + 50 Fill barrels Filled barrels cannot be crafted. They are filled using the respective fluids 's Fill barrel"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "They are filled using the respective fluids 's Fill barrel process which consumes empty barrels. Process Input Machine Output Fill crude oil barrel 1 50 0.2 or 1 Fill heavy oil barrel 1 50 0.2 or 1 Fill light oil barrel 1 50 0.2 or 1 Fill lubricant barrel 1 50 0.2 or 1 Fill petroleum gas barrel 1 50 0.2 or 1 Fill sulfuric acid barrel 1 50 0.2 or 1 Fill water barrel 1 50 0.2 or 1 Fill fluoroketone (hot) barrel 1 50 0.2 or 1 Fill fluoroketone (cold) barrel 1 50 0.2 or 1 Example of use Barrels are useful in"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "barrel 1 50 0.2 or 1 Example of use Barrels are useful in situations where pipes are not available or a bad option, such as oil production far away from your main factory, or when transporting fluids to another planet in Space Age . Barrels can be transported with a belt transport system or railway , by logistic robots , via car or tank , or in the player 's inventory. A simple example with transport belts : Notes Barrel filling and emptying recipes cannot accept productivity modules or quality modules ."
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "Barrels can be used to store and transport 50 units of various fluids. Since they are solid objects, they can be used as an alternative to pipes, once fluid handling is researched. The barrels themselves are reusable once the fluids are drained. Barrels stack in groups of 10. A single cargo wagon can hold 400 barrels, which gives a capacity of 20,000 units per cargo wagon – 30,000 fewer units than the capacity of a fluid wagon . Empty barrels have a rocket capacity of 200. Full barrels, regardless of fluid,"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "a rocket capacity of 200. Full barrels, regardless of fluid, have a rocket capacity of 100. As such, a single rocket can carry 5000 units of any fluid which can be barrelled. Contents 1 Empty barrels 2 Fill barrels 3 Example of use 4 Notes 5 History 6 See also Empty barrels Empty barrels can be crafted. When barrels are emptied, the (required) assembling machine will also return an empty barrel. Recipe: 1 + 1 → 1 Req. technology: Fluid handling Process Input Machine Output Empty crude oil barrel 1 0.2 or 1"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "Process Input Machine Output Empty crude oil barrel 1 0.2 or 1 + 50 Empty heavy oil barrel 1 0.2 or 1 + 50 Empty light oil barrel 1 0.2 or 1 + 50 Empty lubricant barrel 1 0.2 or 1 + 50 Empty petroleum gas barrel 1 0.2 or 1 + 50 Empty sulfuric acid barrel 1 0.2 or 1 + 50 Empty water barrel 1 0.2 or 1 + 50 Empty fluoroketone (hot) barrel 1 0.2 or 1 + 50 Empty fluoroketone (cold) barrel 1 0.2 or 1 + 50 Fill barrels Filled barrels cannot be crafted. They are filled using the respective fluids 's Fill barrel"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "They are filled using the respective fluids 's Fill barrel process which consumes empty barrels. Process Input Machine Output Fill crude oil barrel 1 50 0.2 or 1 Fill heavy oil barrel 1 50 0.2 or 1 Fill light oil barrel 1 50 0.2 or 1 Fill lubricant barrel 1 50 0.2 or 1 Fill petroleum gas barrel 1 50 0.2 or 1 Fill sulfuric acid barrel 1 50 0.2 or 1 Fill water barrel 1 50 0.2 or 1 Fill fluoroketone (hot) barrel 1 50 0.2 or 1 Fill fluoroketone (cold) barrel 1 50 0.2 or 1 Example of use Barrels are useful in"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "barrel 1 50 0.2 or 1 Example of use Barrels are useful in situations where pipes are not available or a bad option, such as oil production far away from your main factory, or when transporting fluids to another planet in Space Age . Barrels can be transported with a belt transport system or railway , by logistic robots , via car or tank , or in the player 's inventory. A simple example with transport belts : Notes Barrel filling and emptying recipes cannot accept productivity modules or quality modules ."
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "Barrels can be used to store and transport 50 units of various fluids. Since they are solid objects, they can be used as an alternative to pipes, once fluid handling is researched. The barrels themselves are reusable once the fluids are drained. Barrels stack in groups of 10. A single cargo wagon can hold 400 barrels, which gives a capacity of 20,000 units per cargo wagon – 30,000 fewer units than the capacity of a fluid wagon . Empty barrels have a rocket capacity of 200. Full barrels, regardless of fluid,"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "a rocket capacity of 200. Full barrels, regardless of fluid, have a rocket capacity of 100. As such, a single rocket can carry 5000 units of any fluid which can be barrelled. Contents 1 Empty barrels 2 Fill barrels 3 Example of use 4 Notes 5 History 6 See also Empty barrels Empty barrels can be crafted. When barrels are emptied, the (required) assembling machine will also return an empty barrel. Recipe: 1 + 1 → 1 Req. technology: Fluid handling Process Input Machine Output Empty crude oil barrel 1 0.2 or 1"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "Process Input Machine Output Empty crude oil barrel 1 0.2 or 1 + 50 Empty heavy oil barrel 1 0.2 or 1 + 50 Empty light oil barrel 1 0.2 or 1 + 50 Empty lubricant barrel 1 0.2 or 1 + 50 Empty petroleum gas barrel 1 0.2 or 1 + 50 Empty sulfuric acid barrel 1 0.2 or 1 + 50 Empty water barrel 1 0.2 or 1 + 50 Empty fluoroketone (hot) barrel 1 0.2 or 1 + 50 Empty fluoroketone (cold) barrel 1 0.2 or 1 + 50 Fill barrels Filled barrels cannot be crafted. They are filled using the respective fluids 's Fill barrel"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "They are filled using the respective fluids 's Fill barrel process which consumes empty barrels. Process Input Machine Output Fill crude oil barrel 1 50 0.2 or 1 Fill heavy oil barrel 1 50 0.2 or 1 Fill light oil barrel 1 50 0.2 or 1 Fill lubricant barrel 1 50 0.2 or 1 Fill petroleum gas barrel 1 50 0.2 or 1 Fill sulfuric acid barrel 1 50 0.2 or 1 Fill water barrel 1 50 0.2 or 1 Fill fluoroketone (hot) barrel 1 50 0.2 or 1 Fill fluoroketone (cold) barrel 1 50 0.2 or 1 Example of use Barrels are useful in"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "barrel 1 50 0.2 or 1 Example of use Barrels are useful in situations where pipes are not available or a bad option, such as oil production far away from your main factory, or when transporting fluids to another planet in Space Age . Barrels can be transported with a belt transport system or railway , by logistic robots , via car or tank , or in the player 's inventory. A simple example with transport belts : Notes Barrel filling and emptying recipes cannot accept productivity modules or quality modules ."
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "Barrels can be used to store and transport 50 units of various fluids. Since they are solid objects, they can be used as an alternative to pipes, once fluid handling is researched. The barrels themselves are reusable once the fluids are drained. Barrels stack in groups of 10. A single cargo wagon can hold 400 barrels, which gives a capacity of 20,000 units per cargo wagon – 30,000 fewer units than the capacity of a fluid wagon . Empty barrels have a rocket capacity of 200. Full barrels, regardless of fluid,"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "a rocket capacity of 200. Full barrels, regardless of fluid, have a rocket capacity of 100. As such, a single rocket can carry 5000 units of any fluid which can be barrelled. Contents 1 Empty barrels 2 Fill barrels 3 Example of use 4 Notes 5 History 6 See also Empty barrels Empty barrels can be crafted. When barrels are emptied, the (required) assembling machine will also return an empty barrel. Recipe: 1 + 1 → 1 Req. technology: Fluid handling Process Input Machine Output Empty crude oil barrel 1 0.2 or 1"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "Process Input Machine Output Empty crude oil barrel 1 0.2 or 1 + 50 Empty heavy oil barrel 1 0.2 or 1 + 50 Empty light oil barrel 1 0.2 or 1 + 50 Empty lubricant barrel 1 0.2 or 1 + 50 Empty petroleum gas barrel 1 0.2 or 1 + 50 Empty sulfuric acid barrel 1 0.2 or 1 + 50 Empty water barrel 1 0.2 or 1 + 50 Empty fluoroketone (hot) barrel 1 0.2 or 1 + 50 Empty fluoroketone (cold) barrel 1 0.2 or 1 + 50 Fill barrels Filled barrels cannot be crafted. They are filled using the respective fluids 's Fill barrel"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "They are filled using the respective fluids 's Fill barrel process which consumes empty barrels. Process Input Machine Output Fill crude oil barrel 1 50 0.2 or 1 Fill heavy oil barrel 1 50 0.2 or 1 Fill light oil barrel 1 50 0.2 or 1 Fill lubricant barrel 1 50 0.2 or 1 Fill petroleum gas barrel 1 50 0.2 or 1 Fill sulfuric acid barrel 1 50 0.2 or 1 Fill water barrel 1 50 0.2 or 1 Fill fluoroketone (hot) barrel 1 50 0.2 or 1 Fill fluoroketone (cold) barrel 1 50 0.2 or 1 Example of use Barrels are useful in"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "barrel 1 50 0.2 or 1 Example of use Barrels are useful in situations where pipes are not available or a bad option, such as oil production far away from your main factory, or when transporting fluids to another planet in Space Age . Barrels can be transported with a belt transport system or railway , by logistic robots , via car or tank , or in the player 's inventory. A simple example with transport belts : Notes Barrel filling and emptying recipes cannot accept productivity modules or quality modules ."
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "Barrels can be used to store and transport 50 units of various fluids. Since they are solid objects, they can be used as an alternative to pipes, once fluid handling is researched. The barrels themselves are reusable once the fluids are drained. Barrels stack in groups of 10. A single cargo wagon can hold 400 barrels, which gives a capacity of 20,000 units per cargo wagon – 30,000 fewer units than the capacity of a fluid wagon . Empty barrels have a rocket capacity of 200. Full barrels, regardless of fluid,"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "a rocket capacity of 200. Full barrels, regardless of fluid, have a rocket capacity of 100. As such, a single rocket can carry 5000 units of any fluid which can be barrelled. Contents 1 Empty barrels 2 Fill barrels 3 Example of use 4 Notes 5 History 6 See also Empty barrels Empty barrels can be crafted. When barrels are emptied, the (required) assembling machine will also return an empty barrel. Recipe: 1 + 1 → 1 Req. technology: Fluid handling Process Input Machine Output Empty crude oil barrel 1 0.2 or 1"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "Process Input Machine Output Empty crude oil barrel 1 0.2 or 1 + 50 Empty heavy oil barrel 1 0.2 or 1 + 50 Empty light oil barrel 1 0.2 or 1 + 50 Empty lubricant barrel 1 0.2 or 1 + 50 Empty petroleum gas barrel 1 0.2 or 1 + 50 Empty sulfuric acid barrel 1 0.2 or 1 + 50 Empty water barrel 1 0.2 or 1 + 50 Empty fluoroketone (hot) barrel 1 0.2 or 1 + 50 Empty fluoroketone (cold) barrel 1 0.2 or 1 + 50 Fill barrels Filled barrels cannot be crafted. They are filled using the respective fluids 's Fill barrel"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "They are filled using the respective fluids 's Fill barrel process which consumes empty barrels. Process Input Machine Output Fill crude oil barrel 1 50 0.2 or 1 Fill heavy oil barrel 1 50 0.2 or 1 Fill light oil barrel 1 50 0.2 or 1 Fill lubricant barrel 1 50 0.2 or 1 Fill petroleum gas barrel 1 50 0.2 or 1 Fill sulfuric acid barrel 1 50 0.2 or 1 Fill water barrel 1 50 0.2 or 1 Fill fluoroketone (hot) barrel 1 50 0.2 or 1 Fill fluoroketone (cold) barrel 1 50 0.2 or 1 Example of use Barrels are useful in"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "barrel 1 50 0.2 or 1 Example of use Barrels are useful in situations where pipes are not available or a bad option, such as oil production far away from your main factory, or when transporting fluids to another planet in Space Age . Barrels can be transported with a belt transport system or railway , by logistic robots , via car or tank , or in the player 's inventory. A simple example with transport belts : Notes Barrel filling and emptying recipes cannot accept productivity modules or quality modules ."
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "Barrels can be used to store and transport 50 units of various fluids. Since they are solid objects, they can be used as an alternative to pipes, once fluid handling is researched. The barrels themselves are reusable once the fluids are drained. Barrels stack in groups of 10. A single cargo wagon can hold 400 barrels, which gives a capacity of 20,000 units per cargo wagon – 30,000 fewer units than the capacity of a fluid wagon . Empty barrels have a rocket capacity of 200. Full barrels, regardless of fluid,"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "a rocket capacity of 200. Full barrels, regardless of fluid, have a rocket capacity of 100. As such, a single rocket can carry 5000 units of any fluid which can be barrelled. Contents 1 Empty barrels 2 Fill barrels 3 Example of use 4 Notes 5 History 6 See also Empty barrels Empty barrels can be crafted. When barrels are emptied, the (required) assembling machine will also return an empty barrel. Recipe: 1 + 1 → 1 Req. technology: Fluid handling Process Input Machine Output Empty crude oil barrel 1 0.2 or 1"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "Process Input Machine Output Empty crude oil barrel 1 0.2 or 1 + 50 Empty heavy oil barrel 1 0.2 or 1 + 50 Empty light oil barrel 1 0.2 or 1 + 50 Empty lubricant barrel 1 0.2 or 1 + 50 Empty petroleum gas barrel 1 0.2 or 1 + 50 Empty sulfuric acid barrel 1 0.2 or 1 + 50 Empty water barrel 1 0.2 or 1 + 50 Empty fluoroketone (hot) barrel 1 0.2 or 1 + 50 Empty fluoroketone (cold) barrel 1 0.2 or 1 + 50 Fill barrels Filled barrels cannot be crafted. They are filled using the respective fluids 's Fill barrel"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "They are filled using the respective fluids 's Fill barrel process which consumes empty barrels. Process Input Machine Output Fill crude oil barrel 1 50 0.2 or 1 Fill heavy oil barrel 1 50 0.2 or 1 Fill light oil barrel 1 50 0.2 or 1 Fill lubricant barrel 1 50 0.2 or 1 Fill petroleum gas barrel 1 50 0.2 or 1 Fill sulfuric acid barrel 1 50 0.2 or 1 Fill water barrel 1 50 0.2 or 1 Fill fluoroketone (hot) barrel 1 50 0.2 or 1 Fill fluoroketone (cold) barrel 1 50 0.2 or 1 Example of use Barrels are useful in"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "barrel 1 50 0.2 or 1 Example of use Barrels are useful in situations where pipes are not available or a bad option, such as oil production far away from your main factory, or when transporting fluids to another planet in Space Age . Barrels can be transported with a belt transport system or railway , by logistic robots , via car or tank , or in the player 's inventory. A simple example with transport belts : Notes Barrel filling and emptying recipes cannot accept productivity modules or quality modules ."
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "Barrels can be used to store and transport 50 units of various fluids. Since they are solid objects, they can be used as an alternative to pipes, once fluid handling is researched. The barrels themselves are reusable once the fluids are drained. Barrels stack in groups of 10. A single cargo wagon can hold 400 barrels, which gives a capacity of 20,000 units per cargo wagon – 30,000 fewer units than the capacity of a fluid wagon . Empty barrels have a rocket capacity of 200. Full barrels, regardless of fluid,"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "a rocket capacity of 200. Full barrels, regardless of fluid, have a rocket capacity of 100. As such, a single rocket can carry 5000 units of any fluid which can be barrelled. Contents 1 Empty barrels 2 Fill barrels 3 Example of use 4 Notes 5 History 6 See also Empty barrels Empty barrels can be crafted. When barrels are emptied, the (required) assembling machine will also return an empty barrel. Recipe: 1 + 1 → 1 Req. technology: Fluid handling Process Input Machine Output Empty crude oil barrel 1 0.2 or 1"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "Process Input Machine Output Empty crude oil barrel 1 0.2 or 1 + 50 Empty heavy oil barrel 1 0.2 or 1 + 50 Empty light oil barrel 1 0.2 or 1 + 50 Empty lubricant barrel 1 0.2 or 1 + 50 Empty petroleum gas barrel 1 0.2 or 1 + 50 Empty sulfuric acid barrel 1 0.2 or 1 + 50 Empty water barrel 1 0.2 or 1 + 50 Empty fluoroketone (hot) barrel 1 0.2 or 1 + 50 Empty fluoroketone (cold) barrel 1 0.2 or 1 + 50 Fill barrels Filled barrels cannot be crafted. They are filled using the respective fluids 's Fill barrel"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "They are filled using the respective fluids 's Fill barrel process which consumes empty barrels. Process Input Machine Output Fill crude oil barrel 1 50 0.2 or 1 Fill heavy oil barrel 1 50 0.2 or 1 Fill light oil barrel 1 50 0.2 or 1 Fill lubricant barrel 1 50 0.2 or 1 Fill petroleum gas barrel 1 50 0.2 or 1 Fill sulfuric acid barrel 1 50 0.2 or 1 Fill water barrel 1 50 0.2 or 1 Fill fluoroketone (hot) barrel 1 50 0.2 or 1 Fill fluoroketone (cold) barrel 1 50 0.2 or 1 Example of use Barrels are useful in"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "barrel 1 50 0.2 or 1 Example of use Barrels are useful in situations where pipes are not available or a bad option, such as oil production far away from your main factory, or when transporting fluids to another planet in Space Age . Barrels can be transported with a belt transport system or railway , by logistic robots , via car or tank , or in the player 's inventory. A simple example with transport belts : Notes Barrel filling and emptying recipes cannot accept productivity modules or quality modules ."
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "Barrels can be used to store and transport 50 units of various fluids. Since they are solid objects, they can be used as an alternative to pipes, once fluid handling is researched. The barrels themselves are reusable once the fluids are drained. Barrels stack in groups of 10. A single cargo wagon can hold 400 barrels, which gives a capacity of 20,000 units per cargo wagon – 30,000 fewer units than the capacity of a fluid wagon . Empty barrels have a rocket capacity of 200. Full barrels, regardless of fluid,"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "a rocket capacity of 200. Full barrels, regardless of fluid, have a rocket capacity of 100. As such, a single rocket can carry 5000 units of any fluid which can be barrelled. Contents 1 Empty barrels 2 Fill barrels 3 Example of use 4 Notes 5 History 6 See also Empty barrels Empty barrels can be crafted. When barrels are emptied, the (required) assembling machine will also return an empty barrel. Recipe: 1 + 1 → 1 Req. technology: Fluid handling Process Input Machine Output Empty crude oil barrel 1 0.2 or 1"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "Process Input Machine Output Empty crude oil barrel 1 0.2 or 1 + 50 Empty heavy oil barrel 1 0.2 or 1 + 50 Empty light oil barrel 1 0.2 or 1 + 50 Empty lubricant barrel 1 0.2 or 1 + 50 Empty petroleum gas barrel 1 0.2 or 1 + 50 Empty sulfuric acid barrel 1 0.2 or 1 + 50 Empty water barrel 1 0.2 or 1 + 50 Empty fluoroketone (hot) barrel 1 0.2 or 1 + 50 Empty fluoroketone (cold) barrel 1 0.2 or 1 + 50 Fill barrels Filled barrels cannot be crafted. They are filled using the respective fluids 's Fill barrel"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "They are filled using the respective fluids 's Fill barrel process which consumes empty barrels. Process Input Machine Output Fill crude oil barrel 1 50 0.2 or 1 Fill heavy oil barrel 1 50 0.2 or 1 Fill light oil barrel 1 50 0.2 or 1 Fill lubricant barrel 1 50 0.2 or 1 Fill petroleum gas barrel 1 50 0.2 or 1 Fill sulfuric acid barrel 1 50 0.2 or 1 Fill water barrel 1 50 0.2 or 1 Fill fluoroketone (hot) barrel 1 50 0.2 or 1 Fill fluoroketone (cold) barrel 1 50 0.2 or 1 Example of use Barrels are useful in"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "barrel 1 50 0.2 or 1 Example of use Barrels are useful in situations where pipes are not available or a bad option, such as oil production far away from your main factory, or when transporting fluids to another planet in Space Age . Barrels can be transported with a belt transport system or railway , by logistic robots , via car or tank , or in the player 's inventory. A simple example with transport belts : Notes Barrel filling and emptying recipes cannot accept productivity modules or quality modules ."
  },
  {
    "type": "wiki",
    "name": "Iron gear wheel",
    "content": "Recipe | Time 0.5+Iron_plate 2 → Iron_gear_wheel 1 | Total raw | Time 0.5+Iron_plate 2 | Stack size 100 | Prototype type item | Internal name iron-gear-wheel | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Artillery_turretArtillery_wagonAssembling_machine_1 Assembling_machine_2"
  },
  {
    "type": "wiki",
    "name": "Iron gear wheel",
    "content": "Automation_science_packBulk_inserterBurner_inserterBurner_mining_drillCargo_wagonCentrifugeChemical_plantCombat_shotgunDefender_capsuleElectric_mining_drillEngine_unitExpress_splitterExpress_transport_beltExpress_underground_beltFast_splitterFast_transport_beltFast_underground_beltFlamethrowerFlamethrower_turretFluid_wagonGun_turretInserterLabLong-handed_inserterOffshore_pumpOil_refineryPersonal_roboportPumpjackRadarRepair_packRoboportRocket_launcherShotgunSteam_engineSteam_turbineSubmachine_gunTankTranspo"
  },
  {
    "type": "wiki",
    "name": "Iron gear wheel",
    "content": "auncherShotgunSteam_engineSteam_turbineSubmachine_gunTankTransport_belt"
  },
  {
    "type": "wiki",
    "name": "Iron gear wheel",
    "content": "| The iron gear wheel is an intermediate product crafted from two iron plates , or cast by a foundry . It is very important for many basic and advanced recipes, including all levels of belts , the basic inserter and assembler , and raw resource extraction equipment such as the electric mining drill . Alternative recipes Space Age expansion exclusive feature. Process Input Output Made in Required technology Casting iron gear wheel 1 + 10 1 Foundry (research)"
  },
  {
    "type": "wiki",
    "name": "Iron stick",
    "content": "Recipe | Time 0.5+Iron_plate 1 → Iron_stick 2 | Total raw | Time 0.5+Iron_plate 1 | Stack size 100 | Prototype type item | Internal name iron-stick | Required technologies | Circuit_network_(research)Concrete_(research)Electric_energy_distribution_1_(research)1 Railway_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 CraftingFoundry | Consumed by | Big_electric_poleMedium_electric_poleProgrammable_speakerRailRefined_concreteTrain_stop | Iron sticks are a basic"
  },
  {
    "type": "wiki",
    "name": "Iron stick",
    "content": "| Iron sticks are a basic intermediate product. They are used in a few early and mid-game recipes. Alternative recipes Space Age expansion exclusive feature. Process Input Output Made in Required technology Casting iron stick 1 + 20 4 Foundry (research) Version history 2.0.11 : Fulgora ruins now also drop iron sticks when mined so electric poles could be crafted without recyclers at the start. 2.0.7 : Casting recipes added in the Space Age expansion. 0.17.0 : Medium and big electric pole, train stop, and"
  },
  {
    "type": "wiki",
    "name": "Iron stick",
    "content": "0.17.0 : Medium and big electric pole, train stop, and programmable speaker now use this as an ingredient. Lamp recipe iron sticks ingredient changed to copper cables . Intermediate products Fluids Water Steam Crude oil Heavy oil Light oil Lubricant Petroleum gas Sulfuric acid Thruster fuel ( ) Thruster oxidizer ( ) Lava ( ) Molten iron ( ) Molten copper ( ) Holmium solution ( ) Electrolyte ( ) Ammoniacal solution ( ) Ammonia ( ) Fluorine ( ) Fluoroketone (hot) ( ) Fluoroketone (cold) ( ) Lithium brine ( )"
  },
  {
    "type": "wiki",
    "name": "Iron stick",
    "content": "(hot) ( ) Fluoroketone (cold) ( ) Lithium brine ( ) Plasma ( ) Resources Wood Coal Stone Iron ore Copper ore Uranium ore Raw fish Ice ( ) Materials Iron plate Copper plate Steel plate Solid fuel Plastic bar Sulfur Battery Explosives Carbon ( ) Coal synthesis ( ) Crafting components Iron gear wheel Iron stick Copper cable Barrel Electronic circuit Advanced circuit Processing unit Engine unit Electric engine unit Flying robot frame Low density structure Rocket fuel Rocket part Uranium processing Uranium-235"
  },
  {
    "type": "wiki",
    "name": "Iron stick",
    "content": "Rocket fuel Rocket part Uranium processing Uranium-235 Uranium-238 Uranium fuel cell Depleted uranium fuel cell Nuclear fuel Uranium processing Nuclear fuel reprocessing Kovarex enrichment process Vulcanus Calcite Tungsten ore Tungsten carbide Tungsten plate Fulgora Scrap Holmium ore Holmium plate Superconductor Supercapacitor Gleba Yumako seed Jellynut seed Tree seed Yumako Jellynut Iron bacteria Copper bacteria Spoilage Nutrients Bioflux Yumako mash Jelly Carbon fiber Biter egg Pentapod egg Aquilo"
  },
  {
    "type": "wiki",
    "name": "Iron stick",
    "content": "Yumako mash Jelly Carbon fiber Biter egg Pentapod egg Aquilo Lithium Lithium plate Quantum processor Fusion power cell Science packs Automation science pack Logistic science pack Military science pack Chemical science pack Production science pack Utility science pack Space science pack Metallurgic science pack ( ) Electromagnetic science pack ( ) Agricultural science pack ( ) Cryogenic science pack ( ) Promethium science pack ( ) Navigation Logistics Production Space ( ) Combat Technology Environment"
  },
  {
    "type": "wiki",
    "name": "Copper cable",
    "content": "Recipe | Time 0.5+Copper_plate 1 → Copper_cable 2 | Total raw | Time 0.5+Copper_plate 1 | Stack size 200 | Prototype type item | Internal name copper-cable | Required technologies | Electronics_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Advanced_circuitArithmetic_combinatorBeaconBig_electric_poleConstant_combinatorDecider_combinatorElectronic_circuitMedium_electric_polePower_switchProgrammable_speakerSmall_electric_poleLampSubstation |"
  },
  {
    "type": "wiki",
    "name": "Copper cable",
    "content": "| This article is about the intermediate product. For the tool for connecting electric poles, see copper wire . Copper cables are an intermediate product made from copper plates , or can be cast from a foundry . They are very important for manufacturing circuits and electrical connections. Alternative recipes Space Age expansion exclusive feature. Process Input Output Made in Required technology Casting copper cable 1 + 5 2 Foundry (research)"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "Barrels can be used to store and transport 50 units of various fluids. Since they are solid objects, they can be used as an alternative to pipes, once fluid handling is researched. The barrels themselves are reusable once the fluids are drained. Barrels stack in groups of 10. A single cargo wagon can hold 400 barrels, which gives a capacity of 20,000 units per cargo wagon – 30,000 fewer units than the capacity of a fluid wagon . Empty barrels have a rocket capacity of 200. Full barrels, regardless of fluid,"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "a rocket capacity of 200. Full barrels, regardless of fluid, have a rocket capacity of 100. As such, a single rocket can carry 5000 units of any fluid which can be barrelled. Contents 1 Empty barrels 2 Fill barrels 3 Example of use 4 Notes 5 History 6 See also Empty barrels Empty barrels can be crafted. When barrels are emptied, the (required) assembling machine will also return an empty barrel. Recipe: 1 + 1 → 1 Req. technology: Fluid handling Process Input Machine Output Empty crude oil barrel 1 0.2 or 1"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "Process Input Machine Output Empty crude oil barrel 1 0.2 or 1 + 50 Empty heavy oil barrel 1 0.2 or 1 + 50 Empty light oil barrel 1 0.2 or 1 + 50 Empty lubricant barrel 1 0.2 or 1 + 50 Empty petroleum gas barrel 1 0.2 or 1 + 50 Empty sulfuric acid barrel 1 0.2 or 1 + 50 Empty water barrel 1 0.2 or 1 + 50 Empty fluoroketone (hot) barrel 1 0.2 or 1 + 50 Empty fluoroketone (cold) barrel 1 0.2 or 1 + 50 Fill barrels Filled barrels cannot be crafted. They are filled using the respective fluids 's Fill barrel"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "They are filled using the respective fluids 's Fill barrel process which consumes empty barrels. Process Input Machine Output Fill crude oil barrel 1 50 0.2 or 1 Fill heavy oil barrel 1 50 0.2 or 1 Fill light oil barrel 1 50 0.2 or 1 Fill lubricant barrel 1 50 0.2 or 1 Fill petroleum gas barrel 1 50 0.2 or 1 Fill sulfuric acid barrel 1 50 0.2 or 1 Fill water barrel 1 50 0.2 or 1 Fill fluoroketone (hot) barrel 1 50 0.2 or 1 Fill fluoroketone (cold) barrel 1 50 0.2 or 1 Example of use Barrels are useful in"
  },
  {
    "type": "wiki",
    "name": "Barrel",
    "content": "barrel 1 50 0.2 or 1 Example of use Barrels are useful in situations where pipes are not available or a bad option, such as oil production far away from your main factory, or when transporting fluids to another planet in Space Age . Barrels can be transported with a belt transport system or railway , by logistic robots , via car or tank , or in the player 's inventory. A simple example with transport belts : Notes Barrel filling and emptying recipes cannot accept productivity modules or quality modules ."
  },
  {
    "type": "wiki",
    "name": "Electronic circuit",
    "content": "Recipe | Time 0.5+Copper_cable 3+Iron_plate 1 → Electronic_circuit 1 | Total raw | Time 1.25+Copper_plate 1.5+Iron_plate 1 | Stack size 200 | Prototype type item | Internal name electronic-circuit | Required technologies | Electronics_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Active_provider_chestAdvanced_circuitArithmetic_combinatorAssembling_machine_1 Assembling_machine_2"
  },
  {
    "type": "wiki",
    "name": "Electronic circuit",
    "content": "BeaconBuffer_chestBulk_inserterChemical_plantConstant_combinatorConstruction_robotDecider_combinatorDefender_capsuleDisplay_panelEfficiency_moduleElectric_engine_unitElectric_mining_drillFast_inserterFast_splitterFlying_robot_frameGateInserterLabLaser_turretLocomotiveOil_refineryPassive_provider_chestPoison_capsulePower_switchProcessing_unitProductivity_moduleProgrammable_speakerPumpjackRadarRail_chain_signalRail_signalRepair_packRequester_chestRocket_launcherSlowdown_capsuleLampSolar_panelSpeed_moduleSpli"
  },
  {
    "type": "wiki",
    "name": "Electronic circuit",
    "content": "stRocket_launcherSlowdown_capsuleLampSolar_panelSpeed_moduleSplitterStorage_chestTrain_stop"
  },
  {
    "type": "wiki",
    "name": "Electronic circuit",
    "content": "| The electronic circuit (or \"green circuit\") is a basic intermediate product, widely used throughout the game. The electronic circuit is the first in a line of circuit-type intermediate products. Electronic circuits are used as an ingredient for many item recipes, including creation of all kinds of inserters , and most production machines such as assemblers , solar panels and electric mining drills . Certain other logistic devices will also need electronic circuits to be created, such as rail signalling"
  },
  {
    "type": "wiki",
    "name": "Electronic circuit",
    "content": "need electronic circuits to be created, such as rail signalling equipment. The logistic network is also incredibly dependent on products constructed with these circuits. Electronic circuits need to be made in order to produce the upgraded variants of circuit such as the advanced circuits and processing units . Combined together, these circuits can also make modules . The ratios of assembling machines of the same tier to craft this item are: Normal mode 3 Copper cable assembling machines → 2 Electronic"
  },
  {
    "type": "wiki",
    "name": "Electronic circuit",
    "content": "Normal mode 3 Copper cable assembling machines → 2 Electronic circuit assembling machines Expensive mode 4 Copper cable assembling machines → 1 Electronic circuit assembling machine Achievements Mass production 1 Produce 10k electronic circuits . Mass production 2 Produce 1M electronic circuits . Mass production 3 Produce 20M electronic circuits . Intermediate products Fluids Water Steam Crude oil Heavy oil Light oil Lubricant Petroleum gas Sulfuric acid Thruster fuel ( ) Thruster oxidizer ( ) Lava ( )"
  },
  {
    "type": "wiki",
    "name": "Electronic circuit",
    "content": "Sulfuric acid Thruster fuel ( ) Thruster oxidizer ( ) Lava ( ) Molten iron ( ) Molten copper ( ) Holmium solution ( ) Electrolyte ( ) Ammoniacal solution ( ) Ammonia ( ) Fluorine ( ) Fluoroketone (hot) ( ) Fluoroketone (cold) ( ) Lithium brine ( ) Plasma ( ) Resources Wood Coal Stone Iron ore Copper ore Uranium ore Raw fish Ice ( ) Materials Iron plate Copper plate Steel plate Solid fuel Plastic bar Sulfur Battery Explosives Carbon ( ) Coal synthesis ( ) Crafting components Iron gear wheel Iron stick"
  },
  {
    "type": "wiki",
    "name": "Electronic circuit",
    "content": "synthesis ( ) Crafting components Iron gear wheel Iron stick Copper cable Barrel Electronic circuit Advanced circuit Processing unit Engine unit Electric engine unit Flying robot frame Low density structure Rocket fuel Rocket part Uranium processing Uranium-235 Uranium-238 Uranium fuel cell Depleted uranium fuel cell Nuclear fuel Uranium processing Nuclear fuel reprocessing Kovarex enrichment process Vulcanus Calcite Tungsten ore Tungsten carbide Tungsten plate Fulgora Scrap Holmium ore Holmium plate"
  },
  {
    "type": "wiki",
    "name": "Electronic circuit",
    "content": "carbide Tungsten plate Fulgora Scrap Holmium ore Holmium plate Superconductor Supercapacitor Gleba Yumako seed Jellynut seed Tree seed Yumako Jellynut Iron bacteria Copper bacteria Spoilage Nutrients Bioflux Yumako mash Jelly Carbon fiber Biter egg Pentapod egg Aquilo Lithium Lithium plate Quantum processor Fusion power cell Science packs Automation science pack Logistic science pack Military science pack Chemical science pack Production science pack Utility science pack Space science pack Metallurgic"
  },
  {
    "type": "wiki",
    "name": "Electronic circuit",
    "content": "pack Utility science pack Space science pack Metallurgic science pack ( ) Electromagnetic science pack ( ) Agricultural science pack ( ) Cryogenic science pack ( ) Promethium science pack ( ) Navigation Logistics Production Space ( ) Combat Technology Environment"
  },
  {
    "type": "wiki",
    "name": "Advanced circuit",
    "content": "Recipe | Time 6+Copper_cable 4+Electronic_circuit 2+Plastic_bar 2 → Advanced_circuit 1 | Total raw | Time 9.5+Copper_plate 5+Iron_plate 2+Plastic_bar 2 | Stack size 200 | Prototype type item | Internal name advanced-circuit | Required technologies | Advanced_circuit_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by |"
  },
  {
    "type": "wiki",
    "name": "Advanced circuit",
    "content": "Assembling_machine_3 Crafting | Consumed by | Active_provider_chestArtillery_turretArtillery_wagonBeaconBelt_immunity_equipmentBuffer_chestBulk_inserterCentrifugeChemical_science_packDistractor_capsuleEfficiency_moduleEfficiency_module_2 Efficiency_module_3 Electric_furnaceEnergy_shieldExpress_splitterLogistic_robotModular_armorNightvisionNuclear_reactorPassive_provider_chestPersonal_roboportProcessing_unitProductivity_moduleProductivity_module_2 Productivity_module_3"
  },
  {
    "type": "wiki",
    "name": "Advanced circuit",
    "content": "Productivity_module_3 Requester_chestRoboportSelector_combinatorPortable_solar_panelSpeed_moduleSpeed_module_2 Speed_module_3 Storage_chestSubstationTank | Advanced circuits (or \"red circuits\") are used as components in most high-tech items, most notably in chemical science packs , but also logistics robot items, modules, and equipment. They require an oil processing setup as they are produced using plastic bars . Advanced circuits are slower to build than most other intermediate components, require three"
  },
  {
    "type": "wiki",
    "name": "Advanced circuit",
    "content": "to build than most other intermediate components, require three inputs, and are in high demand. As an example of the demand, a finished productivity module 3 requires a total of 190 advanced circuits. Due to their slow build time, assembling machine 3s with speed modules may be useful in their production. Achievements Circuit veteran 1 Produce 1.0k advanced circuits per hour. Circuit veteran 2 Produce 10k advanced circuits per hour. Circuit veteran 3 Produce 25k advanced circuits per hour. Ratio The"
  },
  {
    "type": "wiki",
    "name": "Advanced circuit",
    "content": "veteran 3 Produce 25k advanced circuits per hour. Ratio The following shows the minimum ratio of assemblers/machines and items required to produce advanced circuits such that all number of assemblers are whole numbers. Items per min is calculated using assembling machine 3 with no modules or beacons and all assemblers running at full speed. The crafting of some intermediate products are not shown (due to the assumption that these items are available in large quantities within the factory). This table was"
  },
  {
    "type": "wiki",
    "name": "Advanced circuit",
    "content": "in large quantities within the factory). This table was produced using normal recipe difficulty. Items/min 75 using 6 300 using 1 150 using 1 150 using 1.25 Intermediate products Fluids Water Steam Crude oil Heavy oil Light oil Lubricant Petroleum gas Sulfuric acid Thruster fuel ( ) Thruster oxidizer ( ) Lava ( ) Molten iron ( ) Molten copper ( ) Holmium solution ( ) Electrolyte ( ) Ammoniacal solution ( ) Ammonia ( ) Fluorine ( ) Fluoroketone (hot) ( ) Fluoroketone (cold) ( ) Lithium brine ( ) Plasma ( )"
  },
  {
    "type": "wiki",
    "name": "Advanced circuit",
    "content": "(hot) ( ) Fluoroketone (cold) ( ) Lithium brine ( ) Plasma ( ) Resources Wood Coal Stone Iron ore Copper ore Uranium ore Raw fish Ice ( ) Materials Iron plate Copper plate Steel plate Solid fuel Plastic bar Sulfur Battery Explosives Carbon ( ) Coal synthesis ( ) Crafting components Iron gear wheel Iron stick Copper cable Barrel Electronic circuit Advanced circuit Processing unit Engine unit Electric engine unit Flying robot frame Low density structure Rocket fuel Rocket part Uranium processing Uranium-235"
  },
  {
    "type": "wiki",
    "name": "Advanced circuit",
    "content": "Rocket fuel Rocket part Uranium processing Uranium-235 Uranium-238 Uranium fuel cell Depleted uranium fuel cell Nuclear fuel Uranium processing Nuclear fuel reprocessing Kovarex enrichment process Vulcanus Calcite Tungsten ore Tungsten carbide Tungsten plate Fulgora Scrap Holmium ore Holmium plate Superconductor Supercapacitor Gleba Yumako seed Jellynut seed Tree seed Yumako Jellynut Iron bacteria Copper bacteria Spoilage Nutrients Bioflux Yumako mash Jelly Carbon fiber Biter egg Pentapod egg Aquilo"
  },
  {
    "type": "wiki",
    "name": "Advanced circuit",
    "content": "Yumako mash Jelly Carbon fiber Biter egg Pentapod egg Aquilo Lithium Lithium plate Quantum processor Fusion power cell Science packs Automation science pack Logistic science pack Military science pack Chemical science pack Production science pack Utility science pack Space science pack Metallurgic science pack ( ) Electromagnetic science pack ( ) Agricultural science pack ( ) Cryogenic science pack ( ) Promethium science pack ( ) Navigation Logistics Production Space ( ) Combat Technology Environment"
  },
  {
    "type": "wiki",
    "name": "Processing unit",
    "content": "Recipe | Time 10+Advanced_circuit 2+Electronic_circuit 20+Sulfuric_acid 5 → Processing_unit 1 | Total raw | Time 54+Copper_plate 40+Iron_plate 24+Plastic_bar 4+Sulfuric_acid 5 | Stack size 100 | Prototype type item | Internal name processing-unit | Required technologies | Processing_unit_(research) | Produced by | Assembling_machine_2 Assembling_machine_3 | Consumed by | Atomic_bombCargo_landing_padDischarge_defenseEfficiency_module_2 Efficiency_module_3 Energy_shield_MK 2"
  },
  {
    "type": "wiki",
    "name": "Processing unit",
    "content": "Efficiency_module_3 Energy_shield_MK 2 ExoskeletonPortable_fission_reactorPersonal_battery_MK 2 Personal_laser_defensePersonal_roboport_MK 2 Power_armorPower_armor_MK 2 Productivity_module_2 Productivity_module_3 Rocket_partRocket_siloSatelliteSpeed_module_2 Speed_module_3 SpidertronUtility_science_pack | The Processing Unit (or \"blue circuit\") is the third tier of circuit, and is used in many late game recipes, mainly for making utility science packs , modules , modular armor and its equipment, the rocket"
  },
  {
    "type": "wiki",
    "name": "Processing unit",
    "content": "packs , modules , modular armor and its equipment, the rocket silo and parts for the rocket. Alike the other components of rocket parts , Space Age adds infinite productivity tech Processing unit productivity (research) . Contents 1 Achievements 2 Ratio 3 History 4 See also Achievements Computer age 1 Produce 500 processing units per hour. Computer age 2 Produce 1.0k processing units per hour. Computer age 3 Produce 5k processing units per hour. Ratio The following shows the minimum ratio of"
  },
  {
    "type": "wiki",
    "name": "Processing unit",
    "content": "units per hour. Ratio The following shows the minimum ratio of assemblers/machines and items required to produce processing units such that all number of assemblers are whole numbers. Items per min is calculated using assembling machine 3 with no modules or beacons and all assemblers running at full speed. The crafting of some intermediate products are not shown (due to the assumption that these items are available in large quantities within the factory). This table was produced using normal recipe"
  },
  {
    "type": "wiki",
    "name": "Processing unit",
    "content": "the factory). This table was produced using normal recipe difficulty. Items/min 37.5 using 5 75 using 6 150 using 1 750 using 5 187.5 using 0.0625"
  },
  {
    "type": "wiki",
    "name": "Engine unit",
    "content": "Recipe | Time 10+Iron_gear_wheel 1+Pipe 2+Steel_plate 1 → Engine_unit 1 | Total raw | Time 11.5+Iron_plate 4+Steel_plate 1 | Stack size 50 | Prototype type item | Internal name engine-unit | Required technologies | Engine_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 | Consumed by | Artillery_wagonCarChemical_science_packElectric_engine_unitFlamethrower_turretLocomotivePumpTank | An Engine unit is used for building various vehicles, such as trains and cars ."
  },
  {
    "type": "wiki",
    "name": "Engine unit",
    "content": "used for building various vehicles, such as trains and cars . Engine units must be built using an assembling machine , and cannot be made by hand. Optimized time/item usage: 2 pipe factories + 1 iron gear wheel factory → 20 engine unit factories."
  },
  {
    "type": "wiki",
    "name": "Electric engine unit",
    "content": "Recipe | Time 10+Electronic_circuit 2+Engine_unit 1+Lubricant 15 → Electric_engine_unit 1 | Total raw | Time 12.5+Copper_plate 3+Engine_unit 1+Iron_plate 2+Lubricant 15 | Stack size 50 | Prototype type item | Internal name electric-engine-unit | Required technologies | Electric_engine_(research) | Produced by | Assembling_machine_2 Assembling_machine_3 | Consumed by | ExoskeletonFlying_robot_framePower_armorPower_armor_MK 2 Rocket_silo | An Electric engine unit is the advanced counterpart of the engine unit"
  },
  {
    "type": "wiki",
    "name": "Electric engine unit",
    "content": "engine unit is the advanced counterpart of the engine unit , and is used in some higher end recipes. Note that lubricant requires a chemical plant to be created, and engine units require assembling machines , so electric engines cannot be built by hand from raw materials. Trivia Although the electric engine unit is clearly depicted as an electric motor, it is apparently just a lubricated combustion engine."
  },
  {
    "type": "wiki",
    "name": "Flying robot frame",
    "content": "Recipe | Time 20+Battery 2+Electric_engine_unit 1+Electronic_circuit 3+Steel_plate 1 → Flying_robot_frame 1 | Total raw | Time 23.75+Battery 2+Copper_plate 4.5+Electric_engine_unit 1+Iron_plate 3+Steel_plate 1 | Stack size 50 | Prototype type item | Internal name flying-robot-frame | Required technologies | Robotics_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Construction_robotLogistic_robotUtility_science_pack | The Flying robot frame"
  },
  {
    "type": "wiki",
    "name": "Flying robot frame",
    "content": "| The Flying robot frame is a high-end component used to build logistic and construction robots . Note that while the frame itself can be built by hand, many of its components and subcomponents cannot. Batteries require a chemical plant , and electric engine units use lubricant (from another chemical plant) and engine units (which require assembling machines )."
  },
  {
    "type": "wiki",
    "name": "Low density structure",
    "content": "Recipe | Time 15+Copper_plate 20+Plastic_bar 5+Steel_plate 2 → Low_density_structure 1 | Total raw | Time 15+Copper_plate 20+Plastic_bar 5+Steel_plate 2 | Stack size 50 | Prototype type item | Internal name low-density-structure | Required technologies | Low_density_structure_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Personal_battery_MK 2 Energy_shield_MK 2 Portable_fission_reactorPersonal_laser_defensePersonal_roboport_MK 2"
  },
  {
    "type": "wiki",
    "name": "Low density structure",
    "content": "2 Power_armor_MK 2 Rocket_partSatelliteSpidertronUtility_science_pack | The low density structure is used in the production of modular armor & equipment , utility science packs , and orbital rockets. Contents 1 Alternative recipes 2 Rocket 2.1 Space Age 3 History 4 See also Alternative recipes Space Age expansion exclusive feature. Process Input Output Made in Required technology Casting low density structure 15 + 5 + 80 + 250 1 Foundry (research) Rocket In the base game, 10 low density structures are"
  },
  {
    "type": "wiki",
    "name": "Low density structure",
    "content": "Rocket In the base game, 10 low density structures are required for each rocket part , so 1000 low density structures are required for each completed rocket launch. Additionally 100 low density structures are required for each satellite . Space Age Space Age expansion exclusive feature. In Space Age, 1 low density structure is required for each rocket part, so 50 low density structures are required for each completed rocket launch. Also, Space Age introduces low density structure productivity (research)"
  },
  {
    "type": "wiki",
    "name": "Low density structure",
    "content": "Age introduces low density structure productivity (research) that adds a productivity bonus to any production of this item."
  },
  {
    "type": "wiki",
    "name": "Rocket fuel",
    "content": "Recipe | Time 15+Light_oil 10+Solid_fuel 10 → Rocket_fuel 1 | Total raw | Time 15+Light_oil 10+Solid_fuel 10 | Stack size 20 | Fuel value 100 MJ (Fuel) | Vehicle acceleration Quality 180%Quality 204%Quality 228%Quality 252%Quality 300% Quality 180% Quality 204% Quality 228% Quality 252% Quality 300% | Vehicle top speed Quality 115%Quality 119.5%Quality 124%Quality 128.5%Quality 137.5% Quality 115% Quality 119.5% Quality 124% Quality 128.5% Quality 137.5% | Prototype type item | Internal name rocket-fuel |"
  },
  {
    "type": "wiki",
    "name": "Rocket fuel",
    "content": "137.5% | Prototype type item | Internal name rocket-fuel | Required technologies | Rocket_fuel_(research) | Produced by | Assembling_machine_2 Assembling_machine_3 | Consumed by | Nuclear_fuelRocket_partSatellite | Used as fuel by | Burner_inserterBurner_mining_drillBoilerStone_furnaceSteel_furnaceLocomotiveCarTankHeating_tower | Used in the production of orbital rockets. It is the second-most long-lasting of all the fuel types, beat only by Nuclear fuel . Rocket fuel can also be used in burner devices to"
  },
  {
    "type": "wiki",
    "name": "Rocket fuel",
    "content": "fuel . Rocket fuel can also be used in burner devices to provide 100MJ of energy, however this is slightly less efficient than using 10 solid fuels unless extra products are created using productivity modules . Vanilla: 10 rocket fuel are required for each rocket part , so 1000 rocket fuel are needed for each rocket launch. Additionally 50 rocket fuel are required for each satellite . Space Age: 1 rocket fuel is required for 1 rocket parts, and 50 rocket parts are needed for a rocket launch. So 50 rocket"
  },
  {
    "type": "wiki",
    "name": "Rocket fuel",
    "content": "50 rocket parts are needed for a rocket launch. So 50 rocket fuel are needed for each rocket launch. Alternative recipes Space Age expansion exclusive feature. Process Input Output Made in Required technology Ammonia rocket fuel 10 + 50 + 500 + 10 1 Planet discovery Aquilo (research) Rocket fuel from jelly 10 + 2 + 30 + 30 1 Bioflux processing (research)"
  },
  {
    "type": "wiki",
    "name": "Rocket part",
    "content": "Recipe | Time 3+Low_density_structure 10+Processing_unit 10+Rocket_fuel 10 → Rocket_part 1 | Total raw | Time 153+Copper_plate 200+Plastic_bar 50+Processing_unit 10+Rocket_fuel 10+Steel_plate 20 | Stack size 5 | Prototype type item | Internal name rocket-part | Required technologies | Rocket_silo_(research) | Produced by | Rocket_silo | Rocket parts are items created by a rocket silo . They are stored within the silo itself; once enough rocket parts have been constructed, a rocket is built which can launch"
  },
  {
    "type": "wiki",
    "name": "Rocket part",
    "content": "parts have been constructed, a rocket is built which can launch materials into space. In vanilla, a rocket requires 100 rocket parts, while in Space Age it requires only 50. Space Age also adds the infinite productivity tech rocket part productivity (research) , which effectively makes rocket parts less expensive."
  },
  {
    "type": "wiki",
    "name": "Uranium-235",
    "content": "Recipe | Time 12+Uranium_ore 10 → Uranium-2350.007+Uranium-2380.993 | Total raw | Time 12+Uranium_ore 10 | Stack size 100 | Prototype type item | Internal name uranium-235 | Required technologies | Kovarex_enrichment_process_(research)Uranium_processing_(research) | Produced by | Centrifuge | Consumed by | Atomic_bombKovarex_enrichment_processNuclear_fuelUranium_fuel_cell | Uranium-235 is, along with uranium-238 , one of the refined products of uranium ore . It is used in the production of nuclear fuels and"
  },
  {
    "type": "wiki",
    "name": "Uranium-235",
    "content": "uranium ore . It is used in the production of nuclear fuels and the atomic bomb . Uranium-235 is produced through uranium processing in a centrifuge , or through the Kovarex enrichment process . Uranium-235 is much rarer than its counterpart, uranium-238. A centrifuge processing uranium ore will produce roughly 1 unit of uranium-235 for every 142 units of uranium-238, which requires about 1430 units of uranium ore, making it one of most expensive products in the game. Once 40 units have been amassed, it"
  },
  {
    "type": "wiki",
    "name": "Uranium-235",
    "content": "products in the game. Once 40 units have been amassed, it can be generated much more quickly through the Kovarex process."
  },
  {
    "type": "wiki",
    "name": "Uranium-238",
    "content": "Recipe | Time 12+Uranium_ore 10 → Uranium-2350.007+Uranium-2380.993 | Total raw | Time 12+Uranium_ore 10 | Stack size 100 | Prototype type item | Internal name uranium-238 | Required technologies | Kovarex_enrichment_process_(research)Nuclear_fuel_reprocessing_(research)Uranium_processing_(research) | Produced by | Centrifuge | Consumed by | Explosive_uranium_cannon_shellKovarex_enrichment_processUranium_cannon_shellUranium_fuel_cellUranium_rounds_magazine | Uranium-238 is, along with uranium-235 , one of"
  },
  {
    "type": "wiki",
    "name": "Uranium-238",
    "content": "| Uranium-238 is, along with uranium-235 , one of the refined products of uranium ore when the ore is processed through a centrifuge , or the Kovarex enrichment process . Uranium-238 is vastly more common than uranium-235, with a 99.3% chance of appearing after being processed. Both isotopes of uranium are the main ingredients for most components of nuclear power generation. Uranium-238 can also be extracted from used up uranium fuel cells using nuclear fuel reprocessing ."
  },
  {
    "type": "wiki",
    "name": "Uranium fuel cell",
    "content": "Recipe | Time 10+Iron_plate 10+Uranium-2351+Uranium-23819 → Uranium_fuel_cell 10 | Total raw | Time 10+Iron_plate 10+Uranium-2351+Uranium-23819 | Stack size 50 | Fuel value 8 GJ (Fuel) | Prototype type item | Internal name uranium-fuel-cell | Required technologies | Nuclear_power_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Portable_fission_reactor | Used as fuel by | Nuclear_reactor | The uranium fuel cell can be burned in a nuclear"
  },
  {
    "type": "wiki",
    "name": "Uranium fuel cell",
    "content": "| The uranium fuel cell can be burned in a nuclear reactor to produce heat, resulting in a depleted uranium fuel cell . As fuel cells are a nuclear fuel source, they are treated differently from other types of fuel and cannot be used in other burner devices or in vehicles . A fuel cell can run a single nuclear reactor for 200 seconds. Unlike with steam power, a uranium fuel cell will continue to burn no matter the power draw, so any heat energy not consumed is wasted."
  },
  {
    "type": "wiki",
    "name": "Depleted uranium fuel cell",
    "content": "Recipe | Time 200+Uranium_fuel_cell 1 → Depleted_uranium_fuel_cell 1 | Total raw | Time 200+Uranium_fuel_cell 1 | Stack size 50 | Prototype type item | Internal name depleted-uranium-fuel-cell | Produced by | Nuclear_reactor | Consumed by | Nuclear_fuel_reprocessing | A depleted uranium fuel cell is produced in nuclear reactors by burning a uranium fuel cell . It can be reprocessed into uranium-238 ."
  },
  {
    "type": "wiki",
    "name": "Nuclear fuel",
    "content": "Recipe | Time 90+Rocket_fuel 1+Uranium-2351 → Nuclear_fuel 1 | Total raw | Time 90+Rocket_fuel 1+Uranium-2351 | Stack size 1 | Fuel value 1.21 GJ (Fuel) | Vehicle acceleration Quality 250%Quality 295%Quality 340%Quality 385%Quality 475% Quality 250% Quality 295% Quality 340% Quality 385% Quality 475% | Vehicle top speed Quality 115%Quality 119.5%Quality 124%Quality 128.5%Quality 137.5% Quality 115% Quality 119.5% Quality 124% Quality 128.5% Quality 137.5% | Prototype type item | Internal name nuclear-fuel |"
  },
  {
    "type": "wiki",
    "name": "Nuclear fuel",
    "content": "137.5% | Prototype type item | Internal name nuclear-fuel | Required technologies | Kovarex_enrichment_process_(research) | Produced by | Centrifuge | Used as fuel by | Burner_inserterBurner_mining_drillBoilerStone_furnaceSteel_furnaceLocomotiveCarTankHeating_tower | Nuclear fuel is a type of fuel . It has the highest energy density and vehicle bonuses of all the fuel types, providing an acceleration modifier of 250% (compared to rocket fuel 's 180%). The vehicle top speed modifier (115%) is the same as"
  },
  {
    "type": "wiki",
    "name": "Nuclear fuel",
    "content": "'s 180%). The vehicle top speed modifier (115%) is the same as for rocket fuel. Nuclear fuel is made from rocket fuel and uranium-235 , one of each to produce one unit of nuclear fuel. Compared to rocket fuel, nuclear fuel not only gives a higher acceleration bonus, but also has more than twelve times the energy output per item. Despite its smaller Rocket capacity (10 vs 100), this gives nuclear fuel an advantage in Space Age when moving energy from a planet to a platform. However, due to the much smaller"
  },
  {
    "type": "wiki",
    "name": "Nuclear fuel",
    "content": "from a planet to a platform. However, due to the much smaller stack size (1 vs 20), it is less space-efficient. Trivia The fuel value of 1.21 GJ is a reference to the Back to the Future franchise, in which the DeLorean uses a nuclear reaction to generate \"1.21 Jigawatts\" of electricity. Ironically, Emmett Brown specifically refutes the idea that the DeLorean uses nuclear fuel; the energy of the reaction is used to power the flux capacitor that allows time travel, and in Part III he specifies the DeLorean's"
  },
  {
    "type": "wiki",
    "name": "Nuclear fuel",
    "content": "allows time travel, and in Part III he specifies the DeLorean's internal combustion engine has always run on ordinary gasoline."
  },
  {
    "type": "wiki",
    "name": "Uranium processing",
    "content": "Recipe | Time 12+Uranium_ore 10 → Uranium-2350.007+Uranium-2380.993 | Total raw | Time 12+Uranium_ore 10 | Prototype type recipe | Internal name uranium-processing | Required technologies | Uranium_processing_(research) | Produced by | Centrifuge | Uranium processing is the only way to use uranium ore and the first source of uranium-235 and uranium-238 that is available to the player . The process has a 99.3% chance to produce 1 uranium-238 and a 0.7% chance to produce 1 uranium-235. Contents 1 Initiating"
  },
  {
    "type": "wiki",
    "name": "Uranium processing",
    "content": "a 0.7% chance to produce 1 uranium-235. Contents 1 Initiating the Kovarex enrichment process 1.1 Expected value 1.2 Confidence levels 2 Trivia 3 History 4 See also Initiating the Kovarex enrichment process Unlike most other crafting processes, uranium processing creates U-235 and U-238 based on probability, rather than in guaranteed deterministic amounts. Additionally, the Kovarex process requires a bulk stockpile of 40 units of the rare uranium-235 isotope to initiate in a single centrifuge. Therefore,"
  },
  {
    "type": "wiki",
    "name": "Uranium processing",
    "content": "isotope to initiate in a single centrifuge. Therefore, planning uranium mining and processing for the Kovarex process takes certain considerations not encountered elsewhere in the game. Expected value As U-235 is created in centrifuges running uranium processing with p = 0.007 , the expected number of processing cycles to gain a single unit is E(1,p) = 1 ÷ p = ~143 . The expected number of cycles to gain 40 units is then E(40,p) = 40 × E(1,p) = ~5,714 cycles . Note that running this many cycles requires"
  },
  {
    "type": "wiki",
    "name": "Uranium processing",
    "content": "= ~5,714 cycles . Note that running this many cycles requires mining 57,140 uranium ore, a non-trivial task. However, given the nature of probability, it is impossible to guarantee that 40 units will be reached in this number of cycles; as a matter of fact, some mathematics yields that the probability that 5,714 cycles will produce at least 40 units of U-235 is only about 52%. As each cycle takes 12 seconds, it takes on average 12 * 143 = 1716 seconds to produce 1 U-235 (assuming no productivity or speed"
  },
  {
    "type": "wiki",
    "name": "Uranium processing",
    "content": "seconds to produce 1 U-235 (assuming no productivity or speed modules). This can be turned into 10 uranium fuel cells , each of which lasts 200 seconds, so in total 2000 seconds. That means one centrifuge constantly running can on average supply enough U-235 to produce enough fuel cells to continuously power one reactor. See Tutorial:Nuclear_power . The Kovarex enrichment process is a much more efficient way to produce U-235. Confidence levels Probability of reaching 40 U-235 from uranium processing by"
  },
  {
    "type": "wiki",
    "name": "Uranium processing",
    "content": "Probability of reaching 40 U-235 from uranium processing by number of cycles (click to enlarge) Some further mathematics enables one to calculate the number of uranium processing cycles one must run to obtain at least 40 units of U-235 (given p = 0.007 ) with a given level of confidence (probability of achieving the set goal). As discussed in the previous section, the level of confidence corresponding to 5,714 cycles (for which the expected value of U-235 gained is 40) happens to be about 52% (or, in other"
  },
  {
    "type": "wiki",
    "name": "Uranium processing",
    "content": "of U-235 gained is 40) happens to be about 52% (or, in other words, with this number of cycles, one can expect to fail to reach 40 U-235 a bit less than once out of every 2 tries). Some further example confidence levels that may be of interest to players are given in the table below. Consult the chart to the right for custom values. Confidence level Failures Cycles required 10% 9 out of 10 4,595 50% 1 out of 2 5,667 90% 1 out of 10 6,894 95% 1 out of 20 7,272 99% 1 out of 100 8,015 Trivia Excluding Space"
  },
  {
    "type": "wiki",
    "name": "Uranium processing",
    "content": "1 out of 20 7,272 99% 1 out of 100 8,015 Trivia Excluding Space Age-exclusive recipes, this is the only recipe in the base game to have random products."
  },
  {
    "type": "wiki",
    "name": "Nuclear fuel reprocessing",
    "content": "Recipe | Time 60+Depleted_uranium_fuel_cell 5 → Uranium-2383 | Total raw | Time 60+Depleted_uranium_fuel_cell 5 | Prototype type recipe | Internal name nuclear-fuel-reprocessing | Required technologies | Nuclear_fuel_reprocessing_(research) | Produced by | Centrifuge | Nuclear fuel reprocessing can be used to recycle used up uranium fuel cells into uranium-238 ."
  },
  {
    "type": "wiki",
    "name": "Kovarex enrichment process",
    "content": "Recipe | Time 60+Uranium-23540+Uranium-2385 → Uranium-23541+Uranium-2382 | Total raw | Time 60+Uranium-23540+Uranium-2385 | Prototype type recipe | Internal name kovarex-enrichment-process | Required technologies | Kovarex_enrichment_process_(research) | Produced by | Centrifuge | The Kovarex enrichment process is a method for reprocessing uranium in a centrifuge . Although the process requires a large amount of the much rarer uranium-235 to start, it can be a good way to get more use out of the available"
  },
  {
    "type": "wiki",
    "name": "Kovarex enrichment process",
    "content": "it can be a good way to get more use out of the available uranium ore . Contents 1 Purpose 2 Trivia 3 History 4 See also Purpose Uranium processing takes 10 uranium ore and returns 1 uranium-235 with 0.007 (0.7%) probability, or 1 uranium-238 with 0.993 (99.3%) probability, leading to an expected (though not guaranteed) 1 unit of uranium-235 per approximately 143 processing cycles (or about a 1:142 ratio of U-235 to U-238). This is currently the only probability-based crafting recipe in the base game."
  },
  {
    "type": "wiki",
    "name": "Kovarex enrichment process",
    "content": "the only probability-based crafting recipe in the base game. Uranium-235 is necessary to create uranium fuel cells and atomic bombs , in considerable quantities for the latter, but the probability distribution of uranium processing leads to it being produced slowly and creating large stockpiles of U-238 as a byproduct. The Kovarex process thus provides the player with a considerably faster (and deterministic) method of producing U-235, as well as a use for the surplus U-238. It should be noted that U-238"
  },
  {
    "type": "wiki",
    "name": "Kovarex enrichment process",
    "content": "as a use for the surplus U-238. It should be noted that U-238 is not useless; it is needed to manufacture uranium rounds magazines , uranium cannon shells , and explosive uranium cannon shells , and is required as a secondary ingredient in uranium fuel cells. Therefore, it is not advisable to use the Kovarex process to convert all stockpiled U-238 into U-235. (Although, in case of shortage, Used up uranium fuel cells can be reprocessed into a modest amount of U-238.) Trivia The Kovarex enrichment process"
  },
  {
    "type": "wiki",
    "name": "Kovarex enrichment process",
    "content": "modest amount of U-238.) Trivia The Kovarex enrichment process is named after Michal Kovařík , lead designer of Factorio and co-owner of Wube, whose online nick is kovarex (which he usually spells lowercase). [1] In the real world, uranium-235 is the most common fissile isotope of uranium and makes up approximately 0.72% of naturally-occurring uranium, with the other 99.28% being uranium-238 . The in-game representation is thus highly accurate in this regard. Uranium is commonly enriched in centrifuges by"
  },
  {
    "type": "wiki",
    "name": "Kovarex enrichment process",
    "content": "in this regard. Uranium is commonly enriched in centrifuges by merely separating isotopes to increase the percentage of U for use in fission reactions. As the Kovarex enrichment process produces more fissile material than its input, the process is more akin to plutonium breeding . Reddit discussion: Kovarex enrichment is plutonium breeding… right? Uranium munitions are made from depleted uranium , a byproduct of uranium enrichment, which is mostly U whose natural admixture of the U isotope has been lowered"
  },
  {
    "type": "wiki",
    "name": "Kovarex enrichment process",
    "content": "U whose natural admixture of the U isotope has been lowered even further through the enrichment process. Depleted uranium is minimally radioactive and the reason for its use in munitions is its very high density and other mechanical properties, not radioactivity/toxicity."
  },
  {
    "type": "wiki",
    "name": "Automation science pack",
    "content": "Recipe | Time 5+Copper_plate 1+Iron_gear_wheel 1 → Automation_science_pack 1 | Total raw | Time 5.5+Copper_plate 1+Iron_plate 2 | Used by labs for research. | Stack size 200 | Science capacity Quality 100%Quality 200%Quality 300%Quality 400%Quality 600% Quality 100% Quality 200% Quality 300% Quality 400% Quality 600% | Prototype type tool | Internal name automation-science-pack | Required technologies | Automation_science_pack_(research) | Produced by | Assembling_machine_1 Assembling_machine_2"
  },
  {
    "type": "wiki",
    "name": "Automation science pack",
    "content": "| Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Automation science pack (also referred to as \"red science\") is the first tier of science pack . It is used in labs to research technologies . Ratio The following shows the minimum ratio of assemblers/machines and items required to produce automation science packs such that all number of assemblers/machines are whole numbers. Items per minute is calculated using assembling machine 3 with no modules or beacons and all"
  },
  {
    "type": "wiki",
    "name": "Automation science pack",
    "content": "using assembling machine 3 with no modules or beacons and all assemblers running at full speed. The crafting of some intermediate products are not shown (due to the assumption that these items are available in large quantities within the factory). This table was produced using normal recipe difficulty. Items/min 150 using 10 150 150 using 1 300 Achievements Main article: Achievements Research with automation Research a technology using automation science packs ."
  },
  {
    "type": "wiki",
    "name": "Logistic science pack",
    "content": "Recipe | Time 6+Inserter 1+Transport_belt 1 → Logistic_science_pack 1 | Total raw | Time 8.75+Copper_plate 1.5+Iron_plate 5.5 | Used by labs for research. | Stack size 200 | Science capacity Quality 100%Quality 200%Quality 300%Quality 400%Quality 600% Quality 100% Quality 200% Quality 300% Quality 400% Quality 600% | Prototype type tool | Internal name logistic-science-pack | Required technologies | Logistic_science_pack_(research) | Produced by | Assembling_machine_1 Assembling_machine_2"
  },
  {
    "type": "wiki",
    "name": "Logistic science pack",
    "content": "| Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Logistic science pack (also referred to as \"green science\") is the second tier of science pack . It is used in labs to research technologies . Contents 1 Achievements 2 Ratio 3 History 4 See also Achievements Research with logistics Research a technology using logistic science packs . Ratio The following shows the minimum ratio of assemblers/machines and items required to produce logistic science packs such that all"
  },
  {
    "type": "wiki",
    "name": "Logistic science pack",
    "content": "items required to produce logistic science packs such that all number of assemblers/machines are whole numbers. Items per min is calculated using assembling machine 3 with no modules or beacons and all assemblers running at full speed. The crafting of some intermediate products are not shown (due to the assumption that these items are available in large quantities within the factory). This table was produced using normal recipe difficulty. Items/min 300 using 24 300 using 2 300 300 using 2 600 300 300"
  },
  {
    "type": "wiki",
    "name": "Logistic science pack",
    "content": "Items/min 300 using 24 300 using 2 300 300 using 2 600 300 300 using 1 150 150 using 1 300"
  },
  {
    "type": "wiki",
    "name": "Military science pack",
    "content": "Recipe | Time 10+Grenade 1+Piercing_rounds_magazine 1+Wall 2 → Military_science_pack 2 | Total raw | Time 23+Coal 10+Copper_plate 5+Iron_plate 9+Steel_plate 1+Stone_brick 10 | Used by labs for research. | Stack size 200 | Science capacity Quality 100%Quality 200%Quality 300%Quality 400%Quality 600% Quality 100% Quality 200% Quality 300% Quality 400% Quality 600% | Prototype type tool | Internal name military-science-pack | Required technologies | Military_science_pack_(research) | Produced by |"
  },
  {
    "type": "wiki",
    "name": "Military science pack",
    "content": "technologies | Military_science_pack_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The Military science pack is one of the four early game science packs , the other three being the automation science pack , the logistic science pack , and the chemical science pack . It is used for research that allows the player to advance their military strength through the entire game, unlocking more bullet choices, gun choices, turrets, etc. It is the only type of"
  },
  {
    "type": "wiki",
    "name": "Military science pack",
    "content": "choices, gun choices, turrets, etc. It is the only type of science pack that is optional, in that it is not required to launch a rocket. Contents 1 Achievements 2 Ratio 3 History 4 See also Achievements Research with military Research a technology using military science packs . Ratio The following shows the minimum ratio of assemblers/machines and items required to produce military science pack such that all number of assemblers/machines are whole numbers. Items per min is calculated using assembling"
  },
  {
    "type": "wiki",
    "name": "Military science pack",
    "content": "are whole numbers. Items per min is calculated using assembling machine 3 with no modules or beacons and all assemblers running at full speed. The crafting of some intermediate products are not shown (due to the assumption that these items are available in large quantities within the factory). This table was produced using normal recipe difficulty. Items/min 150 using 10 75 using 3 75 using 1 300 75 375 75 using 8 750 375 150 using 1 750"
  },
  {
    "type": "wiki",
    "name": "Chemical science pack",
    "content": "Recipe | Time 24+Advanced_circuit 3+Engine_unit 2+Sulfur 1 → Chemical_science_pack 2 | Total raw | Time 52.5+Copper_plate 15+Engine_unit 2+Iron_plate 6+Plastic_bar 6+Sulfur 1 | Stack size 200 | Science capacity Quality 100%Quality 200%Quality 300%Quality 400%Quality 600% Quality 100% Quality 200% Quality 300% Quality 400% Quality 600% | Prototype type tool | Internal name chemical-science-pack | Required technologies | Chemical_science_pack_(research) | Produced by | Assembling_machine_1"
  },
  {
    "type": "wiki",
    "name": "Chemical science pack",
    "content": "| Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Chemical science pack (also referred to as \"blue science\") is the third tier of science pack . It is used in labs to research advanced technologies . Contents 1 Achievements 2 Ratio 3 History 4 See also Achievements Research with chemicals Research a technology using chemical science packs . Ratio The following shows the minimum ratio of assemblers/machines and items required to produce chemical science packs such"
  },
  {
    "type": "wiki",
    "name": "Chemical science pack",
    "content": "and items required to produce chemical science packs such that all number of assemblers/machines are whole numbers. Items per min is calculated using assembling machine 3 with no modules or beacons and all assemblers running at full speed. The crafting of some intermediate products are not shown (due to the assumption that these items are available in large quantities within the factory). This table was produced using normal recipe difficulty. Items/min 1200 using 192 1800 1200 using 160 1200 1200 using 8"
  },
  {
    "type": "wiki",
    "name": "Chemical science pack",
    "content": "Items/min 1200 using 192 1800 1200 using 160 1200 1200 using 8 2400 2400 using 16 2400 600 using 5"
  },
  {
    "type": "wiki",
    "name": "Production science pack",
    "content": "Recipe | Time 21+Electric_furnace 1+Productivity_module 1+Rail 30 → Production_science_pack 3 | Total raw | Time 153.5+Copper_plate 57.5+Iron_plate 32.5+Plastic_bar 20+Steel_plate 25+Stone 15+Stone_brick 10 | Used by labs for research. | Stack size 200 | Science capacity Quality 100%Quality 200%Quality 300%Quality 400%Quality 600% Quality 100% Quality 200% Quality 300% Quality 400% Quality 600% | Prototype type tool | Internal name production-science-pack | Required technologies |"
  },
  {
    "type": "wiki",
    "name": "Production science pack",
    "content": "Internal name production-science-pack | Required technologies | Production_science_pack_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The Production science pack is one of the three late-game science packs in the base game, the other two being the utility science pack , and the space science pack . Contents 1 Achievements 2 Ratio 3 Raw Costs 4 History 5 See also Achievements Research with production Research a technology using production science packs"
  },
  {
    "type": "wiki",
    "name": "Production science pack",
    "content": "production Research a technology using production science packs . Ratio The following shows the minimum ratio of assemblers/machines and items required to produce production science pack such that all number of assemblers/machines are whole numbers. Items per min is calculated using assembling machine 3 with no modules or beacons and all assemblers running at full speed. The crafting of some intermediate products are not shown (due to the assumption that these items are available in large quantities within"
  },
  {
    "type": "wiki",
    "name": "Production science pack",
    "content": "that these items are available in large quantities within the factory). This table was produced using normal recipe difficulty. Items/min 450 using 42 150 using 10 1500 1500 750 4500 using 15 2250 2250 1125 2250 150 using 30 750 750 Raw Costs This section counts the total raw resource cost for a single science pack, excluding productivity, assuming both that Advanced oil processing is utilized and all oil products are cracked down into petroleum gas : 52.5 19.2 3.3 68.4 83.8 11.7"
  },
  {
    "type": "wiki",
    "name": "Utility science pack",
    "content": "Recipe | Time 21+Flying_robot_frame 1+Low_density_structure 3+Processing_unit 2 → Utility_science_pack 3 | Total raw | Time 89.75+Battery 2+Copper_plate 64.5+Electric_engine_unit 1+Iron_plate 3+Plastic_bar 15+Processing_unit 2+Steel_plate 7 | Used by labs for research. | Stack size 200 | Science capacity Quality 100%Quality 200%Quality 300%Quality 400%Quality 600% Quality 100% Quality 200% Quality 300% Quality 400% Quality 600% | Prototype type tool | Internal name utility-science-pack | Required"
  },
  {
    "type": "wiki",
    "name": "Utility science pack",
    "content": "type tool | Internal name utility-science-pack | Required technologies | Utility_science_pack_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The Utility science pack is one of three late-game science packs , the other two being the production science pack , and the space science pack . Contents 1 Achievements 2 Ratio 3 Raw Components 4 History 5 See also Achievements Research with utility Research a technology using utility science packs . Ratio The"
  },
  {
    "type": "wiki",
    "name": "Utility science pack",
    "content": "Research a technology using utility science packs . Ratio The following shows the minimum ratio of assemblers/machines and items required to produce utility science packs such that all number of assemblers/machines are whole numbers. Items per min is calculated using assembling machine 3 with no modules or beacons and all assemblers running at full speed. The crafting of some intermediate products are not shown (due to the assumption that these items are available in large quantities within the factory)."
  },
  {
    "type": "wiki",
    "name": "Utility science pack",
    "content": "items are available in large quantities within the factory). This table was produced using normal recipe difficulty. Items/min 225 using 21 75 using 20 150 using 10 150 150 3000 75 using 10 75 using 10 150 75 75 150 1125 225 75 225 using 60 450 4500 1125 150 Raw Components This section counts the total raw resource cost for a single science pack, excluding productivity, assuming that Advanced oil processing is utilized: 33.3 49.8 3.8 106.8 176.4"
  },
  {
    "type": "wiki",
    "name": "Space science pack",
    "content": "Used by labs for research. | Stack size 2000 | Science capacity Quality 100%Quality 200%Quality 300%Quality 400%Quality 600% Quality 100% Quality 200% Quality 300% Quality 400% Quality 600% | Space_AgeCrafted only on Space_platform | Prototype type tool | Internal name space-science-pack | Required technologies | Space_science_pack_(research) | Produced by | Rocket_silo | The space science pack is a science pack . It is used in labs to research technologies . Unlike the other science packs, the space"
  },
  {
    "type": "wiki",
    "name": "Space science pack",
    "content": "technologies . Unlike the other science packs, the space science pack has two different sources, depending if one is playing with Space Age or not. In the base game, space science is an end-game science pack and is not directly craftable. Instead, it is obtained by launching a rocket from a rocket silo equipped with a satellite . 1000 space science packs are delivered to the cargo landing pad each time a rocket with a satellite is launched. A cargo landing pad must be built somewhere on the map for a"
  },
  {
    "type": "wiki",
    "name": "Space science pack",
    "content": "A cargo landing pad must be built somewhere on the map for a rocket to launch. Space science packs are used in all infinite technologies . In Space Age, space science is a mid-game science pack. It must be crafted on a space platform , from ingredients which are harvested by an asteroid collector somewhere on the platform, then crushed by crushers , and (in the case of iron ore) smelted by furnaces . (Wiki usage tip: to see the recipe, click on the \"Space Age mod\" tab in the infobox to the right.) Space"
  },
  {
    "type": "wiki",
    "name": "Space science pack",
    "content": "on the \"Space Age mod\" tab in the infobox to the right.) Space science packs are needed for all subsequent technologies. Contents 1 Achievements 2 Costs 2.1 Total raw costs 3 Trivia 4 History 5 See also Achievements Research with space Research a technology using space science packs . Costs The following shows the minimum items required to produce 1000 space science packs in the base game. It is calculated using a single rocket silo with no modules or beacons. The crafting of some intermediate products is"
  },
  {
    "type": "wiki",
    "name": "Space science pack",
    "content": "or beacons. The crafting of some intermediate products is not shown (due to the assumption that these items are available in large quantities within the factory). 1 rocket and satellite cost giving 1000 packs 100 1k 1k 1k 1 100 100 100 5 100 50 Total raw costs Recipe per 1000 packs Recipe per 1 pack 28725 28.7 69288 69.3 2700 2.7 9900 9.9 10500 10.5 15500 15.5 Trivia Prior to 2.0 , space science could be launched in the rocket silo , which would return raw fish at a 1:1 ratio, up to a maximum of 100 fish"
  },
  {
    "type": "wiki",
    "name": "Space science pack",
    "content": "return raw fish at a 1:1 ratio, up to a maximum of 100 fish per launch. According to DoshDoshington, on the LAN space science needed enriched uranium"
  },
  {
    "type": "wiki",
    "name": "Rocket silo",
    "content": "Recipe | Time 30+Concrete 1 k+Electric_engine_unit 200+Pipe 100+Processing_unit 200+Steel_plate 1 k → Rocket_silo 1 | Total raw | Time 80+Concrete 1 k+Electric_engine_unit 200+Iron_plate 100+Processing_unit 200+Steel_plate 1 k | Resistances Fire: 0/60%Impact: 0/60% | Stack size 1 | Dimensions 9×9 | Energy consumption 4.0 MW (Electric_system) | Crafting speed Quality 1 Quality 1.3 Quality 1.6 Quality 1.9 Quality 2.5 Quality 1 Quality 1.3 Quality 1.6 Quality 1.9 Quality 2.5 | Mining time 1 | Module slots 4"
  },
  {
    "type": "wiki",
    "name": "Rocket silo",
    "content": "1.6 Quality 1.9 Quality 2.5 | Mining time 1 | Module slots 4 slots | Prototype type rocket-silo | Internal name rocket-silo | Required technologies | Rocket_silo_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The rocket silo is an important production building that serves as the sole win condition and a source of space science packs in the base game. In Space Age , it is instead the only way to launch items and the player off Nauvis to orbiting space"
  },
  {
    "type": "wiki",
    "name": "Rocket silo",
    "content": "way to launch items and the player off Nauvis to orbiting space platforms to visit the neighboring planets of Vulcanus , Fulgora , Gleba , and Aquilo . Building a silo requires, among other things, electric engine units , processing units , and concrete , which all must be produced in assembling machines or foundries and cannot be crafted by hand from raw materials. The rocket itself can only be produced in the silo. Once the silo has been built and placed it can be filled with processing units , low"
  },
  {
    "type": "wiki",
    "name": "Rocket silo",
    "content": "built and placed it can be filled with processing units , low density structure , and rocket fuel , which will create rocket parts within the silo. 100 rocket parts are needed to construct a rocket (50 parts in Space Age ). The silo accepts productivity modules , and due to the high resource cost of rockets, silos are a prime candidate for their use. Once constructed, the rocket will rise into position and can be launched. It is required to place a cargo landing pad somewhere on the planet in order to"
  },
  {
    "type": "wiki",
    "name": "Rocket silo",
    "content": "place a cargo landing pad somewhere on the planet in order to launch a rocket. Once a rocket has been constructed, the silo will continue to craft a second rocket within the silo. If both are constructed, once the first rocket has been launched, the second will rise into place without the silo going through its normal animation of closing and reopening its doors. This is particularly useful in Space Age when crafting speeds are faster and rockets are in increased demand. Contents 1 Base game 2 Space Age"
  },
  {
    "type": "wiki",
    "name": "Rocket silo",
    "content": "are in increased demand. Contents 1 Base game 2 Space Age 2.1 Basics 2.2 Rocket capacity 2.3 Orbital requests 3 Maximum throughput 3.1 Working 3.2 Preparing rocket for launch 3.3 Waiting to launch rocket 3.4 Launching rocket 3.5 Reset 3.6 Conclusions 3.7 Space Age 4 Achievements 5 Trivia 6 Gallery 7 History 8 See also Base game The rocket silo is unlocked with its respective technology using all science packs except for military. It requires 10 low density structure, rocket fuel, and processing units to"
  },
  {
    "type": "wiki",
    "name": "Rocket silo",
    "content": "10 low density structure, rocket fuel, and processing units to make 1 rocket part , for a total of 1,000 of each for a single rocket. Before a rocket can be launched, the player must place a cargo landing pad somewhere on the planet. The landing pad can be anywhere on the planet, with no restrictions on distance from the silo, but only one can be placed. Launching a rocket requires a payload and launching one for the first time will trigger the victory screen, which thanks the player for playing and"
  },
  {
    "type": "wiki",
    "name": "Rocket silo",
    "content": "the victory screen, which thanks the player for playing and invites them to keep growing their factory, with the options of exiting the game, viewing the credits, or continuing the game. The rocket can be launched manually by clicking the \"Launch\" button. Checking the \"Send to orbit automatically\" checkbox will make the rocket launch automatically once it has a payload. Only two items can be used as a payload. The first is a satellite ; launching a rocket with one of these will return a shipment of 1,000"
  },
  {
    "type": "wiki",
    "name": "Rocket silo",
    "content": "a rocket with one of these will return a shipment of 1,000 space science packs to the cargo landing pad roughly 29 seconds after the launch is triggered. The second is a... Spoiler! Click to view. Raw fish : Grants the \"So long and thanks for all the fish!\" achievement. Other than this, it also wastes the launch. Space Age Space Age expansion exclusive feature. Basics In Space Age, the silo is unlocked far earlier in the game, requiring 1,000 of only automation , logistics and chemical science packs. The"
  },
  {
    "type": "wiki",
    "name": "Rocket silo",
    "content": "of only automation , logistics and chemical science packs. The silo is a critical building for transporting items and the player offplanet to orbiting space platforms . Rockets are built identically to the base game, except that a single rocket part takes only 1 of each material instead of 10 and only 50 rocket parts are required per rocket. This means that a single rocket requires only 50 of each resource. The silo greatly benefits from higher quality productivity modules as well as the rocket part"
  },
  {
    "type": "wiki",
    "name": "Rocket silo",
    "content": "higher quality productivity modules as well as the rocket part productivity infinite technology, both of which can reduce the cost of rockets even further. The rocket can be manually launched in one of three ways: Deliver cargo: launch with a payload of any size or composition at any orbiting platform New platform: if the silo contains exactly one space platform starter pack , clicking this will open the map and invite the player to enter a name for the new platform. Travel to platform: the rocket will"
  },
  {
    "type": "wiki",
    "name": "Rocket silo",
    "content": "name for the new platform. Travel to platform: the rocket will launch to any orbiting platform with the player as its sole payload. The player can bring any equipped armor , their installed modules, and any weapons, but no ammo for those weapons. The rocket silo's GUI in Space Age Rocket capacity Unlike in the base game, a space age rocket can accept nearly every item in the game as a payload. This is expressed by the silo as a weight limit. Every item in the game has a rocket capacity which is the maximum"
  },
  {
    "type": "wiki",
    "name": "Rocket silo",
    "content": "item in the game has a rocket capacity which is the maximum number of items that can fit in a single rocket. An item's rocket capacity can be read by the circuit network by feeding an item into the selector combinator and choosing the respective mode of operation. As a general rule of thumb, the more complex the item, the fewer can fit within a rocket. Some items, like the rocket silo itself and the atomic bomb , are too heavy for rockets, and so the raw materials must be shipped to orbit individually and"
  },
  {
    "type": "wiki",
    "name": "Rocket silo",
    "content": "so the raw materials must be shipped to orbit individually and assembled on the destination planet. Fluids cannot be put in rockets, but full barrels can. Some fluids cannot be barreled, so they cannot be transported by rocket. This is notably the case for all the fluids that can only be obtained on Fulgora and Aquilo , except for fluoroketone . Orbital requests The rocket silo can detect requests from any space platform in orbit around the current planet. These can be satisfied in two ways. If \"Automatic"
  },
  {
    "type": "wiki",
    "name": "Rocket silo",
    "content": "planet. These can be satisfied in two ways. If \"Automatic requests from space platforms\" is not selected, the silo acts as a large container. Items can be inserted and removed with inserters . If the silo receives a full rocket of a single item that is requested, the rocket will automatically launch to the platform requesting that item, even if the payload is more than what is being requested. If multiple platforms are requesting the same item, the rocket will prioritize the earliest platform that the"
  },
  {
    "type": "wiki",
    "name": "Rocket silo",
    "content": "item, the rocket will prioritize the earliest platform that the player created. If automatic requests is selected, the silo acts similar to a requester chest . Logistic robots will fill the silo automatically from the logistic network (including from buffer chests ), and the rocket will launch automatically when full, unless the requesting platform has set a minimum payload to a lower amount than a full load. If there are items in the rocket inventory when this box is selected, those items will be moved to"
  },
  {
    "type": "wiki",
    "name": "Rocket silo",
    "content": "when this box is selected, those items will be moved to the silo's trash slots and be removed by logistics robots. Regardless of option selected, the rocket will only launch automatically when it contains at least one item. The silo can be connected to the circuit network , with two output functions. Output requests: Outputs the sum of requests from all orbiting platforms, if any. A request is considered satisfied and will be removed from the output the instant the rocket launch is triggered, not when the"
  },
  {
    "type": "wiki",
    "name": "Rocket silo",
    "content": "output the instant the rocket launch is triggered, not when the delivery to the platform actually happens. Output contents: Outputs the contents of the rocket silo. If automatic requests is selected, this option will do nothing. Maximum throughput In the base game, a fully moduled silo has +611% crafting speed from beacons and +40% productivity. Modules accelerate crafting time in the first phase, but have no effect on animations in the other phases. There are five phases to a rocket launch. Working Rocket"
  },
  {
    "type": "wiki",
    "name": "Rocket silo",
    "content": "There are five phases to a rocket launch. Working Rocket parts must be assembled in the silo before the rocket can be deployed. The best possible time to assemble 100 rocket parts, based on the rocket part recipe and the module effects, is 1250 ticks, or ~20.833 seconds. 1250 ticks elapsed. Preparing rocket for launch The rocket is brought up out of the silo so a payload can be inserted, if any. This animation lasts 890 ticks, or ~14.833 seconds. 2140 ticks elapsed. Waiting to launch rocket The payload"
  },
  {
    "type": "wiki",
    "name": "Rocket silo",
    "content": "2140 ticks elapsed. Waiting to launch rocket The payload must be inserted. One fast inserter arm swing to insert a Satellite is 14 ticks, or ~0.233 seconds. 2154 ticks elapsed. Launching rocket The rocket is launched with the payload. This phase ends when the result inventory appears inside the silo. 1162 ticks, or ~19.367 seconds. 3316 ticks elapsed. Reset The silo door must close before the cycle begins again. 368 ticks, or ~6.133 seconds. If a second rocket was buffered within the silo, this step is"
  },
  {
    "type": "wiki",
    "name": "Rocket silo",
    "content": "If a second rocket was buffered within the silo, this step is skipped. Conclusions Grand Total: 3684 ticks , which gives a total cycle time of ~61.417 seconds, including time spent building rocket parts and inserting the payload. With a build time of 1250 + 14, the delay from animations is 2420 ticks. [1] Space Age In Space Age, the rocket silo gained the ability to buffer a second rocket ready to load and launch [2] . If a second rocket is ready, then the rocket silo skips the door close/open animation."
  },
  {
    "type": "wiki",
    "name": "Rocket silo",
    "content": "then the rocket silo skips the door close/open animation. This results in a rocket launch approximately every 27 seconds, with sufficient speed and/or productivity bonuses (enough to get 111 rocket parts per minute). Achievements The rocket silo, which is used to win the base game, is directly connected to the following game-win-based achievements: Smoke me a kipper, I'll be back for breakfast Launch a rocket to space. No time for chitchat Launch a rocket to space within 15 hours. There is no spoon Launch"
  },
  {
    "type": "wiki",
    "name": "Rocket silo",
    "content": "a rocket to space within 15 hours. There is no spoon Launch a rocket to space within 8 hours. Raining bullets Launch a rocket to space without building any laser turrets . Steam all the way Launch a rocket to space without building any solar panels . Logistic network embargo Finish research with space science pack for the base game or any planetary science pack for Space Age without building any active provider , buffer , or requester chests . So long and thanks for all the fish Trivia Prior to version 2.0"
  },
  {
    "type": "wiki",
    "name": "Rocket silo",
    "content": "So long and thanks for all the fish Trivia Prior to version 2.0 , the rocket could accept any item as cargo; however, most did nothing in particular and simply wasted the launch. Notable exceptions included: Spoiler! Click to view. Vehicles : When a vehicle was inserted into the payload slot, the player could enter the rocket like they would any other vehicle, then launch and ride it. This allowed a fast-moving view of one's base (as the game world is internally 2-dimensional, the rocket actually simply"
  },
  {
    "type": "wiki",
    "name": "Rocket silo",
    "content": "world is internally 2-dimensional, the rocket actually simply moved north along the map), and then returned the player next to the launching silo once the launch animation had finished. If all space near the rocket silo is occupied, the player is placed at spawn instead. Wasted the launch, as the rocket's sole payload slot is occupied by the vehicle, rather than a satellite. (Having any number of satellites in the car's trunk or the \"astronaut\"s inventory does not count.) Space science pack : Returned one"
  },
  {
    "type": "wiki",
    "name": "Rocket silo",
    "content": "inventory does not count.) Space science pack : Returned one raw fish for every science pack that was launched, but no more than 100 raw fishes per launch."
  },
  {
    "type": "wiki",
    "name": "Cargo landing pad",
    "content": "Recipe | Time 30+Concrete 200+Processing_unit 10+Steel_plate 25 → Cargo_landing_pad 1 | Total raw | Time 30+Concrete 200+Processing_unit 10+Steel_plate 25 | Storage size 80 | Stack size 1 | Radar coverage distance Quality 4 Quality 5 Quality 6 Quality 7 Quality 9 Quality 4 Quality 5 Quality 6 Quality 7 Quality 9 | Dimensions 8×8 | Mining time 1 | Prototype type cargo-landing-pad | Internal name cargo-landing-pad | Required technologies | Rocket_silo_(research) | Produced by | Assembling_machine_1"
  },
  {
    "type": "wiki",
    "name": "Cargo landing pad",
    "content": "| Rocket_silo_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | This article is a stub , and not comprehensive. You can help this wiki by expanding it . The cargo landing pad is a large storage structure that is part of the logistic network . It acts as an 8×8 passive provider chest with a capacity of 80 slots. Only one can be placed on the surface at a time. Inserters can pull items out of it like any other container, but cannot insert into the landing"
  },
  {
    "type": "wiki",
    "name": "Cargo landing pad",
    "content": "it like any other container, but cannot insert into the landing pad. When the rocket silo sends a rocket with a satellite into space, the cargo landing pad will receive 1,000 space science packs . If the landing pad is full, the science will be deposited on the ground and marked for deconstruction. The science will be delivered to the landing pad regardless of its distance from the rocket silo. The landing pad can be connected to the circuit network to read its contents like other containers. Space Age In"
  },
  {
    "type": "wiki",
    "name": "Cargo landing pad",
    "content": "to read its contents like other containers. Space Age In Space Age , the cargo landing pad further acts as a hub for orbital deliveries. It acts as a requester chest for orbiting space platforms . Platforms that are stopped over the current planet may have their cargo dropped down to satisfy the landing pad's requests. The landing pad can only receive one stack of items at a time. Placing a cargo bay that is touching the landing pad next to at least one tile will increase the landing pad's inventory size"
  },
  {
    "type": "wiki",
    "name": "Cargo landing pad",
    "content": "least one tile will increase the landing pad's inventory size by 20 slots each (increasable with higher quality ) and increase the number of item stacks that can be dropped from the platform at once. If a landing pad's inventory is full, a platform will not drop any cargo until a slot is free. If the trash unrequested box is ticked, the landing pad will automatically move all items from its inventory that are not currently requested to its trash slots."
  },
  {
    "type": "wiki",
    "name": "Nauvis",
    "content": "This article is a stub , and not comprehensive. You can help this wiki by expanding it . Nauvis is the main setting of Factorio's base game, and the first of five planets that can be visited in Factorio: Space Age . It is an Earth-like planet featuring a variety of biomes, such as deserts, lakes of liquid water , and forests. Contents 1 Exclusive Items 2 Surface 2.1 Properties 2.2 Biomes 2.3 Natural Resources 3 Mechanics 3.1 Pollution 4 Space routes 5 Orbit 5.1 Properties 6 Trivia 7 History 7.1 See also"
  },
  {
    "type": "wiki",
    "name": "Nauvis",
    "content": "routes 5 Orbit 5.1 Properties 6 Trivia 7 History 7.1 See also Exclusive Items Raw fish Uranium ore The following items, buildings, and recipes are unlocked by Gleba 's Agricultural science pack Fish breeding can only be performed on Nauvis. Wood processing which yields tree seeds , can only be performed on Nauvis, making it the only place where wood is renewable. Biter egg Captive biter spawner Biter and spitter spawners can exist only on Nauvis Biolabs can only be placed on Nauvis. Surface Properties"
  },
  {
    "type": "wiki",
    "name": "Nauvis",
    "content": "Nauvis Biolabs can only be placed on Nauvis. Surface Properties Nauvis Surface Properties Property Value Pollutant Type Pollution Day Night Cycle 7 Minutes Magnetic Field 90 Solar Power 100% Pressure 1000 Gravity 10 Biomes Nauvis has a few distinct biomes: Grasslands features plains of green grass. Large parts of these are covered with trees . Sandy Desert has barren terrain, with a few dead trees scattered about. Red Desert Natural Resources The native raw resources on Nauvis are Iron ore , Copper ore ,"
  },
  {
    "type": "wiki",
    "name": "Nauvis",
    "content": "The native raw resources on Nauvis are Iron ore , Copper ore , Coal , Stone , Uranium ore , Crude oil , Water , Wood , and Raw fish . Among these, only water and crude oil are renewable with local research , as their sources do not run dry. Out of these nine resources, the first five are found in ore patches and harvested using a Burner mining drill , an Electric mining drill , or a Big mining drill . In addition, Uranium Ore requires a constant supply of Sulfuric acid in order for the drills to function"
  },
  {
    "type": "wiki",
    "name": "Nauvis",
    "content": "supply of Sulfuric acid in order for the drills to function and can't be mined using Burner mining drill. Water is harvested by placing an Offshore pump on the side of a lake. It will produce water indefinitely, as water does not run out. It requires no energy or fuel. Crude oil is harvested by placing a Pumpjack on an oil field. It requires energy to function. With continuous use, the same oil field will produce oil at a gradually slower rate, but this decrease in production will stop when production is"
  },
  {
    "type": "wiki",
    "name": "Nauvis",
    "content": "but this decrease in production will stop when production is at 20% of its initial value, making crude oil a renewable resource on Nauvis. Stone, coal, wood, and raw fish can be obtained by mining naturally spawning entities. (In case of stone and coal, this is in addition to being found in ore patches.) Mining a Rock will yield stone, and if it is \"huge\", it will also yield coal. Trees yield wood when mined. Finally, \"mining\" a fish (shown as a dark, moving spot in water) will yield the fish as five"
  },
  {
    "type": "wiki",
    "name": "Nauvis",
    "content": "as a dark, moving spot in water) will yield the fish as five items. Mechanics Pollution Main article: Pollution On Nauvis, many buildings produce pollution while active. This pollution is local to the chunk on which it is produced, but will spread to other chunks over time. It is consumed by Nauvis' natural environment, but if it reaches a spawner , it will provoke an attack from its biters / spitters . Space routes Space Age expansion exclusive feature. Nauvis is connected to 3 other planets: Vulcanus ,"
  },
  {
    "type": "wiki",
    "name": "Nauvis",
    "content": "feature. Nauvis is connected to 3 other planets: Vulcanus , Fulgora and Gleba . Planet Distance Planet Distance (KM) Fulgora 15,000 Gleba 15,000 Vulcanus 15,000 Asteroid rate graphs: Space route from Nauvis to Vulcanus Space route from Nauvis to Gleba Space route from Nauvis to Fulgora Graph legend: Asteroid type Chunk Medium Metallic ● Blue ● Red Carbonic ● Orange ● Yellow Oxide ● Green ● Magenta Orbit Space Age expansion exclusive feature. Properties Property Value Solar Power 300% Asteroid Spawning"
  },
  {
    "type": "wiki",
    "name": "Nauvis",
    "content": "Properties Property Value Solar Power 300% Asteroid Spawning Types Asteroid Type Spawn Ratio Metallic asteroid chunk 3 Carbonic asteroid chunk 2 Oxide asteroid chunk 1 Promethium asteroid chunk 0 Asteroid Spawning Sizes Asteroid Size Spawn % Chunk 1.25 Medium 0 Big 0 Huge 0 Note: Huge Asteroids only spawn past Aquilo Trivia The name of the planet \"Nauvis\" was known even prior to the announcement of Space Age, as it was already named within the modding API. History 2.0.7 : Total length of day and night"
  },
  {
    "type": "wiki",
    "name": "Nauvis",
    "content": "the modding API. History 2.0.7 : Total length of day and night cycle increased from 416.(6) seconds to 420. 0.1.0 : Introduced"
  },
  {
    "type": "wiki",
    "name": "Vulcanus",
    "content": "This article is a stub , and not comprehensive. You can help this wiki by expanding it . Space Age expansion exclusive feature. Vulcanus is a hot volcanic planet with mountainous volcanoes, rivers of lava, plains of ash, and sulfuric acid geysers. It is home to demolishers , a large boss‐like enemy that defends its territory. There's no pollution on Vulcanus. Planet discovery Vulcanus (research) is required to travel to the planet. Contents 1 Achievements 2 Exclusive recipes 3 Surface 3.1 Properties 4"
  },
  {
    "type": "wiki",
    "name": "Vulcanus",
    "content": "1 Achievements 2 Exclusive recipes 3 Surface 3.1 Properties 4 Biomes 5 Demolisher territories 6 Access to basic resources 6.1 Power production 7 Space routes 8 Orbit 8.1 Properties 9 Gallery 10 Trivia 11 History 12 See also Achievements Visit Vulcanus Travel to planet Vulcanus . Exclusive recipes The following recipes can only be crafted on Vulcanus: Metallurgic science pack Foundry Big mining drill Turbo transport belt Turbo underground belt Turbo splitter Acid neutralisation The following items and"
  },
  {
    "type": "wiki",
    "name": "Vulcanus",
    "content": "belt Turbo splitter Acid neutralisation The following items and recipes are unlocked on Vulcanus but can be crafted elsewhere: Artillery turret / Artillery wagon and Artillery shells Simple coal liquefaction and Coal liquefaction Cliff explosives Speed module 3 Asteroid reprocessing (research) Surface Properties Vulcanus Surface Properties Property Value Pollutant Type None Day Night Cycle 1.5 Minutes Magnetic Field 25 Solar Power 400% Pressure 4000 Gravity 40 Biomes Vulcanus has three distinct biomes."
  },
  {
    "type": "wiki",
    "name": "Vulcanus",
    "content": "4000 Gravity 40 Biomes Vulcanus has three distinct biomes. Ashlands are plateaus speckled with sparse vegetation and deposits of coal . They are home to leafless alien trees. They are relatively free of cliffs and lava, making them ideal for building. Lava basins are filled with winding lava rivers. Within them are deposits of tungsten ore , which can only be mined using the big mining drill. Mountains are large volcanoes, covered in cliffs and with a large lava pool at their center. They are home to"
  },
  {
    "type": "wiki",
    "name": "Vulcanus",
    "content": "and with a large lava pool at their center. They are home to sulfuric acid geysers and calcite . Demolisher territories Demolisher patrolling. Native to Vulcanus are the giant centipede-like enemies known as \" demolishers \". Demolishers have well-defined territories. On the map, these territories are outlined by an opaque, bright red line and the inside is marked by diagonal, translucent, red lines. Only one demolisher will spawn per territory, and the territories themselves do not overlap. However, they"
  },
  {
    "type": "wiki",
    "name": "Vulcanus",
    "content": "and the territories themselves do not overlap. However, they are tightly packed, as they follow a Voronoi-like pattern. At the start of the game, only Vulcanus' starting area is not inside a demolisher's territory. When left alone, a demolisher will patrol the border of its territory. However, if players build inside of a demolisher's territory, it will soon make a beeline towards these buildings with the intent of destroying them. Building inside of a demolisher's territory is therefore extremely risky"
  },
  {
    "type": "wiki",
    "name": "Vulcanus",
    "content": "inside of a demolisher's territory is therefore extremely risky and dangerous. The death of a demolisher is permanent, as they only spawn during world generation. Likewise, upon the death of a demolisher, its territory permanently becomes free for the player to use, as other demolishers will not try to expand their territories. Access to basic resources Water can be obtained via acid neutralisation and steam condensation Stone is a byproduct of processing lava into molten iron/copper. Iron ore is only"
  },
  {
    "type": "wiki",
    "name": "Vulcanus",
    "content": "of processing lava into molten iron/copper. Iron ore is only available in limited quantities from mining volcanic rock , but iron plate and concrete may be obtained from molten iron Copper ore is only available in limited quantities from mining volcanic rock , but copper plate may be obtained from molten copper . Coal can be mined from patches on the surface as normal. Crude oil is not available, but heavy oil can be obtained via simple coal liquefaction . Heavy oil can then be cracked into light oil and"
  },
  {
    "type": "wiki",
    "name": "Vulcanus",
    "content": "liquefaction . Heavy oil can then be cracked into light oil and petroleum. Once metallurgic science is produced and a stockpile of heavy oil built up, this can be switched to regular coal liquefaction . Wood cannot be obtained, but medium electric poles can be constructed using the small amount of ores available. Note that this can soft-lock players that did not unlock the research. Power production Solar panels on Vulcanus give 4× the power they would on Nauvis. Acid neutralization generates 500°C steam,"
  },
  {
    "type": "wiki",
    "name": "Vulcanus",
    "content": "would on Nauvis. Acid neutralization generates 500°C steam, which can be fed through steam turbines to generate electricity. The calcite processing technology does not actually give the player access to steam turbines, so steam engines can be used instead (which generate less power for the same steam). Space routes Vulcanus is connected to 2 other planets: Nauvis and Gleba . Planet Distance Planet Distance (km) Nauvis 15,000 Gleba 15,000 Asteroid rate graphs: Space route from Nauvis to Vulcanus Space route"
  },
  {
    "type": "wiki",
    "name": "Vulcanus",
    "content": "rate graphs: Space route from Nauvis to Vulcanus Space route from Vulcanus to Gleba Graph legend: Asteroid Type Chunk Medium Metallic ● Blue ● Red Carbonic ● Orange ● Yellow Oxide ● Green ● Magenta Orbit Properties Property Value Solar Power 600% Asteroid Spawning Types Asteroid Type Spawn Ratio Metallic asteroid chunk 5 Carbonic asteroid chunk 2 Oxide asteroid chunk 1 Promethium asteroid chunk 0 Asteroid Spawning Sizes Asteroid Size Spawn % Chunk .20 Medium .25 Big 0 Huge 0 Note: Chunks spawn at Nauvis at"
  },
  {
    "type": "wiki",
    "name": "Vulcanus",
    "content": ".20 Medium .25 Big 0 Huge 0 Note: Chunks spawn at Nauvis at 1.25% Huge Asteroids only spawn past Aquilo Trivia In mythology, Vulcanus (also spelt Vulcan), is the Roman god of fire, metalworking, and the forge. The planet's design, with lava, volcanoes, and sulfur, is based on lava planets ."
  },
  {
    "type": "wiki",
    "name": "Gleba",
    "content": "This article is a stub , and not comprehensive. You can help this wiki by expanding it . Space Age expansion exclusive feature. Gleba is a moist, agricultural planet with fungal hills and swampy lowlands. It is home to the pentapods , which are spider-like enemies who are attracted to the scent of biological processing called Spores, similar to the way that Nauvis creatures negatively respond to pollution . One of the most prominent traits of Gleba is that nearly everything takes a biological form. Planet"
  },
  {
    "type": "wiki",
    "name": "Gleba",
    "content": "Gleba is that nearly everything takes a biological form. Planet discovery Gleba (research) is required to travel to the planet. Contents 1 Achievements 2 Exclusive Items 3 Surface 3.1 Properties 3.2 Biomes 4 Mechanics 5 Access to basic resources 5.1 Power production 6 Space routes 7 Orbit 7.1 Properties 8 Gallery 9 Trivia 10 History 11 See also Achievements Visit Gleba Travel to planet Gleba . Exclusive Items The following items are unlocked on Gleba and can only be crafted on-planet: Agricultural science"
  },
  {
    "type": "wiki",
    "name": "Gleba",
    "content": "Gleba and can only be crafted on-planet: Agricultural science pack Artificial jellynut soil Artificial yumako soil Overgrowth jellynut soil Overgrowth yumako soil Biochamber The following items are unlocked on Gleba but can be crafted elsewhere: Agricultural tower (Buildable only on Gleba and Nauvis ) Captive biter spawner (spawners can be captured with Gleba's Capture bot rocket , constructed with Aquilo research, and exclusively produced and placed on Nauvis). Heating tower Biolab (unlocked with Gleba"
  },
  {
    "type": "wiki",
    "name": "Gleba",
    "content": "placed on Nauvis). Heating tower Biolab (unlocked with Gleba science, but exclusively produced and placed on Nauvis) Rocket turret Spidertron Stack inserter Toolbelt equipment Productivity module 3 Efficiency module 3 Note that while stack inserters can be crafted off of Gleba, the use of fast- spoiling jelly as an ingredient makes doing so somewhat impractical, though hardly impossible. Surface Properties Gleba Surface Properties Property Value Pollutant Type Spores Day Night Cycle 10 Minutes Magnetic"
  },
  {
    "type": "wiki",
    "name": "Gleba",
    "content": "Value Pollutant Type Spores Day Night Cycle 10 Minutes Magnetic Field 10 Solar Power 50% Pressure 2000 Gravity 20 Biomes Gleba's terrain consists of elevated regions of dry, buildable terrain and marshy lower areas marbled with Shallow water that cannot directly be built upon without landfill . The dark highlands biome are where stone may be found. The orange or turquoise midland biomes are also elevated and lack shallow water. Cliffs usually represent the transition from lower lying areas to higher ones."
  },
  {
    "type": "wiki",
    "name": "Gleba",
    "content": "represent the transition from lower lying areas to higher ones. Pentapod enemies can only build nests on shallow water tiles (regardless of biome), so midlands and highlands act as natural barriers to their expansion. Artificial barriers can be created by using landfill on available shallow water. The blue biomes are marshes that are typically found next to deep water lakes. Outside of their particular flora, these lands contain nothing special. The red and green biomes are marshlands where Jellystem and"
  },
  {
    "type": "wiki",
    "name": "Gleba",
    "content": "The red and green biomes are marshlands where Jellystem and Yumako trees can be found, respectively. They also contain copper and iron stromatolites in abundance, making them good sources of ore and ore bacteria. For the purposes of where crops can be planted, each of these two biomes has 3 kinds of tiles. Fertile soil tiles are those surrounding natural Jellystems and Yumako trees . These tiles can be planted with seeds and grow trees without any additional intervention. However, there are usually not"
  },
  {
    "type": "wiki",
    "name": "Gleba",
    "content": "any additional intervention. However, there are usually not very many such tiles in a biome. Around fertile soil tiles are a larger number of wetland tiles. These are shallow water tiles that are not initially plantable, but artificial jellynut and yumako soil tiles will make them fertile. The vast majority of the biome consists of darker red or green tiles (some are shallow water marshes, while others are buildable terrain) of types other than the above. All of these tiles can have overgrowth jellynut and"
  },
  {
    "type": "wiki",
    "name": "Gleba",
    "content": "the above. All of these tiles can have overgrowth jellynut and yumako soils placed on them, making virtually the entire biome farmable (though at substantial cost). On the map view, the lightest colored tiles in these biomes are fertile soils, the slightly darker tiles around them are wetlands, and the rest are tiles that can have overgrowth soils placed on them. Note that the overgrowth soils can be placed on the same wetland tiles that artificial soils can be placed on. Overgrowth soils have no special"
  },
  {
    "type": "wiki",
    "name": "Gleba",
    "content": "soils can be placed on. Overgrowth soils have no special effects on those tiles, and they are far more expensive than artificial soils. As such, care should be taken to avoid using the more expensive soils where the less expensive ones will do fine. Mechanics Main article: Spoilage mechanics Most biological products on Gleba are \"spoilable\". A spoilable item has an inherent timer attached to it, which begins at the item's creation. When the timer reaches 0, the item is transformed into spoilage , with a"
  },
  {
    "type": "wiki",
    "name": "Gleba",
    "content": "timer reaches 0, the item is transformed into spoilage , with a few exceptions. This process is inevitable and cannot be stopped. The exact time differs per item, ranging anywhere from a few minutes to 2 hours. This means that item throughput is more important than ever on Gleba, and buffering a large stockpile is ineffective, as items can spoil within containers. The Biochamber , Gleba's special production building, uses a fuel source, nutrients . Nutrients also can spoil, and have a short, 5 minute spoil"
  },
  {
    "type": "wiki",
    "name": "Gleba",
    "content": ". Nutrients also can spoil, and have a short, 5 minute spoil time. Access to basic resources Water is readily available using offshore pumps Stone can be mined from patches on the surface as normal Iron ore can be obtained from iron bacteria , which can be cultivated in a biochamber using iron bacteria cultivation Copper ore can be obtained from copper bacteria , which can be cultivated in a biochamber using copper bacteria cultivation Coal can be obtained via coal synthesis Crude oil is not available."
  },
  {
    "type": "wiki",
    "name": "Gleba",
    "content": "can be obtained via coal synthesis Crude oil is not available. However: Plastic bars can be obtained from bioplastic Sulfur can be obtained from biosulfur Lubricant can be obtained from biolubricant Rocket fuel can be obtained from rocket fuel from jelly Heavy oil can be obtained using coal liquefaction , if the initial heavy oil is shipped in from another planet. This is only really useful for flamethrower turrets , since all other oil products can be obtained more efficiently using the bio recipes."
  },
  {
    "type": "wiki",
    "name": "Gleba",
    "content": "can be obtained more efficiently using the bio recipes. Simple coal liquefaction is also an option if the calcite is shipped in from space platforms using advanced oxide asteroid crushing or from Vulcanus . Power production The heating tower is a burner device can be used to generate electricity via the use of heat exchangers and steam turbines. Gleba renewably generates all its resources, which includes rocket fuel. Traditional boilers can also be used. Space routes Gleba is connected to 4 other planets:"
  },
  {
    "type": "wiki",
    "name": "Gleba",
    "content": "be used. Space routes Gleba is connected to 4 other planets: Nauvis , Vulcanus , Fulgora , and Aquilo . Planet Distance Planet Distance (km) Nauvis 15,000 Vulcanus 15,000 Fulgora 15,000 Aquilo 30,000 Asteroid rate graphs: Space route from Nauvis to Gleba Space route from Vulcanus to Gleba Space route from Gleba to Fulgora Space route from Gleba to Aquilo Graph legend: Asteroid type Chunk Medium Big Metallic ● Blue ● Red ● Cyan Carbonic ● Orange ● Yellow ● Brown Oxide ● Green ● Magenta ● Purple Orbit"
  },
  {
    "type": "wiki",
    "name": "Gleba",
    "content": "Orange ● Yellow ● Brown Oxide ● Green ● Magenta ● Purple Orbit Properties Property Value Solar Power 200% Asteroid Spawning Types Asteroid Type Spawn Ratio Metallic asteroid chunk 2 Carbonic asteroid chunk 5 Oxide asteroid chunk 1 Promethium asteroid chunk 0 Asteroid Spawning Sizes Asteroid Size Spawn % Chunk .30 Medium .25 Big 0 Huge 0 Note: Chunks spawn at Nauvis at 1.25% Huge Asteroids only spawn past Aquilo Trivia In biology, a gleba is a fleshy, spore-filled inner mass of some fungus like the"
  },
  {
    "type": "wiki",
    "name": "Gleba",
    "content": "is a fleshy, spore-filled inner mass of some fungus like the puffball. During development, Gleba was once named Bacchus , after the Roman god of fertility, orchards, and vegetation."
  },
  {
    "type": "wiki",
    "name": "Fulgora",
    "content": "This article is a stub , and not comprehensive. You can help this wiki by expanding it . Space Age expansion exclusive feature. Fulgora is a new barren desert planet . Its surface is split between island-like plateaus, and deep oilsands. During the night, the planet is ravaged by lightning storms, damaging buildings. Planet discovery Fulgora (research) is required to travel to the planet. Contents 1 Achievements 2 Exclusive Items 3 Surface 3.1 Properties 4 Biomes 4.1 Terrain 5 Mechanics 5.1 Lightning 5.2"
  },
  {
    "type": "wiki",
    "name": "Fulgora",
    "content": "Properties 4 Biomes 4.1 Terrain 5 Mechanics 5.1 Lightning 5.2 Lightning rods and collectors 5.3 Natural resources 6 Access to basic resources 7 Space routes 8 Orbit 8.1 Properties 9 Gallery 10 Trivia 11 History 12 See also Achievements Visit Fulgora Travel to planet Fulgora . Exclusive Items The following items are unlocked on Fulgora and can only be crafted on-planet: Electromagnetic science pack Electromagnetic plant Lightning collector Lightning rod Recycler The following items are unlocked on Fulgora"
  },
  {
    "type": "wiki",
    "name": "Fulgora",
    "content": "rod Recycler The following items are unlocked on Fulgora but can be crafted elsewhere: Mech armor Personal battery MK3 Energy shield MK2 Personal roboport MK2 Quality module 3 Tesla turret Surface Properties Fulgora Surface Properties Property Value Pollutant Type None Day Night Cycle 3 Minutes Magnetic Field 99 Solar Power 20% Pressure 800 Gravity 8 Biomes Fulgora is split between two distinct biomes. Plateaus are islands dotted around the landscape. They are the only biome where factories can be built."
  },
  {
    "type": "wiki",
    "name": "Fulgora",
    "content": "They are the only biome where factories can be built. Some plateaus are home to alien ruins , which have fulgoran lightning attractors , which can protect your buildings until unlocking your own lightning rods . Other plateaus hold scrap , Fulgora's sole resource. Oilsands are the lowlands between the plateaus. No buildings can be built in them except for rail supports . You can walk through them, but occasional oilpatches will slow you to a crawl. An offshore pump can be placed on the edge of oilsands to"
  },
  {
    "type": "wiki",
    "name": "Fulgora",
    "content": "An offshore pump can be placed on the edge of oilsands to produce an unlimited amount of heavy oil . Terrain Fulgoran terrain is mainly composed of oillands , on which nothing except for rail supports can be built. Traversal by foot across the oillands is possible, but slow. The oillands are further divided into deep and shallow areas, with deep areas slowing down player movement even further and not even allowing for rail supports to be built until rail support foundations (research) is researched."
  },
  {
    "type": "wiki",
    "name": "Fulgora",
    "content": "built until rail support foundations (research) is researched. However, the oillands are also scattered with islands of various sizes, on which normal construction is possible. At first, these are the only place on Fulgora where factories can be built, as foundation for building on top of the oillands requires research that can not be performed until much later. The islands come in three size classes: Small islands with high amounts of resources, but with little room to build on Medium islands with lower"
  },
  {
    "type": "wiki",
    "name": "Fulgora",
    "content": "but with little room to build on Medium islands with lower amounts of resources, and with sufficient room for a small factory Large islands with no resources, but with enough room to build the main part of a medium-sized factory It is possible for two or more islands to overlap, potentially creating an even larger island that does have local resources. However, most islands are detached, meaning that transport between islands will have to occur by train. In many cases, the distance between two islands is"
  },
  {
    "type": "wiki",
    "name": "Fulgora",
    "content": "by train. In many cases, the distance between two islands is also too vast for roboports or big electric poles to reach, thus requiring local logistic and electric networks to be built, as neither roboports nor power poles can be built on the oillands without foundation . Islands are also scattered with fulgorite , Fulgoran lightning attractors , Fulgoran ruins and Fulgoran vault ruins , allowing players without the recycler to get access to basic resources. Mechanics Lightning During nighttime , dense"
  },
  {
    "type": "wiki",
    "name": "Fulgora",
    "content": "basic resources. Mechanics Lightning During nighttime , dense thunderstorms occur on Fulgora, with frequent lightning strikes occurring across the surface. Lightning will strike each chunk once, every 10 seconds or so ( lightnings_per_chunk_per_tick = 1 / (60 * 10), --cca once per chunk every 10 seconds (600 ticks) ) If a lightning strike is set to occur near a lightning rod , lightning collector , or Fulgoran lightning attractor , then the lightning will always hit said entity, rendering the lightning"
  },
  {
    "type": "wiki",
    "name": "Fulgora",
    "content": "lightning will always hit said entity, rendering the lightning harmless. However, if such an entity can not be found, the lightning will strike where it occurs, causing damage to nearby entities. Lightning will prefer striking the entity with the highest priority, choosing randomly between entities tied for highest priority. Lightning priority above 1 Entity Priority value Lightning collector 10,000 Lightning rod 1,000 Fulgoran lightning attractor 1,000 Fulgoran vault ruin 95 Colossal Fulgoran ruin 94 Huge"
  },
  {
    "type": "wiki",
    "name": "Fulgora",
    "content": "1,000 Fulgoran vault ruin 95 Colossal Fulgoran ruin 94 Huge Fulgoran ruin 93 Big Fulgoran ruin 92 Medium Fulgoran ruin 91 Lightning priority 1 Entities Category Anything with the \"Metal\" impact soundset/category? Pipe Pipe to ground Pump Offshore pump Pipes and pumps Small electric pole Medium electric pole Big electric pole Substation Electric poles Power switch Accumulator Electric routing Recycler Assembling machine 1 Assembling machine 2 Assembling machine 3 Recyclers and assemblers Beacon Beacons"
  },
  {
    "type": "wiki",
    "name": "Fulgora",
    "content": "2 Assembling machine 3 Recyclers and assemblers Beacon Beacons Radar Radars Roboport Logistic robot Construction robot Roboports and bots Burner inserter Inserter Long handed inserter Fast inserter Inserters (but not bulk / stack inserters ) Iron chest Steel chest Storage chest Passive provider chest Active provider chest Requester chest Buffer chest Metal chests (notably not wooden chests ) Cargo pod Landed cargo pods Steel furnace Electric furnace Metal furnaces Heat exchanger Heat pipe Heat exchangers"
  },
  {
    "type": "wiki",
    "name": "Fulgora",
    "content": "furnace Metal furnaces Heat exchanger Heat pipe Heat exchangers and pipes Fusion generator Fusion reactor Fusion power Car Tank Cars and tanks Train stop Train stops Electric energy interface Asteroid collector Thruster Some modded situations Lightning immune entities Entities Category Legacy rail Rail Rail ramps and elevated rails Rail support Rail pieces Rail signal Rail chain signal Rail signals (notably not train stops ) Locomotive Artillery wagon Cargo wagon Fluid wagon Trains Wall Land mine Walls and"
  },
  {
    "type": "wiki",
    "name": "Fulgora",
    "content": "wagon Cargo wagon Fluid wagon Trains Wall Land mine Walls and mines Tree Rock Fulgorite Trees and entities that count as a rock for filtered destruction Lightning rods and collectors Lightning rods and lightning collectors serve a secondary function beyond protecting an area from lightning strikes. They convert lightning into stored power, which they quickly discharge into the local electric system . With enough accumulators to last during daytime or between lightning strikes, this can serve as the"
  },
  {
    "type": "wiki",
    "name": "Fulgora",
    "content": "daytime or between lightning strikes, this can serve as the factory's main power source. With this, lightning on Fulgora become both a curse and a blessing: Players must keep their factory covered by lightning rods or collectors to avoid damage, and nighttime exploration becomes dangerous and risky. However, to an established base, lightning become a convenient source of electric energy, which is especially important given the weak solar output on Fulgora's surface and the difficulty of setting up a global"
  },
  {
    "type": "wiki",
    "name": "Fulgora",
    "content": "on Fulgora's surface and the difficulty of setting up a global electric network on Fulgora before foundation becomes available. Natural resources Aside from numerous items that can be collected by mining ancient ruins, only two \"natural\" resources occur on Fulgora, those being heavy oil and scrap . Heavy oil can be obtained in infinite and non-diminishing amounts by placing an offshore pump on the shore of an island, allowing it to collect heavy oil directly from the oillands. Scrap is found in deposits on"
  },
  {
    "type": "wiki",
    "name": "Fulgora",
    "content": "oil directly from the oillands. Scrap is found in deposits on small and medium sized islands, as if it were an ore. However, in stark contrast to most other natural resources, scrap is not directly processed into a single basic resource like iron or copper plates using traditional production methods. Rather, it is recycled to produce a variety of items. Players can also recycle by hand provided the recipe has been unlocked. Input Output Chance Rate Scrap Iron gear wheel 20% 0.5/s Solid fuel 7% 0.175/s"
  },
  {
    "type": "wiki",
    "name": "Fulgora",
    "content": "Rate Scrap Iron gear wheel 20% 0.5/s Solid fuel 7% 0.175/s Concrete 6% 0.15/s Ice 5% 0.125/s Steel plate 4% 0.1/s Battery 4% 0.1/s Stone 4% 0.1/s Copper cable 3% 0.075/s Advanced circuit 3% 0.075/s Processing unit 2% 0.05/s Low density structure 1% 0.025/s Holmium ore 1% 0.025/s Since this list includes intermediate products, such as processing units , but no iron or copper plates, players are generally forced to further recycle many of these items in order to obtain their ingredients. Players are thus"
  },
  {
    "type": "wiki",
    "name": "Fulgora",
    "content": "items in order to obtain their ingredients. Players are thus left with the decision of what items to recycle, all while having to avoid cluttering their belts with unused resources. Access to basic resources Water can be obtained from ice (from recycling scrap ) via ice melting Stone can be obtained by recycling scrap Iron ore can be obtained by recycling concrete Iron plate can be obtained by recycling iron gear wheel , battery , or electronic circuit Copper plate can be obtained by recycling copper cable"
  },
  {
    "type": "wiki",
    "name": "Fulgora",
    "content": "circuit Copper plate can be obtained by recycling copper cable , battery , or low density structure Coal cannot be obtained and must be shipped in from other planets. However: Plastic bar can be obtained by recycling advanced circuit or low density structure There are no enemies on-planet, so explosives -based ammunition or grenades are not needed Crude oil is not available, but heavy oil is readily available using offshore pumps Copper ore is not available as the only recipe it is used in is copper plates"
  },
  {
    "type": "wiki",
    "name": "Fulgora",
    "content": "not available as the only recipe it is used in is copper plates and smelting processes cannot be reversed Space routes Fulgora is connected to 3 other planets: Nauvis , Gleba , and Aquilo . Planet Distance Planet Distance (km) Nauvis 15,000 Gleba 15,000 Aquilo 30,000 Asteroid rate graphs: Space route from Nauvis to Fulgora Space route from Gleba to Fulgora Space route from Fulgora to Aquilo Graph legend: Asteroid type Chunk Medium Big Metallic ● Blue ● Red ● Cyan Carbonic ● Orange ● Yellow ● Brown Oxide ●"
  },
  {
    "type": "wiki",
    "name": "Fulgora",
    "content": "● Blue ● Red ● Cyan Carbonic ● Orange ● Yellow ● Brown Oxide ● Green ● Magenta ● Purple Orbit Properties Property Value Solar Power 120% Asteroid Spawning Types Asteroid Type Spawn Ratio Metallic asteroid chunk 4 Carbonic asteroid chunk 3 Oxide asteroid chunk 1 Promethium asteroid chunk 0 Asteroid Spawning Sizes Asteroid Size Spawn % Chunk .25 Medium .25 Big 0 Huge 0 Note: Chunks spawn at Nauvis at 1.25% Huge Asteroids only spawn past Aquilo Trivia The planet's ruins suggest that an unknown civilization"
  },
  {
    "type": "wiki",
    "name": "Fulgora",
    "content": "Trivia The planet's ruins suggest that an unknown civilization once existed there before the game's events. In mythology, Fulgora is the Roman personification of lightning, and a shieldmaiden to the god of thunder, Jupiter. The planet is based on real-world desert planets ."
  },
  {
    "type": "wiki",
    "name": "Aquilo",
    "content": "This article is a stub , and not comprehensive. You can help this wiki by expanding it . Space Age expansion exclusive feature. Aquilo is a desolate, freezing ocean planet . Its surface consists solely of a vast ocean of liquid ammonia, with the occasional floating iceberg. Progression wise, Aquilo is meant to be visited after establishing factories on all the previous planets. Planet discovery Aquilo (research) requires rocket turrets , Advanced asteroid processing (research) , and heating towers from"
  },
  {
    "type": "wiki",
    "name": "Aquilo",
    "content": "asteroid processing (research) , and heating towers from Gleba, Asteroid reprocessing (research) from Vulcanus , and Electromagnetic science pack (research) from Fulgora . Planet discovery Aquilo (research) is required to travel to the planet. Contents 1 Achievements 2 Exclusive items 3 Surface 3.1 Properties 3.2 Natural resources 4 Access to basic resources 5 Mechanics 5.1 Ice terrain 5.2 Freezing 5.3 Notes 5.4 Solar energy 6 Space routes 7 Orbit 7.1 Properties 8 Gallery 9 Trivia 10 History 11 See also"
  },
  {
    "type": "wiki",
    "name": "Aquilo",
    "content": "Orbit 7.1 Properties 8 Gallery 9 Trivia 10 History 11 See also Achievements Visit Aquilo Travel to planet Aquilo . Exclusive items The following items have recipes with an explicit restriction that they can only be crafted on Aquilo: Cryogenic plant Fusion generator Fusion reactor Cryogenic science pack Quantum processor (can also be crafted on space platforms ) The following fluids are extracted from or produced on Aquilo and cannot be barrelled for transport elsewhere, making them exclusive to Aquilo:"
  },
  {
    "type": "wiki",
    "name": "Aquilo",
    "content": "for transport elsewhere, making them exclusive to Aquilo: Ammoniacal solution Fluorine Lithium brine Ammonia Because the above fluids cannot be taken off of Aquilo, any recipe that directly consumes them is de-facto exclusive to Aquilo: Fluoroketone (hot) Lithium Fusion power cell Solid fuel from ammonia Ammonia rocket fuel The following can be crafted elsewhere, but are unlocked on Aquilo: Fluoroketone (cold) Lithium plate Foundation Railgun turret Railgun Railgun ammo Captive biter spawner Portable"
  },
  {
    "type": "wiki",
    "name": "Aquilo",
    "content": "turret Railgun Railgun ammo Captive biter spawner Portable fusion reactor Promethium science pack Surface Properties Aquilo Surface Properties Property Value Pollutant Type None Day Night Cycle 20 Minutes Magnetic Field 10 Solar Power 01% Pressure 300 Gravity 15 Robot energy usage 500% Natural resources In terms of directly exploitable natural resources, Aquilo has: Ammoniacal solution (via offshore pump on the edge of the ammoniacal seas) Lithium brine (via pumpjack ) Fluorine (via pumpjack) Crude oil"
  },
  {
    "type": "wiki",
    "name": "Aquilo",
    "content": "Lithium brine (via pumpjack ) Fluorine (via pumpjack) Crude oil (via pumpjack) Limited amounts of lithium , ice , and ice platform can be gathered from lithium ice formations , but are otherwise crafted. Access to basic resources Water can be obtained via ammoniacal solution separation and ice melting Stone is not available and must be shipped in from other planets Iron ore is not available and must be shipped in from other planets Copper ore is not available and must be shipped in from other planets Coal"
  },
  {
    "type": "wiki",
    "name": "Aquilo",
    "content": "is not available and must be shipped in from other planets Coal is not available and must be shipped in from other planets Crude oil can be obtained using pumpjacks as normal Mechanics The starting area on Aquilo is a relatively small patch of snow and ice terrain. Beyond this small platform are the vast ammoniacal seas, which have small dots of icey terrain in them, usually around crude oil , fluorine , or lithium brine resource geysers. Aquilo is notable for having nothing to drill with any kind of"
  },
  {
    "type": "wiki",
    "name": "Aquilo",
    "content": "Aquilo is notable for having nothing to drill with any kind of miner. All natural resources, spare the lithium ice formations , are gathered either by an offshore pump or pumpjack . Bases on Aquilo will be reliant on regularly shipping in resources from other planets. Ice terrain On Aquilo, most terrain must be constructed, but landfill and foundation are no help. Instead, you must use ice platforms . These platforms are created by first using ammoniacal solution separation to make ice and ammonia , then"
  },
  {
    "type": "wiki",
    "name": "Aquilo",
    "content": "ammoniacal solution separation to make ice and ammonia , then re-combining those into a platform that can be placed on the ocean like landfill . Snowy terrain can be built on directly, but on any kind of ice terrain or ice platform , most buildings will require an insulating floor of concrete tiles or derivatives before they can be placed. Stone Bricks can not be used to pave ice. Freezing Aquilo is brutally cold. The harsh ambient temperatures drain the energy from any airborne construction robots and"
  },
  {
    "type": "wiki",
    "name": "Aquilo",
    "content": "drain the energy from any airborne construction robots and logistic robots , making them consume 5 times more power than normal. Most buildings will freeze and stop working unless heated by a heat pipe or heat generator. Heat can be generated by the nuclear reactor or heating tower . Once a building is adjacent to a heat source above 30°C, it will consume heat energy to maintain its state, reducing the energy (and temperature) in the heat source. Different entities consume different amounts of heat to"
  },
  {
    "type": "wiki",
    "name": "Aquilo",
    "content": "source. Different entities consume different amounts of heat to prevent freezing. Notes Underground belts and pipes to ground are substantially larger heat drains than their above-ground versions Heat pipes do not lose heat to the environment; they only lose heat to entities that need to be kept warm. All burner entities and heat-producing machines are immune to freezing. For details on heat throughput, see the heat pipe page. A building is adjacent to a heat source when it is one tile away from the heat"
  },
  {
    "type": "wiki",
    "name": "Aquilo",
    "content": "to a heat source when it is one tile away from the heat source either orthogonally or diagonally. All of the pipes would be heated in the below example: Entity Heat Consumption Building Kilowatts 10 50 100 150 200 40 1 150 30 100 20 30 30 50 50 50 50 50 100 100 100 200 300 400 The following Entities are immune from freezing. Many may be placed directly on ice tiles (with the exceptions you might expect, mostly). Tile Entities Category Space Cargo Offshore Pumps Chests Electric Poles Basic Electric Devices"
  },
  {
    "type": "wiki",
    "name": "Aquilo",
    "content": "Offshore Pumps Chests Electric Poles Basic Electric Devices Player Notification Devices Burner Entities Heat Generators and Heat Pipes Fusion Power Tesla Turrets Flamethrower Turrets Walls and Gates Bots Vehicles Trains Rail Pieces Any Rail Pieces Solar energy Aquilo is far from its sun, and so solar panels on its surface only output at 1% of their rate on Nauvis: 0.6 kW peak production. This makes panels practical for little more than powering the first machines to produce the water needed for real power"
  },
  {
    "type": "wiki",
    "name": "Aquilo",
    "content": "the first machines to produce the water needed for real power generation. The minimum machines needed to produce water is either a single chemical plant to melt ice (which can initially be dropped from a space platform), or a single assembling machine 2 to empty barrels of water also dropped from the platform. Assembling machine 2s require less power than chemical plants, and the unbarreling recipe is faster than ice melting . So on the whole, the assembler version will be faster. Note that it is not"
  },
  {
    "type": "wiki",
    "name": "Aquilo",
    "content": "the assembler version will be faster. Note that it is not necessary to fully power these machines. As long as the available power is greater than their drain, they will be able to function, albeit at reduced speed. Efficiency modules can speed this process up. With 3 efficiency modules, an assembling machine 2 only needs 35 kW to run at full speed (59 solar panels). To reach just 1/8th of max speed requires only 8.75 kW, which only needs 15 (base quality ) solar panels. Once even a little water is"
  },
  {
    "type": "wiki",
    "name": "Aquilo",
    "content": "15 (base quality ) solar panels. Once even a little water is available, heat exchangers heated by either heating towers or nuclear reactors can feed steam turbines for power. This power can be used to process ammoniacal solution separation to generate ice, which can be melted into water for continuous power generation. Space routes Aquilo is connected to 2 other planets, Gleba and Fulgora , along with the Solar system edge Planet Distance Planet Distance (km) Gleba 30,000 Fulgora 30,000 Solar system edge"
  },
  {
    "type": "wiki",
    "name": "Aquilo",
    "content": "Distance (km) Gleba 30,000 Fulgora 30,000 Solar system edge 100,000 Asteroid rate graphs: Space route from Gleba to Aquilo Space route from Fulgora to Aquilo Space route from Aquilo to Solar system edge Graph legend: Asteroid type Chunk Medium Big Metallic ● Blue ● Red ● Cyan Carbonic ● Orange ● Yellow ● Brown Oxide ● Green ● Magenta ● Purple Orbit Properties Property Value Solar Power 60% Asteroid Spawning Types Asteroid Type Spawn Ratio Metallic asteroid chunk 1 Carbonic asteroid chunk 2 Oxide asteroid"
  },
  {
    "type": "wiki",
    "name": "Aquilo",
    "content": "asteroid chunk 1 Carbonic asteroid chunk 2 Oxide asteroid chunk 20 Promethium asteroid chunk 0 Asteroid Spawning Sizes Asteroid Size Spawn % Chunk .10 Medium 0 Big 0.25 Huge 0 Note: Chunks spawn at Nauvis at 1.25% Huge Asteroids only spawn past Aquilo Trivia In mythology, Aquilo is the Roman god of the north wind, storms, and winter. During development, Aquilo was planned to be home to floating, jellyfish-like enemies, concept art for which were shown in Friday Facts #367 . However, they were not"
  },
  {
    "type": "wiki",
    "name": "Aquilo",
    "content": "which were shown in Friday Facts #367 . However, they were not implemented due to them making progression \"much slower\". [1] Aquilo's design with ice and liquid ammonia oceans is based on real-world ice planets ."
  },
  {
    "type": "wiki",
    "name": "Solar system edge",
    "content": "This article is a stub , and not comprehensive. You can help this wiki by expanding it . Space Age expansion exclusive feature. Reaching the end of Space Age. Solar system edge is a location in space the player must reach in order to win Space Age . It is the second-furthest location that a player's space platform can reach, with the furthest being the shattered planet . It is unlocked through promethium science pack (research) Reaching the solar system edge for the first time will show the victory screen"
  },
  {
    "type": "wiki",
    "name": "Solar system edge",
    "content": "system edge for the first time will show the victory screen and invite the player to upload a snapshot of their save to the Galaxy of Fame . Contents 1 Achievements 2 Exclusive items 3 Mechanics 4 Space routes 5 History 6 See also Achievements Reaching the solar system edge is directly connected with the following achievements: Second star to the right and straight on till morning Finish the game. Work around the clock Finish the game within 100 hours. Express delivery Finish the game within 40 hours."
  },
  {
    "type": "wiki",
    "name": "Solar system edge",
    "content": "100 hours. Express delivery Finish the game within 40 hours. Exclusive items The following items are unlocked on Solar System edge: None Mechanics En route to Solar system edge, the space platform will start encountering huge asteroids. These are resistant to anything but the most powerful weapons. Space routes Solar system edge is connected to 2 other \"planets\", Aquilo and Shattered planet Planet Distance Planet Distance (km) Aquilo 100,000 Shattered planet 4,000,000 Asteroid rate graphs: Space route from"
  },
  {
    "type": "wiki",
    "name": "Solar system edge",
    "content": "planet 4,000,000 Asteroid rate graphs: Space route from Solar system edge to Shattered planet Space route from Aquilo to Solar system edge"
  },
  {
    "type": "wiki",
    "name": "Shattered planet",
    "content": "This article is a stub , and not comprehensive. You can help this wiki by expanding it . Space Age expansion exclusive feature. The shattered planet is a post-game location in space, far away from the planets in the Nauvis system, making this area the most dangerous to explore. Unique promethium asteroids are located here, being the only remains of the now-shattered planet. It is unlocked through promethium science pack (research) . Contents 1 Achievements 2 Exclusive items 3 Mechanics 4 Space routes 5"
  },
  {
    "type": "wiki",
    "name": "Shattered planet",
    "content": "1 Achievements 2 Exclusive items 3 Mechanics 4 Space routes 5 Gallery 6 Trivia 7 History 8 See also Achievements Going to shattered planet 1 Travel 10 000 km towards the shattered planet . Going to shattered planet 2 Travel 30 000 km towards the shattered planet . Going to shattered planet 3 Travel 60 000 km towards the shattered planet . Exclusive items The following items are unlocked en route to shattered planet: Promethium asteroid chunk Mechanics As the player starts approaching the shattered planet,"
  },
  {
    "type": "wiki",
    "name": "Shattered planet",
    "content": "As the player starts approaching the shattered planet, promethium asteroids are encountered. Moreover, the density of asteroids increases the further the platform is from the solar system. Promethium asteroids are stronger than the other three types, as they have doubled health. Second, they can not be crushed and processed like other asteroids. Promethium asteroid chunks are one of the components for crafting the promethium science pack . The player is not expected to reach the shattered planet as the"
  },
  {
    "type": "wiki",
    "name": "Shattered planet",
    "content": "The player is not expected to reach the shattered planet as the density of asteroids reaches to the point it would overwhelm even a well-equipped ship. Space routes The shattered planet is only connected to Solar system edge . Location Distance Location Distance (km) Solar system edge 4,000,000 Trivia Any details of the shattered planet are completely unknown, including its name and how it was shattered. Based on the name of its asteroid remains, it is possible that the planet's name was \"Prometheus\","
  },
  {
    "type": "wiki",
    "name": "Shattered planet",
    "content": "it is possible that the planet's name was \"Prometheus\", which is based on the name of one of the Titans in Greek mythology, who was also a god of fire. Other planets in the game also have their names based on figures in Greek mythology. Gleba's current name is not related to said Mythology, but during development, it was named Bacchus , after the Roman god of fertility, orchards, and vegetation."
  },
  {
    "type": "wiki",
    "name": "Pistol",
    "content": "Stack size 5 | Range Quality 15 Quality 16.5 Quality 18 Quality 19.5 Quality 22.5 Quality 15 Quality 16.5 Quality 18 Quality 19.5 Quality 22.5 | Shooting speed 4/s | Ammunition Firearm_magazinePiercing_rounds_magazineUranium_rounds_magazine | Prototype type gun | Internal name pistol | The Pistol is the most basic weapon in Factorio. In Freeplay mode, the player starts with a pistol and 10 firearm magazines . The Pistol can only handle the smallest of enemy threats and the player will frequently take damage"
  },
  {
    "type": "wiki",
    "name": "Pistol",
    "content": "of enemy threats and the player will frequently take damage when trying to use it for self-defense. It is recommended to upgrade to the Submachine gun as soon as possible."
  },
  {
    "type": "wiki",
    "name": "Submachine gun",
    "content": "Recipe | Time 10+Copper_plate 5+Iron_gear_wheel 10+Iron_plate 10 → Submachine_gun 1 | Total raw | Time 15+Copper_plate 5+Iron_plate 30 | Stack size 5 | Range Quality 18 Quality 19.8 Quality 21.6 Quality 23.4 Quality 27 Quality 18 Quality 19.8 Quality 21.6 Quality 23.4 Quality 27 | Shooting speed 10/s | Ammunition Firearm_magazinePiercing_rounds_magazineUranium_rounds_magazine | Prototype type gun | Internal name submachine-gun | Required technologies | Military_(research) | Produced by |"
  },
  {
    "type": "wiki",
    "name": "Submachine gun",
    "content": "| Required technologies | Military_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The submachine gun is an upgrade from the pistol . It fires the same ammunition types and deals the same damage as the pistol, but has a much higher rate of fire. This same type of weapon is installed in the car and tank ; the car and tank's version of the submachine gun fires +5 rounds per second and has +2 range compared to the handheld one. This weapon can easily handle"
  },
  {
    "type": "wiki",
    "name": "Submachine gun",
    "content": "compared to the handheld one. This weapon can easily handle moderate waves of small biters, even with regular ammunition , but destroying nests efficiently requires damage upgrades or the more expensive piercing round ."
  },
  {
    "type": "wiki",
    "name": "Shotgun",
    "content": "Recipe | Time 10+Copper_plate 10+Iron_gear_wheel 5+Iron_plate 15+Wood 5 → Shotgun 1 | Total raw | Time 12.5+Copper_plate 10+Iron_plate 25+Wood 5 | Stack size 5 | Range Quality 15 Quality 16.5 Quality 18.0 Quality 19.5 Quality 22.5 Quality 15 Quality 16.5 Quality 18.0 Quality 19.5 Quality 22.5 | Shooting speed 1/s | Ammunition Shotgun_shellsPiercing_shotgun_shells | Prototype type gun | Internal name shotgun | Required technologies | Military_(research) | Produced by | Assembling_machine_1"
  },
  {
    "type": "wiki",
    "name": "Shotgun",
    "content": "| Military_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The shotgun is a basic but powerful weapon with good range, damage , and ammunition efficiency, but a low rate of fire. It fires in a spread pattern. The shotgun will fire without hostile targets nearby, can damage walls (it won't shoot over them) and other friendly structures, thus requiring significantly more caution when used, compared to most other weapons. For early Biter nests assaults,"
  },
  {
    "type": "wiki",
    "name": "Shotgun",
    "content": "compared to most other weapons. For early Biter nests assaults, shotgun ammo represents a massive boost on resource efficiency, with 2 copper plates and 2 iron plates giving a stack of shotgun shells , dealing a total of 600 damage. Contrast this against the pistol 's firearm magazine , which costs 4 iron plates and deals a total of 50 damage. The shotgun is less effective in clearing out the biters themselves, because pellet spread will cause a nontrivial fraction of pellets to miss against small targets."
  },
  {
    "type": "wiki",
    "name": "Shotgun",
    "content": "a nontrivial fraction of pellets to miss against small targets. Players can switch between the shotgun and submachine gun to balance power and resource-efficiency, or support themselves with covering fire from Turrets and combat bots ."
  },
  {
    "type": "wiki",
    "name": "Combat shotgun",
    "content": "Recipe | Time 10+Copper_plate 10+Iron_gear_wheel 5+Steel_plate 15+Wood 10 → Combat_shotgun 1 | Total raw | Time 12.5+Copper_plate 10+Iron_plate 10+Steel_plate 15+Wood 10 | Stack size 5 | Range Quality 15 Quality 16.5 Quality 18.0 Quality 19.5 Quality 22.5 Quality 15 Quality 16.5 Quality 18.0 Quality 19.5 Quality 22.5 | Shooting speed 2/s | Damage bonus 20% | Ammunition Shotgun_shellsPiercing_shotgun_shells | Prototype type gun | Internal name combat-shotgun | Required technologies | Military_3_(research)3 |"
  },
  {
    "type": "wiki",
    "name": "Combat shotgun",
    "content": "| Required technologies | Military_3_(research)3 | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | An advanced shotgun with good range, damage and higher rate of fire than that of the standard shotgun . The damage bonus of the combat shotgun stacks multiplicatively with physical projectile damage (research) ."
  },
  {
    "type": "wiki",
    "name": "Rocket launcher",
    "content": "Recipe | Time 10+Electronic_circuit 5+Iron_gear_wheel 5+Iron_plate 5 → Rocket_launcher 1 | Total raw | Time 18.75+Copper_plate 7.5+Iron_plate 20 | Stack size 5 | Range Quality 36 Quality 39.6 Quality 43.2 Quality 46.8 Quality 54.0 Quality 36 Quality 39.6 Quality 43.2 Quality 46.8 Quality 54.0 | Shooting speed 1/s | Ammunition RocketExplosive_rocketAtomic_bombCapture_bot_rocket | Prototype type gun | Internal name rocket-launcher | Required technologies | Rocketry_(research) | Produced by |"
  },
  {
    "type": "wiki",
    "name": "Rocket launcher",
    "content": "| Required technologies | Rocketry_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Spidertron | The rocket launcher is a strong weapon against enemy bases . It has long range and high damage, but as the ammo is very expensive it is recommended to avoid using it against enemy creatures . The weapon is also used to create the versatile, lategame spidertron ."
  },
  {
    "type": "wiki",
    "name": "Flamethrower",
    "content": "Recipe | Time 10+Iron_gear_wheel 10+Steel_plate 5 → Flamethrower 1 | Total raw | Time 15+Iron_plate 20+Steel_plate 5 | Stack size 5 | Range Quality 15 Quality 16.5 Quality 18.0 Quality 19.5 Quality 22.5 Quality 15 Quality 16.5 Quality 18.0 Quality 19.5 Quality 22.5 | Shooting speed 60/s | Ammunition Flamethrower_ammo | Prototype type gun | Internal name flamethrower | Required technologies | Flamethrower_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The"
  },
  {
    "type": "wiki",
    "name": "Flamethrower",
    "content": "Assembling_machine_2 Assembling_machine_3 Crafting | The flamethrower is an advanced weapon best used against hordes of enemies or trees . It deals initial splash damage in a large area and damage over time until the fire goes out. The damage is usually enough to destroy a biter nest with just one attack. It requires flamethrower ammo to function. Spraying fire in one spot long enough will increase the burning time of that spot, as well as create a gradually growing area of flames, depending on how long"
  },
  {
    "type": "wiki",
    "name": "Flamethrower",
    "content": "a gradually growing area of flames, depending on how long the fire was sprayed there. Achievements Pyromaniac Destroy 10k trees with fire."
  },
  {
    "type": "wiki",
    "name": "Firearm magazine",
    "content": "Recipe | Time 1+Iron_plate 4 → Firearm_magazine 1 | Total raw | Time 1+Iron_plate 4 | Stack size 100 | Damage Quality 5 Quality 6.5 Quality 8 Quality 9.5 Quality 12.5(physical) Quality 5 Quality 6.5 Quality 8 Quality 9.5 Quality 12.5 | Magazine size 10 | Used as ammunition by | PistolSubmachine_gunGun_turretCarTank | Prototype type ammo | Internal name firearm-magazine | Boosting technologies | Physical_projectile_damage_(research)Weapon_shooting_speed_(research) | Produced by | Assembling_machine_1"
  },
  {
    "type": "wiki",
    "name": "Firearm magazine",
    "content": "| Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Piercing_rounds_magazine | The most basic ammunition for starting weapons. Cheap, but has limited damage."
  },
  {
    "type": "wiki",
    "name": "Piercing rounds magazine",
    "content": "Recipe | Time 6+Copper_plate 2+Steel_plate 1+Firearm_magazine 2 → Piercing_rounds_magazine 2 | Total raw | Time 8+Iron_plate 8+Copper_plate 2+Steel_plate 1 | Stack size 100 | Damage Quality 8 Quality 10.4 Quality 12.8 Quality 15.2 Quality 20(physical) Quality 8 Quality 10.4 Quality 12.8 Quality 15.2 Quality 20 | Magazine size 10 | Used as ammunition by | PistolSubmachine_gunGun_turretCarTank | Prototype type ammo | Internal name piercing-rounds-magazine | Required technologies | Military_2_(research)2 |"
  },
  {
    "type": "wiki",
    "name": "Piercing rounds magazine",
    "content": "| Required technologies | Military_2_(research)2 | Boosting technologies | Physical_projectile_damage_(research)Weapon_shooting_speed_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Defender_capsuleMilitary_science_packUranium_rounds_magazine | A more advanced ammunition type for gun weapons. More resource intensive than Firearm magazines , but has 60% higher damage."
  },
  {
    "type": "wiki",
    "name": "Uranium rounds magazine",
    "content": "Recipe | Time 10+Piercing_rounds_magazine 1+Uranium-2381 → Uranium_rounds_magazine 1 | Total raw | Time 14+Copper_plate 5+Iron_plate 4+Steel_plate 1+Uranium-2381 | Stack size 100 | Damage Quality 24 Quality 31.2 Quality 38.4 Quality 45.6 Quality 60(physical) Quality 24 Quality 31.2 Quality 38.4 Quality 45.6 Quality 60 | Magazine size 10 | Used as ammunition by | PistolSubmachine_gunGun_turretCarTank | Prototype type ammo | Internal name uranium-rounds-magazine | Required technologies |"
  },
  {
    "type": "wiki",
    "name": "Uranium rounds magazine",
    "content": "Internal name uranium-rounds-magazine | Required technologies | Uranium_ammo_(research) | Boosting technologies | Physical_projectile_damage_(research)Weapon_shooting_speed_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The most advanced ammunition type for gun weapons. It's more resource intensive than piercing rounds , but has three times the damage output."
  },
  {
    "type": "wiki",
    "name": "Shotgun shells",
    "content": "Recipe | Time 3+Copper_plate 2+Iron_plate 2 → Shotgun_shells 1 | Total raw | Time 3+Copper_plate 2+Iron_plate 2 | Stack size 100 | Range 15 | Damage Quality 12 x 8 Quality 12 x 10.4 Quality 12 x 12.8 Quality 12 x 15.2 Quality 12 x 20(physical) Quality 12 x 8 Quality 12 x 10.4 Quality 12 x 12.8 Quality 12 x 15.2 Quality 12 x 20 | Magazine size 10 | Used as ammunition by | ShotgunCombat_shotgun | Prototype type ammo | Internal name shotgun-shell | Required technologies | Military_(research) | Boosting"
  },
  {
    "type": "wiki",
    "name": "Shotgun shells",
    "content": "| Required technologies | Military_(research) | Boosting technologies | Physical_projectile_damage_(research)Weapon_shooting_speed_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Piercing_shotgun_shells | Basic shells for all shotguns, and can be used to craft the more powerful piercing shotgun shells ."
  },
  {
    "type": "wiki",
    "name": "Piercing shotgun shells",
    "content": "Recipe | Time 8+Copper_plate 5+Shotgun_shells 2+Steel_plate 2 → Piercing_shotgun_shells 1 | Total raw | Time 14+Copper_plate 9+Iron_plate 4+Steel_plate 2 | Stack size 100 | Range 15 | Damage Quality 16×8 Quality 16×10.4 Quality 16×12.8 Quality 16×15.2 Quality 16×20(physical) Quality 16×8 Quality 16×10.4 Quality 16×12.8 Quality 16×15.2 Quality 16×20 | Magazine size 10 | Used as ammunition by | ShotgunCombat_shotgun | Prototype type ammo | Internal name piercing-shotgun-shell | Required technologies |"
  },
  {
    "type": "wiki",
    "name": "Piercing shotgun shells",
    "content": "Internal name piercing-shotgun-shell | Required technologies | Military_4_(research)4 | Boosting technologies | Physical_projectile_damage_(research)Weapon_shooting_speed_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Advanced shells for all shotguns. They have four extra pellets per shot compared to normal shotgun shells."
  },
  {
    "type": "wiki",
    "name": "Cannon shell",
    "content": "Recipe | Time 8+Explosives 1+Plastic_bar 2+Steel_plate 2 → Cannon_shell 1 | Total raw | Time 8+Explosives 1+Plastic_bar 2+Steel_plate 2 | Stack size 100 | Range 30 | Damage Quality 1.0 kQuality 1.3 kQuality 1.6 kQuality 1.9 kQuality 2.5 k(physical)Quality 100 Quality 130 Quality 160 Quality 190 Quality 250(explosion) Quality 1.0 k Quality 1.3 k Quality 1.6 k Quality 1.9 k Quality 2.5 k Quality 100 Quality 130 Quality 160 Quality 190 Quality 250 | Damage bonus Piercing Power: 1000 | Used as ammunition by |"
  },
  {
    "type": "wiki",
    "name": "Cannon shell",
    "content": "| Damage bonus Piercing Power: 1000 | Used as ammunition by | Tank | Prototype type ammo | Internal name cannon-shell | Required technologies | Tank_(research) | Boosting technologies | Physical_projectile_damage_(research)Weapon_shooting_speed_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Uranium_cannon_shell | The cannon shells are the basic ammunition for the tank along with explosive cannon shells . Once enough research is conducted,"
  },
  {
    "type": "wiki",
    "name": "Cannon shell",
    "content": "explosive cannon shells . Once enough research is conducted, uranium shells are made available, which are equal or superior in all regards. Since regular shells are still specifically required to manufacture uranium variants, any previously manufactured stockpile can be \"upgraded\" without waste. While cannon shells still deal an amount of explosive damage, it is only dealt on the directly hit target and it is also a much lower amount than what explosive shells deal; its primary damage outlet is physical"
  },
  {
    "type": "wiki",
    "name": "Cannon shell",
    "content": "explosive shells deal; its primary damage outlet is physical and therefore better suited against worms , nests and large spitters for their lesser resistances against it. It also features much greater piercing power that is reliable for up to medium-sized enemies."
  },
  {
    "type": "wiki",
    "name": "Explosive cannon shell",
    "content": "Recipe | Time 8+Explosives 2+Plastic_bar 2+Steel_plate 2 → Explosive_cannon_shell 1 | Total raw | Time 8+Explosives 2+Plastic_bar 2+Steel_plate 2 | Stack size 100 | Range 30 | Damage Impact:Quality 180 Quality 234 Quality 288 Quality 342 Quality 450(physical)Area of effect:Quality 300 Quality 390 Quality 480 Quality 570 Quality 750(explosion) Quality 180 Quality 234 Quality 288 Quality 342 Quality 450 Quality 300 Quality 390 Quality 480 Quality 570 Quality 750 | Damage bonus Piercing Power: 100 | Area of"
  },
  {
    "type": "wiki",
    "name": "Explosive cannon shell",
    "content": "570 Quality 750 | Damage bonus Piercing Power: 100 | Area of effect size 4 | Used as ammunition by | Tank | Prototype type ammo | Internal name explosive-cannon-shell | Required technologies | Tank_(research) | Boosting technologies | Physical_projectile_damage_(research)Weapon_shooting_speed_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Artillery_shellExplosive_uranium_cannon_shell | The explosive cannon shells are the basic ammunition"
  },
  {
    "type": "wiki",
    "name": "Explosive cannon shell",
    "content": "| The explosive cannon shells are the basic ammunition for the Tank along with cannon shells . Once enough research is conducted, explosive uranium shells are made available, which are equal or superior in all regards. Since regular shells are still specifically required to manufacture uranium variants, any previously manufactured stockpile can be \"upgraded\" without waste. Explosive cannon shells deal lower physical damage and their piercing power has practical use for only the smallest enemies. In turn,"
  },
  {
    "type": "wiki",
    "name": "Explosive cannon shell",
    "content": "power has practical use for only the smallest enemies. In turn, they make up for it with an even greater amount of explosive damage that is dealt to multiple targets within radius. The total amount of damage dealt on the shell is greater than its physical counterpart, but it must be noted that worms , nests and especially spitters have considerable explosive resistance that well compensate for this damage increase. However, thanks to the greater raw numbers, upgrades have greater impact on the shells'"
  },
  {
    "type": "wiki",
    "name": "Explosive cannon shell",
    "content": "raw numbers, upgrades have greater impact on the shells' potential, and their area-of-effect proves valuable later on in the game."
  },
  {
    "type": "wiki",
    "name": "Uranium cannon shell",
    "content": "Recipe | Time 12+Cannon_shell 1+Uranium-2381 → Uranium_cannon_shell 1 | Total raw | Time 20+Explosives 1+Plastic_bar 2+Steel_plate 2+Uranium-2381 | Stack size 100 | Range 30 | Damage Quality 2.0 kQuality 2.6 kQuality 3.2 kQuality 3.8 kQuality 5.0 k(physical)Quality 200 Quality 260 Quality 320 Quality 380 Quality 500(explosion) Quality 2.0 k Quality 2.6 k Quality 3.2 k Quality 3.8 k Quality 5.0 k Quality 200 Quality 260 Quality 320 Quality 380 Quality 500 | Damage bonus Piercing Power: 2200 | Used as"
  },
  {
    "type": "wiki",
    "name": "Uranium cannon shell",
    "content": "380 Quality 500 | Damage bonus Piercing Power: 2200 | Used as ammunition by | Tank | Prototype type ammo | Internal name uranium-cannon-shell | Required technologies | Uranium_ammo_(research) | Boosting technologies | Physical_projectile_damage_(research)Weapon_shooting_speed_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The uranium cannon shells are an advanced ammunition type for the Tank along with explosive uranium cannon shells . Once they are"
  },
  {
    "type": "wiki",
    "name": "Uranium cannon shell",
    "content": "Tank along with explosive uranium cannon shells . Once they are made available, they surpass their regular variant; their damage and piercing power is increased twofold. Since regular shells are still specifically required to manufacture uranium variants, any previously manufactured stockpile can be \"upgraded\" without waste. While uranium cannon shells still deal an amount of explosive damage, it is only dealt on the directly hit target and it is also a much lower amount than what explosive shells deal;"
  },
  {
    "type": "wiki",
    "name": "Uranium cannon shell",
    "content": "it is also a much lower amount than what explosive shells deal; its primary damage outlet is physical and therefore better suited against worms , nests and large spitters for their lesser resistances against it. These shells also feature the greatest piercing power in the game that is reliable for anything but the largest enemies, even capable of destroying two nests in one shot."
  },
  {
    "type": "wiki",
    "name": "Explosive uranium cannon shell",
    "content": "Recipe | Time 12+Explosive_cannon_shell 1+Uranium-2381 → Explosive_uranium_cannon_shell 1 | Total raw | Time 20+Explosives 2+Plastic_bar 2+Steel_plate 2+Uranium-2381 | Stack size 100 | Range 30 | Damage Impact:Quality 350 Quality 455 Quality 560 Quality 665 Quality 875(physical)Area of effect:Quality 315 Quality 410 Quality 504 Quality 599 Quality 788(explosion) Quality 350 Quality 455 Quality 560 Quality 665 Quality 875 Quality 315 Quality 410 Quality 504 Quality 599 Quality 788 | Damage bonus Piercing"
  },
  {
    "type": "wiki",
    "name": "Explosive uranium cannon shell",
    "content": "410 Quality 504 Quality 599 Quality 788 | Damage bonus Piercing Power: 150 | Area of effect size 4.25 | Used as ammunition by | Tank | Prototype type ammo | Internal name explosive-uranium-cannon-shell | Required technologies | Uranium_ammo_(research) | Boosting technologies | Physical_projectile_damage_(research)Weapon_shooting_speed_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The explosive uranium cannon shells are an advanced ammunition type for"
  },
  {
    "type": "wiki",
    "name": "Explosive uranium cannon shell",
    "content": "uranium cannon shells are an advanced ammunition type for the tank along with uranium cannon shells . Once they are made available, they surpass their regular variant; their damage and piercing power is increased, leaning more towards physical damage improvement. Since regular shells are still specifically required to manufacture uranium variants, any previously manufactured stockpile can be \"upgraded\" without waste. The piercing power of the shells has little practical use in spite of its improvement,"
  },
  {
    "type": "wiki",
    "name": "Explosive uranium cannon shell",
    "content": "shells has little practical use in spite of its improvement, which can be made insignificant since the enemy may often \"outgrow\" it by the time this ammunition is obtained. Its raw damage advantage otherwise found in the non-uranium explosive shell is also no longer as substantial; because of the kinetic energy nature of uranium-based ammunition, uranium cannon shells receive a much greater improvement overall, \"catching up\" in terms of raw damage potential, making explosive shell use on"
  },
  {
    "type": "wiki",
    "name": "Explosive uranium cannon shell",
    "content": "in terms of raw damage potential, making explosive shell use on explosive-resistant enemies like worms , nests and especially spitters even more discouraging. However, this imbalance can be limited through research , and its area-of-effect damage has undeniable benefits."
  },
  {
    "type": "wiki",
    "name": "Artillery shell",
    "content": "Recipe | Time 15+Explosive_cannon_shell 4+Explosives 8+Radar 1 → Artillery_shell 1 | Total raw | Time 56.25+Copper_plate 7.5+Explosives 16+Iron_plate 25+Plastic_bar 8+Steel_plate 8 | Stack size 1 | Damage Quality 1000 Quality 1300 Quality 1600 Quality 1900 Quality 2500(physical)Quality 1000 Quality 1300 Quality 1600 Quality 1900 Quality 2500(explosion) Quality 1000 Quality 1300 Quality 1600 Quality 1900 Quality 2500 Quality 1000 Quality 1300 Quality 1600 Quality 1900 Quality 2500 | Area of effect size 4 |"
  },
  {
    "type": "wiki",
    "name": "Artillery shell",
    "content": "1600 Quality 1900 Quality 2500 | Area of effect size 4 | Used as ammunition by | Artillery_turretArtillery_wagon | Prototype type ammo | Internal name artillery-shell | Required technologies | Artillery_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The artillery shell is used as ammunition by artillery . It is a rather slow projectile that is shown on the map and explores every chunk as it travels to its target. It deals enough damage to destroy any"
  },
  {
    "type": "wiki",
    "name": "Artillery shell",
    "content": "it travels to its target. It deals enough damage to destroy any enemy nest or worm within two shots. While artillery shells have a stack size of 1, they can stack up to 100 inside the inventory of the artillery wagon itself and up to 15 inside the artillery turret ."
  },
  {
    "type": "wiki",
    "name": "Rocket",
    "content": "Recipe | Time 4+Explosives 1+Iron_plate 2 → Rocket 1 | Total raw | Time 4+Explosives 1+Iron_plate 2 | Stack size 100 | Damage Quality 200 Quality 260 Quality 320 Quality 380 Quality 500(explosion) Quality 200 Quality 260 Quality 320 Quality 380 Quality 500 | Used as ammunition by | Rocket_launcherSpidertronRocket_turret | Prototype type projectile | Internal name rocket | Required technologies | Rocketry_(research) | Boosting technologies | Stronger_explosives_(research)Weapon_shooting_speed_(research) |"
  },
  {
    "type": "wiki",
    "name": "Rocket",
    "content": "| Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Explosive_rocket | This article is about the explosive ammo for the rocket launcher. For the large end-game rocket silo, see Rocket silo . Rockets are the common ammunition for the rocket launcher , rocket turret and the spidertron . They have high range and damage which makes them perfect for attacking enemy buildings ."
  },
  {
    "type": "wiki",
    "name": "Explosive rocket",
    "content": "Recipe | Time 8+Explosives 2+Rocket 1 → Explosive_rocket 1 | Total raw | Time 12+Explosives 3+Iron_plate 2 | Stack size 100 | Damage Impact:Quality 50 Quality 65 Quality 80 Quality 95 Quality 125(explosion)Area of effect:Quality 100 Quality 130 Quality 160 Quality 190 Quality 250(explosion) Quality 50 Quality 65 Quality 80 Quality 95 Quality 125 Quality 100 Quality 130 Quality 160 Quality 190 Quality 250 | Area of effect size 6.5 | Used as ammunition by | Rocket_launcherSpidertronRocket_turret | Prototype"
  },
  {
    "type": "wiki",
    "name": "Explosive rocket",
    "content": "by | Rocket_launcherSpidertronRocket_turret | Prototype type projectile | Internal name explosive-rocket | Required technologies | Explosive_rocketry_(research) | Boosting technologies | Stronger_explosives_(research)Weapon_shooting_speed_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Explosive rockets are ammunition for the rocket launcher , rocket turret and the spidertron . They have high range and damage which makes them perfect for attacking enemy"
  },
  {
    "type": "wiki",
    "name": "Explosive rocket",
    "content": "range and damage which makes them perfect for attacking enemy buildings . While the total base damage is only 150 vs the 200 from a standard rocket , 100 of it is splash, which can be highly effective against groups of enemies. This is approximately triple that of a grenade ."
  },
  {
    "type": "wiki",
    "name": "Atomic bomb",
    "content": "Recipe | Time 50+Explosives 10+Processing_unit 10+Uranium-23530 → Atomic_bomb 1 | Total raw | Time 50+Explosives 10+Processing_unit 10+Uranium-23530 | Stack size 10 | Range 54 | Damage Impact:Quality 400 Quality 520 Quality 640 Quality 760 Quality 1000(explosion)Area of effect (first wave):Quality 1000×100 Quality 1000×130 Quality 1000×160 Quality 1000×190 Quality 1000×250(explosion)Area of effect (second wave):Quality 1000×400 Quality 1000×520 Quality 1000×640 Quality 1000×760 Quality 1000×1000(explosion)"
  },
  {
    "type": "wiki",
    "name": "Atomic bomb",
    "content": "Quality 1000×640 Quality 1000×760 Quality 1000×1000(explosion) Quality 400 Quality 520 Quality 640 Quality 760 Quality 1000 Quality 1000×100 Quality 1000×130 Quality 1000×160 Quality 1000×190 Quality 1000×250 Quality 1000×400 Quality 1000×520 Quality 1000×640 Quality 1000×760 Quality 1000×1000 | Area of effect size 35 | Used as ammunition by | Rocket_launcherSpidertronRocket_turret | Prototype type ammo | Internal name atomic-bomb | Required technologies | Atomic_bomb_(research) | Boosting technologies |"
  },
  {
    "type": "wiki",
    "name": "Atomic bomb",
    "content": "technologies | Atomic_bomb_(research) | Boosting technologies | Stronger_explosives_(research)Weapon_shooting_speed_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Atomic bombs are very expensive alternative ammunition for the rocket launcher , rocket turret and the spidertron . They deal incredible damage over a wide area, capable of wiping out groups of enemies with ease. They can also kill even the most heavily-armored player, so they should be fired"
  },
  {
    "type": "wiki",
    "name": "Atomic bomb",
    "content": "even the most heavily-armored player, so they should be fired from a great distance. Instead of dealing all of its damage in a single explosion, the atomic bomb creates two waves of 1000 small, high-damage explosions in an expanding ring. One wave of explosions expands to a radius of 7 with each of the 1000 explosions dealing 100 damage in a radius of 3. The second wave of explosions expands to cover a radius of 35 and each of the 1000 explosions deals 400 damage in a radius of 3. This results in high"
  },
  {
    "type": "wiki",
    "name": "Atomic bomb",
    "content": "deals 400 damage in a radius of 3. This results in high damage at the center of the atomic bomb, which decreases towards the edge of the 35-tile radius. The impact of the atomic bomb creates a black scorch mark in a 12-tile radius that never disappears and is visible from the map. All tiles in an oval approximately 24 tiles wide and 17 tiles high will be converted into nuclear ground, which affects pollution absorption and prevents the removal of any former landfill and foundation tiles in the blast"
  },
  {
    "type": "wiki",
    "name": "Atomic bomb",
    "content": "of any former landfill and foundation tiles in the blast radius. Furthermore, the atomic bomb will permanently destroy cliffs and decorative objects in a 9-14 tile radius around the center. In Space Age , detonating an atomic bomb on Vulcanus or Aquilo will replace ground tiles with lava and ammonia respectively instead of nuclear ground. All mineable resources and sulfuric acid geysers on the affected tiles will be destroyed in the process; fluorine vents and lithium brine deposits are unaffected."
  },
  {
    "type": "wiki",
    "name": "Flamethrower ammo",
    "content": "Recipe | Time 6+Crude_oil 100+Steel_plate 5 → Flamethrower_ammo 1 | Total raw | Time 6+Crude_oil 100+Steel_plate 5 | Stack size 100 | Shooting speed 30/s | Damage Damage:Quality 60/sQuality 78/sQuality 96/sQuality 114/sQuality 150/s(fire)Duration:Quality 30 sQuality 39 sQuality 48 sQuality 57 sQuality 75 sContact damage: 2 (fire)Fire on the ground: 13/s (fire)Ignited objects: 100/s (fire) Quality 60/s Quality 78/s Quality 96/s Quality 114/s Quality 150/s Quality 30 s Quality 39 s Quality 48 s Quality 57 s"
  },
  {
    "type": "wiki",
    "name": "Flamethrower ammo",
    "content": "150/s Quality 30 s Quality 39 s Quality 48 s Quality 57 s Quality 75 s | Area of effect size 2.5 | Magazine size 100 | Used as ammunition by | FlamethrowerTank | Prototype type ammo | Internal name flamethrower-ammo | Required technologies | Flamethrower_(research) | Boosting technologies | Refined_flammables_(research) | Produced by | Chemical_plant | Fire on the ground lasts 2 seconds. Area of effect size applies to igniting objects and contact damage. Objects are ignited for 30 seconds. | This"
  },
  {
    "type": "wiki",
    "name": "Flamethrower ammo",
    "content": "and contact damage. Objects are ignited for 30 seconds. | This ammunition is used for the flamethrower . Currently this is the only available type of flamethrower ammunition. One flamethrower ammo item lasts 1.66 seconds (100 ticks). Note that flamethrower turrets use oil directly instead of this ammo."
  },
  {
    "type": "wiki",
    "name": "Grenade",
    "content": "Recipe | Time 8+Coal 10+Iron_plate 5 → Grenade 1 | Total raw | Time 8+Coal 10+Iron_plate 5 | Stack size 100 | Range Quality 15 Quality 16.5 Quality 18 Quality 19.5 Quality 22.5 Quality 15 Quality 16.5 Quality 18 Quality 19.5 Quality 22.5 | Shooting speed 2/s | Damage Quality 35 Quality 45.5 Quality 56 Quality 66.5 Quality 87.5(explosion) Quality 35 Quality 45.5 Quality 56 Quality 66.5 Quality 87.5 | Area of effect size 6.5 | Prototype type projectile | Internal name grenade | Required technologies |"
  },
  {
    "type": "wiki",
    "name": "Grenade",
    "content": "projectile | Internal name grenade | Required technologies | Military_2_(research)2 | Boosting technologies | Stronger_explosives_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Cliff_explosivesCluster_grenadeMilitary_science_pack | The grenade is a basic explosive weapon that is throw-able within a short distance, dealing damage in a small area of effect. It is effective against small biters and small spitters . Its damage can be increased"
  },
  {
    "type": "wiki",
    "name": "Grenade",
    "content": "small biters and small spitters . Its damage can be increased with research . Grenades can also be used as an ingredient to craft the more powerful cluster grenade . Additionally, the grenade's decent blast radius allows it to quickly clear out dense areas of structures or trees , and its low cost makes it ideal for quick early-game deforestation."
  },
  {
    "type": "wiki",
    "name": "Cluster grenade",
    "content": "Recipe | Time 8+Explosives 5+Grenade 7+Steel_plate 5 → Cluster_grenade 1 | Total raw | Time 64+Coal 70+Explosives 5+Iron_plate 35+Steel_plate 5 | Cluster size: 7 | Stack size 100 | Range Quality 20 Quality 22 Quality 24 Quality 26 Quality 30 Quality 20 Quality 22 Quality 24 Quality 26 Quality 30 | Shooting speed 2/s | Damage Quality 35 Quality 45.5 Quality 56 Quality 66.5 Quality 87.5(explosion) Quality 35 Quality 45.5 Quality 56 Quality 66.5 Quality 87.5 | Area of effect size 11 | Prototype type projectile"
  },
  {
    "type": "wiki",
    "name": "Cluster grenade",
    "content": "87.5 | Area of effect size 11 | Prototype type projectile | Internal name cluster-grenade | Required technologies | Military_4_(research)4 | Boosting technologies | Stronger_explosives_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The cluster grenade is an advanced grenade which has a slightly better range than the basic grenade , and splits into 7 basic grenades when impacting its target. Its damage can be increased further with research . Compared to"
  },
  {
    "type": "wiki",
    "name": "Cluster grenade",
    "content": "Its damage can be increased further with research . Compared to the basic grenade, its increased blast radius makes it much better for clearing out dense areas, as well as swarms of enemies and enemy nests."
  },
  {
    "type": "wiki",
    "name": "Poison capsule",
    "content": "Recipe | Time 8+Coal 10+Electronic_circuit 3+Steel_plate 3 → Poison_capsule 1 | Total raw | Time 11.75+Coal 10+Copper_plate 4.5+Iron_plate 3+Steel_plate 3 | Stack size 100 | Range Quality 25 Quality 27.5 Quality 30 Quality 32.5 Quality 37.5 Quality 25 Quality 27.5 Quality 30 Quality 32.5 Quality 37.5 | Shooting speed 2/s | Damage Quality 8 Quality 10.4 Quality 12.8 Quality 15.2 Quality 20(poison) Quality 8 Quality 10.4 Quality 12.8 Quality 15.2 Quality 20 | Area of effect size 11 | Prototype type projectile"
  },
  {
    "type": "wiki",
    "name": "Poison capsule",
    "content": "Quality 20 | Area of effect size 11 | Prototype type projectile | Internal name poison-capsule | Required technologies | Military_3_(research)3 | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The poison capsule is a basic capsule that creates a large, long-lasting cloud of at the target area, dealing 8 poison damage twice a second, totaling to 320 poison damage over 20s. The damage from multiple poison capsules can stack. This is one of the most effective ways of"
  },
  {
    "type": "wiki",
    "name": "Poison capsule",
    "content": "capsules can stack. This is one of the most effective ways of removing trees . Poison capsules can be used to effectively kill worms as they are stationary. This technique is a relatively safe and cheap way to eliminate clusters of worms - it takes 5 poison capsules to kill a big Worm and the capsules can be thrown from outside the big Worm's spitting range. Since spawners are not affected by poison damage, poison capsules are useless against them. Poison capsules do not harm the player's structures,"
  },
  {
    "type": "wiki",
    "name": "Poison capsule",
    "content": "them. Poison capsules do not harm the player's structures, robots or vehicles, but do harm players themselves unless they are in a vehicle. Poison capsules are particularly effective when deployed from the tank , as the tank can park inside a cloud of poison to lure enemies to their death."
  },
  {
    "type": "wiki",
    "name": "Slowdown capsule",
    "content": "Recipe | Time 8+Coal 5+Electronic_circuit 2+Steel_plate 2 → Slowdown_capsule 1 | Total raw | Time 10.5+Coal 5+Copper_plate 3+Iron_plate 2+Steel_plate 2 | Stack size 100 | Range Quality 25 Quality 27.5 Quality 30 Quality 32.5 Quality 37.5 Quality 25 Quality 27.5 Quality 30 Quality 32.5 Quality 37.5 | Shooting speed 2/s | Area of effect size 9 | Prototype type projectile | Internal name slowdown-capsule | Required technologies | Military_3_(research)3 | Produced by | Assembling_machine_1 Assembling_machine_2"
  },
  {
    "type": "wiki",
    "name": "Slowdown capsule",
    "content": "| Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The slowdown capsule is a basic capsule that, when thrown, will slow down all enemy movement within a wide radius of where it landed. Slowdown effect reduces movement speed by 75% for 30 seconds. Vehicles, demolishers , players and friendly forces are not affected."
  },
  {
    "type": "wiki",
    "name": "Defender capsule",
    "content": "Recipe | Time 8+Electronic_circuit 3+Iron_gear_wheel 3+Piercing_rounds_magazine 3 → Defender_capsule 1 | Total raw | Time 25.25+Copper_plate 19.5+Iron_plate 21+Steel_plate 3 | Resistances Acid: 0/80%Fire: 0/95% | Lifespan 45 seconds | Stack size 100 | Range Quality 20 Quality 22 Quality 24 Quality 26 Quality 30(Capsule)Quality 15 Quality 16.5 Quality 18 Quality 19.5 Quality 22.5(Defender) Quality 20 Quality 22 Quality 24 Quality 26 Quality 30 Quality 15 Quality 16.5 Quality 18 Quality 19.5 Quality 22.5 |"
  },
  {
    "type": "wiki",
    "name": "Defender capsule",
    "content": "Quality 15 Quality 16.5 Quality 18 Quality 19.5 Quality 22.5 | Shooting speed 4/s (Capsule)3/s (Defender) | Damage Quality 8 Quality 10.4 Quality 12.8 Quality 15.2 Quality 20 physical Quality 8 Quality 10.4 Quality 12.8 Quality 15.2 Quality 20 | Prototype type projectile | Internal name defender-capsule | Required technologies | Defender_(research) | Boosting technologies | Weapon_shooting_speed_(research)Physical_projectile_damage_(research)Follower_robot_count_(research) | Produced by |"
  },
  {
    "type": "wiki",
    "name": "Defender capsule",
    "content": "| Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Distractor_capsule | A basic capsule which, when used, will spawn a single defender robot. The defender has infinite ammunition and will follow the player, attacking any enemies that come within range, until it is destroyed or its lifespan elapses. Contents 1 Achievements 2 Strategy 3 Count Limit 4 History 5 See also Achievements Minions Have 100 combat robots or more following you. Strategy Follower"
  },
  {
    "type": "wiki",
    "name": "Defender capsule",
    "content": "Have 100 combat robots or more following you. Strategy Follower robots will only loosely follow the player and are subject to inertia. This allows the player to 'swing' packs of follower robots into enemy bases to damage enemy structures with less risk to himself. Launching distractor capsules into the enemy base, as well as using the speed of the car or exoskeleton can further reduce damage to the player. Defender being spawned and following the player. Count Limit The maximum number of active Defender"
  },
  {
    "type": "wiki",
    "name": "Defender capsule",
    "content": "the player. Count Limit The maximum number of active Defender robots is limited by the follower robot count research. While using follower robots, the number of robots in-use will be visible on an icon to the right of the quick-bar. Hovering over the icon with the cursor will show the types of robots and the currently researched maximum."
  },
  {
    "type": "wiki",
    "name": "Distractor capsule",
    "content": "Recipe | Time 15+Advanced_circuit 3+Defender_capsule 4 → Distractor_capsule 1 | Total raw | Time 144.5+Copper_plate 93+Iron_plate 90+Plastic_bar 6+Steel_plate 12 | Resistances Acid: 0/85%Fire: 0/95% | Lifespan 90 seconds | Stack size 100 | Range Quality 25 Quality 27.5 Quality 30 Quality 32.5 Quality 37.5(Capsule)Quality 15 Quality 16.5 Quality 18 Quality 19.5 Quality 22.5(Distractor) Quality 25 Quality 27.5 Quality 30 Quality 32.5 Quality 37.5 Quality 15 Quality 16.5 Quality 18 Quality 19.5 Quality 22.5 |"
  },
  {
    "type": "wiki",
    "name": "Distractor capsule",
    "content": "Quality 15 Quality 16.5 Quality 18 Quality 19.5 Quality 22.5 | Shooting speed 2/s (Capsule)1.5/s (Distractor) | Damage Quality 5 Quality 6.5 Quality 8 Quality 9.5 Quality 12.5 laser Quality 5 Quality 6.5 Quality 8 Quality 9.5 Quality 12.5 | Prototype type projectile | Internal name distractor-capsule | Required technologies | Distractor_(research) | Boosting technologies | Energy_weapons_damage_(research)Laser_shooting_speed_(research) | Produced by | Assembling_machine_1 Assembling_machine_2"
  },
  {
    "type": "wiki",
    "name": "Distractor capsule",
    "content": "| Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Destroyer_capsule | A capsule which, when used by right-clicking, will spawn three Distractor robots at the players cursor. Distractors have infinite laser energy and will hold their general position, attacking any enemies that come within range, until they are destroyed or their lifespans elapse. The shooting speed of the distractors is increased by the laser shooting speed (research) . Contents 1"
  },
  {
    "type": "wiki",
    "name": "Distractor capsule",
    "content": "increased by the laser shooting speed (research) . Contents 1 Strategy 1.1 Count limit 2 History 3 See also Strategy Distractor robots can be useful for providing temporary defense for weak or undefended areas during Biter attacks. They are also very useful for drawing the fire of enemy worms while attacking Biter bases. Simply fire one or more Distractor capsules into the midst of enemy worms and, as long as they have not already targeted the player, the worms will prioritize killing the Distractors."
  },
  {
    "type": "wiki",
    "name": "Distractor capsule",
    "content": "the player, the worms will prioritize killing the Distractors. Count limit Since the distractor robot is stationary, it is unaffected by and does not count toward the follower robot count limit imposed on other combat robots or towards the minions (achievement) . The number of concurrently spawned distractors is limited only by their lifespan, number of distractor capsules carried, and delay in spawning."
  },
  {
    "type": "wiki",
    "name": "Destroyer capsule",
    "content": "Recipe | Time 15+Distractor_capsule 4+Speed_module 1 → Destroyer_capsule 1 | Total raw | Time 661.75+Copper_plate 404.5+Iron_plate 375+Plastic_bar 34+Steel_plate 48 | Resistances Acid: 0/90%Fire: 0/95% | Lifespan 120 seconds | Stack size 100 | Range Quality 25 Quality 27.5 Quality 30 Quality 32.5 Quality 37.5(Capsule)Quality 20 Quality 22 Quality 24 Quality 26 Quality 30(Destroyer) Quality 25 Quality 27.5 Quality 30 Quality 32.5 Quality 37.5 Quality 20 Quality 22 Quality 24 Quality 26 Quality 30 | Shooting"
  },
  {
    "type": "wiki",
    "name": "Destroyer capsule",
    "content": "20 Quality 22 Quality 24 Quality 26 Quality 30 | Shooting speed 2/s (Capsule)3/s (Destroyer) | Damage Quality 20 Quality 26 Quality 32 Quality 38 Quality 50 electric Quality 20 Quality 26 Quality 32 Quality 38 Quality 50 | Prototype type projectile | Internal name destroyer-capsule | Required technologies | Destroyer_(research) | Boosting technologies | Energy_weapons_damage_(research)Follower_robot_count_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting |"
  },
  {
    "type": "wiki",
    "name": "Destroyer capsule",
    "content": "Assembling_machine_2 Assembling_machine_3 Crafting | Destroyer capsules are advanced and expensive capsules that, when thrown with the right mouse button, spawn five powerful Destroyer robots. The Destroyer robots have infinite electrical energy and will follow the player, attacking any enemies that come within range, until they run out of health or their lifespans elapse. Contents 1 Achievements 2 Strategy 3 Count limit 4 History 5 See also Achievements Minions Have 100 combat robots or more following"
  },
  {
    "type": "wiki",
    "name": "Destroyer capsule",
    "content": "Achievements Minions Have 100 combat robots or more following you. Strategy Follower robots will only loosely follow the player and are subject to inertia. This allows the player to 'swing' packs of defender/destroyer robots into enemy bases to damage enemy structures with less risk to himself. Launching distractor capsules into the enemy base beforehand, as well as using the speed of the car or exoskeleton can further reduce damage to the player. Destroyers being spawned and following the player. Count"
  },
  {
    "type": "wiki",
    "name": "Destroyer capsule",
    "content": "Destroyers being spawned and following the player. Count limit The maximum number of active Destroyer robots is limited by the follower robot count (research) . While using follower robots, the number of robots in use will be visible in an icon to the right of the quick-bar. Hovering over the icon with the cursor will show the types of robots and the currently researched maximum."
  },
  {
    "type": "wiki",
    "name": "Light armor",
    "content": "Recipe | Time 3+Iron_plate 40 → Light_armor 1 | Total raw | Time 3+Iron_plate 40 | Resistances Acid: 0/20%Explosion: 2/20%Fire: 0/10%Physical: 3/20% | Stack size 1 | Durability Infinite | Prototype type armor | Internal name light-armor | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Light armor is the most basic craftable armor type. It provides considerable protection against the smallest of biters, effectively reducing their 7 damage to 4. Light armor struggles"
  },
  {
    "type": "wiki",
    "name": "Light armor",
    "content": "effectively reducing their 7 damage to 4. Light armor struggles to protect against larger biters and offers almost no protection against spitters or worms."
  },
  {
    "type": "wiki",
    "name": "Heavy armor",
    "content": "Recipe | Time 8+Copper_plate 100+Steel_plate 50 → Heavy_armor 1 | Total raw | Time 8+Copper_plate 100+Steel_plate 50 | Resistances Acid: 0/40%Explosion: 20/30%Fire: 0/30%Physical: 6/30% | Stack size 1 | Durability Infinite | Prototype type armor | Internal name heavy-armor | Required technologies | Heavy_armor_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Heavy armor provides more protection than light armor , nearly nullifying the damage from small"
  },
  {
    "type": "wiki",
    "name": "Heavy armor",
    "content": "than light armor , nearly nullifying the damage from small biters (from 7 damage to 0.7) as well as providing respectable protection from medium biters, spitters and worms. Additionally, it provides excellent protection against accidental self-inflicted damage from grenades ."
  },
  {
    "type": "wiki",
    "name": "Modular armor",
    "content": "Recipe | Time 15+Advanced_circuit 30+Steel_plate 50 → Modular_armor 1 | Total raw | Time 300+Copper_plate 150+Iron_plate 60+Plastic_bar 60+Steel_plate 50 | Resistances Acid: 0/50%Explosion: 30/35%Fire: 0/40%Physical: 6/30% | Inventory size bonus Quality 10 Quality 13 Quality 16 Quality 19 Quality 25 Quality 10 Quality 13 Quality 16 Quality 19 Quality 25 | Equipment grid size Quality 5×5 Quality 6×6 Quality 7×7 Quality 8×8 Quality 10×10 Quality 5×5 Quality 6×6 Quality 7×7 Quality 8×8 Quality 10×10 | Stack"
  },
  {
    "type": "wiki",
    "name": "Modular armor",
    "content": "5×5 Quality 6×6 Quality 7×7 Quality 8×8 Quality 10×10 | Stack size 1 | Durability Infinite | Prototype type armor | Internal name modular-armor | Accepted equipment | Portable_solar_panelPortable_fission_reactorEnergy_shieldEnergy_shield_MK 2 Personal_batteryPersonal_battery_MK 2 Personal_laser_defenseDischarge_defenseExoskeletonPersonal_roboportPersonal_roboport_MK 2 NightvisionBelt_immunity_equipment | Required technologies | Modular_armor_(research) | Produced by | Assembling_machine_1"
  },
  {
    "type": "wiki",
    "name": "Modular armor",
    "content": "| Modular_armor_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Modular armor offers a modest increase in acid resistance over its predecessor and a notable increase in explosion resistance, but its greatest bonus comes in the form of equipment modules . The Modular armor offers a 5×5 grid that can be customized with an assortment of modules for defense, support or attack. Right click on the armor to show the equipment grid. Left clicking the equipped"
  },
  {
    "type": "wiki",
    "name": "Modular armor",
    "content": "armor to show the equipment grid. Left clicking the equipped armor will pick it up and unequip it, eliminating its inventory bonus. If the player's inventory is too full to be contained without the extra inventory slots, removing the armor will fail with a message stating \"Cannot remove armor. Insufficient inventory space if removed.\""
  },
  {
    "type": "wiki",
    "name": "Power armor",
    "content": "Recipe | Time 20+Electric_engine_unit 20+Processing_unit 40+Steel_plate 40 → Power_armor 1 | Total raw | Time 20+Electric_engine_unit 20+Processing_unit 40+Steel_plate 40 | Resistances Acid: 0/60%Explosion: 40/40%Fire: 0/60%Physical: 8/30% | Inventory size bonus Quality 20 Quality 26 Quality 32 Quality 38 Quality 50 Quality 20 Quality 26 Quality 32 Quality 38 Quality 50 | Equipment grid size Quality 6×8 Quality 7×9 Quality 8×10 Quality 9×11 Quality 11×13 Quality 6×8 Quality 7×9 Quality 8×10 Quality 9×11"
  },
  {
    "type": "wiki",
    "name": "Power armor",
    "content": "Quality 11×13 Quality 6×8 Quality 7×9 Quality 8×10 Quality 9×11 Quality 11×13 | Stack size 1 | Durability Infinite | Prototype type armor | Internal name power-armor | Accepted equipment | Portable_solar_panelPortable_fission_reactorEnergy_shieldEnergy_shield_MK 2 Personal_batteryPersonal_battery_MK 2 Personal_laser_defenseDischarge_defenseExoskeletonPersonal_roboportPersonal_roboport_MK 2 NightvisionBelt_immunity_equipment | Required technologies | Power_armor_(research) | Produced by |"
  },
  {
    "type": "wiki",
    "name": "Power armor",
    "content": "Required technologies | Power_armor_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Power armor provides yet another increase in inventory and defense over modular armor , in addition to a larger 6×8 grid for equipment modules . Access the equipment grid by right-clicking on the armor. Equipping the armor adds 20 slots to the player 's inventory. As with all modular armor, taking off the armor will remove the inventory bonus, and any items in the extra"
  },
  {
    "type": "wiki",
    "name": "Power armor",
    "content": "will remove the inventory bonus, and any items in the extra inventory slots will prevent the player from unequipping the armor."
  },
  {
    "type": "wiki",
    "name": "Power armor MK2",
    "content": "Recipe | Time 25+Efficiency_module_225+Electric_engine_unit 40+Low_density_structure 30+Processing_unit 60+Speed_module_225 → Power_armor_MK 21 | Total raw | Time 18.1 k+Copper_plate 8.4 k+Electric_engine_unit 40+Iron_plate 3.5 k+Plastic_bar 2.7 k+Processing_unit 310+Steel_plate 60 | Resistances Acid: 0/70%Explosion: 60/50%Fire: 0/70%Physical: 10/40% | Inventory size bonus Quality 30 Quality 39 Quality 48 Quality 57 Quality 75 Quality 30 Quality 39 Quality 48 Quality 57 Quality 75 | Equipment grid size"
  },
  {
    "type": "wiki",
    "name": "Power armor MK2",
    "content": "39 Quality 48 Quality 57 Quality 75 | Equipment grid size Quality 10×10 Quality 11 x 11 Quality 12 x 12 Quality 13 x 13 Quality 15 x 15 Quality 10×10 Quality 11 x 11 Quality 12 x 12 Quality 13 x 13 Quality 15 x 15 | Stack size 1 | Durability Infinite | Prototype type armor | Internal name power-armor-mk 2 | Accepted equipment | Personal_batteryPersonal_battery_MK 2 Personal_battery_MK 3 Discharge_defenseEnergy_shieldEnergy_shield_MK 2"
  },
  {
    "type": "wiki",
    "name": "Power armor MK2",
    "content": "3 Discharge_defenseEnergy_shieldEnergy_shield_MK 2 ExoskeletonPortable_fission_reactorPortable_fusion_reactorNightvisionPersonal_laser_defensePersonal_roboportPersonal_roboport_MK 2 Portable_solar_panelToolbelt_equipmentBelt_immunity_equipment | Required technologies | Power_armor_MK 2_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Power armor MK2 is the strongest power armor in the base game and the second strongest armor in Space Age , surpassed only"
  },
  {
    "type": "wiki",
    "name": "Power armor MK2",
    "content": "and the second strongest armor in Space Age , surpassed only by mech armor . It has increased resistances over basic power armor and a 10×10 equipment grid, making it larger than the grid of the spidertron . Access the equipment grid by right-clicking on the armor. Equipping the armor adds 30 slots to the player 's inventory (in normal quality). As with all modular armor, taking off the armor will remove the inventory bonus, and any items in the extra inventory slots will prevent the player from"
  },
  {
    "type": "wiki",
    "name": "Power armor MK2",
    "content": "items in the extra inventory slots will prevent the player from unequipping the armor. Contents 1 Achievements 2 Gallery 3 History 4 See also Achievements Look at my shiny rare armor Equip rare or better quality of power armor MK2 or mech armor ."
  },
  {
    "type": "wiki",
    "name": "Portable solar panel",
    "content": "Recipe | Time 10+Advanced_circuit 2+Solar_panel 1+Steel_plate 5 → Portable_solar_panel 1 | Total raw | Time 57.75+Copper_plate 37.5+Iron_plate 19+Plastic_bar 4+Steel_plate 10 | Stack size 20 | Dimensions 1×1 | Placed in | TankSpidertronModular_armorPower_armorPower_armor_MK 2 Mech_armor | Power output Quality 30 kWQuality 39 kWQuality 48 kWQuality 57 kWQuality 75 kWelectric Quality 30 kW Quality 39 kW Quality 48 kW Quality 57 kW Quality 75 kW | Prototype type solar-panel-equipment | Internal name"
  },
  {
    "type": "wiki",
    "name": "Portable solar panel",
    "content": "75 kW | Prototype type solar-panel-equipment | Internal name solar-panel-equipment | Required technologies | Portable_solar_panel_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Portable solar panels are the basic power generating units for modular armor and the spidertron . They provide only a small amount of power, and only during the daytime. Portable solar panels can be used to slowly recharge energy shields out of combat, but are nearly useless for"
  },
  {
    "type": "wiki",
    "name": "Portable solar panel",
    "content": "energy shields out of combat, but are nearly useless for personal laser defense or exoskeleton , even with a large number of batteries . Portable solar panels are 1×1 in size and are therefore primarily used in modular armor , which has a 5×5 grid that cannot usefully hold a much more powerful 4×4 portable fission reactor or portable fusion reactor . (It could store one, but there would be no room for anything to use the power.) The more advanced armors should almost always use portable fusion reactors"
  },
  {
    "type": "wiki",
    "name": "Portable solar panel",
    "content": "armors should almost always use portable fusion reactors instead."
  },
  {
    "type": "wiki",
    "name": "Portable fission reactor",
    "content": "Recipe | Time 10+Low_density_structure 50+Processing_unit 200+Uranium_fuel_cell 4 → Portable_fission_reactor 1 | Total raw | Time 764+Copper_plate 1 k+Iron_plate 4+Plastic_bar 250+Processing_unit 200+Steel_plate 100+Uranium-2350.4+Uranium-2387.6 | Stack size 20 | Dimensions 4×4 | Placed in | TankSpidertronModular_armorPower_armorPower_armor_MK 2 Mech_armor | Power output Quality 750 kWQuality 975 kWQuality 1.2 MWQuality 1.43 MWQuality 1.88 MWelectric Quality 750 kW Quality 975 kW Quality 1.2 MW Quality 1.43"
  },
  {
    "type": "wiki",
    "name": "Portable fission reactor",
    "content": "Quality 750 kW Quality 975 kW Quality 1.2 MW Quality 1.43 MW Quality 1.88 MW | Prototype type generator-equipment | Internal name fission-reactor-equipment | Required technologies | Portable_fission_reactor_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Spidertron | Portable fission reactors are advanced power generating modules for modular armor , power armor , power armor MK2 and the spidertron . They generate 750kW of power, equivalent"
  },
  {
    "type": "wiki",
    "name": "Portable fission reactor",
    "content": "and the spidertron . They generate 750kW of power, equivalent to 25 portable solar panels , while taking up only a 4×4 area in the equipment grid. Portable fission reactors are an unlimited source of energy and require nothing to power them. Portable fission reactors are essential items for power armor and power armor MK2, as running the many other modules in these armors would take far too many solar panels to be practical."
  },
  {
    "type": "wiki",
    "name": "Personal battery",
    "content": "Recipe | Time 10+Battery 5+Steel_plate 10 → Personal_battery 1 | Total raw | Time 10+Battery 5+Steel_plate 10 | Stack size 20 | Dimensions 1×2 | Placed in | TankSpidertronModular_armorPower_armorPower_armor_MK 2 Mech_armor | Energy capacity Quality 20 MJQuality 26 MJQuality 32 MJQuality 38 MJQuality 50 MJ(Electric_system) Quality 20 MJ Quality 26 MJ Quality 32 MJ Quality 38 MJ Quality 50 MJ | Prototype type battery-equipment | Internal name battery-equipment | Required technologies |"
  },
  {
    "type": "wiki",
    "name": "Personal battery",
    "content": "| Internal name battery-equipment | Required technologies | Personal_battery_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Personal_battery_MK 2 | This article is about the modular armor equipment. For the intermediate product, see Battery . For the technology, see personal battery (research) . The personal battery provides a basic 20MJ power storage for modular armor , the tank and the spidertron . They are also components in creating"
  },
  {
    "type": "wiki",
    "name": "Personal battery",
    "content": "tank and the spidertron . They are also components in creating the improved personal battery MK2 . Battery power seen on the HUD."
  },
  {
    "type": "wiki",
    "name": "Personal battery MK2",
    "content": "Recipe | Time 10+Personal_battery 10+Low_density_structure 5+Processing_unit 15 → Personal_battery_MK 21 | Total raw | Time 185+Battery 50+Copper_plate 100+Plastic_bar 25+Processing_unit 15+Steel_plate 110 | Stack size 20 | Dimensions 1×2 | Placed in | Modular_armorPower_armorPower_armor_MK 2 Mech_armorTankSpidertron | Energy capacity Quality 100 MJQuality 130 MJQuality 160 MJQuality 190 MJQuality 250 MJ(Electric_system) Quality 100 MJ Quality 130 MJ Quality 160 MJ Quality 190 MJ Quality 250 MJ | Prototype"
  },
  {
    "type": "wiki",
    "name": "Personal battery MK2",
    "content": "130 MJ Quality 160 MJ Quality 190 MJ Quality 250 MJ | Prototype type battery-equipment | Internal name battery-mk 2-equipment | Required technologies | Personal_battery_MK 2_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | This article is about the personal battery MK2 as modular armor equipment. For the intermediate product, see battery . For the technology, see personal battery MK2 (research) . The personal battery MK2 provides 100MJ power storage for"
  },
  {
    "type": "wiki",
    "name": "Personal battery MK2",
    "content": ". The personal battery MK2 provides 100MJ power storage for modular armor , the tank and the spidertron . This type is an improved version of the personal battery as it provides five times more capacity per size. Battery power seen on the HUD."
  },
  {
    "type": "wiki",
    "name": "Belt immunity equipment",
    "content": "Recipe | Time 10+Advanced_circuit 5+Steel_plate 10 → Belt_immunity_equipment 1 | Total raw | Time 57.5+Copper_plate 25+Iron_plate 10+Plastic_bar 10+Steel_plate 10 | Stack size 20 | Dimensions 1×1 | Energy consumption Quality 100 Quality 76.92 Quality 62.5 Quality 52.63 Quality 40 kW (Electric_system) Quality 100 Quality 76.92 Quality 62.5 Quality 52.63 Quality 40 | Placed in | Modular_armorPower_armorPower_armor_MK 2 Mech_armorTankSpidertron | Energy capacity 100 kJ (Electric_system) | Prototype type"
  },
  {
    "type": "wiki",
    "name": "Belt immunity equipment",
    "content": "| Energy capacity 100 kJ (Electric_system) | Prototype type belt-immunity-equipment | Internal name belt-immunity-equipment | Required technologies | Belt_immunity_equipment_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The belt immunity equipment , once inserted into modular armor or a vehicle with an equipment grid, grants the player or vehicle the ability to be on transport belts without being moved around by them. The belt immunity equipment always"
  },
  {
    "type": "wiki",
    "name": "Belt immunity equipment",
    "content": "being moved around by them. The belt immunity equipment always consumes power, even when the player or vehicle is not on a belt."
  },
  {
    "type": "wiki",
    "name": "Exoskeleton",
    "content": "Recipe | Time 10+Electric_engine_unit 30+Processing_unit 10+Steel_plate 20 → Exoskeleton 1 | Total raw | Time 10+Electric_engine_unit 30+Processing_unit 10+Steel_plate 20 | Stack size 20 | Dimensions 2×4 | Energy consumption 200 kW (Electric_system) | Placed in | Modular_armorPower_armorPower_armor_MK 2 Mech_armorTankSpidertron | Movement bonus Quality 30%Quality 39%Quality 48%Quality 57%Quality 75%(stackable) Quality 30% Quality 39% Quality 48% Quality 57% Quality 75% | Prototype type"
  },
  {
    "type": "wiki",
    "name": "Exoskeleton",
    "content": "39% Quality 48% Quality 57% Quality 75% | Prototype type movement-bonus-equipment | Internal name exoskeleton-equipment | Required technologies | Exoskeleton_equipment_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Spidertron | Exoskeleton enhances the movement speed of the player by 30% when fully powered. It consumes 200kW (200kJ/s) of power when used. They can be toggled on and off in the shortcut bar , assuming the player is wearing"
  },
  {
    "type": "wiki",
    "name": "Exoskeleton",
    "content": "on and off in the shortcut bar , assuming the player is wearing one. Exoskeleton is a kind of equipment module . It can be used by placing it in the grid that opens by right clicking the armor. Exoskeletons can also be placed into the equipment grid of vehicles like the spidertron and the tank to increase their movement speed. Exoskeletons also increase the flying speed of the mech armor . Each exoskeleton occupies a 2×4 tall rectangle in the equipment grid. It is possible to use multiple exoskeletons, and"
  },
  {
    "type": "wiki",
    "name": "Exoskeleton",
    "content": "grid. It is possible to use multiple exoskeletons, and the speed bonus will stack additively. There is no speed limit; it is limited only by the amount of room available in the equipment grid and by available power. Exoskeletons have a 56kJ internal electricity storage, visible as a charging bar. With no power, this will sustain them for less than a second. As the available power approaches 200kW, the charging bar will both drain more slowly and have a larger minimum size. The exoskeleton will provide a"
  },
  {
    "type": "wiki",
    "name": "Exoskeleton",
    "content": "and have a larger minimum size. The exoskeleton will provide a full speed bonus until the charging bar hits the minimum size, at which point the exoskeleton's speed bonus drops to what it can maintain. At 200kW or greater, the charging bar does not shrink and the speed bonus remains at maximum. Note that exoskeletons are below shields in armor charging priority, and if the shields are damaged at all, exoskeletons will rapidly run dry and will not resume their full speed until the shields are fully charged."
  },
  {
    "type": "wiki",
    "name": "Exoskeleton",
    "content": "resume their full speed until the shields are fully charged. This makes them fairly useless for quick getaways. Movement speed increase The player 's base movement speed is 8.902 tiles per game-second . Each additional exoskeleton increases the speed by 30% of the base speed. Number of exoskeletons Tiles/game-second % of base speed 0 8.902 100 % 1 11.483 129 % 2 14.286 161 % 3 16.866 190 % 4 19.672 221 % 5 22.472 252 % 6 25.026 281 %"
  },
  {
    "type": "wiki",
    "name": "Personal roboport",
    "content": "Recipe | Time 10+Advanced_circuit 10+Battery 45+Iron_gear_wheel 40+Steel_plate 20 → Personal_roboport 1 | Total raw | Time 125+Battery 45+Copper_plate 50+Iron_plate 100+Plastic_bar 20+Steel_plate 20 | Stack size 20 | Dimensions 2×2 | Energy consumption Quality 2.0 Quality 3.9 Quality 5.6 Quality 6.65 Quality 8.75 MW (Electric_system) Quality 2.0 Quality 3.9 Quality 5.6 Quality 6.65 Quality 8.75 | Robot recharge rate Quality 2×1.0 Quality 3×1.3 Quality 4×1.6 Quality 5×1.9 Quality 7×2.5 MW (Electric_system)"
  },
  {
    "type": "wiki",
    "name": "Personal roboport",
    "content": "Quality 4×1.6 Quality 5×1.9 Quality 7×2.5 MW (Electric_system) Quality 2×1.0 Quality 3×1.3 Quality 4×1.6 Quality 5×1.9 Quality 7×2.5 | Internal buffer recharge rate Quality 2.0 Quality 3.9 Quality 5.6 Quality 6.65 Quality 8.75 MW (Electric_system) Quality 2.0 Quality 3.9 Quality 5.6 Quality 6.65 Quality 8.75 | Placed in | TankSpidertronModular_armorPower_armorPower_armor_MK 2 Mech_armor | Robot limit Quality 10 Quality 13 Quality 16 Quality 19 Quality 25 Quality 10 Quality 13 Quality 16 Quality 19 Quality"
  },
  {
    "type": "wiki",
    "name": "Personal roboport",
    "content": "Quality 25 Quality 10 Quality 13 Quality 16 Quality 19 Quality 25 | Charging stations Quality 2 Quality 3 Quality 4 Quality 5 Quality 7 Quality 2 Quality 3 Quality 4 Quality 5 Quality 7 | Energy capacity 35 MJ (Electric_system) | Construction area 30×30 tiles | Prototype type roboport-equipment | Internal name personal-roboport-equipment | Required technologies | Personal_roboport_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by |"
  },
  {
    "type": "wiki",
    "name": "Personal roboport",
    "content": "Assembling_machine_3 Crafting | Consumed by | Personal_roboport_MK 2 | The personal roboport allows the player to act as a mobile roboport when this item is placed in their equipped armor or the spidertron . It can be toggled on or off via a button in the shortcut bar or with ALT + F . The roboport's internal energy buffer must be 20% full to allow construction robots to deploy. They are also used to create the upgraded version of itself, the personal roboport MK2 , which provide a higher robot limit. If"
  },
  {
    "type": "wiki",
    "name": "Personal roboport",
    "content": "personal roboport MK2 , which provide a higher robot limit. If the personal roboport is disabled via the shortcut bar while any of the player's robots already out of the inventory and performing a task, they will continue to finish their tasks before returning to the player. Notes Personal roboports handle construction robots only, not logistic robots . If a blueprint is used, construction robots will construct only what can be built using supplies that the player has on hand. Just like other robots, if a"
  },
  {
    "type": "wiki",
    "name": "Personal roboport",
    "content": "that the player has on hand. Just like other robots, if a personal robot runs out of energy it will reduce its speed but continue its attempt to catch up with the player. Equipping more than one personal roboport allows more personal construction robots to operate at once, operate further from the player, and more robots can be recharged at a time. Each personal roboport allows an additional 10 active robots, additional range, and 2 charging ports. The internal energy buffer of the roboport has a capacity"
  },
  {
    "type": "wiki",
    "name": "Personal roboport",
    "content": "The internal energy buffer of the roboport has a capacity of 35 MJ, or almost as much as two personal batteries . The total range of N personal roboports can be calculated with the following equation, which is then rounded to the nearest integer: sqrt(N × 30 × 30) Scaling Personal Roboport Equipped roboports Available robots Activation distance Recharge ports 1 10 30×30 2 2 20 42×42 4 3 30 52×52 6 4 40 60×60 8 5 50 67×67 10 6 60 73×73 12 7 70 79×79 14 8 80 85×85 16 9 90 90×90 18"
  },
  {
    "type": "wiki",
    "name": "Personal roboport MK2",
    "content": "Recipe | Time 20+Low_density_structure 20+Personal_roboport 5+Processing_unit 100 → Personal_roboport_MK 21 | Total raw | Time 945+Battery 225+Copper_plate 650+Iron_plate 500+Plastic_bar 200+Processing_unit 100+Steel_plate 140 | Stack size 20 | Dimensions 2×2 | Energy consumption Quality 4 Quality 6.5 Quality 9.6 Quality 13.3 Quality 22.5 MW (Electric_system) Quality 4 Quality 6.5 Quality 9.6 Quality 13.3 Quality 22.5 | Robot recharge rate Quality 4×1.0 Quality 5×1.3 Quality 6×1.6 Quality 7×1.9 Quality"
  },
  {
    "type": "wiki",
    "name": "Personal roboport MK2",
    "content": "Quality 4×1.0 Quality 5×1.3 Quality 6×1.6 Quality 7×1.9 Quality 9×2.5 MW (Electric_system) Quality 4×1.0 Quality 5×1.3 Quality 6×1.6 Quality 7×1.9 Quality 9×2.5 | Internal buffer recharge rate Quality 4 Quality 6.5 Quality 9.6 Quality 13.3 Quality 22.5 MW (Electric_system) Quality 4 Quality 6.5 Quality 9.6 Quality 13.3 Quality 22.5 | Placed in | TankSpidertronModular_armorPower_armorPower_armor_MK 2 Mech_armor | Robot limit Quality 25 Quality 32 Quality 40 Quality 47 Quality 62 Quality 25 Quality 32"
  },
  {
    "type": "wiki",
    "name": "Personal roboport MK2",
    "content": "32 Quality 40 Quality 47 Quality 62 Quality 25 Quality 32 Quality 40 Quality 47 Quality 62 | Charging stations Quality 4 Quality 5 Quality 6 Quality 7 Quality 9 Quality 4 Quality 5 Quality 6 Quality 7 Quality 9 | Energy capacity 35 MJ (Electric_system) | Construction area 40×40 tiles | Prototype type roboport-equipment | Internal name personal-roboport-mk 2-equipment | Required technologies | Personal_roboport_MK 2_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3"
  },
  {
    "type": "wiki",
    "name": "Personal roboport MK2",
    "content": "Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The personal roboport MK2 allows construction bots to work from the player's inventory. The personal roboport MK2 supports significantly more robots than the personal roboport (25, versus 10 for the MK1), a larger construction area (40×40 rather than 30×30), and extra charging ports (4 instead of 2). Inserting multiple of either roboport into the player's modular armor or the spidertron increases the number of supported robots, size"
  },
  {
    "type": "wiki",
    "name": "Personal roboport MK2",
    "content": "the spidertron increases the number of supported robots, size of construction area and number of charging ports on a linear scale. It can be toggled on or off via a button in the shortcut bar or with ALT + R . The roboport's internal energy buffer must be 20% full to allow construction robots to deploy. If the personal roboport is disabled via the shortcut bar while any of the player's robots already out of the inventory and performing a task, they will continue to finish their tasks before returning to"
  },
  {
    "type": "wiki",
    "name": "Personal roboport MK2",
    "content": "they will continue to finish their tasks before returning to the player. If a personal robot runs out of energy it will reduce its speed and continue to try and catch up with the player. Scaling Personal roboport MK2 Equipped Roboports Available Robots Construction Area Charging Stations 1 25 40×40 4 2 50 57×57 8 3 75 69×69 12 4 100 80×80 16 5 125 89×89 20 6 150 98×98 24 7 175 106×106 28 8 200 113×113 32 9 225 120×120 36 The formula for calculating the total construction area is: sqrt((num_mk2roboports x"
  },
  {
    "type": "wiki",
    "name": "Personal roboport MK2",
    "content": "the total construction area is: sqrt((num_mk2roboports x mk2_construction_area) + (num_mk1roboports x mk1_construction_area)) . For example, 3 MK2 roboports: sqrt(3 x 1600) = 69.282, ie. 69x69; 2 MK2 roboports & 2 MK1 roboports: sqrt(2 x 1600 + 2 x 900) = sqrt(5000) = 70.711, ie 70x70."
  },
  {
    "type": "wiki",
    "name": "Nightvision",
    "content": "Recipe | Time 10+Advanced_circuit 5+Steel_plate 10 → Nightvision 1 | Total raw | Time 57.5+Copper_plate 25+Iron_plate 10+Plastic_bar 10+Steel_plate 10 | Stack size 20 | Dimensions 2×2 | Energy consumption 10 kW (Electric_system) | Placed in | Modular_armorPower_armorPower_armor_MK 2 Mech_armorTankSpidertron | Energy capacity 120 kJ (Electric_system) | Prototype type night-vision-equipment | Internal name night-vision-equipment | Required technologies | Nightvision_equipment_(research) | Produced by |"
  },
  {
    "type": "wiki",
    "name": "Nightvision",
    "content": "technologies | Nightvision_equipment_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Nightvision is a kind of equipment module . It can be used by placing it in the grid that opens by right clicking the armor. Having nightvision in the armor during the night changes the standard vision at night to be brighter with a slight grey overlay that drains non-lit areas of color. Unlike other items such as exoskeletons or shields, equipping multiple night vision"
  },
  {
    "type": "wiki",
    "name": "Nightvision",
    "content": "as exoskeletons or shields, equipping multiple night vision units has no effect. Nightvision turns off and requires no energy during the day time. Nightvision requires a suit energy supply to function. Unfortunately its complementary tech portable solar panel does not provide energy at night, and the Nightvision's internal buffer of 120 kJ will quickly drain in a few seconds. Getting initial use out of Nightvision requires charging a modular battery to stay online over night. When placed in a vehicle, the"
  },
  {
    "type": "wiki",
    "name": "Nightvision",
    "content": "to stay online over night. When placed in a vehicle, the effects only work when the player enters or remote controls the vehicle."
  },
  {
    "type": "wiki",
    "name": "Energy shield",
    "content": "Recipe | Time 10+Advanced_circuit 5+Steel_plate 10 → Energy_shield 1 | Total raw | Time 57.5+Copper_plate 25+Iron_plate 10+Plastic_bar 10+Steel_plate 10 | Stack size 20 | Dimensions 2×2 | Energy consumption Quality 240 Quality 312 Quality 384 Quality 456 Quality 600 kW (Electric_system) Quality 240 Quality 312 Quality 384 Quality 456 Quality 600 | Placed in | TankSpidertronModular_armorPower_armorPower_armor_MK 2 Mech_armor | Energy capacity 120 kJ (Electric_system) | Shield hitpoints Quality 50 Quality 65"
  },
  {
    "type": "wiki",
    "name": "Energy shield",
    "content": "kJ (Electric_system) | Shield hitpoints Quality 50 Quality 65 Quality 80 Quality 95 Quality 125 Quality 50 Quality 65 Quality 80 Quality 95 Quality 125 | Energy per hitpoint 20 kJ (Electric_system) | Maximum recharge speed Quality 12 Quality 15.6 Quality 19.2 Quality 22.8 Quality 30 hitpoints/s Quality 12 Quality 15.6 Quality 19.2 Quality 22.8 Quality 30 | Prototype type energy-shield-equipment | Internal name energy-shield-equipment | Required technologies | Energy_shield_equipment_(research) | Produced"
  },
  {
    "type": "wiki",
    "name": "Energy shield",
    "content": "technologies | Energy_shield_equipment_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Energy_shield_MK 2 | The energy shield generates a basic protective shield that can absorb a small amount of damage . Equipment modules can be used by placing them in the grid that opens by right clicking the armor. The shield is effectively an extension of HP and has to be brought to 0 for the character to suffer any actual HP damage. Like actual HP, it"
  },
  {
    "type": "wiki",
    "name": "Energy shield",
    "content": "character to suffer any actual HP damage. Like actual HP, it benefits from the damage reduction attributes of its armor. All damage is split equally between shields, allowing all shields to recharge simultaneously. Energy shields are largely obsoleted by the Energy shield MK2 , which offers a vastly increased HP buffer at the cost of demanding more energy per HP. A shield's maximum recharge rate is based on its energy draw divided by the energy cost per shield point. At 240kW costing 20KJ per shield point,"
  },
  {
    "type": "wiki",
    "name": "Energy shield",
    "content": "cost per shield point. At 240kW costing 20KJ per shield point, the energy shield MK1 recharges 12 HP per second and takes 4 seconds to recharge from 0 to 50HP. The overall energy demand is extremely high and will stress the suit's solar panels and fusion reactor , so use batteries to maintain your shields under fire. Mk1 shields have an internal energy buffer of 120kJ, which effectively provide an additional hidden 6HP of shielding and add an extra .5 seconds to fully recharge. The purple energy shield bar"
  },
  {
    "type": "wiki",
    "name": "Energy shield",
    "content": ".5 seconds to fully recharge. The purple energy shield bar below the health bar."
  },
  {
    "type": "wiki",
    "name": "Energy shield MK2",
    "content": "Recipe | Time 10+Energy_shield 10+Low_density_structure 5+Processing_unit 5 → Energy_shield_MK 21 | Total raw | Time 660+Copper_plate 350+Iron_plate 100+Plastic_bar 125+Processing_unit 5+Steel_plate 110 | Stack size 20 | Dimensions 2×2 | Energy consumption Quality 360 Quality 468 Quality 576 Quality 648 Quality 900 kW (Electric_system) Quality 360 Quality 468 Quality 576 Quality 648 Quality 900 | Placed in | TankSpidertronModular_armorPower_armorPower_armor_MK 2 Mech_armor | Energy capacity 180 kJ"
  },
  {
    "type": "wiki",
    "name": "Energy shield MK2",
    "content": "2 Mech_armor | Energy capacity 180 kJ (Electric_system) | Shield hitpoints Quality 150 Quality 195 Quality 240 Quality 285 Quality 375 Quality 150 Quality 195 Quality 240 Quality 285 Quality 375 | Energy per hitpoint 30 kJ (Electric_system) | Maximum recharge speed Quality 12 Quality 15.6 Quality 19.2 Quality 22.8 Quality 30 hitpoints/s Quality 12 Quality 15.6 Quality 19.2 Quality 22.8 Quality 30 | Prototype type energy-shield-equipment | Internal name energy-shield-mk 2-equipment | Required technologies |"
  },
  {
    "type": "wiki",
    "name": "Energy shield MK2",
    "content": "name energy-shield-mk 2-equipment | Required technologies | Energy_shield_MK 2_equipment_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The energy shield MK2 generates a stronger protective shield around the character, absorbing some damage . The shield is effectively an extension of HP and has to be brought to 0 for the character to suffer any actual HP or armor damage. Like actual HP, it benefits from the armor's damage resistance. A cheaper version"
  },
  {
    "type": "wiki",
    "name": "Energy shield MK2",
    "content": "benefits from the armor's damage resistance. A cheaper version of it is the energy shield . A shield's maximum recharge rate is based on its energy draw divided by the energy cost per shield point. At 360kW costing 30KJ per shield point, the energy shield MK2 recharges 12 HP per second and takes 12.5 seconds to recharge from 0 to 150 HP. All damage is split equally between shields, allowing all shields to recharge simultaneously. The maximum shield recharge rate is limited by the suit's energy supply. A"
  },
  {
    "type": "wiki",
    "name": "Energy shield MK2",
    "content": "shield recharge rate is limited by the suit's energy supply. A portable fission reactor will only sustain 2 MK2 shields under fire (or 3 MK1 shields) while portable solar panels are only good for a few recharges per day. Because of the high energy demand, it can be useful to complement shields with modular batteries , as they will maintain shield recharge under fire. The Energy Shield Mk2 has an internal energy buffer of 180kW, which effectively adds a hidden 6HP and additional .5 seconds to recharge. The"
  },
  {
    "type": "wiki",
    "name": "Energy shield MK2",
    "content": "adds a hidden 6HP and additional .5 seconds to recharge. The purple energy shield bar below the health bar."
  },
  {
    "type": "wiki",
    "name": "Personal laser defense",
    "content": "Recipe | Time 10+Laser_turret 5+Low_density_structure 5+Processing_unit 20 → Personal_laser_defense 1 | Total raw | Time 310+Battery 60+Copper_plate 250+Iron_plate 100+Plastic_bar 25+Processing_unit 20+Steel_plate 110 | Stack size 20 | Range Quality 15 Quality 16.5 Quality 18.0 Quality 19.5 Quality 22.5 Quality 15 Quality 16.5 Quality 18.0 Quality 19.5 Quality 22.5 | Shooting speed 1.5/s | Damage 10 laser | Dimensions 2×2 | Energy consumption 75 kW (Electric_system) | Placed in |"
  },
  {
    "type": "wiki",
    "name": "Personal laser defense",
    "content": "2×2 | Energy consumption 75 kW (Electric_system) | Placed in | Modular_armorPower_armorPower_armor_MK 2 TankSpidertron | Energy capacity 220 kJ (Electric_system) | Prototype type active-defense-equipment | Internal name personal-laser-defense-equipment | Required technologies | Personal_laser_defense_(research) | Boosting technologies | Laser_shooting_speed_(research)Energy_weapons_damage_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The Personal laser"
  },
  {
    "type": "wiki",
    "name": "Personal laser defense",
    "content": "Assembling_machine_3 Crafting | The Personal laser defense is a module that can be inserted into modular armor , spidertrons , and tanks . It provides a basic laser defense system. It automatically targets and fires at nearby enemies , and, unlike hand-held weapons , doesn't slow the player down when firing. It consumes power after it fires (to recharge), so it doesn't necessarily need personal batteries . Stacking multiple personal laser defenses in the modular armor provides more lasers to attack at"
  },
  {
    "type": "wiki",
    "name": "Personal laser defense",
    "content": "defenses in the modular armor provides more lasers to attack at once. Each shot costs 50kJ of energy; as the shooting speed increases through upgrades , so does the power required to keep firing. The personal laser defense will fire at enemies nearby even if the player is inside a vehicle ."
  },
  {
    "type": "wiki",
    "name": "Discharge defense",
    "content": "Recipe | Time 10+Laser_turret 10+Processing_unit 5+Steel_plate 20 → Discharge_defense 1 | Total raw | Time 460+Battery 120+Copper_plate 300+Iron_plate 200+Processing_unit 5+Steel_plate 220 | Stack size 20 | Range Quality 10 Quality 11 Quality 12 Quality 13 Quality 15 Quality 10 Quality 11 Quality 12 Quality 13 Quality 15 | Shooting speed 0.4/s | Damage 100 electric | Area of effect size 8 | Dimensions 2×2 | Energy consumption 800 kW (Electric_system) | Placed in |"
  },
  {
    "type": "wiki",
    "name": "Discharge defense",
    "content": "2×2 | Energy consumption 800 kW (Electric_system) | Placed in | TankSpidertronModular_armorPower_armorPower_armor_MK 2 Mech_armor | Energy capacity 4040 kJ (Electric_system) | Prototype type active-defense-equipment | Internal name discharge-defense-equipment | Required technologies | Discharge_defense_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The discharge defense provides an emergency self defense system when it is inserted into modular armor and"
  },
  {
    "type": "wiki",
    "name": "Discharge defense",
    "content": "self defense system when it is inserted into modular armor and the spidertron . When triggered by left-clicking with the discharge defense remote it pushes back, stuns, and damages enemies around the player."
  },
  {
    "type": "wiki",
    "name": "Discharge defense remote",
    "content": "Stack size 1 | Prototype type capsule | Internal name discharge-defense-remote | Used to trigger the discharge defense equipment by right-clicking."
  },
  {
    "type": "wiki",
    "name": "Wall",
    "content": "Recipe | Time 0.5+Stone_brick 5 → Wall 1 | Total raw | Time 0.5+Stone_brick 5 | Resistances Acid: 0/80%Explosion: 10/30%Fire: 0/100%Impact: 45/60%Laser: 0/70%Physical: 3/20% | Stack size 100 | Dimensions 1×1 | Mining time 0.2 | Prototype type wall | Internal name stone-wall | Required technologies | Stone_wall_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | GateMilitary_science_pack | Walls are a defensive structure that prevents both the"
  },
  {
    "type": "wiki",
    "name": "Wall",
    "content": "| Walls are a defensive structure that prevents both the player and enemies from passing. They can be used to shield turrets so they will be able to fight enemies longer without being destroyed, and can be used to protect parts of the factory from enemies. Although walls have less health than most defensive structures, their high damage resistance means it will take longer for enemies to destroy them. Gates can be constructed to allow the player to pass through walls. Gates share the same health and"
  },
  {
    "type": "wiki",
    "name": "Wall",
    "content": "player to pass through walls. Gates share the same health and resistances as walls and automatically close for enemies if not connected to the circuit network , so no defensive power is lost. Walls only block melee attacks, projectile attacks go over them. However, big and behemoth biters can attack 2 tiles away, meaning they can hit structures directly behind a single layer of walls. To prevent this, structures can be moved further back from the walls or a second layer of walls can be added. Despite their"
  },
  {
    "type": "wiki",
    "name": "Wall",
    "content": "walls or a second layer of walls can be added. Despite their applications as a defensive measure, walls are not considered a military unit and structure ; this is important for understanding the behavior of enemies regarding walls. If they are attempting to attack something and the wall obstructs their path, they will attack the wall to destroy it and clear the way. However, if they have already been aggro'd by a turret or the player, enemies will more actively pursue their aggressor and not necessarily"
  },
  {
    "type": "wiki",
    "name": "Wall",
    "content": "will more actively pursue their aggressor and not necessarily attack walls between them. This allows the player to stall enemies more efficiently by building walls in a manner that disrupts their pathing without entirely obstructing it. However, if their pathing is disrupted enough, they will still resort to attacking the wall to remove the obstruction, thus long sections of wall that enemies will chew through may be less effective than shorter segments that force them to go around. Placing walls in four"
  },
  {
    "type": "wiki",
    "name": "Wall",
    "content": "segments that force them to go around. Placing walls in four adjacent tiles forming a square will cause the inner space to be filled. This is only a visual property, the health and the rest of the properties of the walls are not affected."
  },
  {
    "type": "wiki",
    "name": "Gate",
    "content": "Recipe | Time 0.5+Electronic_circuit 2+Steel_plate 2+Wall 1 → Gate 1 | Total raw | Time 3.5+Copper_plate 3+Iron_plate 2+Steel_plate 2+Stone_brick 5 | Resistances Acid: 0/80%Explosion: 10/30%Fire: 0/100%Impact: 45/60%Laser: 0/70%Physical: 3/20% | Stack size 50 | Dimensions 1×1 | Mining time 0.1 | Prototype type gate | Internal name gate | Required technologies | Gate_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Gates are a variant of walls that act as a"
  },
  {
    "type": "wiki",
    "name": "Gate",
    "content": "Crafting | Gates are a variant of walls that act as a safe opening in walls that only the player can use. Gates can be placed as parts of walls, and have the same strength as a wall. Multiple gates placed adjacent to each other will merge into a single longer gate. They can also be placed over rails to create train gates. Contents 1 Mechanics 2 Circuit Network Interaction 3 History 4 See also Mechanics A gate will open for the player and their vehicles when they approach. The gate will not open for biters;"
  },
  {
    "type": "wiki",
    "name": "Gate",
    "content": "vehicles when they approach. The gate will not open for biters; they must destroy the gate unless they can get the player to stand close enough to the gate so that it opens. Gates have the same defensive strength as a wall. Normal gates will open whenever a player is within a few tiles, and is on foot or in a non-train vehicle. Train gates will open: Whenever a normal gate would open for players on foot or driving; Whenever a player is driving a train in manual mode, is on the same track as the gate, and"
  },
  {
    "type": "wiki",
    "name": "Gate",
    "content": "a train in manual mode, is on the same track as the gate, and is within a certain distance; and Whenever a train is in automatic mode, has its planned path go through the gate, and is within a certain distance. A gate's opening radius appears to be dependent on the player or vehicle's speed that is heading toward it, so as to ensure it opens in time. A player walking at the gate without any speed boosts will cause the gate to open about 4-5 tiles from the gate. A train traveling at full speed towards a"
  },
  {
    "type": "wiki",
    "name": "Gate",
    "content": "tiles from the gate. A train traveling at full speed towards a gate will cause the gate to open several tiles away. This behavior is similar with all vehicles. A gate will stay open if there is a player/vehicle about 2-3 tiles away from it. If a player stands just outside of this radius, it is possible that the gate may not open in time should they run towards it with an enhanced speed (for example, using exoskeletons ). Defenders should also be careful to ensure they do not let enemy forces in"
  },
  {
    "type": "wiki",
    "name": "Gate",
    "content": "also be careful to ensure they do not let enemy forces in accidentally, as they may pass through when the gate is down. Circuit Network Interaction Gates can be connected to the Circuit network by connecting either red wire or green wire to a wall adjacent to the gate. When connected, the wall sprite will show a small yellow electronic box on the top of the wall, and settings for the gate can be shown and changed by interacting with the gate wall. This allows the gate to be controlled by the attached"
  },
  {
    "type": "wiki",
    "name": "Gate",
    "content": "wall. This allows the gate to be controlled by the attached circuit network, and allows the gate to send a signal to the network when it is attempted to be opened by a player or vehicle. This can be used to make safe rail crossings and a player detector, among other uses."
  },
  {
    "type": "wiki",
    "name": "Radar",
    "content": "Recipe | Time 0.5+Electronic_circuit 5+Iron_gear_wheel 5+Iron_plate 10 → Radar 1 | Total raw | Time 9.25+Copper_plate 7.5+Iron_plate 25 | Resistances Fire: 0/70%Impact: 0/30% | Stack size 50 | Radar coverage distance Continuous:Quality 3 Quality 4 Quality 5 Quality 6 Quality 8 Exploration:Quality 14 Quality 15 Quality 16 Quality 17 Quality 19 Quality 3 Quality 4 Quality 5 Quality 6 Quality 8 Quality 14 Quality 15 Quality 16 Quality 17 Quality 19 | Dimensions 3×3 | Energy consumption 300.0 kW"
  },
  {
    "type": "wiki",
    "name": "Radar",
    "content": "17 Quality 19 | Dimensions 3×3 | Energy consumption 300.0 kW (Electric_system) | Mining time 0.1 | Prototype type radar | Internal name radar | Required technologies | Radar_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Artillery_shellSatelliteSpidertron | The radar reveals the map for the force it belongs to. It can be used to provide a small area of remote vision on the map; it also allows periodic scanning of distant chunks around it."
  },
  {
    "type": "wiki",
    "name": "Radar",
    "content": "it also allows periodic scanning of distant chunks around it. The radar has a high power demand (300kW) so a radar indirectly contributes to pollution when powered by boilers and steam engines . A radar can be continuously powered by eight solar panels and six accumulators . Seven solar panels and five accumulators is the most efficient; it gives the radar full power all but a short time in the morning, but never dips below the 20% power threshold for nearby scanning. Despite being categorized as a"
  },
  {
    "type": "wiki",
    "name": "Radar",
    "content": "threshold for nearby scanning. Despite being categorized as a military building, the radar will not be attacked by enemies unless it blocks their path to another target, which means that radars can be safely placed in biter-infested areas without needing to be defended. The radar will show enemy lifeforms and structures, as well as trains , cars , and other players in the scanned area. Contents 1 Nearby pulse scanning 2 Long range survey scanning 3 Coverage 4 Charting 4.1 Charting process 4.2 Charting"
  },
  {
    "type": "wiki",
    "name": "Radar",
    "content": "3 Coverage 4 Charting 4.1 Charting process 4.2 Charting decay time / fog of war 4.3 Charting of vehicles 4.4 Remote control 4.5 Invisible (black) parts of the map 5 Circuit network 6 History 7 See also Nearby pulse scanning The radar continuously charts an area of 7×7 chunks (224×224 tiles ), centered on the chunk the radar occupies. This nearby area is updated as a single pulse approximately every second. At reduced power levels, this nearby pulse scan will take longer, which can lead to 'blinking' on the"
  },
  {
    "type": "wiki",
    "name": "Radar",
    "content": "scan will take longer, which can lead to 'blinking' on the player's map similar to the long range scan. This is particularly noticeable at dawn and dusk on solar powered radar stations. At 20% power the radar will pulse about every 4 seconds which will still keep the nearby area continuously lit on the map, but will provide reduced detail. 20% power can be achieved by a single solar panel , or by using one isolating accumulator for every 5 radars. The Roboport also charts a 5x5 area. Long range survey"
  },
  {
    "type": "wiki",
    "name": "Radar",
    "content": "radars. The Roboport also charts a 5x5 area. Long range survey scanning The radar charts one distant chunk every time the sector scanning progress bar fills. This will take 33.333 seconds, if the radar is receiving full power. Mouse-over or click-open the radar details to see this progress bar. Long range scanning is visible on the map as a single chunk lighting up for several seconds, then slowly darkening. It scans the unexplored chunks first, represented by the black areas on the map. Note that it also"
  },
  {
    "type": "wiki",
    "name": "Radar",
    "content": "represented by the black areas on the map. Note that it also generates the chunks if they weren't generated at the time of the scan. One chunk scan takes 10 MJ of energy to complete. Since the radar draws 300 kW of power, it takes 10 MJ ÷ 300 kW = 33.333 seconds to scan one chunk. This is done in an area of 29×29 chunks around the radar, excluding the nearby 7×7 chunks. With a total number of 792 chunks (29×29 − 7×7), it takes one radar 7 hours 20 minutes to complete one full scan cycle. If everything is"
  },
  {
    "type": "wiki",
    "name": "Radar",
    "content": "20 minutes to complete one full scan cycle. If everything is already explored it continues to scan by re-scanning the longest-ago scanned chunk within range. Multiple radars will share long-range chunks, reducing the amount of time it takes to complete long-range survey scanning. This is a smart process, meaning that the radars will not scan chunks currently being scanned by other radars. It is possible that a new alien nest will appear in a previously scanned chunk; just because you don't see it on the"
  },
  {
    "type": "wiki",
    "name": "Radar",
    "content": "previously scanned chunk; just because you don't see it on the map, doesn't mean it is not there. Coverage Radars grant sight of a square area around them, which is displayed brighter than the rest of the map. This allows the player to zoom into the normal world view from the map and makes interaction with blueprints and deconstruction planners possible. The coverage area of a radar and the player. Charting If a chunk is scanned by a radar or player, the image of that chunk that is copied into the map of"
  },
  {
    "type": "wiki",
    "name": "Radar",
    "content": "player, the image of that chunk that is copied into the map of the players of this surface force (every force has its own map). This procedure is called \"charting\". Animation of chunks in the upper-right area being revealed by radars. Charting process If the contents of a chunk changes between two ticks, the content of that chunk is \"charted\" into the map. The map is just a bitmap, a picture. You can see the entities moving, you can see enemies walking. Every entity is represented by one or more pixels."
  },
  {
    "type": "wiki",
    "name": "Radar",
    "content": "walking. Every entity is represented by one or more pixels. Not every entity is drawn. Users can recognize what is drawn because of the color. Charting of several chunks that change each tick might have an impact on game performance, manifesting in the form of lowered UPS or FPS . Charting decay time / fog of war Once a scan for a chunk is triggered, it keeps actively charted for 10 seconds . This effect can also be seen in the map of the chunk highlighted and dims within 10 seconds to a greyed out version"
  },
  {
    "type": "wiki",
    "name": "Radar",
    "content": "highlighted and dims within 10 seconds to a greyed out version of the chunk. If charting is not repeated within the 10 seconds, the charting process stops for this chunk after 10 seconds and is no longer updated. What you see after that time is the last charted picture for that chunk (also called \"fog of war\"). Charting of vehicles Even in the fog of war you can see the last charted position of vehicles. Trains last positions are not charted, because they normally move after the charting stops. Vehicles"
  },
  {
    "type": "wiki",
    "name": "Radar",
    "content": "because they normally move after the charting stops. Vehicles are shown as a circle, with an arrow pointing in the direction that they're facing. Remote control Tanks and spidertrons cannot be entered when out of radar range, but can still be controlled and exited. Invisible (black) parts of the map The map generator creates a \"border\" of invisible chunks around each chunk, that becomes active at some time. Active chunks are those that become charted or those that are active because the pollution spreads"
  },
  {
    "type": "wiki",
    "name": "Radar",
    "content": "charted or those that are active because the pollution spreads onto them. Circuit network Every radar has a circuit network connection to every other radar on that surface. Any circuit signal sent into a radar is output from every other radar on the surface. When the radar loses power, it loses its circuit connection. The output signal can only be seen in connected objects like electric poles, because the radar does not have a GUI."
  },
  {
    "type": "wiki",
    "name": "Land mine",
    "content": "Recipe | Time 5+Explosives 2+Steel_plate 1 → Land_mine 4 | Total raw | Time 5+Explosives 2+Steel_plate 1 | Stack size 100 | Damage Quality 250 Quality 325 Quality 400 Quality 475 Quality 625(explosion) Quality 250 Quality 325 Quality 400 Quality 475 Quality 625 | Area of effect size 6 | Mining time 0.5 | Prototype type land-mine | Internal name land-mine | Required technologies | Land_mines_(research) | Boosting technologies | Stronger_explosives_(research) | Produced by | Assembling_machine_1"
  },
  {
    "type": "wiki",
    "name": "Land mine",
    "content": "| Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Land mines are small, passive defense systems that explode when enemies come closer than 2.5 tiles of them, dealing 250 damage and stunning enemies for 3 seconds. Land mines can be placed freely on the map. They deal enough damage to kill small/medium enemies or unarmored players outright, but will only injure and stun larger enemies. Land mines do not damage allied buildings or players. They can be re-built by"
  },
  {
    "type": "wiki",
    "name": "Land mine",
    "content": "not damage allied buildings or players. They can be re-built by construction robots after exploding. After placing, land mines take 2 seconds to arm and bury in the ground. During those 2 seconds, they are visible to enemies and can be destroyed by biters or directly shot by enemy players. After burying, enemy land mines can only be destroyed using weapons with area damage, for example grenades or the flamethrower . Land mines are the only passive defense in Factorio; if an alien is hit by a land mine,"
  },
  {
    "type": "wiki",
    "name": "Land mine",
    "content": "passive defense in Factorio; if an alien is hit by a land mine, they will not start chasing the player."
  },
  {
    "type": "wiki",
    "name": "Gun turret",
    "content": "Recipe | Time 8+Copper_plate 10+Iron_gear_wheel 10+Iron_plate 20 → Gun_turret 1 | Total raw | Time 13+Copper_plate 10+Iron_plate 40 | Stack size 50 | Range Quality 18 Quality 19.8 Quality 21.6 Quality 23.4 Quality 27 Quality 18 Quality 19.8 Quality 21.6 Quality 23.4 Quality 27 | Shooting speed 10/s | Ammunition Firearm_magazinePiercing_rounds_magazineUranium_rounds_magazine | Dimensions 2×2 | Mining time 0.5 | Prototype type ammo-turret | Internal name gun-turret | Required technologies |"
  },
  {
    "type": "wiki",
    "name": "Gun turret",
    "content": "| Internal name gun-turret | Required technologies | Gun_turret_(research) | Boosting technologies | Physical_projectile_damage_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Gun turret damage bonus stacks with ammo bonuses | Gun turrets are defensive structures and are the first automatic defense to be unlocked. They use magazines for ammunition which can be refilled manually or by inserters . Unlike laser turrets , they do not require power and can"
  },
  {
    "type": "wiki",
    "name": "Gun turret",
    "content": ". Unlike laser turrets , they do not require power and can operate practically anywhere as long as they have sufficient ammunition. On the downside, this means that ammo must be periodically replenished. The gun turret has the same fire rate as the human-portable submachine gun . Physical projectile damage (research) upgrades both the base damage of the ammunition and the damage of the turret as two separate, multiplicative bonuses, quickly leading to a much higher damage output than the SMG. Inserters can"
  },
  {
    "type": "wiki",
    "name": "Gun turret",
    "content": "to a much higher damage output than the SMG. Inserters can insert and remove magazines from gun turrets. This allows chaining multiple turrets together with inserters, each inserter taking ammo, as needed, from one turret and placing it into the next. Inserters will only insert up to 10 magazines per turret. On Gleba , wrigglers are quite vulnerable to gun turrets, as they act like biters without the resistances. However, strafers can outrange the turrets, and are quite durable as they have small"
  },
  {
    "type": "wiki",
    "name": "Gun turret",
    "content": "outrange the turrets, and are quite durable as they have small resistance to physical damage. Stompers negate more than half of received damage. Combined with their high health pool, gun turrets are not the best choice against them. On Vulcanus , the demolisher can have its segments damaged by the turrets, allowing large turret blocks to be effective against the small and even medium variants."
  },
  {
    "type": "wiki",
    "name": "Laser turret",
    "content": "Recipe | Time 20+Battery 12+Electronic_circuit 20+Steel_plate 20 → Laser_turret 1 | Total raw | Time 45+Battery 12+Copper_plate 30+Iron_plate 20+Steel_plate 20 | Stack size 50 | Range Quality 24 Quality 26.4 Quality 28.8 Quality 31.2 Quality 36 Quality 24 Quality 26.4 Quality 28.8 Quality 31.2 Quality 36 | Shooting speed 1.5/s | Damage 20 laser | Dimensions 2×2 | Energy consumption 1.2 MW (Electric_system) | Drain 24 kW (Electric_system) | Mining time 0.5 | Prototype type electric-turret | Internal name"
  },
  {
    "type": "wiki",
    "name": "Laser turret",
    "content": "time 0.5 | Prototype type electric-turret | Internal name laser-turret | Required technologies | Laser_turret_(research) | Boosting technologies | Laser_shooting_speed_(research)Energy_weapons_damage_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Consumed by | Discharge_defensePersonal_laser_defense | Laser turrets are an advanced defense building with longer range than the gun turret , laser damage, and use electricity to operate instead of ammo (and a"
  },
  {
    "type": "wiki",
    "name": "Laser turret",
    "content": "damage, and use electricity to operate instead of ammo (and a smaller amount of energy when idle). Each shot costs 800kJ of energy; as the shooting speed increases through upgrades, so does the power required to keep firing. Using laser turrets to ward off attacks can cause electricity usage spikes, these can be offset by using accumulators (or steam storage and excess steam turbines ). On space platforms , lasers can be effective against small asteroids , which have only 20% laser resistance and 100"
  },
  {
    "type": "wiki",
    "name": "Laser turret",
    "content": "small asteroids , which have only 20% laser resistance and 100 health. Other asteroids have laser resistance of 90% or more, making lasers relatively useless against them. Large groups of high quality lasers (which have extended range, not damage) can be useful against medium asteroids if they also have enough damage upgrades. Pentapods on Gleba have high laser resistance (50% for wrigglers, strafers, and egg rafts, 80% for stompers) so laser turrets are ineffective against them. The demolishers on"
  },
  {
    "type": "wiki",
    "name": "Laser turret",
    "content": "laser turrets are ineffective against them. The demolishers on Vulcanus have 100% laser resistance. Contents 1 Gallery 2 Achievements 3 History 4 See also Achievements Raining bullets Launch a rocket to space without building any laser turrets ."
  },
  {
    "type": "wiki",
    "name": "Flamethrower turret",
    "content": "Recipe | Time 20+Engine_unit 5+Iron_gear_wheel 15+Pipe 10+Steel_plate 30 → Flamethrower_turret 1 | Total raw | Time 32.5+Engine_unit 5+Iron_plate 40+Steel_plate 30 | Fluid storage volume Fuel buffer: 100 Pass-through pipe: 100 | Resistances Fire: 0/100% | Stack size 50 | Range Minimum: 6 Maximum:Quality 30 Quality 33 Quality 36 Quality 39 Quality 45(Limited 120° arc) Quality 30 Quality 33 Quality 36 Quality 39 Quality 45 | Shooting speed 30/s | Damage Contact damage: 3 fireFire on the ground: 13/s"
  },
  {
    "type": "wiki",
    "name": "Flamethrower turret",
    "content": "30/s | Damage Contact damage: 3 fireFire on the ground: 13/s fireIgnited objects: 100/s fireIgnition duration:Quality 30 Quality 39 Quality 48 Quality 57 Quality 75 seconds Quality 30 Quality 39 Quality 48 Quality 57 Quality 75 | Area of effect size 2.5 | Ammunition Crude_oilHeavy_oilLight_oil | Dimensions 2×3 | Fluid consumption 3/s | Mining time 0.5 | Prototype type fluid-turret | Internal name flamethrower-turret | Required technologies | Flamethrower_(research) | Boosting technologies |"
  },
  {
    "type": "wiki",
    "name": "Flamethrower turret",
    "content": "| Flamethrower_(research) | Boosting technologies | Refined_flammables_(research) | Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | Fire on the ground lasts 2 seconds. Area of effect size applies to igniting objects and contact damage. | Flamethrower turrets work similarly to the flamethrower , setting enemies and the ground on fire and doing damage over time. Unlike gun turrets and laser turrets , they have a limited firing arc, and should therefore be placed at"
  },
  {
    "type": "wiki",
    "name": "Flamethrower turret",
    "content": "have a limited firing arc, and should therefore be placed at choke points or behind walls . They can use crude , heavy , or light oil as ammunition, which must be provided via a pipe connected to the turret. Contents 1 Mechanics 1.1 Fire resistance 2 History 3 See also Mechanics Flamethrower turrets gain a damage bonus depending on the type of oil supplied to them. This bonus is multiplicative, it stacks with the bonus damage from research. Ammunition Effect Crude oil 100% Damage Heavy oil 105% Damage"
  },
  {
    "type": "wiki",
    "name": "Flamethrower turret",
    "content": "Ammunition Effect Crude oil 100% Damage Heavy oil 105% Damage Light oil 110% Damage Unlike the laser and gun turrets, flamethrower turrets do not have a instantaneously hitting projectile, instead firing a stream of flame directly at where the target was at the time of firing. This means that they have a tendency to miss the targeted biter in an attacking group, instead hitting the ones behind. Flamethrower turrets are very powerful because biters and spitters do not have fire resistance and the total 3000"
  },
  {
    "type": "wiki",
    "name": "Flamethrower turret",
    "content": "and spitters do not have fire resistance and the total 3000 damage dealt to ignited enemies is a guaranteed death sentence for almost anything in the game. An enemy unit is ignited if it is hit directly by a flame stream. Flamethrower turrets will target the closest non ignited enemy and then once all enemies within range are ignited they will target the closest enemy. The bonus technologies and fuel damage bonus for the flamethrower turret improve the contact damage and damage dealt by fire on the ground."
  },
  {
    "type": "wiki",
    "name": "Flamethrower turret",
    "content": "the contact damage and damage dealt by fire on the ground. The bonus technologies also affect the damage dealt to ignited enemies, which lasts 30 seconds and deals 100 damage per second without upgrades. While it is not apparent from the damage bonus descriptions, the flamethrower turret benefits from the damage bonus for the flamethrower turret and the damage bonus for flamethrower ammo, applied multiplicatively, e.g. with the first level of refined flammables it receives a +44% bonus, not +20%, with all"
  },
  {
    "type": "wiki",
    "name": "Flamethrower turret",
    "content": "refined flammables it receives a +44% bonus, not +20%, with all pre-space upgrades it receives +576% damage, not +160%. This is because the flamethrower turret is defined as using \"flamethrower\" type ammo and it allows the damage output of the flamethrower turret to keep up with laser and gun turrets, which also benefit from two or more separate upgrades. Flamethrower turrets create fire on the ground which lasts 2 seconds by default. If the turret keeps firing at that spot, the size of the fire increases,"
  },
  {
    "type": "wiki",
    "name": "Flamethrower turret",
    "content": "keeps firing at that spot, the size of the fire increases, it will last up to 30 seconds and its damage is increased up to 6 times, depending on how long the turret keeps firing at that spot. Multiple flamethrower turrets firing at the same location do not cause the fire to intensify faster as there is a 4 tick cooldown between intensity increases, while even a single flamethrower turret fires every 2 ticks. An object will be damaged by all the fire patches it is contacting potentially multiplying the"
  },
  {
    "type": "wiki",
    "name": "Flamethrower turret",
    "content": "the fire patches it is contacting potentially multiplying the damage from the fire several times. Fire resistance At a glance it's not easy to see how fire resistance is applied to flamethrower damage, as this requires knowing precisely how the damage is applied. Direct splash damage: Deals 3 damage 30 times a second. Fire sticker: Deals 16.67 damage 6 times a second. Fire patch: Deals 13 damage 6 times a second when fully intensified. These damages are increased by the refined flammables tech and liquid"
  },
  {
    "type": "wiki",
    "name": "Flamethrower turret",
    "content": "damages are increased by the refined flammables tech and liquid damage bonus. Spawners and larger worms have 3 flat fire resist, which mostly negates the direct splash damage but not the damage from intensified fire patches. Tanks, trains and spidertrons have 15 flat fire resist which negates the direct damage, at low levels of refined flammables this also mostly negates the damage from fire patches, but at higher levels these vehicles become very vulnerable to the flames, becoming particularly vulnerable"
  },
  {
    "type": "wiki",
    "name": "Flamethrower turret",
    "content": "very vulnerable to the flames, becoming particularly vulnerable at around refined flammables 4 when the fire patches are inflicting 46.9 damage of which only a third is negated by the flat fire resist. In Space Age , flamethrowers are considered burner devices and therefore cannot be placed on space platforms . Even if they could be placed, asteroids have 100% fire damage resistance. Pentapods on Gleba have no damage resistances to flamethrowers. While flamethrower turrets are not hitscan, they can still"
  },
  {
    "type": "wiki",
    "name": "Flamethrower turret",
    "content": "While flamethrower turrets are not hitscan, they can still do sizeable damage to even the larger pentapods enemies. As on Nauvis, they are particularly effective against large groups of enemies. The demolishers on Vulcanus have 100% fire resistance."
  },
  {
    "type": "wiki",
    "name": "Artillery turret",
    "content": "Recipe | Time 40+Advanced_circuit 20+Concrete 60+Iron_gear_wheel 40+Steel_plate 60 → Artillery_turret 1 | Total raw | Time 250+Concrete 60+Copper_plate 100+Iron_plate 120+Plastic_bar 40+Steel_plate 60 | Resistances Acid: 3/20%Explosion: 15/30%Fire: 15/50%Impact: 50/50%Physical: 15/30% | Stack size 10 | Range Minimum: 32 Automatic:Quality 224 Quality 246.4 Quality 268.8 Quality 291.2 Quality 336 Manual:Quality 560 Quality 616 Quality 672 Quality 728 Quality 840 Quality 224 Quality 246.4 Quality 268.8 Quality"
  },
  {
    "type": "wiki",
    "name": "Artillery turret",
    "content": "728 Quality 840 Quality 224 Quality 246.4 Quality 268.8 Quality 291.2 Quality 336 Quality 560 Quality 616 Quality 672 Quality 728 Quality 840 | Shooting speed 0.3/s | Ammunition Artillery_shell | Dimensions 3×3 | Mining time 0.5 | Prototype type artillery-turret | Internal name artillery-turret | Required technologies | Artillery_(research) | Boosting technologies | Artillery_shell_range_(research)Artillery_shell_shooting_speed_(research) | Produced by | Assembling_machine_1 Assembling_machine_2"
  },
  {
    "type": "wiki",
    "name": "Artillery turret",
    "content": "| Produced by | Assembling_machine_1 Assembling_machine_2 Assembling_machine_3 Crafting | The artillery turret is a super-long-range static defense structure added in game version 0.16. It fires artillery shells , relatively slow-moving projectiles that explore chunks of terrain they travel across. The turret has both automatic and manual (even longer-ranged) firing modes. Projectiles have sufficient damage to destroy any type of worm up to behemoths with a single hit, and have a modest area of effect."
  },
  {
    "type": "wiki",
    "name": "Artillery turret",
    "content": "behemoths with a single hit, and have a modest area of effect. They can also one-shot spawners up to just below 75% evolution, since spawner health increases with evolution. Infinitely-stacking research upgrades are available for range, firing speed, and (in Space Age ) damage. The artillery wagon is essentially the same weapon, only mounted on a train car and therefore mobile. Inserters can insert and remove artillery shells from artillery turrets. This allows chaining multiple turrets together with"
  },
  {
    "type": "wiki",
    "name": "Artillery turret",
    "content": "turrets. This allows chaining multiple turrets together with inserters, each inserter taking shells as needed, from one turret and placing it into the next. The artillery turret can be connected to the circuit network to read its current ammunition and/or enable it on a condition. Contents 1 Mechanics 2 Limitations 3 Achievements 4 Gallery 5 History 6 See also Mechanics Artillery turrets have a massive range, outranging other fixed fortifications by a factor of 10 or more. There are no special limits on"
  },
  {
    "type": "wiki",
    "name": "Artillery turret",
    "content": "by a factor of 10 or more. There are no special limits on how many may be built or where and, being ammunition-based, these turrets do not require electric power to operate. In automatic mode, they function much the same as other turrets, automatically scanning for valid targets within range and firing on them. Automatic mode can only target enemy structures (spawners and worms), not mobile units (biters and spitters), but everything within the shell's blast radius will take the same damage. Automatic mode"
  },
  {
    "type": "wiki",
    "name": "Artillery turret",
    "content": "shell's blast radius will take the same damage. Automatic mode can be disabled by opening the GUI of the artillery turret and toggling the \"Auto targeting\" box. In manual mode, an artillery targeting remote is used to point-and-click anywhere in the world, map, or zoomed-in map. Each click corresponds to one shell delivered to that location, so long as any working artillery turrets and / or wagons are in range. Targeting remotes show the number of fire-ready (loaded and, for wagons, stationary) artillery"
  },
  {
    "type": "wiki",
    "name": "Artillery turret",
    "content": "of fire-ready (loaded and, for wagons, stationary) artillery pieces in range of cursor position when held. Manual fire can be ordered on unexplored areas; shells will explore all chunks they travel across (but no surrounding chunks). The default range in automatic mode is 224 tiles (7 chunks); in manual mode, 560 tiles (17.5 chunks). Infinite research is available to increase range, at +30% of base range per level, applied to both automatic and manual range. Artillery turrets are capable of killing most"
  },
  {
    "type": "wiki",
    "name": "Artillery turret",
    "content": "and manual range. Artillery turrets are capable of killing most enemies with a single shot, although behemoth worms and spawners with enough extra health from the planet's evolution factor take two shots to kill instead. Damage can be increased with infinite artillery damage research to combat this. The table below shows the maximum evolution factor at which spawners can be killed in one shot for the listed damage research level. Max evolution factor for kill in one shot Artillery damage level Biter /"
  },
  {
    "type": "wiki",
    "name": "Artillery turret",
    "content": "factor for kill in one shot Artillery damage level Biter / spitter spawners Egg rafts Notes 0 <= 0.72 <= 0.52 All non-behemoth worms can be killed in one shot 1 0.76 0.57 2 0.80 0.60 3 0.83 0.64 4 0.86 0.67 5 0.89 0.70 6 0.92 0.73 7 0.95 0.76 8 0.97 0.78 Behemoth worms can be killed in one shot 9 1.0 0.80 ... 20 1.0 1.0 Limitations Aside from the considerable expense of research and assembly for both turrets and shells, there are certain considerations that make a base defense based purely on these turrets"
  },
  {
    "type": "wiki",
    "name": "Artillery turret",
    "content": "that make a base defense based purely on these turrets unwise, despite their phenomenal range. Artillery shelling will antagonize enemy mobile units in the vicinity of the impact into rushing the turret emplacement, regardless of their normal \"aggro radius\". Artillery turrets are relatively slow-firing, although infinite research is available to improve firing speed, at +100% per level, affecting both stationary turrets and wagons and applying to both automatic and manual mode. They also cannot target"
  },
  {
    "type": "wiki",
    "name": "Artillery turret",
    "content": "to both automatic and manual mode. They also cannot target mobile units in automatic mode. Importantly, artillery has a minimum range as well, which is 32 tiles. Together, these limitations mean that an artillery turret needs to be defended by other means. Any conventional approach such as walls, gun, laser, and / or flamethrower turrets, or the personal intervention of the player will do. However, players should keep in mind that extensive shelling of large biter-infested areas will produce massive attack"
  },
  {
    "type": "wiki",
    "name": "Artillery turret",
    "content": "of large biter-infested areas will produce massive attack waves centered on the position of the artillery piece at time of firing, and should plan close-range defenses accordingly. Logistic considerations are also important, as artillery shells have a stack size of 1, meaning any-size container can only hold a modest supply and an inserter will only ever move a single shell at a time. Players may wish to consider on-site assembly for permanent and semi-permanent emplacements. The turret itself can hold 15"
  },
  {
    "type": "wiki",
    "name": "Artillery turret",
    "content": "and semi-permanent emplacements. The turret itself can hold 15 shells, and the wagon version can hold a full 100, providing a buffer of some size when continuous supply is not available. Artillery wagons with auto targeting disabled can be used to transport artillery shells to regular turret outposts, since they can hold twice as many shells as a cargo wagon. Achievements Art of siege Destroy an enemy structure using artillery . Keeping your hands clean Destroy your first enemy structure using artillery ."
  },
  {
    "type": "wiki",
    "name": "Artillery targeting remote",
    "content": "Allows firing artillery manually from the map or the world. | Stack size 1 | Prototype type capsule | Internal name artillery-targeting-remote | The Artillery targeting remote is used to manually designate targets for the artillery wagon and artillery turret by clicking somewhere with them - either from the map or normally from the world. Targets expire when an artillery wagon or turret shoots the spot they designate, or after 1 minute has elapsed. Placing targets with an artillery targeting remote does not"
  },
  {
    "type": "wiki",
    "name": "Artillery targeting remote",
    "content": "Placing targets with an artillery targeting remote does not use the item up - usually only one remote needs to be crafted per game. Using this item massively increases the range of artillery compared to having artillery fire automatically. The number next to the remote when it is held in hand or pinned to the quickbar indicates how many artillery wagons or turrets are in range and contain ammunition. The remote has no effect if a designated location is outside of the range of all artillery."
  }
]